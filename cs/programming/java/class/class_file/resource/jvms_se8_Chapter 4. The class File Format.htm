
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   
      <title>Chapter&nbsp;4.&nbsp;The class File Format</title>
      <link rel="stylesheet" type="text/css" href="../../../javaspec.css">
      <meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1">
      <link rel="home" href="index.html" title="The Java&reg; Virtual Machine Specification">
      <link rel="up" href="index.html" title="The Java&reg; Virtual Machine Specification">
      <link rel="prev" href="jvms-3.html" title="Chapter&nbsp;3.&nbsp;Compiling for the Java Virtual Machine">
      <link rel="next" href="jvms-5.html" title="Chapter&nbsp;5.&nbsp;Loading, Linking, and Initializing">
      <link rel="copyright" href="jvms-0-front.html" title="Legal Notice">
   </head>
   <body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
      <div xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:rx="http://www.renderx.com/XSL/Extensions" id="logo"><img src="../../../../webdesign/other/im/oralogo_small.gif" alt="Oracle Logo"><br><p><a href="../../../../8/docs/">Java SE</a> &gt; <a href="../../../index.html">Java SE Specifications</a> &gt; <a href="index.html">Java Virtual Machine Specification</a></p>
      </div>
      <div class="navheader">
         <table width="100%" summary="Navigation header">
            <tr>
               <th colspan="3" align="center">Chapter&nbsp;4.&nbsp;The <code class="literal">class</code> File Format
               </th>
            </tr>
            <tr>
               <td width="20%" align="left"><a accesskey="p" href="jvms-3.html">Prev</a>&nbsp;
               </td>
               <th width="60%" align="center">&nbsp;</th>
               <td width="20%" align="right">&nbsp;<a accesskey="n" href="jvms-5.html">Next</a></td>
            </tr>
         </table>
         <hr>
      </div>
      <div lang="en" class="chapter" title="Chapter&nbsp;4.&nbsp;The class File Format">
         <div class="titlepage">
            <div>
               <div>
                  <h2 class="title"><a name="jvms-4"></a>Chapter&nbsp;4.&nbsp;The <code class="literal">class</code> File Format
                  </h2>
               </div>
            </div>
         </div>
         <div class="toc">
            <p><b>Table of Contents</b></p>
            <dl>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.1">4.1. The <code class="literal">ClassFile</code> Structure</a></span></dt>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.2">4.2. The Internal Form of Names</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.2.1">4.2.1. Binary Class and Interface Names</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.2.2">4.2.2. Unqualified Names</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.3">4.3. Descriptors</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.3.1">4.3.1. Grammar Notation</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.3.2">4.3.2. Field Descriptors</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.3.3">4.3.3. Method Descriptors</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.4">4.4. The Constant Pool</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.1">4.4.1. The <code class="literal">CONSTANT_Class_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.2">4.4.2. The <code class="literal">CONSTANT_Fieldref_info</code>, <code class="literal">CONSTANT_Methodref_info</code>, and <code class="literal">CONSTANT_InterfaceMethodref_info</code> Structures</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.3">4.4.3. The <code class="literal">CONSTANT_String_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.4">4.4.4. The <code class="literal">CONSTANT_Integer_info</code> and <code class="literal">CONSTANT_Float_info</code> Structures </a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.5">4.4.5. The <code class="literal">CONSTANT_Long_info</code> and <code class="literal">CONSTANT_Double_info</code> Structures</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.6">4.4.6. The <code class="literal">CONSTANT_NameAndType_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.7">4.4.7. The <code class="literal">CONSTANT_Utf8_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.8">4.4.8. The <code class="literal">CONSTANT_MethodHandle_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.9">4.4.9. The <code class="literal">CONSTANT_MethodType_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.10">4.4.10. The <code class="literal">CONSTANT_InvokeDynamic_info</code> Structure </a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.5">4.5. Fields</a></span></dt>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.6">4.6. Methods</a></span></dt>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.7">4.7. Attributes</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.1">4.7.1. Defining and Naming New Attributes</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.2">4.7.2. The <code class="literal">ConstantValue</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.3">4.7.3. The <code class="literal">Code</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.4">4.7.4. The <code class="literal">StackMapTable</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.5">4.7.5. The <code class="literal">Exceptions</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.6">4.7.6. The <code class="literal">InnerClasses</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.7">4.7.7. The <code class="literal">EnclosingMethod</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.8">4.7.8. The <code class="literal">Synthetic</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.9">4.7.9. The <code class="literal">Signature</code> Attribute</a></span></dt>
                     <dd>
                        <dl>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.7.9.1">4.7.9.1. Signatures</a></span></dt>
                        </dl>
                     </dd>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.10">4.7.10. The <code class="literal">SourceFile</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.11">4.7.11. The <code class="literal">SourceDebugExtension</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.12">4.7.12. The <code class="literal">LineNumberTable</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.13">4.7.13. The <code class="literal">LocalVariableTable</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.14">4.7.14. The <code class="literal">LocalVariableTypeTable</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.15">4.7.15. The <code class="literal">Deprecated</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.16">4.7.16. The <code class="literal">RuntimeVisibleAnnotations</code> Attribute</a></span></dt>
                     <dd>
                        <dl>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.7.16.1">4.7.16.1. The <code class="literal">element_value</code> structure</a></span></dt>
                        </dl>
                     </dd>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.17">4.7.17. The <code class="literal">RuntimeInvisibleAnnotations</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.18">4.7.18. The <code class="literal">RuntimeVisibleParameterAnnotations</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.19">4.7.19. The <code class="literal">RuntimeInvisibleParameterAnnotations</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.20">4.7.20. The <code class="literal">RuntimeVisibleTypeAnnotations</code> Attribute</a></span></dt>
                     <dd>
                        <dl>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.7.20.1">4.7.20.1. The <code class="literal">target_info</code> union</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.7.20.2">4.7.20.2. The <code class="literal">type_path</code> structure</a></span></dt>
                        </dl>
                     </dd>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.21">4.7.21. The <code class="literal">RuntimeInvisibleTypeAnnotations</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.22">4.7.22. The <code class="literal">AnnotationDefault</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.23">4.7.23. The <code class="literal">BootstrapMethods</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.24">4.7.24. The <code class="literal">MethodParameters</code> Attribute</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.8">4.8. Format Checking</a></span></dt>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.9">4.9. Constraints on Java Virtual Machine Code</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.9.1">4.9.1. Static Constraints</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.9.2">4.9.2. Structural Constraints</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.10">4.10. Verification of <code class="literal">class</code> Files</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1">4.10.1. Verification by Type Checking</a></span></dt>
                     <dd>
                        <dl>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.1">4.10.1.1. Accessors for Java Virtual Machine Artifacts</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.2">4.10.1.2. Verification Type System</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.3">4.10.1.3. Instruction Representation</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.4">4.10.1.4. Stack Map Frame Representation</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.5">4.10.1.5. Type Checking Abstract and Native Methods</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.6">4.10.1.6. Type Checking Methods with Code</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.7">4.10.1.7. Type Checking Load and Store Instructions</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.8">4.10.1.8. Type Checking for <code class="literal">protected</code> Members</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9">4.10.1.9. Type Checking Instructions</a></span></dt>
                           <dd>
                              <dl>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.aaload"><span class="emphasis"><em>aaload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.aastore"><span class="emphasis"><em>aastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.aconst_null"><span class="emphasis"><em>aconst_null</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.aload"><span class="emphasis"><em>aload</em></span>, <span class="emphasis"><em>aload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.anewarray"><span class="emphasis"><em>anewarray</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.areturn"><span class="emphasis"><em>areturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.arraylength"><span class="emphasis"><em>arraylength</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.astore"><span class="emphasis"><em>astore</em></span>, <span class="emphasis"><em>astore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.athrow"><span class="emphasis"><em>athrow</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.baload"><span class="emphasis"><em>baload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.bastore"><span class="emphasis"><em>bastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.bipush"><span class="emphasis"><em>bipush</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.caload"><span class="emphasis"><em>caload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.castore"><span class="emphasis"><em>castore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.checkcast"><span class="emphasis"><em>checkcast</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.d2f"><span class="emphasis"><em>d2f</em></span>, <span class="emphasis"><em>d2i</em></span>, <span class="emphasis"><em>d2l</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dadd"><span class="emphasis"><em>dadd</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.daload"><span class="emphasis"><em>daload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dastore"><span class="emphasis"><em>dastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dcmp_op"><span class="emphasis"><em>dcmp&lt;op&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dconst_d"><span class="emphasis"><em>dconst_&lt;d&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ddiv"><span class="emphasis"><em>ddiv</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dload"><span class="emphasis"><em>dload</em></span>, <span class="emphasis"><em>dload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dmul"><span class="emphasis"><em>dmul</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dneg"><span class="emphasis"><em>dneg</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.drem"><span class="emphasis"><em>drem</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dreturn"><span class="emphasis"><em>dreturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dstore"><span class="emphasis"><em>dstore</em></span>, <span class="emphasis"><em>dstore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dsub"><span class="emphasis"><em>dsub</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup"><span class="emphasis"><em>dup</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup_x1"><span class="emphasis"><em>dup_x1</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup_x2"><span class="emphasis"><em>dup_x2</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup2"><span class="emphasis"><em>dup2</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup2_x1"><span class="emphasis"><em>dup2_x1</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup2_x2"><span class="emphasis"><em>dup2_x2</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.f2d"><span class="emphasis"><em>f2d</em></span>, <span class="emphasis"><em>f2i</em></span>, <span class="emphasis"><em>f2l</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fadd"><span class="emphasis"><em>fadd</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.faload"><span class="emphasis"><em>faload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fastore"><span class="emphasis"><em>fastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fcmp_op"><span class="emphasis"><em>fcmp&lt;op&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fconst_f"><span class="emphasis"><em>fconst_&lt;f&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fdiv"><span class="emphasis"><em>fdiv</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fload"><span class="emphasis"><em>fload</em></span>, <span class="emphasis"><em>fload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fmul"><span class="emphasis"><em>fmul</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fneg"><span class="emphasis"><em>fneg</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.frem"><span class="emphasis"><em>frem</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.freturn"><span class="emphasis"><em>freturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fstore"><span class="emphasis"><em>fstore</em></span>, <span class="emphasis"><em>fstore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fsub"><span class="emphasis"><em>fsub</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.getfield"><span class="emphasis"><em>getfield</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.getstatic"><span class="emphasis"><em>getstatic</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.goto"><span class="emphasis"><em>goto</em></span>, <span class="emphasis"><em>goto_w</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.i2b"><span class="emphasis"><em>i2b</em></span>, <span class="emphasis"><em>i2c</em></span>, <span class="emphasis"><em>i2d</em></span>, <span class="emphasis"><em>i2f</em></span>, <span class="emphasis"><em>i2l</em></span>, <span class="emphasis"><em>i2s</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iadd"><span class="emphasis"><em>iadd</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iaload"><span class="emphasis"><em>iaload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iand"><span class="emphasis"><em>iand</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iastore"><span class="emphasis"><em>iastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.if_acmp_cond"><span class="emphasis"><em>if_acmp&lt;cond&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.if_icmp_cond"><span class="emphasis"><em>if_icmp&lt;cond&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.if_cond"><span class="emphasis"><em>if&lt;cond&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ifnonnull"><span class="emphasis"><em>ifnonnull</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ifnull"><span class="emphasis"><em>ifnull</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iinc"><span class="emphasis"><em>iinc</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iload"><span class="emphasis"><em>iload</em></span>, <span class="emphasis"><em>iload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.imul"><span class="emphasis"><em>imul</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ineg"><span class="emphasis"><em>ineg</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.instanceof"><span class="emphasis"><em>instanceof</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokedynamic"><span class="emphasis"><em>invokedynamic</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokeinterface"><span class="emphasis"><em>invokeinterface</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokespecial"><span class="emphasis"><em>invokespecial</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokestatic"><span class="emphasis"><em>invokestatic</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokevirtual"><span class="emphasis"><em>invokevirtual</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ior"><span class="emphasis"><em>ior</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.irem"><span class="emphasis"><em>irem</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ireturn"><span class="emphasis"><em>ireturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ishl"><span class="emphasis"><em>ishl</em></span>, <span class="emphasis"><em>ishr</em></span>, <span class="emphasis"><em>iushr</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.istore"><span class="emphasis"><em>istore</em></span>, <span class="emphasis"><em>istore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.isub"><span class="emphasis"><em>isub</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ixor"><span class="emphasis"><em>ixor</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.l2d"><span class="emphasis"><em>l2d</em></span>, <span class="emphasis"><em>l2f</em></span>, <span class="emphasis"><em>l2i</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ladd"><span class="emphasis"><em>ladd</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.laload"><span class="emphasis"><em>laload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.land"><span class="emphasis"><em>land</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lastore"><span class="emphasis"><em>lastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lcmp"><span class="emphasis"><em>lcmp</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lconst_l"><span class="emphasis"><em>lconst_&lt;l&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ldc"><span class="emphasis"><em>ldc</em></span>, <span class="emphasis"><em>ldc_w</em></span>, <span class="emphasis"><em>ldc2_w</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ldiv"><span class="emphasis"><em>ldiv</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lload"><span class="emphasis"><em>lload</em></span>, <span class="emphasis"><em>lload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lmul"><span class="emphasis"><em>lmul</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lneg"><span class="emphasis"><em>lneg</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lookupswitch"><span class="emphasis"><em>lookupswitch</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lor"><span class="emphasis"><em>lor</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lrem"><span class="emphasis"><em>lrem</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lreturn"><span class="emphasis"><em>lreturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lshl"><span class="emphasis"><em>lshl</em></span>, <span class="emphasis"><em>lshr</em></span>, <span class="emphasis"><em>lushr</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lstore"><span class="emphasis"><em>lstore</em></span>, <span class="emphasis"><em>lstore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lsub"><span class="emphasis"><em>lsub</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lxor"><span class="emphasis"><em>lxor</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.monitorenter"><span class="emphasis"><em>monitorenter</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.monitorexit"><span class="emphasis"><em>monitorexit</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.multianewarray"><span class="emphasis"><em>multianewarray</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.new"><span class="emphasis"><em>new</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.newarray"><span class="emphasis"><em>newarray</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.nop"><span class="emphasis"><em>nop</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.pop"><span class="emphasis"><em>pop</em></span>, <span class="emphasis"><em>pop2</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.putfield"><span class="emphasis"><em>putfield</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.putstatic"><span class="emphasis"><em>putstatic</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.return"><span class="emphasis"><em>return</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.saload"><span class="emphasis"><em>saload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.sastore"><span class="emphasis"><em>sastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.sipush"><span class="emphasis"><em>sipush</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.swap"><span class="emphasis"><em>swap</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.tableswitch"><span class="emphasis"><em>tableswitch</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.wide"><span class="emphasis"><em>wide</em></span></a></span></dt>
                              </dl>
                           </dd>
                        </dl>
                     </dd>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2">4.10.2. Verification by Type Inference</a></span></dt>
                     <dd>
                        <dl>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.1">4.10.2.1. The Process of Verification by Type Inference</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.2">4.10.2.2. The Bytecode Verifier</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.3">4.10.2.3. Values of Types <code class="literal">long</code> and <code class="literal">double</code></a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.4">4.10.2.4. Instance Initialization Methods and Newly Created Objects</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.5">4.10.2.5. Exceptions and <code class="literal">finally</code></a></span></dt>
                        </dl>
                     </dd>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.11">4.11. Limitations of the Java Virtual Machine</a></span></dt>
            </dl>
         </div>
         <p class="norm"><a name="jvms-4-100"></a>This chapter describes the
            <code class="literal">class</code> file format of the Java Virtual Machine. Each <code class="literal">class</code> file contains the
            definition of a single class or interface. Although a class or
            interface need not have an external representation literally contained
            in a file (for instance, because the class is generated by a class
            loader), we will colloquially refer to any valid representation of a
            class or interface as being in the <code class="literal">class</code> file format.
         </p>
         <p class="norm"><a name="jvms-4-110"></a>A <code class="literal">class</code> file consists of a
            stream of 8-bit bytes. All 16-bit, 32-bit, and 64-bit quantities are
            constructed by reading in two, four, and eight consecutive 8-bit
            bytes, respectively. Multibyte data items are always stored in
            big-endian order, where the high bytes come first. In the Java SE platform,
            this format is supported by
            interfaces <code class="literal">java.io.DataInput</code>
            and <code class="literal">java.io.DataOutput</code> and classes such as
            <code class="literal">java.io.DataInputStream</code>
            and <code class="literal">java.io.DataOutputStream</code>.
         </p>
         <p class="norm"><a name="jvms-4-120"></a>This chapter defines its own set
            of data types representing <code class="literal">class</code> file data: The
            types <code class="literal">u1</code>, <code class="literal">u2</code>,
            and <code class="literal">u4</code> represent an unsigned one-, two-, or
            four-byte quantity, respectively. In the Java SE platform, these types may
            be read by methods such as <code class="literal">readUnsignedByte</code>, 
            <code class="literal">readUnsignedShort</code>, and <code class="literal">readInt</code>
            of the interface <code class="literal">java.io.DataInput</code>.
         </p>
         <p class="norm"><a name="jvms-4-130"></a>This chapter presents the
            <code class="literal">class</code> file format using pseudostructures written in a C-like
            structure notation. To avoid confusion with the fields of classes and
            class instances, etc., the contents of the structures describing the
            <code class="literal">class</code> file format are referred to as <span class="emphasis"><em>items</em></span>.
            Successive items are stored in the <code class="literal">class</code> file sequentially, without
            padding or alignment.
         </p>
         <p class="norm"><a name="jvms-4-140"></a><span class="emphasis"><em>Tables</em></span>,
            consisting of zero or more variable-sized items, are used in several
            <code class="literal">class</code> file structures. Although we use C-like array syntax to refer
            to table items, the fact that tables are streams of varying-sized
            structures means that it is not possible to translate a table index
            directly to a byte offset into the table.
         </p>
         <p class="norm"><a name="jvms-4-150"></a>Where we refer to a data
            structure as an <span class="emphasis"><em>array</em></span>, it consists of zero or
            more contiguous fixed-sized items and can be indexed like an
            array.
         </p>
         <p class="norm"><a name="jvms-4-160"></a>Reference to an ASCII character
            in this chapter should be interpreted to mean the Unicode code point
            corresponding to the ASCII character.
         </p>
         <div class="section" title="4.1.&nbsp;The ClassFile Structure">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.1"></a>4.1.&nbsp;The <code class="literal">ClassFile</code> Structure
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.1-100"></a>A <code class="literal">class</code> file consists of a
               single <code class="literal">ClassFile</code> structure:
            </p><a name="jvms-4.1-110"></a><pre class="screen">
ClassFile {
    u4             magic;
    u2             minor_version;
    u2             major_version;
    u2             constant_pool_count;
    cp_info        constant_pool[constant_pool_count-1];
    u2             access_flags;
    u2             this_class;
    u2             super_class;
    u2             interfaces_count;
    u2             interfaces[interfaces_count];
    u2             fields_count;
    field_info     fields[fields_count];
    u2             methods_count;
    method_info    methods[methods_count];
    u2             attributes_count;
    attribute_info attributes[attributes_count];
}
</pre><p class="norm"><a name="jvms-4.1-200"></a>The items in the <code class="literal">ClassFile</code>
               structure are as follows:
            </p>
            <div class="variablelist">
               <dl>
                  <dt><span class="term">magic</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-A"></a>
                        	The <code class="literal">magic</code> item supplies the magic number
                        	identifying the <code class="literal">class</code> file format; it has the
                        	value <code class="literal">0xCAFEBABE</code>.
                     </p>
                  </dd>
                  <dt><span class="term">minor_version, major_version</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-B"></a>
                        	The values of the <code class="literal">minor_version</code>
                        	and <code class="literal">major_version</code> items are the minor and
                        	major version numbers of this <code class="literal">class</code> file. Together, a major
                        	and a minor version number determine the version of the
                        	<code class="literal">class</code> file format. If a <code class="literal">class</code> file has major version
                        	number M and minor version number m, we denote the version of
                        	its <code class="literal">class</code> file format as M.m. Thus, <code class="literal">class</code> file format
                        	versions may be ordered lexicographically, for example, 1.5
                        	&lt; 2.0 &lt; 2.1.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-B.1"></a>
                        	A Java Virtual Machine implementation can support a <code class="literal">class</code> file format of
                        	version v if and only if v lies in some contiguous range Mi.0
                        	<span class="symbol">&#8804;</span> v <span class="symbol">&#8804;</span> Mj.m. The release level of the Java SE platform to
                        	which a Java Virtual Machine implementation conforms is responsible for
                        	determining the range.
                     </p>
                     <p class="note">Oracle's Java Virtual Machine implementation in JDK release
                        	1.0.2 supports <code class="literal">class</code> file format versions 45.0 through 45.3
                        	inclusive. JDK releases 1.1.* support <code class="literal">class</code> file format
                        	versions in the range 45.0 through 45.65535 inclusive. For k
                        	<span class="symbol">&#8805;</span> 2,  JDK release 1.k supports <code class="literal">class</code> file format
                        	versions in the range 45.0 through 44+k.0 inclusive.
                     </p>
                  </dd>
                  <dt><span class="term">constant_pool_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-C"></a>
                        	The value of the <code class="literal">constant_pool_count</code> item
                        	is equal to the number of entries in the <code class="literal">constant_pool</code> table
                        	plus one. A <code class="literal">constant_pool</code> index is considered valid if it is
                        	greater than zero and less
                        	than <code class="literal">constant_pool_count</code>, with the
                        	exception for constants of type <code class="literal">long</code> and <code class="literal">double</code> noted in
                        	<a class="xref" href="jvms-4.html#jvms-4.4.5" title="4.4.5.&nbsp;The CONSTANT_Long_info and CONSTANT_Double_info Structures">&sect;4.4.5</a>.
                     </p>
                  </dd>
                  <dt><span class="term">constant_pool[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-D"></a>
                        	The <code class="literal">constant_pool</code> is a table of structures
                        	(<a class="xref" href="jvms-4.html#jvms-4.4" title="4.4.&nbsp;The Constant Pool">&sect;4.4</a>) representing various string
                        	constants, class and interface names, field names, and other
                        	constants that are referred to within the <code class="literal">ClassFile</code>
                        	structure and its substructures. The format of each
                        	<code class="literal">constant_pool</code> table entry is indicated by its first "tag"
                        	byte.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-D.1"></a>
                        	The <code class="literal">constant_pool</code> table is indexed from 1
                        	to <code class="literal">constant_pool_count</code> - 1.
                     </p>
                  </dd>
                  <dt><span class="term">access_flags</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-E"></a>
                        	The value of the <code class="literal">access_flags</code> item is a mask of flags used
                        	to denote access permissions to and properties of this class
                        	or interface. The interpretation of each flag, when set, is
                        	specified in <a class="xref" href="jvms-4.html#jvms-4.1-200-E.1" title="Table&nbsp;4.1-A.&nbsp;Class access and property modifiers">Table&nbsp;4.1-A</a>.
                     </p>
                     <div class="table"><a name="jvms-4.1-200-E.1"></a><p class="title"><b>Table&nbsp;4.1-A.&nbsp;Class access and property modifiers</b></p>
                        <div class="table-contents">
                           <table summary="Class access and property modifiers" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Flag Name</th>
                                    <th>Value</th>
                                    <th>Interpretation</th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">ACC_PUBLIC</code></td>
                                    <td>0x0001</td>
                                    <td>Declared <code class="literal">public</code>; may be accessed from outside its
                                       		package.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_FINAL</code></td>
                                    <td>0x0010</td>
                                    <td>Declared <code class="literal">final</code>; no subclasses allowed.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SUPER</code></td>
                                    <td>0x0020</td>
                                    <td>Treat superclass methods specially when invoked
                                       		by the <span class="emphasis"><em>invokespecial</em></span> instruction.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_INTERFACE</code></td>
                                    <td>0x0200</td>
                                    <td>Is an interface, not a class.</td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ABSTRACT</code></td>
                                    <td>0x0400</td>
                                    <td>Declared <code class="literal">abstract</code>; must not be
                                       		instantiated.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SYNTHETIC</code></td>
                                    <td>0x1000</td>
                                    <td>Declared synthetic; not present in the source
                                       		code.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ANNOTATION</code></td>
                                    <td>0x2000</td>
                                    <td>Declared as an annotation type.</td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ENUM</code></td>
                                    <td>0x4000</td>
                                    <td>Declared as an <code class="literal">enum</code> type.
                                    </td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><p class="norm"><a name="jvms-4.1-200-E.2"></a>
                        	An interface is distinguished by the <code class="literal">ACC_INTERFACE</code> flag
                        	being set. If the <code class="literal">ACC_INTERFACE</code> flag is not set, this
                        	<code class="literal">class</code> file defines a class, not an interface.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.3"></a>
                        	If the <code class="literal">ACC_INTERFACE</code> flag is set, the <code class="literal">ACC_ABSTRACT</code> flag
                        	must also be set, and the <code class="literal">ACC_FINAL</code>, <code class="literal">ACC_SUPER</code>, and
                        	<code class="literal">ACC_ENUM</code> flags set must not be set.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.4"></a>
                        	If the <code class="literal">ACC_INTERFACE</code> flag is not set, any of the other flags
                        	in <a class="xref" href="jvms-4.html#jvms-4.1-200-E.1" title="Table&nbsp;4.1-A.&nbsp;Class access and property modifiers">Table&nbsp;4.1-A</a> may be set except
                        	<code class="literal">ACC_ANNOTATION</code>. However, such a <code class="literal">class</code> file must not have
                        	both its <code class="literal">ACC_FINAL</code> and <code class="literal">ACC_ABSTRACT</code> flags set (JLS
                        	&sect;8.1.1.2).
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.5"></a>
                        	The <code class="literal">ACC_SUPER</code> flag indicates which of two alternative
                                semantics is to be expressed by the <span class="emphasis"><em>invokespecial</em></span>
                                instruction (<a class="xref" href="jvms-6.html#jvms-6.5.invokespecial" title="invokespecial">&sect;<span class="emphasis"><em>invokespecial</em></span></a>) if it
                                appears in this class or interface. Compilers to the
                                instruction set of the Java Virtual Machine should set the <code class="literal">ACC_SUPER</code>
                                flag. In Java SE 8 and above, the Java Virtual Machine considers the
                                <code class="literal">ACC_SUPER</code> flag to be set in every <code class="literal">class</code> file, regardless
                                of the actual value of the flag in the <code class="literal">class</code> file and the
                                version of the <code class="literal">class</code> file.
                     </p>
                     <p class="note">The <code class="literal">ACC_SUPER</code> flag exists for backward
                        	compatibility with code compiled by older compilers for the
                        	Java programming language. In JDK releases prior to 1.0.2, the compiler
                        	generated <code class="literal">access_flags</code> in which the flag now representing
                        	<code class="literal">ACC_SUPER</code> had no assigned meaning, and Oracle's Java Virtual Machine
                        	implementation ignored the flag if it was set.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.6"></a>
                        	The <code class="literal">ACC_SYNTHETIC</code> flag indicates that this class or
                        	interface was generated by a compiler and does not appear in
                        	source code.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.7"></a>
                        	An annotation type must have its <code class="literal">ACC_ANNOTATION</code> flag set. If
                        	the <code class="literal">ACC_ANNOTATION</code> flag is set, the <code class="literal">ACC_INTERFACE</code> flag
                        	must also be set.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.8"></a>
                        	The <code class="literal">ACC_ENUM</code> flag indicates that this class or its
                        	superclass is declared as an enumerated type.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.9"></a>
                        	All bits of the <code class="literal">access_flags</code> item not assigned in
                        	<a class="xref" href="jvms-4.html#jvms-4.1-200-E.1" title="Table&nbsp;4.1-A.&nbsp;Class access and property modifiers">Table&nbsp;4.1-A</a> are reserved for future
                        	use. They should be set to zero in generated <code class="literal">class</code> files and
                        	should be ignored by Java Virtual Machine implementations.
                     </p>
                  </dd>
                  <dt><span class="term">this_class</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-F"></a>
                        	The value of the <code class="literal">this_class</code> item must be a
                        	valid index into the <code class="literal">constant_pool</code> table. The
                        	<code class="literal">constant_pool</code> entry at that index must be a
                        	<code class="literal">CONSTANT_Class_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>)
                        	representing the class or interface defined by this <code class="literal">class</code>
                        	file.
                     </p>
                  </dd>
                  <dt><span class="term">super_class</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-G"></a>
                        	For a class, the value of the <code class="literal">super_class</code>
                        	item either must be zero or must be a valid index into the
                        	<code class="literal">constant_pool</code> table. If the value of
                        	the <code class="literal">super_class</code> item is nonzero, the
                        	<code class="literal">constant_pool</code> entry at that index must be a
                        	<code class="literal">CONSTANT_Class_info</code> structure representing the direct
                        	superclass of the class defined by this <code class="literal">class</code> file. Neither
                        	the direct superclass nor any of its superclasses may have the
                        	<code class="literal">ACC_FINAL</code> flag set in the <code class="literal">access_flags</code> item of its
                        	<code class="literal">ClassFile</code> structure.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-G.1"></a>
                        	If the value of the <code class="literal">super_class</code> item is
                        	zero, then this <code class="literal">class</code> file must represent the class
                        	<code class="literal">Object</code>, the only class or interface without a direct
                        	superclass.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-G.2"></a>
                        	For an interface, the value of the 
                        	<code class="literal">super_class</code> item must always be a valid
                        	index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                        	entry at that index must be a <code class="literal">CONSTANT_Class_info</code> structure
                        	representing the class <code class="literal">Object</code>.
                     </p>
                  </dd>
                  <dt><span class="term">interfaces_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-H"></a>
                        	The value of the <code class="literal">interfaces_count</code> item
                        	gives the number of direct superinterfaces of this class or
                        	interface type.
                     </p>
                  </dd>
                  <dt><span class="term">interfaces[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-I"></a>
                        	Each value in the <code class="literal">interfaces</code> array must be
                        	a valid index into the <code class="literal">constant_pool</code> table. The
                        	<code class="literal">constant_pool</code> entry at each value of 
                        	<code class="literal">interfaces[<span class="emphasis"><em>i</em></span>]</code>, where 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>i</em></span>
                        	&lt; <code class="literal">interfaces_count</code>, must be a
                        	<code class="literal">CONSTANT_Class_info</code> structure representing an interface that
                        	is a direct superinterface of this class or interface type, in
                        	the left-to-right order given in the source for the
                        	type.
                     </p>
                  </dd>
                  <dt><span class="term">fields_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-J"></a>
                        	The value of the <code class="literal">fields_count</code> item gives
                        	the number of <code class="literal">field_info</code> structures in
                        	the <code class="literal">fields</code> table. The <code class="literal">field_info</code>
                        	structures represent all fields, both class variables and
                        	instance variables, declared by this class or interface
                        	type.
                     </p>
                  </dd>
                  <dt><span class="term">fields[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-K"></a>
                        	Each value in the <code class="literal">fields</code> table must be a
                        	<code class="literal">field_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>) giving a
                        	complete description of a field in this class or
                        	interface. The <code class="literal">fields</code> table includes only
                        	those fields that are declared by this class or interface. It
                        	does not include items representing fields that are inherited
                        	from superclasses or superinterfaces.
                     </p>
                  </dd>
                  <dt><span class="term">methods_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-L"></a>
                        	The value of the <code class="literal">methods_count</code> item gives
                        	the number of <code class="literal">method_info</code> structures in
                        	the <code class="literal">methods</code> table.
                     </p>
                  </dd>
                  <dt><span class="term">methods[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-M"></a>
                        	Each value in the <code class="literal">methods</code> table must be a
                        	<code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>) giving a
                        	complete description of a method in this class or
                        	interface. If neither of the <code class="literal">ACC_NATIVE</code> and <code class="literal">ACC_ABSTRACT</code>
                        	flags are set in the <code class="literal">access_flags</code> item of a <code class="literal">method_info</code>
                        	structure, the Java Virtual Machine instructions implementing the method are
                        	also supplied.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-M.1"></a>
                        	The <code class="literal">method_info</code> structures represent all methods declared by
                        	this class or interface type, including instance methods,
                        	class methods, instance initialization methods
                        	(<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), and any class or interface
                        	initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>). The 
                        	<code class="literal">methods</code> table does not include items
                        	representing methods that are inherited from superclasses or
                        	superinterfaces.
                     </p>
                  </dd>
                  <dt><span class="term">attributes_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-N"></a>
                        	The value of the <code class="literal">attributes_count</code> item
                        	gives the number of attributes in the <code class="literal">attributes</code> table of
                        	this class.
                     </p>
                  </dd>
                  <dt><span class="term">attributes[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-O"></a>
                        	Each value of the <code class="literal">attributes</code> table must be an
                        	<code class="literal">attribute_info</code> structure
                        	(<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-O.1"></a>
                        	The attributes defined by this specification as appearing in
                        	the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code> structure are listed
                        	in <a class="xref" href="jvms-4.html#jvms-4.7-320" title="Table&nbsp;4.7-C.&nbsp;Predefined class file attributes (by location)">Table&nbsp;4.7-C</a>.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-O.2"></a>
                        	The rules concerning attributes defined to appear in the
                                <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code> structure are given in
                                <a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-O.3"></a>
                        	The rules concerning non-predefined attributes in the
                                <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code> structure are given in
                                <a class="xref" href="jvms-4.html#jvms-4.7.1" title="4.7.1.&nbsp;Defining and Naming New Attributes">&sect;4.7.1</a>.
                     </p>
                  </dd>
               </dl>
            </div>
         </div>
         <div class="section" title="4.2.&nbsp;The Internal Form of Names">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.2"></a>4.2.&nbsp;The Internal Form of Names
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section" title="4.2.1.&nbsp;Binary Class and Interface Names">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.2.1"></a>4.2.1.&nbsp;Binary Class and Interface Names
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.2.1-100"></a>Class and interface names
                  that appear in <code class="literal">class</code> file structures are always represented in a
                  fully qualified form known as <span class="emphasis"><em>binary names</em></span> (JLS
                  &sect;13.1). Such names are always represented as <code class="literal">CONSTANT_Utf8_info</code>
                  structures (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) and thus may be drawn, where
                  not further constrained, from the entire Unicode codespace. Class and
                  interface names are referenced from those <code class="literal">CONSTANT_NameAndType_info</code>
                  structures (<a class="xref" href="jvms-4.html#jvms-4.4.6" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">&sect;4.4.6</a>) which have such names as
                  part of their descriptor (<a class="xref" href="jvms-4.html#jvms-4.3" title="4.3.&nbsp;Descriptors">&sect;4.3</a>), and from all
                  <code class="literal">CONSTANT_Class_info</code> structures
                  (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>).
               </p>
               <p class="norm"><a name="jvms-4.2.1-200"></a>For historical reasons, the
                  syntax of binary names that appear in <code class="literal">class</code> file structures differs
                  from the syntax of binary names documented in JLS &sect;13.1. In this
                  internal form, the ASCII periods (<code class="literal">.</code>) that normally separate the
                  identifiers which make up the binary name are replaced by ASCII
                  forward slashes (<code class="literal">/</code>). The identifiers themselves must be
                  unqualified names (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>).
               </p>
               <p class="note">For example, the normal binary name of class
                  <code class="literal">Thread</code> is <code class="literal">java.lang.Thread</code>. In the internal form
                  used in descriptors in the <code class="literal">class</code> file format, a reference to the
                  name of class <code class="literal">Thread</code> is implemented using a <code class="literal">CONSTANT_Utf8_info</code>
                  structure representing the
                  string <code class="literal">java/lang/Thread</code>.
               </p>
            </div>
            <div class="section" title="4.2.2.&nbsp;Unqualified Names">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.2.2"></a>4.2.2.&nbsp;Unqualified Names
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.2.2-100"></a>Names of methods, fields, local
                  variables, and formal parameters are stored as <span class="emphasis"><em>unqualified
                        names</em></span>. An unqualified name must contain at least one
                  Unicode code point and must not contain any of the ASCII characters
                  <code class="literal">.</code> <code class="literal">;</code> <code class="literal">[</code> <code class="literal">/</code> (that is, period or semicolon or left
                  square bracket or forward slash).
               </p>
               <p class="norm"><a name="jvms-4.2.2-200"></a>Method names are further
                  constrained so that, with the exception of the special method names
                  <code class="literal">&lt;init&gt;</code> and <code class="literal">&lt;clinit&gt;</code> (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), they must not
                  contain the ASCII characters <code class="literal">&lt;</code> or <code class="literal">&gt;</code> (that is, left angle
                  bracket or right angle bracket).
               </p>
               <p class="note">Note that a field name or interface method name may
                  be <code class="literal">&lt;init&gt;</code> or <code class="literal">&lt;clinit&gt;</code>, but no method invocation instruction may
                  reference <code class="literal">&lt;clinit&gt;</code> and only the <span class="emphasis"><em>invokespecial</em></span> instruction
                  (<a class="xref" href="jvms-6.html#jvms-6.5.invokespecial" title="invokespecial">&sect;<span class="emphasis"><em>invokespecial</em></span></a>) may reference <code class="literal">&lt;init&gt;</code>.
               </p>
            </div>
         </div>
         <div class="section" title="4.3.&nbsp;Descriptors">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.3"></a>4.3.&nbsp;Descriptors
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.3-100"></a>A <span class="emphasis"><em>descriptor</em></span> is a string
               representing the type of a field or method. Descriptors are
               represented in the <code class="literal">class</code> file format using modified UTF-8 strings
               (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) and thus may be drawn, where not
               further constrained, from the entire Unicode codespace.
            </p>
            <div class="section" title="4.3.1.&nbsp;Grammar Notation">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.3.1"></a>4.3.1.&nbsp;Grammar Notation
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.3.1-100"></a>Descriptors are specified
                  using a grammar. The grammar is a set of productions that describe how
                  sequences of characters can form syntactically correct descriptors of
                  various kinds. Terminal symbols of the grammar are shown
                  in <code class="literal">fixed width</code> font. Nonterminal symbols are shown
                  in <span class="emphasis"><em>italic</em></span> type. The definition of a nonterminal
                  is introduced by the name of the nonterminal being defined, followed
                  by a colon. One or more alternative definitions for the nonterminal
                  then follow on succeeding lines.
               </p>
               <p class="norm"><a name="jvms-4.3.1-110"></a>The syntax 
                  <span class="emphasis"><em>{x}</em></span> on the right-hand side of a production
                  denotes zero or more occurrences of <span class="emphasis"><em>x</em></span>.
               </p>
               <p class="norm"><a name="jvms-4.3.1-120"></a>The phrase <span class="emphasis"><em>(one
                        of)</em></span> on the right-hand side of a production signifies that
                  each of the terminal symbols on the following line or lines is an
                  alternative definition.
               </p>
            </div>
            <div class="section" title="4.3.2.&nbsp;Field Descriptors">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.3.2"></a>4.3.2.&nbsp;Field Descriptors
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.3.2-100"></a>A <span class="emphasis"><em>field
                        descriptor</em></span> represents the type of a class, instance, or
                  local variable.
               </p>
               <div id="jvms-4.3.2-110" class="productionset"><a name="jvms-4.3.2-110"></a>
                    
                  <div class="production"><a name="jvms-FieldDescriptor"></a>
                         
                     <div class="lhs">FieldDescriptor:</div>
                         
                     <div class="rhs"><a href="jvms-4.html#jvms-FieldType" title="FieldType">FieldType</a></div>
                       
                  </div>
                  
                    
                  <div class="production"><a name="jvms-FieldType"></a>
                         
                     <div class="lhs">FieldType:</div>
                         
                     <div class="rhs">
                              <a href="jvms-4.html#jvms-BaseType" title="BaseType">BaseType</a> <br>
                              <a href="jvms-4.html#jvms-ObjectType" title="ObjectType">ObjectType</a> <br>
                              <a href="jvms-4.html#jvms-ArrayType" title="ArrayType">ArrayType</a>
                            
                     </div>
                       
                  </div>
                  
                    
                  <div class="production"><a name="jvms-BaseType"></a>
                         
                     <div class="lhs">BaseType:</div>
                         
                     <div class="rhs">
                              (one of) <br>
                              <code class="literal">B</code> <code class="literal">C</code> <code class="literal">D</code> <code class="literal">F</code> 
                              <code class="literal">I</code> <code class="literal">J</code> <code class="literal">S</code> <code class="literal">Z</code> 
                            
                     </div>
                       
                  </div>
                  
                    
                  <div class="production"><a name="jvms-ObjectType"></a>
                         
                     <div class="lhs">ObjectType:</div>
                         
                     <div class="rhs"><code class="literal">L</code> ClassName <code class="literal">;</code></div>
                       
                  </div>
                  
                    
                  <div class="production"><a name="jvms-ArrayType"></a>
                         
                     <div class="lhs">ArrayType:</div>
                         
                     <div class="rhs"><code class="literal">[</code> <a href="jvms-4.html#jvms-ComponentType" title="ComponentType">ComponentType</a></div>
                       
                  </div>
                  
                    
                  <div class="production"><a name="jvms-ComponentType"></a>
                         
                     <div class="lhs">ComponentType:</div>
                         
                     <div class="rhs"><a href="jvms-4.html#jvms-FieldType" title="FieldType">FieldType</a></div>
                       
                  </div>
                  
               </div>
               <p class="norm"><a name="jvms-4.3.2-120"></a>The characters
                  of <span class="emphasis"><em>BaseType</em></span>, the <code class="literal">L</code> and <code class="literal">;</code>
                  of <span class="emphasis"><em>ObjectType</em></span>, and the <code class="literal">[</code>
                  of <span class="emphasis"><em>ArrayType</em></span> are all ASCII characters.
               </p>
               <p class="norm"><a name="jvms-4.3.2-130"></a>
                  <span class="emphasis"><em>ClassName</em></span> represents a binary class or interface
                  name encoded in internal form (<a class="xref" href="jvms-4.html#jvms-4.2.1" title="4.2.1.&nbsp;Binary Class and Interface Names">&sect;4.2.1</a>).
               </p>
               <p class="norm"><a name="jvms-4.3.2-140"></a>The interpretation of field
                  descriptors as types is shown in <a class="xref" href="jvms-4.html#jvms-4.3.2-200" title="Table&nbsp;4.3-A.&nbsp;Interpretation of field descriptors">Table&nbsp;4.3-A</a>.
               </p>
               <p class="norm"><a name="jvms-4.3.2-150"></a>A field descriptor
                  representing an array type is valid only if it represents a type with
                  255 or fewer dimensions.
               </p>
               <div class="table"><a name="jvms-4.3.2-200"></a><p class="title"><b>Table&nbsp;4.3-A.&nbsp;Interpretation of field descriptors</b></p>
                  <div class="table-contents">
                     <table summary="Interpretation of field descriptors" border="1">
                        <colgroup>
                           <col>
                           <col>
                           <col>
                        </colgroup>
                        <thead>
                           <tr>
                              <th><span class="emphasis"><em>FieldType</em></span> term
                              </th>
                              <th>Type</th>
                              <th>Interpretation</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td><code class="literal">B</code></td>
                              <td><code class="literal">byte</code></td>
                              <td>signed byte</td>
                           </tr>
                           <tr>
                              <td><code class="literal">C</code></td>
                              <td><code class="literal">char</code></td>
                              <td>Unicode character code point in the Basic Multilingual
                                 	Plane, encoded with UTF-16
                              </td>
                           </tr>
                           <tr>
                              <td><code class="literal">D</code></td>
                              <td><code class="literal">double</code></td>
                              <td>double-precision floating-point value</td>
                           </tr>
                           <tr>
                              <td><code class="literal">F</code></td>
                              <td><code class="literal">float</code></td>
                              <td>single-precision floating-point value</td>
                           </tr>
                           <tr>
                              <td><code class="literal">I</code></td>
                              <td><code class="literal">int</code></td>
                              <td>integer</td>
                           </tr>
                           <tr>
                              <td><code class="literal">J</code></td>
                              <td><code class="literal">long</code></td>
                              <td>long integer</td>
                           </tr>
                           <tr>
                              <td><code class="literal">L</code> <span class="emphasis"><em>ClassName</em></span> <code class="literal">;</code></td>
                              <td><code class="literal">reference</code></td>
                              <td>an instance of class <span class="emphasis"><em>ClassName</em></span></td>
                           </tr>
                           <tr>
                              <td><code class="literal">S</code></td>
                              <td><code class="literal">short</code></td>
                              <td>signed short</td>
                           </tr>
                           <tr>
                              <td><code class="literal">Z</code></td>
                              <td><code class="literal">boolean</code></td>
                              <td><code class="literal">true</code> or <code class="literal">false</code></td>
                           </tr>
                           <tr>
                              <td><code class="literal">[</code></td>
                              <td><code class="literal">reference</code></td>
                              <td>one array dimension</td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div><br class="table-break"><div class="informalexample">
                  <p class="note">The field descriptor of an instance variable of type
                     <code class="literal">int</code> is simply <code class="literal">I</code>.
                  </p>
                  <p class="note">The field descriptor of an instance variable of type
                     <code class="literal">Object</code> is <code class="literal">Ljava/lang/Object;</code>. Note that the
                     internal form of the binary name for class <code class="literal">Object</code> is used.
                  </p>
                  <p class="note">The field descriptor of an instance variable of the
                     multidimensional array type <code class="literal">double[][][]</code>
                     is <code class="literal">[[[D</code>.
                  </p>
               </div>
            </div>
            <div class="section" title="4.3.3.&nbsp;Method Descriptors">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.3.3"></a>4.3.3.&nbsp;Method Descriptors
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.3.3-100"></a>A <span class="emphasis"><em>method
                        descriptor</em></span> contains zero or more <span class="emphasis"><em>parameter
                        descriptors</em></span>, representing the types of parameters that the
                  method takes, and a <span class="emphasis"><em>return descriptor</em></span>,
                  representing the type of the value (if any) that the method
                  returns.
               </p>
               <div id="jvms-4.3.3-110" class="productionset"><a name="jvms-4.3.3-110"></a>
                    
                  <div class="production"><a name="jvms-MethodDescriptor"></a>
                         
                     <div class="lhs">MethodDescriptor:</div>
                         
                     <div class="rhs">
                              <code class="literal">(</code>
                              {<a href="jvms-4.html#jvms-ParameterDescriptor" title="ParameterDescriptor">ParameterDescriptor</a>}
                              <code class="literal">)</code>
                              <a href="jvms-4.html#jvms-ReturnDescriptor" title="ReturnDescriptor">ReturnDescriptor</a>
                            
                     </div>
                       
                  </div>
                  
                    
                  <div class="production"><a name="jvms-ParameterDescriptor"></a>
                         
                     <div class="lhs">ParameterDescriptor:</div>
                         
                     <div class="rhs"><a href="jvms-4.html#jvms-FieldType" title="FieldType">FieldType</a></div>
                       
                  </div>
                  
                    
                  <div class="production"><a name="jvms-ReturnDescriptor"></a>
                         
                     <div class="lhs">ReturnDescriptor:</div>
                         
                     <div class="rhs">
                              <a href="jvms-4.html#jvms-FieldType" title="FieldType">FieldType</a> <br>
                              <a href="jvms-4.html#jvms-VoidDescriptor" title="VoidDescriptor">VoidDescriptor</a>
                            
                     </div>
                       
                  </div>
                  
                    
                  <div class="production"><a name="jvms-VoidDescriptor"></a>
                         
                     <div class="lhs">VoidDescriptor:</div>
                         
                     <div class="rhs"><code class="literal">V</code></div>
                       
                  </div>
                  
               </div>
               <p class="norm"><a name="jvms-4.3.3-120"></a>The
                  character <code class="literal">V</code> indicates that the method returns no
                  value (its result is <code class="literal">void</code>).
               </p>
               <div class="informalexample">
                  <p class="note">The method descriptor for the method:</p><pre class="screen">
Object m(int i, double d, Thread t) {...}
</pre><p class="note">is:</p><pre class="screen">
(IDLjava/lang/Thread;)Ljava/lang/Object;
</pre><p class="note">Note that the internal forms of the binary names of
                     <code class="literal">Thread</code> and <code class="literal">Object</code> are used.
                  </p>
               </div>
               <p class="norm-static"><a name="jvms-4.3.3-200"></a>A method
                  descriptor is valid only if it represents method parameters with a
                  total length of 255 or less, where that length includes the
                  contribution for <code class="literal">this</code> in the case of instance or interface method
                  invocations. The total length is calculated by summing the
                  contributions of the individual parameters, where a parameter of type
                  <code class="literal">long</code> or <code class="literal">double</code> contributes two units to the length and a parameter
                  of any other type contributes one unit.
               </p>
               <p class="norm-static"><a name="jvms-4.3.3-210"></a>A method
                  descriptor is the same whether the method it describes is a class
                  method or an instance method. Although an instance method is passed
                  <code class="literal">this</code>, a reference to the object on which the method is being
                  invoked, in addition to its intended arguments, that fact is not
                  reflected in the method descriptor. The reference to <code class="literal">this</code> is passed
                  implicitly by the Java Virtual Machine instructions which invoke instance methods
                  (<a class="xref" href="jvms-2.html#jvms-2.6.1" title="2.6.1.&nbsp;Local Variables">&sect;2.6.1</a>, <a class="xref" href="jvms-4.html#jvms-4.11" title="4.11.&nbsp;Limitations of the Java Virtual Machine">&sect;4.11</a>).
               </p>
            </div>
         </div>
         <div class="section" title="4.4.&nbsp;The Constant Pool">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.4"></a>4.4.&nbsp;The Constant Pool
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.4-100"></a>Java Virtual Machine instructions do not rely
               on the run-time layout of classes, interfaces, class instances, or
               arrays. Instead, instructions refer to symbolic information in the
               <code class="literal">constant_pool</code> table.
            </p>
            <p class="norm"><a name="jvms-4.4-110"></a>All <code class="literal">constant_pool</code> table
               entries have the following general format:
            </p><a name="jvms-4.4-120"></a><pre class="screen">
cp_info {
    u1 tag;
    u1 info[];
}
</pre><p class="norm"><a name="jvms-4.4-130"></a>Each item in the
               <code class="literal">constant_pool</code> table must begin with a 1-byte tag indicating the kind
               of <code class="literal">cp_info</code> entry. The contents of
               the <code class="literal">info</code> array vary with the value
               of <code class="literal">tag</code>. The valid tags and their values are listed
               in <a class="xref" href="jvms-4.html#jvms-4.4-140" title="Table&nbsp;4.4-A.&nbsp;Constant pool tags">Table&nbsp;4.4-A</a>. Each tag byte must be followed by
               two or more bytes giving information about the specific constant. The
               format of the additional information varies with the tag value.
            </p>
            <div class="table"><a name="jvms-4.4-140"></a><p class="title"><b>Table&nbsp;4.4-A.&nbsp;Constant pool tags</b></p>
               <div class="table-contents">
                  <table summary="Constant pool tags" border="1">
                     <colgroup>
                        <col>
                        <col>
                     </colgroup>
                     <thead>
                        <tr>
                           <th>Constant Type</th>
                           <th>Value</th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td><code class="literal">CONSTANT_Class</code></td>
                           <td>7</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Fieldref</code></td>
                           <td>9</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Methodref</code></td>
                           <td>10</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_InterfaceMethodref</code></td>
                           <td>11</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_String</code></td>
                           <td>8</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Integer</code></td>
                           <td>3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Float</code></td>
                           <td>4</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Long</code></td>
                           <td>5</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Double</code></td>
                           <td>6</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_NameAndType</code></td>
                           <td>12</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Utf8</code></td>
                           <td>1</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_MethodHandle</code></td>
                           <td>15</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_MethodType</code></td>
                           <td>16</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_InvokeDynamic</code></td>
                           <td>18</td>
                        </tr>
                     </tbody>
                  </table>
               </div>
            </div><br class="table-break"><div class="section" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.1"></a>4.4.1.&nbsp;The <code class="literal">CONSTANT_Class_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.1-100"></a>The <code class="literal">CONSTANT_Class_info</code>
                  structure is used to represent a class or an interface:
               </p><a name="jvms-4.4.1-110"></a><pre class="screen">
CONSTANT_Class_info {
    u1 tag;
    u2 name_index;
}
</pre><p class="norm"><a name="jvms-4.4.1-200"></a>The items of the
                  <code class="literal">CONSTANT_Class_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.1-200-A"></a>The <code class="literal">tag</code> item has
                                 the value <code class="literal">CONSTANT_Class</code> (7).
                        </p>
                     </dd>
                     <dt><span class="term">name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.1-200-B"></a>The value of the
                                 <code class="literal">name_index</code> item must be a valid index into
                                 the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at that
                                 index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a valid binary class
                                 or interface name encoded in internal form
                                 (<a class="xref" href="jvms-4.html#jvms-4.2.1" title="4.2.1.&nbsp;Binary Class and Interface Names">&sect;4.2.1</a>).
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="norm"><a name="jvms-4.4.1-300"></a>Because arrays are objects,
                  the opcodes <span class="emphasis"><em>anewarray</em></span> and <span class="emphasis"><em>multianewarray</em></span> - but not the opcode
                  <span class="emphasis"><em>new</em></span> - can reference array "classes" via <code class="literal">CONSTANT_Class_info</code>
                  structures in the <code class="literal">constant_pool</code> table. For such array classes, the
                  name of the class is the descriptor of the array type
                  (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>).
               </p>
               <div class="informalexample">
                  <p class="note">For example, the class name representing the
                     two-dimensional array type <code class="literal">int[][]</code>
                     is <code class="literal">[[I</code>, while the class name representing the
                     type <code class="literal">Thread[]</code>
                     is <code class="literal">[Ljava/lang/Thread;</code>.
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.4.1-310"></a>An array type descriptor is
                  valid only if it represents 255 or fewer dimensions.
               </p>
            </div>
            <div class="section" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.2"></a>4.4.2.&nbsp;The <code class="literal">CONSTANT_Fieldref_info</code>, <code class="literal">CONSTANT_Methodref_info</code>, and <code class="literal">CONSTANT_InterfaceMethodref_info</code> Structures
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.2-100"></a>Fields, methods, and
                  interface methods are represented by similar structures:
               </p><a name="jvms-4.4.2-110"></a><pre class="screen">
CONSTANT_Fieldref_info {
    u1 tag;
    u2 class_index;
    u2 name_and_type_index;
}

CONSTANT_Methodref_info {
    u1 tag;
    u2 class_index;
    u2 name_and_type_index;
}

CONSTANT_InterfaceMethodref_info {
    u1 tag;
    u2 class_index;
    u2 name_and_type_index;
}
</pre><p class="norm"><a name="jvms-4.4.2-200"></a>The items of these
                  structures are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.2-200-A"></a>The <code class="literal">tag</code> item of
                                 a <code class="literal">CONSTANT_Fieldref_info</code> structure has the
                                 value <code class="literal">CONSTANT_Fieldref</code> (9).
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-A.1"></a>The <code class="literal">tag</code> item of
                                 a <code class="literal">CONSTANT_Methodref_info</code> structure has the
                                 value <code class="literal">CONSTANT_Methodref</code> (10).
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-A.2"></a>The <code class="literal">tag</code> item of
                                 a <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure has the value
                                 <code class="literal">CONSTANT_InterfaceMethodref</code> (11).
                        </p>
                     </dd>
                     <dt><span class="term">class_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.2-200-B"></a>
                           	The value of the <code class="literal">class_index</code> item must be a
                           	valid index into the <code class="literal">constant_pool</code> table. The
                           	<code class="literal">constant_pool</code> entry at that index must be a
                           	<code class="literal">CONSTANT_Class_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>)
                           	representing a class or interface type that has the field or
                           	method as a member.
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-B.1"></a>
                           	The <code class="literal">class_index</code> item of a
                           	<code class="literal">CONSTANT_Methodref_info</code> structure must be a class type, not
                           	an interface type.
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-B.2"></a>
                           	The <code class="literal">class_index</code> item of a
                           	<code class="literal">CONSTANT_InterfaceMethodref_info</code> structure must be an
                           	interface type.
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-B.3"></a>
                           	The <code class="literal">class_index</code> item of a
                           	<code class="literal">CONSTANT_Fieldref_info</code> structure may be either a class type
                           	or an interface type.
                        </p>
                     </dd>
                     <dt><span class="term">name_and_type_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.2-200-C"></a>
                           	The value of the <code class="literal">name_and_type_index</code> item
                           	must be a valid index into the <code class="literal">constant_pool</code> table. The
                           	<code class="literal">constant_pool</code> entry at that index must be a
                           	<code class="literal">CONSTANT_NameAndType_info</code> structure
                           	(<a class="xref" href="jvms-4.html#jvms-4.4.6" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">&sect;4.4.6</a>). This <code class="literal">constant_pool</code> entry
                           	indicates the name and descriptor of the field or
                           	method.
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-C.1"></a>
                           	In a <code class="literal">CONSTANT_Fieldref_info</code>, the indicated descriptor must
                           	be a field descriptor
                           	(<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>). Otherwise, the indicated
                           	descriptor must be a method descriptor
                           	(<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-C.2"></a>
                           	If the name of the method of a <code class="literal">CONSTANT_Methodref_info</code>
                           	structure begins with a '<code class="literal">&lt;</code>'
                           	('<code class="literal">\u003c</code>'), then the name must be the
                           	special name <code class="literal">&lt;init&gt;</code>, representing an instance initialization
                           	method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>). The return type of such a
                           	method must be <code class="literal">void</code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.3.&nbsp;The CONSTANT_String_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.3"></a>4.4.3.&nbsp;The <code class="literal">CONSTANT_String_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.3-100"></a>The <code class="literal">CONSTANT_String_info</code>
                  structure is used to represent constant objects of the type
                  <code class="literal">String</code>:
               </p><a name="jvms-4.4.3-110"></a><pre class="screen">
CONSTANT_String_info {
    u1 tag;
    u2 string_index;
}
</pre><p class="norm"><a name="jvms-4.4.3-200"></a>The items of the
                  <code class="literal">CONSTANT_String_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.3-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_String_info</code> structure has the value
                                 <code class="literal">CONSTANT_String</code> (8).
                        </p>
                     </dd>
                     <dt><span class="term">string_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.3-200-B"></a>The value of
                                 the <code class="literal">string_index</code> item must be a valid index
                                 into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                                 that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the sequence of
                                 Unicode code points to which the <code class="literal">String</code> object is to be
                                 initialized.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.4.&nbsp;The CONSTANT_Integer_info and CONSTANT_Float_info Structures">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.4"></a>4.4.4.&nbsp;The <code class="literal">CONSTANT_Integer_info</code> and <code class="literal">CONSTANT_Float_info</code> Structures 
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.4-100"></a>The <code class="literal">CONSTANT_Integer_info</code>
                  and <code class="literal">CONSTANT_Float_info</code> structures represent 4-byte numeric (<code class="literal">int</code>
                  and <code class="literal">float</code>) constants:
               </p><a name="jvms-4.4.4-110"></a><pre class="screen">
CONSTANT_Integer_info {
    u1 tag;
    u4 bytes;
}

CONSTANT_Float_info {
    u1 tag;
    u4 bytes;
}
</pre><p class="norm"><a name="jvms-4.4.4-200"></a>The items of these
                  structures are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.4-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_Integer_info</code> structure has the value
                                 <code class="literal">CONSTANT_Integer</code> (3).
                        </p>
                        <p class="norm"><a name="jvms-4.4.4-200-A.1"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_Float_info</code> structure has the value
                                 <code class="literal">CONSTANT_Float</code> (4).
                        </p>
                     </dd>
                     <dt><span class="term">bytes</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.4-200-B"></a>The <code class="literal">bytes</code> item of
                                 the <code class="literal">CONSTANT_Integer_info</code> structure represents the value of
                                 the <code class="literal">int</code> constant. The bytes of the value are stored in
                                 big-endian (high byte first) order.
                        </p>
                        <p class="norm"><a name="jvms-4.4.4-200-B.1"></a>The <code class="literal">bytes</code> item of
                                 the <code class="literal">CONSTANT_Float_info</code> structure represents the value of the
                                 <code class="literal">float</code> constant in IEEE 754 floating-point single format
                                 (<a class="xref" href="jvms-2.html#jvms-2.3.2" title="2.3.2.&nbsp;Floating-Point Types, Value Sets, and Values">&sect;2.3.2</a>). The bytes of the single format
                                 representation are stored in big-endian (high byte first)
                                 order.
                        </p>
                        <p class="norm"><a name="jvms-4.4.4-200-B.2"></a>The value
                                 represented by the <code class="literal">CONSTANT_Float_info</code> structure is determined
                                 as follows. The bytes of the value are first converted into an
                                 <code class="literal">int</code> constant <span class="emphasis"><em>bits</em></span>. Then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="disc">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.4-200-B.2-A"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is <code class="literal">0x7f800000</code>, the <code class="literal">float</code> value will be
                                    	  positive infinity.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.4-200-B.2-B"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is <code class="literal">0xff800000</code>, the <code class="literal">float</code> value will be
                                    	  negative infinity.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.4-200-B.2-C"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is in the range <code class="literal">0x7f800001</code> through
                                    	  <code class="literal">0x7fffffff</code> or in the
                                    	  range <code class="literal">0xff800001</code>
                                    	  through <code class="literal">0xffffffff</code>, the <code class="literal">float</code> value
                                    	  will be NaN.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.4-200-B.2-D"></a>In all other
                                    	  cases, let <code class="literal">s</code>, <code class="literal">e</code>,
                                    	  and <code class="literal">m</code> be three values that might be
                                    	  computed from <span class="emphasis"><em>bits</em></span>:
                                 </p><a name="jvms-4.4.4-200-B.2-D.1"></a><pre class="screen">
int s = ((<span class="emphasis"><em>bits</em></span> &gt;&gt; 31) == 0) ? 1 : -1;
int e = ((<span class="emphasis"><em>bits</em></span> &gt;&gt; 23) &amp; 0xff);
int m = (e == 0) ?
          (<span class="emphasis"><em>bits</em></span> &amp; 0x7fffff) &lt;&lt; 1 :
          (<span class="emphasis"><em>bits</em></span> &amp; 0x7fffff) | 0x800000;
	  </pre></li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.4.4-200-B.3"></a>Then the <code class="literal">float</code>
                                 value equals the result of the mathematical
                                 expression <code class="literal">s &middot; m &middot;
                                    2<sup>e-150</sup></code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.5.&nbsp;The CONSTANT_Long_info and CONSTANT_Double_info Structures">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.5"></a>4.4.5.&nbsp;The <code class="literal">CONSTANT_Long_info</code> and <code class="literal">CONSTANT_Double_info</code> Structures
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.5-100"></a>The <code class="literal">CONSTANT_Long_info</code> and
                  <code class="literal">CONSTANT_Double_info</code> represent 8-byte numeric (<code class="literal">long</code> and <code class="literal">double</code>)
                  constants:
               </p><a name="jvms-4.4.5-110"></a><pre class="screen">
CONSTANT_Long_info {
    u1 tag;
    u4 high_bytes;
    u4 low_bytes;
}

CONSTANT_Double_info {
    u1 tag;
    u4 high_bytes;
    u4 low_bytes;
}
</pre><p class="norm"><a name="jvms-4.4.5-120"></a>All 8-byte constants take up
                  two entries in the <code class="literal">constant_pool</code> table of the <code class="literal">class</code> file. If a
                  <code class="literal">CONSTANT_Long_info</code> or <code class="literal">CONSTANT_Double_info</code> structure is the item
                  in the <code class="literal">constant_pool</code> table at index <span class="emphasis"><em>n</em></span>, then the next usable
                  item in the pool is located at index <span class="emphasis"><em>n</em></span>+2. The <code class="literal">constant_pool</code>
                  index <span class="emphasis"><em>n</em></span>+1 must be valid but is considered unusable.
               </p>
               <p class="note">In retrospect, making 8-byte constants take two
                  constant pool entries was a poor choice.
               </p>
               <p class="norm"><a name="jvms-4.4.5-200"></a>The items of these
                  structures are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.5-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_Long_info</code> structure has the value <code class="literal">CONSTANT_Long</code>
                                 (5).
                        </p>
                        <p class="norm"><a name="jvms-4.4.5-200-A.1"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_Double_info</code> structure has the value
                                 <code class="literal">CONSTANT_Double</code> (6).
                        </p>
                     </dd>
                     <dt><span class="term">high_bytes, low_bytes</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.5-200-B"></a>The
                                 unsigned <code class="literal">high_bytes</code>
                                 and <code class="literal">low_bytes</code> items of the
                                 <code class="literal">CONSTANT_Long_info</code> structure together represent the value of
                                 the <code class="literal">long</code> constant
                        </p><a name="jvms-4.4.5-200-B.1"></a><pre class="screen">
((long) high_bytes &lt;&lt; 32) + low_bytes
      </pre><p class="norm"><a name="jvms-4.4.5-200-B.2"></a>where the bytes of
                                 each of <code class="literal">high_bytes</code>
                                 and <code class="literal">low_bytes</code> are stored in big-endian (high
                                 byte first) order.
                        </p>
                        <p class="norm"><a name="jvms-4.4.5-200-B.3"></a>The <code class="literal">high_bytes</code>
                                 and <code class="literal">low_bytes</code> items of the
                                 <code class="literal">CONSTANT_Double_info</code> structure together represent the <code class="literal">double</code>
                                 value in IEEE 754 floating-point double format
                                 (<a class="xref" href="jvms-2.html#jvms-2.3.2" title="2.3.2.&nbsp;Floating-Point Types, Value Sets, and Values">&sect;2.3.2</a>). The bytes of each item are
                                 stored in big-endian (high byte first) order.
                        </p>
                        <p class="norm"><a name="jvms-4.4.5-200-B.4"></a>The value
                                 represented by the <code class="literal">CONSTANT_Double_info</code> structure is
                                 determined as follows. The <code class="literal">high_bytes</code>
                                 and <code class="literal">low_bytes</code> items are converted into the
                                 <code class="literal">long</code> constant <span class="emphasis"><em>bits</em></span>, which is equal
                                 to
                        </p><a name="jvms-4.4.5-200-B.5"></a><pre class="screen">
((long) high_bytes &lt;&lt; 32) + low_bytes
      </pre><p class="norm"><a name="jvms-4.4.5-200-B.6"></a>Then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="disc">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.5-200-B.6-A"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is <code class="literal">0x7ff0000000000000L</code>, the <code class="literal">double</code>
                                    	  value will be positive infinity.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.5-200-B.6-B"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is <code class="literal">0xfff0000000000000L</code>, the <code class="literal">double</code>
                                    	  value will be negative infinity.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.5-200-B.6-C"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is in the range <code class="literal">0x7ff0000000000001L</code> through
                                    	  <code class="literal">0x7fffffffffffffffL</code> or in the
                                    	  range <code class="literal">0xfff0000000000001L</code>
                                    	  through <code class="literal">0xffffffffffffffffL</code>, the double
                                    	  value will be NaN.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.5-200-B.6-D"></a>In all other
                                    	  cases, let <code class="literal">s</code>, <code class="literal">e</code>,
                                    	  and <code class="literal">m</code> be three values that might be
                                    	  computed from <span class="emphasis"><em>bits</em></span>:
                                 </p><a name="jvms-4.4.5-200-B.6-D.1"></a><pre class="screen">
int s = ((<span class="emphasis"><em>bits</em></span> &gt;&gt; 63) == 0) ? 1 : -1;
int e = (int)((<span class="emphasis"><em>bits</em></span> &gt;&gt; 52) &amp; 0x7ffL);
long m = (e == 0) ?
           (<span class="emphasis"><em>bits</em></span> &amp; 0xfffffffffffffL) &lt;&lt; 1 :
           (<span class="emphasis"><em>bits</em></span> &amp; 0xfffffffffffffL) | 0x10000000000000L;
	  </pre></li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.4.5-200-B.7"></a>Then the
                                 floating-point value equals the <code class="literal">double</code> value of the
                                 mathematical expression <code class="literal">s &middot; m &middot;
                                    2<sup>e-1075</sup></code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.6"></a>4.4.6.&nbsp;The <code class="literal">CONSTANT_NameAndType_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.6-100"></a>The
                  <code class="literal">CONSTANT_NameAndType_info</code> structure is used to represent a field or
                  method, without indicating which class or interface type it belongs
                  to:
               </p><a name="jvms-4.4.6-110"></a><pre class="screen">
CONSTANT_NameAndType_info {
    u1 tag;
    u2 name_index;
    u2 descriptor_index;
}
</pre><p class="norm"><a name="jvms-4.4.6-200"></a>The items of the
                  <code class="literal">CONSTANT_NameAndType_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.6-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_NameAndType_info</code> structure has the value
                                 <code class="literal">CONSTANT_NameAndType</code> (12).
                        </p>
                     </dd>
                     <dt><span class="term">name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.6-200-B"></a>The value of
                                 the <code class="literal">name_index</code> item must be a valid index
                                 into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                                 that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing either the special
                                 method name <code class="literal">&lt;init&gt;</code> (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) or a valid
                                 unqualified name denoting a field or method
                                 (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>).
                        </p>
                     </dd>
                     <dt><span class="term">descriptor_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.6-200-C"></a>The value of
                                 the <code class="literal">descriptor_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a valid field
                                 descriptor or method descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>,
                                 <a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.7"></a>4.4.7.&nbsp;The <code class="literal">CONSTANT_Utf8_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.7-100"></a>The <code class="literal">CONSTANT_Utf8_info</code>
                  structure is used to represent constant string values:
               </p><a name="jvms-4.4.7-110"></a><pre class="screen">
CONSTANT_Utf8_info {
    u1 tag;
    u2 length;
    u1 bytes[length];
}
</pre><p class="norm"><a name="jvms-4.4.7-200"></a>The items of the
                  <code class="literal">CONSTANT_Utf8_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.7-200-A"></a>
                           	The <code class="literal">tag</code> item of the <code class="literal">CONSTANT_Utf8_info</code> structure has the
                           	value <code class="literal">CONSTANT_Utf8</code> (1).
                        </p>
                     </dd>
                     <dt><span class="term">length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.7-200-B"></a>
                           	The value of the <code class="literal">length</code> item gives the
                           	number of bytes in the <code class="literal">bytes</code> array (not the
                           	length of the resulting string).
                        </p>
                     </dd>
                     <dt><span class="term">bytes[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.7-200-C"></a>
                           	The <code class="literal">bytes</code> array contains the bytes of the
                           	string.
                        </p>
                        <p class="norm"><a name="jvms-4.4.7-200-C.1"></a>
                           	No byte may have the value <code class="literal">(byte)0</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.4.7-200-C.2"></a>
                           	No byte may lie in the range <code class="literal">(byte)0xf0</code>
                           	to <code class="literal">(byte)0xff</code>.
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="norm"><a name="jvms-4.4.7-300"></a>String content is encoded in
                  modified UTF-8. Modified UTF-8 strings are encoded so that code point
                  sequences that contain only non-null ASCII characters can be
                  represented using only 1 byte per code point, but all code points in
                  the Unicode codespace can be represented. Modified UTF-8 strings are
                  not null-terminated. The encoding is as follows:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.4.7-300-A"></a>
                                 Code points in the range '<code class="literal">\u0001</code>' to
                                 '<code class="literal">\u007F</code>' are represented by a single
                                 byte:
                        </p>
                        <div class="table"><a name="jvms-4.4.7-300-A.1"></a><p class="title"><b>Table&nbsp;4.4.&nbsp;</b></p>
                           <div class="table-contents">
                              <table border="1">
                                 <colgroup>
                                    <col align="center" class="c1">
                                    <col align="center" class="c2">
                                    <col align="center" class="c3">
                                    <col align="center" class="c4">
                                    <col align="center" class="c5">
                                    <col align="center" class="c6">
                                    <col align="center" class="c7">
                                    <col align="center" class="c8">
                                 </colgroup>
                                 <tbody>
                                    <tr>
                                       <td align="center"><span class="emphasis"><em>0</em></span></td>
                                       <td colspan="7" align="center"><span class="emphasis"><em>bits 6-0</em></span></td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"><p class="norm"><a name="jvms-4.4.7-300-A.2"></a>
                                 The 7 bits of data in the byte give the value of the code point
                                 represented.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.4.7-300-B"></a>
                                 The null code point ('<code class="literal">\u0000</code>') and code
                                 points in the range '<code class="literal">\u0080</code>' to
                                 '<code class="literal">\u07FF</code>' are represented by a pair of
                                 bytes <code class="literal">x</code> and <code class="literal">y</code> :
                        </p>
                        <div class="table"><a name="jvms-4.4.7-300-B.1"></a><p class="title"><b>Table&nbsp;4.5.&nbsp;</b></p>
                           <div class="table-contents">
                              <table border="0">
                                 <colgroup>
                                    <col>
                                    <col>
                                 </colgroup>
                                 <tbody>
                                    <tr>
                                       <td><code class="literal">x</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4141"></a><p class="title"><b>Table&nbsp;4.6.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="5" align="center"><span class="emphasis"><em>bits 10-6</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">y</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4165"></a><p class="title"><b>Table&nbsp;4.7.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 5-0</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"><p class="norm"><a name="jvms-4.4.7-300-B.2"></a>
                                 The two bytes represent the code point with the value:
                        </p><a name="jvms-4.4.7-300-B.3"></a><pre class="screen">
((x &amp; 0x1f) &lt;&lt; 6) + (y &amp; 0x3f)
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.4.7-300-C"></a>
                                 Code points in the range '<code class="literal">\u0800</code>' to
                                 '<code class="literal">\uFFFF</code>' are represented by 3
                                 bytes <code class="literal">x</code>, <code class="literal">y</code>,
                                 and <code class="literal">z</code> :
                        </p>
                        <div class="table"><a name="jvms-4.4.7-300-C.1"></a><p class="title"><b>Table&nbsp;4.8.&nbsp;</b></p>
                           <div class="table-contents">
                              <table border="0">
                                 <colgroup>
                                    <col>
                                    <col>
                                 </colgroup>
                                 <tbody>
                                    <tr>
                                       <td><code class="literal">x</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4201"></a><p class="title"><b>Table&nbsp;4.9.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="4" align="center"><span class="emphasis"><em>bits 15-12</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">y</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4227"></a><p class="title"><b>Table&nbsp;4.10.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 11-6</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">z</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4249"></a><p class="title"><b>Table&nbsp;4.11.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 5-0</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"><p class="norm"><a name="jvms-4.4.7-300-C.2"></a>
                                 The three bytes represent the code point with the value:
                        </p><a name="jvms-4.4.7-300-C.3"></a><pre class="screen">
((x &amp; 0xf) &lt;&lt; 12) + ((y &amp; 0x3f) &lt;&lt; 6) + (z &amp; 0x3f)
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.4.7-300-D"></a>
                                 Characters with code points above U+FFFF
                                 (so-called <span class="emphasis"><em>supplementary characters</em></span>) are
                                 represented by separately encoding the two surrogate code units
                                 of their UTF-16 representation. Each of the surrogate code units
                                 is represented by three bytes. This means supplementary
                                 characters are represented by six
                                 bytes, <code class="literal">u</code>, <code class="literal">v</code>, <code class="literal">w</code>, <code class="literal">x</code>,
                               <code class="literal">y</code>, and <code class="literal">z</code> :
                        </p>
                        <div class="table"><a name="jvms-4.4.7-300-D.1"></a><p class="title"><b>Table&nbsp;4.12.&nbsp;</b></p>
                           <div class="table-contents">
                              <table border="0">
                                 <colgroup>
                                    <col>
                                    <col>
                                 </colgroup>
                                 <tbody>
                                    <tr>
                                       <td><code class="literal">u</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4287"></a><p class="title"><b>Table&nbsp;4.13.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">v</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4319"></a><p class="title"><b>Table&nbsp;4.14.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="4" align="center"><span class="emphasis"><em>(bits 20-16)-1</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">w</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4345"></a><p class="title"><b>Table&nbsp;4.15.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 15-10</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">x</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4367"></a><p class="title"><b>Table&nbsp;4.16.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">y</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4399"></a><p class="title"><b>Table&nbsp;4.17.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td colspan="4" align="center"><span class="emphasis"><em>bits 9-6</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">z</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4425"></a><p class="title"><b>Table&nbsp;4.18.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 5-0</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"><p class="norm"><a name="jvms-4.4.7-300-D.2"></a>
                                 The six bytes represent the code point with the value:
                        </p><a name="jvms-4.4.7-300-D.3"></a><pre class="screen">
0x10000 + ((v &amp; 0x0f) &lt;&lt; 16) + ((w &amp; 0x3f) &lt;&lt; 10) +
((y &amp; 0x0f) &lt;&lt; 6) + (z &amp; 0x3f)
    </pre></li>
                  </ul>
               </div>
               <p class="norm"><a name="jvms-4.4.7-400"></a>The bytes of multibyte
                  characters are stored in the <code class="literal">class</code> file in big-endian (high byte
                  first) order.
               </p>
               <p class="norm"><a name="jvms-4.4.7-500"></a>There are two differences
                  between this format and the "standard" UTF-8 format. First, the null
                  character <code class="literal">(char)0</code> is encoded using the 2-byte
                  format rather than the 1-byte format, so that modified UTF-8 strings
                  never have embedded nulls. Second, only the 1-byte, 2-byte, and 3-byte
                  formats of standard UTF-8 are used. The Java Virtual Machine does not recognize the
                  four-byte format of standard UTF-8; it uses its own
                  two-times-three-byte format instead.
               </p>
               <p class="note">For more information regarding the standard UTF-8
                  format, see Section 3.9 <em class="citetitle">Unicode Encoding Forms</em>
                  of <em class="citetitle">The Unicode Standard, Version 6.0.0</em>.
               </p>
            </div>
            <div class="section" title="4.4.8.&nbsp;The CONSTANT_MethodHandle_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.8"></a>4.4.8.&nbsp;The <code class="literal">CONSTANT_MethodHandle_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.8-100"></a>The
                  <code class="literal">CONSTANT_MethodHandle_info</code> structure is used to represent a method
                  handle:
               </p><a name="jvms-4.4.8-110"></a><pre class="screen">
CONSTANT_MethodHandle_info {
    u1 tag;
    u1 reference_kind;
    u2 reference_index;
}
</pre><p class="norm"><a name="jvms-4.4.8-200"></a>The items of the
                  <code class="literal">CONSTANT_MethodHandle_info</code> structure are the following:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.8-200-A"></a>
                           	The <code class="literal">tag</code> item of the <code class="literal">CONSTANT_MethodHandle_info</code> structure
                           	has the value <code class="literal">CONSTANT_MethodHandle</code> (15).
                        </p>
                     </dd>
                     <dt><span class="term">reference_kind</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.8-200-B"></a>
                           	The value of the <code class="literal">reference_kind</code> item must
                           	be in the range 1 to 9. The value denotes
                           	the <span class="emphasis"><em>kind</em></span> of this method handle, which
                           	characterizes its bytecode behavior
                           	(<a class="xref" href="jvms-5.html#jvms-5.4.3.5" title="5.4.3.5.&nbsp;Method Type and Method Handle Resolution">&sect;5.4.3.5</a>).
                        </p>
                     </dd>
                     <dt><span class="term">reference_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.8-200-C"></a>
                           	The value of the <code class="literal">reference_index</code> item must
                           	be a valid index into the <code class="literal">constant_pool</code> table. The
                           	<code class="literal">constant_pool</code> entry at that index must be as follows:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="disc">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.8-200-C-A"></a>
                                    	    If the value of the <code class="literal">reference_kind</code> item
                                    	    is 1 (<code class="literal">REF_getField</code>), 2 (<code class="literal">REF_getStatic</code>), 3
                                    	    (<code class="literal">REF_putField</code>), or 4 (<code class="literal">REF_putStatic</code>), then the
                                    	    <code class="literal">constant_pool</code> entry at that index must be a
                                    	    <code class="literal">CONSTANT_Fieldref_info</code> (<a class="xref" href="jvms-4.html#jvms-4.4.2" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">&sect;4.4.2</a>)
                                    	    structure representing a field for which a method handle
                                    	    is to be created.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.8-200-C-B"></a>
                                    	    If the value of the <code class="literal">reference_kind</code> item
                                    	    is 5 (<code class="literal">REF_invokeVirtual</code>) or 8 (<code class="literal">REF_newInvokeSpecial</code>),
                                    	    then the <code class="literal">constant_pool</code> entry at that index must be a
                                    	    <code class="literal">CONSTANT_Methodref_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.2" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">&sect;4.4.2</a>) representing a class's
                                    	    method or constructor (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) for
                                    	    which a method handle is to be created.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.8-200-C-C"></a>
                                    	    If the value of the <code class="literal">reference_kind</code> item
                                    	    is 6 (<code class="literal">REF_invokeStatic</code>) or 7 (<code class="literal">REF_invokeSpecial</code>), then
                                    	    if the <code class="literal">class</code> file version number is less than 52.0, the
                                    	    <code class="literal">constant_pool</code> entry at that index must be a
                                    	    <code class="literal">CONSTANT_Methodref_info</code> structure representing a class's
                                    	    method for which a method handle is to be created; if the
                                    	    <code class="literal">class</code> file version number is 52.0 or above, the
                                    	    <code class="literal">constant_pool</code> entry at that index must be either a
                                    	    <code class="literal">CONSTANT_Methodref_info</code> structure or a
                                    	    <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.2" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">&sect;4.4.2</a>) representing a class's or
                                    	    interface's method for which a method handle is to be
                                    	    created.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.8-200-C-D"></a>
                                    	    If the value of the <code class="literal">reference_kind</code> item
                                    	    is 9 (<code class="literal">REF_invokeInterface</code>), then the <code class="literal">constant_pool</code>
                                    	    entry at that index must be a
                                    	    <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure representing
                                    	    an interface's method for which a method handle is to be
                                    	    created.
                                 </p>
                              </li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.4.8-200-C.1"></a>
                           	If the value of the <code class="literal">reference_kind</code> item is
                           	5 (<code class="literal">REF_invokeVirtual</code>), 6 (<code class="literal">REF_invokeStatic</code>), 7
                           	(<code class="literal">REF_invokeSpecial</code>), or 9 (<code class="literal">REF_invokeInterface</code>), the name
                           	of the method represented by a <code class="literal">CONSTANT_Methodref_info</code>
                           	structure or a <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure
                           	must not be <code class="literal">&lt;init&gt;</code> or <code class="literal">&lt;clinit&gt;</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.4.8-200-C.2"></a>
                           	If the value is 8 (<code class="literal">REF_newInvokeSpecial</code>), the name of the
                           	method represented by a <code class="literal">CONSTANT_Methodref_info</code> structure
                           	must be <code class="literal">&lt;init&gt;</code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.9.&nbsp;The CONSTANT_MethodType_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.9"></a>4.4.9.&nbsp;The <code class="literal">CONSTANT_MethodType_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.9-100"></a>The
                  <code class="literal">CONSTANT_MethodType_info</code> structure is used to represent a method
                  type:
               </p><a name="jvms-4.4.9-110"></a><pre class="screen">
CONSTANT_MethodType_info {
    u1 tag;
    u2 descriptor_index;
}
</pre><p class="norm"><a name="jvms-4.4.9-200"></a>The items of the
                  <code class="literal">CONSTANT_MethodType_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.9-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_MethodType_info</code> structure has the value
                                 <code class="literal">CONSTANT_MethodType</code> (16).
                        </p>
                     </dd>
                     <dt><span class="term">descriptor_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.9-200-B"></a>The value of
                                 the <code class="literal">descriptor_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a method descriptor
                                 (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.10.&nbsp;The CONSTANT_InvokeDynamic_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.10"></a>4.4.10.&nbsp;The <code class="literal">CONSTANT_InvokeDynamic_info</code> Structure 
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.10-100"></a>The
                  <code class="literal">CONSTANT_InvokeDynamic_info</code> structure is used by an <span class="emphasis"><em>invokedynamic</em></span>
                  instruction (<a class="xref" href="jvms-6.html#jvms-6.5.invokedynamic" title="invokedynamic">&sect;<span class="emphasis"><em>invokedynamic</em></span></a>) to specify a
                  bootstrap method, the dynamic invocation name, the argument and return
                  types of the call, and optionally, a sequence of additional constants
                  called <span class="emphasis"><em>static arguments</em></span> to the bootstrap
                  method.
               </p><a name="jvms-4.4.10-110"></a><pre class="screen">
CONSTANT_InvokeDynamic_info {
    u1 tag;
    u2 bootstrap_method_attr_index;
    u2 name_and_type_index;
}
</pre><p class="norm"><a name="jvms-4.4.10-200"></a>The items of the
                  <code class="literal">CONSTANT_InvokeDynamic_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.10-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_InvokeDynamic_info</code> structure has the value
                                 <code class="literal">CONSTANT_InvokeDynamic</code> (18).
                        </p>
                     </dd>
                     <dt><span class="term">bootstrap_method_attr_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.10-200-B"></a>The value of the
                                 <code class="literal">bootstrap_method_attr_index</code> item must be a
                                 valid index into the <code class="literal">bootstrap_methods</code> array
                                 of the bootstrap method table (<a class="xref" href="jvms-4.html#jvms-4.7.23" title="4.7.23.&nbsp;The BootstrapMethods Attribute">&sect;4.7.23</a>) of
                                 this <code class="literal">class</code> file.
                        </p>
                     </dd>
                     <dt><span class="term">name_and_type_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.10-200-C"></a>
                           	The value of the <code class="literal">name_and_type_index</code> item
                           	must be a valid index into the <code class="literal">constant_pool</code> table. The
                           	<code class="literal">constant_pool</code> entry at that index must be a
                           	<code class="literal">CONSTANT_NameAndType_info</code> structure
                           	(<a class="xref" href="jvms-4.html#jvms-4.4.6" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">&sect;4.4.6</a>) representing a method name and
                           	method descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
         </div>
         <div class="section" title="4.5.&nbsp;Fields">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.5"></a>4.5.&nbsp;Fields
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.5-100"></a>Each field is described by a
               <code class="literal">field_info</code> structure.
            </p>
            <p class="norm"><a name="jvms-4.5-110"></a>No two fields in one <code class="literal">class</code>
               file may have the same name and descriptor
               (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>).
            </p>
            <p class="norm"><a name="jvms-4.5-120"></a>The structure has the
               following format:
            </p><a name="jvms-4.5-130"></a><pre class="screen">
field_info {
    u2             access_flags;
    u2             name_index;
    u2             descriptor_index;
    u2             attributes_count;
    attribute_info attributes[attributes_count];
}
</pre><p class="norm"><a name="jvms-4.5-200"></a>The items of the <code class="literal">field_info</code>
               structure are as follows:
            </p>
            <div class="variablelist">
               <dl>
                  <dt><span class="term">access_flags</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-A"></a>
                        	The value of the <code class="literal">access_flags</code> item is a mask of flags used
                        	to denote access permission to and properties of this
                        	field. The interpretation of each flag, when set, is specified
                        	in <a class="xref" href="jvms-4.html#jvms-4.5-200-A.1" title="Table&nbsp;4.5-A.&nbsp;Field access and property flags">Table&nbsp;4.5-A</a>.
                     </p>
                     <div class="table"><a name="jvms-4.5-200-A.1"></a><p class="title"><b>Table&nbsp;4.5-A.&nbsp;Field access and property flags</b></p>
                        <div class="table-contents">
                           <table summary="Field access and property flags" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Flag Name</th>
                                    <th>Value</th>
                                    <th>Interpretation</th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">ACC_PUBLIC</code></td>
                                    <td>0x0001</td>
                                    <td>Declared <code class="literal">public</code>; may be accessed from outside its
                                       		package.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_PRIVATE</code></td>
                                    <td>0x0002</td>
                                    <td>Declared <code class="literal">private</code>; usable only within the defining
                                       		class.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_PROTECTED</code></td>
                                    <td>0x0004</td>
                                    <td>Declared <code class="literal">protected</code>; may be accessed within
                                       		subclasses.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_STATIC</code></td>
                                    <td>0x0008</td>
                                    <td>Declared <code class="literal">static</code>.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_FINAL</code></td>
                                    <td>0x0010</td>
                                    <td>Declared <code class="literal">final</code>; never directly assigned to
                                       		after object construction (JLS &sect;17.5).
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_VOLATILE</code></td>
                                    <td>0x0040</td>
                                    <td>Declared <code class="literal">volatile</code>; cannot be cached.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_TRANSIENT</code></td>
                                    <td>0x0080</td>
                                    <td>Declared <code class="literal">transient</code>; not written or read by a
                                       		persistent object manager.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SYNTHETIC</code></td>
                                    <td>0x1000</td>
                                    <td>Declared synthetic; not present in the source
                                       		code.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ENUM</code></td>
                                    <td>0x4000</td>
                                    <td>Declared as an element of an <code class="literal">enum</code>.
                                    </td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><p class="norm"><a name="jvms-4.5-200-A.2"></a>
                        	Fields of classes may set any of the flags in
                        	<a class="xref" href="jvms-4.html#jvms-4.5-200-A.1" title="Table&nbsp;4.5-A.&nbsp;Field access and property flags">Table&nbsp;4.5-A</a>. However, each field of a
                        	class may have at most one of its <code class="literal">ACC_PUBLIC</code>, <code class="literal">ACC_PRIVATE</code>,
                        	and <code class="literal">ACC_PROTECTED</code> flags set (JLS &sect;8.3.1), and must not have
                        	both its <code class="literal">ACC_FINAL</code> and <code class="literal">ACC_VOLATILE</code> flags set (JLS
                        	&sect;8.3.1.4).
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-A.3"></a>
                        	Fields of interfaces must have their <code class="literal">ACC_PUBLIC</code>,
                        	<code class="literal">ACC_STATIC</code>, and <code class="literal">ACC_FINAL</code> flags set; they may have their
                        	<code class="literal">ACC_SYNTHETIC</code> flag set and must not have any of the other
                        	flags in <a class="xref" href="jvms-4.html#jvms-4.5-200-A.1" title="Table&nbsp;4.5-A.&nbsp;Field access and property flags">Table&nbsp;4.5-A</a> set (JLS
                        	&sect;9.3).
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-A.4"></a>
                        	The <code class="literal">ACC_SYNTHETIC</code> flag indicates that this field was
                        	generated by a compiler and does not appear in source
                        	code.
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-A.5"></a>
                        	The <code class="literal">ACC_ENUM</code> flag indicates that this field is used to hold
                        	an element of an enumerated type.
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-A.6"></a>
                        	All bits of the <code class="literal">access_flags</code> item not assigned in
                        	<a class="xref" href="jvms-4.html#jvms-4.5-200-A.1" title="Table&nbsp;4.5-A.&nbsp;Field access and property flags">Table&nbsp;4.5-A</a> are reserved for future
                        	use. They should be set to zero in generated <code class="literal">class</code> files and
                        	should be ignored by Java Virtual Machine implementations.
                     </p>
                  </dd>
                  <dt><span class="term">name_index</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-B"></a>The value of the
                              <code class="literal">name_index</code> item must be a valid index into
                              the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at that
                              index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                              (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) which represents a valid
                              unqualified name denoting a field
                              (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>).
                     </p>
                  </dd>
                  <dt><span class="term">descriptor_index</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-C"></a>The value of the
                              <code class="literal">descriptor_index</code> item must be a valid index
                              into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                              that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                              (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) which represents a valid field
                              descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>).
                     </p>
                  </dd>
                  <dt><span class="term">attributes_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-D"></a>The value of the
                              <code class="literal">attributes_count</code> item indicates the number of
                              additional attributes of this field.
                     </p>
                  </dd>
                  <dt><span class="term">attributes[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-E"></a>Each value of the
                        	<code class="literal">attributes</code> table must be an <code class="literal">attribute_info</code> structure
                        	(<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-E.1"></a>
                        	A field can have any number of optional attributes associated
                                with it.
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-E.2"></a>
                        	The attributes defined by this specification as appearing in
                        	the <code class="literal">attributes</code> table of a <code class="literal">field_info</code> structure are listed
                        	in <a class="xref" href="jvms-4.html#jvms-4.7-320" title="Table&nbsp;4.7-C.&nbsp;Predefined class file attributes (by location)">Table&nbsp;4.7-C</a>.
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-E.3"></a>
                        	The rules concerning attributes defined to appear in the
                                <code class="literal">attributes</code> table of a <code class="literal">field_info</code> structure are given in
                                <a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>.
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-E.4"></a>
                        	The rules concerning non-predefined attributes in the
                                <code class="literal">attributes</code> table of a <code class="literal">field_info</code> structure are given in
                                <a class="xref" href="jvms-4.html#jvms-4.7.1" title="4.7.1.&nbsp;Defining and Naming New Attributes">&sect;4.7.1</a>.
                     </p>
                  </dd>
               </dl>
            </div>
         </div>
         <div class="section" title="4.6.&nbsp;Methods">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.6"></a>4.6.&nbsp;Methods
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.6-100"></a>Each method, including each
               instance initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) and the
               class or interface initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>),
               is described by a <code class="literal">method_info</code> structure.
            </p>
            <p class="norm"><a name="jvms-4.6-110"></a>No two methods in one <code class="literal">class</code>
               file may have the same name and descriptor
               (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
            </p>
            <p class="norm"><a name="jvms-4.6-120"></a>The structure has the
               following format:
            </p><a name="jvms-4.6-130"></a><pre class="screen">
method_info {
    u2             access_flags;
    u2             name_index;
    u2             descriptor_index;
    u2             attributes_count;
    attribute_info attributes[attributes_count];
}
</pre><p class="norm"><a name="jvms-4.6-200"></a>The items of the <code class="literal">method_info</code>
               structure are as follows:
            </p>
            <div class="variablelist">
               <dl>
                  <dt><span class="term">access_flags</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-A"></a>
                        	The value of the <code class="literal">access_flags</code> item is a mask of flags used
                        	to denote access permission to and properties of this
                        	method. The interpretation of each flag, when set, is
                        	specified in <a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.6-A.&nbsp;Method access and property flags">Table&nbsp;4.6-A</a>.
                     </p>
                     <div class="table"><a name="jvms-4.6-200-A.1"></a><p class="title"><b>Table&nbsp;4.6-A.&nbsp;Method access and property flags</b></p>
                        <div class="table-contents">
                           <table summary="Method access and property flags" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Flag Name</th>
                                    <th>Value</th>
                                    <th>Interpretation</th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">ACC_PUBLIC</code></td>
                                    <td>0x0001</td>
                                    <td>Declared <code class="literal">public</code>; may be accessed from outside its
                                       		package.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_PRIVATE</code></td>
                                    <td>0x0002</td>
                                    <td>Declared <code class="literal">private</code>; accessible only within the
                                       		defining class.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_PROTECTED</code></td>
                                    <td>0x0004</td>
                                    <td>Declared <code class="literal">protected</code>; may be accessed within
                                       		subclasses.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_STATIC</code></td>
                                    <td>0x0008</td>
                                    <td>Declared <code class="literal">static</code>.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_FINAL</code></td>
                                    <td>0x0010</td>
                                    <td>Declared <code class="literal">final</code>; must not be overridden
                                       		(<a class="xref" href="jvms-5.html#jvms-5.4.5" title="5.4.5.&nbsp;Overriding">&sect;5.4.5</a>).
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SYNCHRONIZED</code></td>
                                    <td>0x0020</td>
                                    <td>Declared <code class="literal">synchronized</code>; invocation is wrapped by a
                                       		monitor use.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_BRIDGE</code></td>
                                    <td>0x0040</td>
                                    <td>A bridge method, generated by the compiler.</td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_VARARGS</code></td>
                                    <td>0x0080</td>
                                    <td>Declared with variable number of arguments.</td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_NATIVE</code></td>
                                    <td>0x0100</td>
                                    <td>Declared <code class="literal">native</code>; implemented in a language other
                                       		than Java.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ABSTRACT</code></td>
                                    <td>0x0400</td>
                                    <td>Declared <code class="literal">abstract</code>; no implementation is
                                       		provided.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_STRICT</code></td>
                                    <td>0x0800</td>
                                    <td>Declared <code class="literal">strictfp</code>; floating-point mode is
                                       		FP-strict.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SYNTHETIC</code></td>
                                    <td>0x1000</td>
                                    <td>Declared synthetic; not present in the source
                                       		code.
                                    </td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><p class="norm"><a name="jvms-4.6-200-A.2"></a>
                        	Methods of classes may have any of the flags in
                        	<a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.6-A.&nbsp;Method access and property flags">Table&nbsp;4.6-A</a> set. However, each method
                        	of a class may have at most one of its <code class="literal">ACC_PUBLIC</code>,
                        	<code class="literal">ACC_PRIVATE</code>, and <code class="literal">ACC_PROTECTED</code> flags set (JLS
                        	&sect;8.4.3).
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.3"></a>
                        	Methods of interfaces may have any of the flags in
                        	<a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.6-A.&nbsp;Method access and property flags">Table&nbsp;4.6-A</a> set except <code class="literal">ACC_PROTECTED</code>,
                        	<code class="literal">ACC_FINAL</code>, <code class="literal">ACC_SYNCHRONIZED</code>, and <code class="literal">ACC_NATIVE</code> (JLS
                        	&sect;9.4). In a <code class="literal">class</code> file whose version number is less than
                        	52.0, each method of an interface must have its <code class="literal">ACC_PUBLIC</code>
                        	and <code class="literal">ACC_ABSTRACT</code> flags set; in a <code class="literal">class</code> file whose version
                        	number is 52.0 or above, each method of an interface must have
                        	exactly one of its <code class="literal">ACC_PUBLIC</code> and <code class="literal">ACC_PRIVATE</code> flags
                        	set.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.4"></a>
                        	If a method of a class or interface has its <code class="literal">ACC_ABSTRACT</code>
                        	flag set, it must not have any of its <code class="literal">ACC_PRIVATE</code>,
                        	<code class="literal">ACC_STATIC</code>, <code class="literal">ACC_FINAL</code>, <code class="literal">ACC_SYNCHRONIZED</code>, <code class="literal">ACC_NATIVE</code>, or
                        	<code class="literal">ACC_STRICT</code> flags set.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.5"></a>
                        	Each instance initialization method
                        	(<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) may have at most one of its
                        	<code class="literal">ACC_PUBLIC</code>, <code class="literal">ACC_PRIVATE</code>, and <code class="literal">ACC_PROTECTED</code> flags set,
                        	and may also have its <code class="literal">ACC_VARARGS</code>, <code class="literal">ACC_STRICT</code>, and
                        	<code class="literal">ACC_SYNTHETIC</code> flags set, but must not have any of the other
                        	flags in <a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.6-A.&nbsp;Method access and property flags">Table&nbsp;4.6-A</a> set.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.6"></a>
                        	Class and interface initialization methods are called
                        	implicitly by the Java Virtual Machine. The value of their <code class="literal">access_flags</code>
                        	item is ignored except for the setting of the <code class="literal">ACC_STRICT</code>
                        	flag.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.7"></a>
                        	The <code class="literal">ACC_BRIDGE</code> flag is used to indicate a bridge method
                        	generated by a compiler for the Java programming language.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.8"></a>
                        	The <code class="literal">ACC_VARARGS</code> flag indicates that this method takes a
                        	variable number of arguments at the source code level. A
                        	method declared to take a variable number of arguments must be
                        	compiled with the <code class="literal">ACC_VARARGS</code> flag set to 1. All other
                        	methods must be compiled with the <code class="literal">ACC_VARARGS</code> flag set to
                        	0.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.9"></a>
                        	The <code class="literal">ACC_SYNTHETIC</code> flag indicates that this method was
                        	generated by a compiler and does not appear in source code,
                        	unless it is one of the methods named in
                        	<a class="xref" href="jvms-4.html#jvms-4.7.8" title="4.7.8.&nbsp;The Synthetic Attribute">&sect;4.7.8</a>.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.10"></a>
                        	All bits of the <code class="literal">access_flags</code> item not assigned in
                        	<a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.6-A.&nbsp;Method access and property flags">Table&nbsp;4.6-A</a> are reserved for future
                        	use. They should be set to zero in generated <code class="literal">class</code> files and
                        	should be ignored by Java Virtual Machine implementations.
                     </p>
                  </dd>
                  <dt><span class="term">name_index</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-B"></a>The value of the
                              <code class="literal">name_index</code> item must be a valid index into
                              the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at that
                              index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                              (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing either one of the
                              special method names <code class="literal">&lt;init&gt;</code> or <code class="literal">&lt;clinit&gt;</code>
                              (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), or a valid unqualified name
                              denoting a method (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>).
                     </p>
                  </dd>
                  <dt><span class="term">descriptor_index</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-C"></a>The value of the
                              <code class="literal">descriptor_index</code> item must be a valid index
                              into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                              that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure representing
                              a valid method descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                     </p>
                     <p class="note">A future edition of this specification may
                              require that the last parameter descriptor of the method
                              descriptor is an array type if the <code class="literal">ACC_VARARGS</code> flag is set in
                              the <code class="literal">access_flags</code> item.
                     </p>
                  </dd>
                  <dt><span class="term">attributes_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-D"></a>The value of the
                              <code class="literal">attributes_count</code> item indicates the number of
                              additional attributes of this method.
                     </p>
                  </dd>
                  <dt><span class="term">attributes[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-E"></a>Each value of the
                        	<code class="literal">attributes</code> table must be an <code class="literal">attribute_info</code> structure
                        	(<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-E.1"></a>A method can have
                        	any number of optional attributes associated with it.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-E.2"></a>
                        	The attributes defined by this specification as appearing in
                        	the <code class="literal">attributes</code> table of a <code class="literal">method_info</code> structure are listed
                        	in <a class="xref" href="jvms-4.html#jvms-4.7-320" title="Table&nbsp;4.7-C.&nbsp;Predefined class file attributes (by location)">Table&nbsp;4.7-C</a>.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-E.3"></a>
                        	The rules concerning attributes defined to appear in the
                                <code class="literal">attributes</code> table of a <code class="literal">method_info</code> structure are given in
                                <a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-E.4"></a>
                        	The rules concerning non-predefined attributes in the
                        	<code class="literal">attributes</code> table of a <code class="literal">method_info</code> structure are given in
                        	<a class="xref" href="jvms-4.html#jvms-4.7.1" title="4.7.1.&nbsp;Defining and Naming New Attributes">&sect;4.7.1</a>.
                     </p>
                  </dd>
               </dl>
            </div>
         </div>
         <div class="section" title="4.7.&nbsp;Attributes">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.7"></a>4.7.&nbsp;Attributes
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.7-100"></a><span class="emphasis"><em>Attributes</em></span> 
               are used in the <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, <code class="literal">method_info</code>, and 
               <code class="literal">Code_attribute</code> structures of the <code class="literal">class</code> file format 
               (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>, <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>, 
               <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>, <a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>).
            </p>
            <p class="norm"><a name="jvms-4.7-110"></a>All attributes have the
               following general format:
            </p><a name="jvms-4.7-120"></a><pre class="screen">
attribute_info {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 info[attribute_length];
}
</pre><p class="norm"><a name="jvms-4.7-130"></a>For all attributes, the
               <code class="literal">attribute_name_index</code> must be a valid unsigned
               16-bit index into the constant pool of the class. The <code class="literal">constant_pool</code>
               entry at <code class="literal">attribute_name_index</code> must be a
               <code class="literal">CONSTANT_Utf8_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>)
               representing the name of the attribute. The value of the
               <code class="literal">attribute_length</code> item indicates the length of the
               subsequent information in bytes. The length does not include the
               initial six bytes that contain
               the <code class="literal">attribute_name_index</code>
               and <code class="literal">attribute_length</code> items.
            </p>
            <p class="norm"><a name="jvms-4.7-200"></a>23 attributes are predefined by this
               specification. They are listed three times, for ease of
               navigation:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-200-A"></a>
                              <a class="xref" href="jvms-4.html#jvms-4.7-300" title="Table&nbsp;4.7-A.&nbsp;Predefined class file attributes (by section)">Table&nbsp;4.7-A</a> is ordered by the attributes'
                              section numbers in this chapter. Each attribute is accompanied
                              by the first version of the <code class="literal">class</code> file format in which it was
                              defined, and the corresponding version of the Java SE platform. (For
                              old <code class="literal">class</code> file versions, the JDK release is used instead of
                              the Java SE platform version).
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-200-B"></a>
                              <a class="xref" href="jvms-4.html#jvms-4.7-310" title="Table&nbsp;4.7-B.&nbsp;Predefined class file attributes (by class file version)">Table&nbsp;4.7-B</a> is orderd by the first version of
                              the <code class="literal">class</code> file format in which each attribute was
                              defined.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-200-C"></a>
                              <a class="xref" href="jvms-4.html#jvms-4.7-320" title="Table&nbsp;4.7-C.&nbsp;Predefined class file attributes (by location)">Table&nbsp;4.7-C</a> is ordered by the location in a
                              <code class="literal">class</code> file where each attribute is defined to appear.
                     </p>
                  </li>
               </ul>
            </div>
            <p class="norm"><a name="jvms-4.7-210"></a>Within the context of their
               use in this specification, that is, in the <code class="literal">attributes</code> tables of the
               <code class="literal">class</code> file structures in which they appear, the names of these
               predefined attributes are reserved.
            </p>
            <p class="norm"><a name="jvms-4.7-220"></a>Any conditions on the presence of a
               predefined attribute in an <code class="literal">attributes</code> table are specified explicitly
               in the section which describes the attribute. If no conditions are
               specified, then the attribute may appear any number of times in an
               <code class="literal">attributes</code> table.
            </p>
            <p class="norm"><a name="jvms-4.7-230"></a>The predefined attributes
               are categorized into three groups according to their purpose:
            </p>
            <div class="orderedlist">
               <ol class="orderedlist" type="1">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-230-A"></a>
                              Five attributes are critical to correct interpretation of the
                              <code class="literal">class</code> file by the Java Virtual Machine:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-A-A"></a>
                                 	  <code class="literal">ConstantValue</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-A-B"></a>
                                 	  <code class="literal">Code</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-A-C"></a>
                                 	  <code class="literal">StackMapTable</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-A-D"></a>
                                 	  <code class="literal">Exceptions</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-A-E"></a>
                                 	  <code class="literal">BootstrapMethods</code></p>
                           </li>
                        </ul>
                     </div>
                     <p class="norm-error"><a name="jvms-4.7-230-A.1"></a>
                              In a <code class="literal">class</code> file of version <span class="type">V</span>, each of these attributes must
                              be recognized and correctly read by an implementation of the
                              Java Virtual Machine if the implementation recognizes <code class="literal">class</code> files of version
                              <span class="type">V</span>, and <span class="type">V</span> is at least the version where the attribute was
                              first defined, and the attribute appears in a location where it
                              is defined to appear.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-230-B"></a>
                              Twelve attributes are critical to correct interpretation of the
                              <code class="literal">class</code> file by the class libraries of the Java SE platform:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-A"></a>
                                 	  <code class="literal">InnerClasses</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-B"></a>
                                 	  <code class="literal">EnclosingMethod</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-C"></a>
                                 	  <code class="literal">Synthetic</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-D"></a>
                                 	  <code class="literal">Signature</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-E"></a>
                                 	  <code class="literal">RuntimeVisibleAnnotations</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-F"></a>
                                 	  <code class="literal">RuntimeInvisibleAnnotations</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-G"></a>
                                 	  <code class="literal">RuntimeVisibleParameterAnnotations</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-H"></a>
                                 	  <code class="literal">RuntimeInvisibleParameterAnnotations</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-I"></a>
                                 	  <code class="literal">RuntimeVisibleTypeAnnotations</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-J"></a>
                                 	  <code class="literal">RuntimeInvisibleTypeAnnotations</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-K"></a>
                                 	  <code class="literal">AnnotationDefault</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-B-L"></a>
                                 	  <code class="literal">MethodParameters</code></p>
                           </li>
                        </ul>
                     </div>
                     <p class="norm"><a name="jvms-4.7-230-B.1"></a>
                              Each of these attributes in a <code class="literal">class</code> file of version <span class="type">V</span> must
                              be recognized and correctly read by an implementation of the
                              class libraries of the Java SE platform if the implementation
                              recognizes <code class="literal">class</code> files of version <span class="type">V</span>, and <span class="type">V</span> is at least the
                              version where the attribute was first defined, and the attribute
                              appears in a location where it is defined to appear.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-230-C"></a>
                              Six attributes are not critical to correct interpretation of the
                              <code class="literal">class</code> file by either the Java Virtual Machine or the class libraries of the
                              Java SE platform, but are useful for tools:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-C-A"></a>
                                 	  <code class="literal">SourceFile</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-C-B"></a>
                                 	  <code class="literal">SourceDebugExtension</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-C-C"></a>
                                 	  <code class="literal">LineNumberTable</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-C-D"></a>
                                 	  <code class="literal">LocalVariableTable</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-C-E"></a>
                                 	  <code class="literal">LocalVariableTypeTable</code></p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.7-230-C-F"></a>
                                 	  <code class="literal">Deprecated</code></p>
                           </li>
                        </ul>
                     </div>
                     <p class="norm"><a name="jvms-4.7-230-C.1"></a>
                              Use of these attributes by an implementation of the Java Virtual Machine or the
                              class libraries of the Java SE platform is optional. An implementation
                              may use the information that these attributes contain, or
                              otherwise must silently ignore these attributes.
                     </p>
                  </li>
               </ol>
            </div>
            <div class="table"><a name="jvms-4.7-300"></a><p class="title"><b>Table&nbsp;4.7-A.&nbsp;Predefined <code class="literal">class</code> file attributes (by section)</b></p>
               <div class="table-contents">
                  <table summary="Predefined class file attributes (by section)" border="1">
                     <colgroup>
                        <col>
                        <col>
                        <col>
                        <col>
                     </colgroup>
                     <thead>
                        <tr>
                           <th>Attribute</th>
                           <th>Section</th>
                           <th><code class="literal">class</code> file
                           </th>
                           <th>Java SE</th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td><code class="literal">ConstantValue</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.2" title="4.7.2.&nbsp;The ConstantValue Attribute">&sect;4.7.2</a></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Code</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                        </tr>
                        <tr>
                           <td><code class="literal">StackMapTable</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.4" title="4.7.4.&nbsp;The StackMapTable Attribute">&sect;4.7.4</a></td>
                           <td>50.0</td>
                           <td>6</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Exceptions</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.5" title="4.7.5.&nbsp;The Exceptions Attribute">&sect;4.7.5</a></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                        </tr>
                        <tr>
                           <td><code class="literal">InnerClasses</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.6" title="4.7.6.&nbsp;The InnerClasses Attribute">&sect;4.7.6</a></td>
                           <td>45.3</td>
                           <td>1.1</td>
                        </tr>
                        <tr>
                           <td><code class="literal">EnclosingMethod</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.7" title="4.7.7.&nbsp;The EnclosingMethod Attribute">&sect;4.7.7</a></td>
                           <td>49.0</td>
                           <td>5.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Synthetic</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.8" title="4.7.8.&nbsp;The Synthetic Attribute">&sect;4.7.8</a></td>
                           <td>45.3</td>
                           <td>1.1</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Signature</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.9" title="4.7.9.&nbsp;The Signature Attribute">&sect;4.7.9</a></td>
                           <td>49.0</td>
                           <td>5.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">SourceFile</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.10" title="4.7.10.&nbsp;The SourceFile Attribute">&sect;4.7.10</a></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                        </tr>
                        <tr>
                           <td><code class="literal">SourceDebugExtension</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.11" title="4.7.11.&nbsp;The SourceDebugExtension Attribute">&sect;4.7.11</a></td>
                           <td>49.0</td>
                           <td>5.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">LineNumberTable</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.12" title="4.7.12.&nbsp;The LineNumberTable Attribute">&sect;4.7.12</a></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                        </tr>
                        <tr>
                           <td><code class="literal">LocalVariableTable</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.13" title="4.7.13.&nbsp;The LocalVariableTable Attribute">&sect;4.7.13</a></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                        </tr>
                        <tr>
                           <td><code class="literal">LocalVariableTypeTable</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.14" title="4.7.14.&nbsp;The LocalVariableTypeTable Attribute">&sect;4.7.14</a></td>
                           <td>49.0</td>
                           <td>5.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Deprecated</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.15" title="4.7.15.&nbsp;The Deprecated Attribute">&sect;4.7.15</a></td>
                           <td>45.3</td>
                           <td>1.1</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations Attribute">&sect;4.7.16</a></td>
                           <td>49.0</td>
                           <td>5.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeInvisibleAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.17" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations Attribute">&sect;4.7.17</a></td>
                           <td>49.0</td>
                           <td>5.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleParameterAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.18" title="4.7.18.&nbsp;The RuntimeVisibleParameterAnnotations Attribute">&sect;4.7.18</a></td>
                           <td>49.0</td>
                           <td>5.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeInvisibleParameterAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.19" title="4.7.19.&nbsp;The RuntimeInvisibleParameterAnnotations Attribute">&sect;4.7.19</a></td>
                           <td>49.0</td>
                           <td>5.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleTypeAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.20" title="4.7.20.&nbsp;The RuntimeVisibleTypeAnnotations Attribute">&sect;4.7.20</a></td>
                           <td>52.0</td>
                           <td>8</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeInvisibleTypeAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.21" title="4.7.21.&nbsp;The RuntimeInvisibleTypeAnnotations Attribute">&sect;4.7.21</a></td>
                           <td>52.0</td>
                           <td>8</td>
                        </tr>
                        <tr>
                           <td><code class="literal">AnnotationDefault</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.22" title="4.7.22.&nbsp;The AnnotationDefault Attribute">&sect;4.7.22</a></td>
                           <td>49.0</td>
                           <td>5.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">BootstrapMethods</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.23" title="4.7.23.&nbsp;The BootstrapMethods Attribute">&sect;4.7.23</a></td>
                           <td>51.0</td>
                           <td>7</td>
                        </tr>
                        <tr>
                           <td><code class="literal">MethodParameters</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.24" title="4.7.24.&nbsp;The MethodParameters Attribute">&sect;4.7.24</a></td>
                           <td>52.0</td>
                           <td>8</td>
                        </tr>
                     </tbody>
                  </table>
               </div>
            </div><br class="table-break"><div class="table"><a name="jvms-4.7-310"></a><p class="title"><b>Table&nbsp;4.7-B.&nbsp;Predefined <code class="literal">class</code> file attributes (by <code class="literal">class</code> file version)</b></p>
               <div class="table-contents">
                  <table summary="Predefined class file attributes (by class file version)" border="1">
                     <colgroup>
                        <col>
                        <col>
                        <col>
                        <col>
                     </colgroup>
                     <thead>
                        <tr>
                           <th>Attribute</th>
                           <th><code class="literal">class</code> file
                           </th>
                           <th>Java SE</th>
                           <th>Section</th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td><code class="literal">ConstantValue</code></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.2" title="4.7.2.&nbsp;The ConstantValue Attribute">&sect;4.7.2</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">Code</code></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">Exceptions</code></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.5" title="4.7.5.&nbsp;The Exceptions Attribute">&sect;4.7.5</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">SourceFile</code></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.10" title="4.7.10.&nbsp;The SourceFile Attribute">&sect;4.7.10</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">LineNumberTable</code></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.12" title="4.7.12.&nbsp;The LineNumberTable Attribute">&sect;4.7.12</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">LocalVariableTable</code></td>
                           <td>45.3</td>
                           <td>1.0.2</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.13" title="4.7.13.&nbsp;The LocalVariableTable Attribute">&sect;4.7.13</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">InnerClasses</code></td>
                           <td>45.3</td>
                           <td>1.1</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.6" title="4.7.6.&nbsp;The InnerClasses Attribute">&sect;4.7.6</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">Synthetic</code></td>
                           <td>45.3</td>
                           <td>1.1</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.8" title="4.7.8.&nbsp;The Synthetic Attribute">&sect;4.7.8</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">Deprecated</code></td>
                           <td>45.3</td>
                           <td>1.1</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.15" title="4.7.15.&nbsp;The Deprecated Attribute">&sect;4.7.15</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">EnclosingMethod</code></td>
                           <td>49.0</td>
                           <td>5.0</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.7" title="4.7.7.&nbsp;The EnclosingMethod Attribute">&sect;4.7.7</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">Signature</code></td>
                           <td>49.0</td>
                           <td>5.0</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.9" title="4.7.9.&nbsp;The Signature Attribute">&sect;4.7.9</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">SourceDebugExtension</code></td>
                           <td>49.0</td>
                           <td>5.0</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.11" title="4.7.11.&nbsp;The SourceDebugExtension Attribute">&sect;4.7.11</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">LocalVariableTypeTable</code></td>
                           <td>49.0</td>
                           <td>5.0</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.14" title="4.7.14.&nbsp;The LocalVariableTypeTable Attribute">&sect;4.7.14</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleAnnotations</code></td>
                           <td>49.0</td>
                           <td>5.0</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations Attribute">&sect;4.7.16</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeInvisibleAnnotations</code></td>
                           <td>49.0</td>
                           <td>5.0</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.17" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations Attribute">&sect;4.7.17</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleParameterAnnotations</code></td>
                           <td>49.0</td>
                           <td>5.0</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.18" title="4.7.18.&nbsp;The RuntimeVisibleParameterAnnotations Attribute">&sect;4.7.18</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeInvisibleParameterAnnotations</code></td>
                           <td>49.0</td>
                           <td>5.0</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.19" title="4.7.19.&nbsp;The RuntimeInvisibleParameterAnnotations Attribute">&sect;4.7.19</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">AnnotationDefault</code></td>
                           <td>49.0</td>
                           <td>5.0</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.22" title="4.7.22.&nbsp;The AnnotationDefault Attribute">&sect;4.7.22</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">StackMapTable</code></td>
                           <td>50.0</td>
                           <td>6</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.4" title="4.7.4.&nbsp;The StackMapTable Attribute">&sect;4.7.4</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">BootstrapMethods</code></td>
                           <td>51.0</td>
                           <td>7</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.23" title="4.7.23.&nbsp;The BootstrapMethods Attribute">&sect;4.7.23</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleTypeAnnotations</code></td>
                           <td>52.0</td>
                           <td>8</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.20" title="4.7.20.&nbsp;The RuntimeVisibleTypeAnnotations Attribute">&sect;4.7.20</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeInvisibleTypeAnnotations</code></td>
                           <td>52.0</td>
                           <td>8</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.21" title="4.7.21.&nbsp;The RuntimeInvisibleTypeAnnotations Attribute">&sect;4.7.21</a></td>
                        </tr>
                        <tr>
                           <td><code class="literal">MethodParameters</code></td>
                           <td>52.0</td>
                           <td>8</td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.24" title="4.7.24.&nbsp;The MethodParameters Attribute">&sect;4.7.24</a></td>
                        </tr>
                     </tbody>
                  </table>
               </div>
            </div><br class="table-break"><div class="table"><a name="jvms-4.7-320"></a><p class="title"><b>Table&nbsp;4.7-C.&nbsp;Predefined <code class="literal">class</code> file attributes (by location)</b></p>
               <div class="table-contents">
                  <table summary="Predefined class file attributes (by location)" border="1">
                     <colgroup>
                        <col>
                        <col>
                        <col>
                     </colgroup>
                     <thead>
                        <tr>
                           <th>Attribute</th>
                           <th>Location</th>
                           <th><code class="literal">class</code> file
                           </th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td><code class="literal">SourceFile</code></td>
                           <td><code class="literal">ClassFile</code></td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">InnerClasses</code></td>
                           <td><code class="literal">ClassFile</code></td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">EnclosingMethod</code></td>
                           <td><code class="literal">ClassFile</code></td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">SourceDebugExtension</code></td>
                           <td><code class="literal">ClassFile</code></td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">BootstrapMethods</code></td>
                           <td><code class="literal">ClassFile</code></td>
                           <td>51.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">ConstantValue</code></td>
                           <td><code class="literal">field_info</code></td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Code</code></td>
                           <td><code class="literal">method_info</code></td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Exceptions</code></td>
                           <td><code class="literal">method_info</code></td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleParameterAnnotations</code>, <code class="literal">RuntimeInvisibleParameterAnnotations</code></td>
                           <td><code class="literal">method_info</code></td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">AnnotationDefault</code></td>
                           <td><code class="literal">method_info</code></td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">MethodParameters</code></td>
                           <td><code class="literal">method_info</code></td>
                           <td>52.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Synthetic</code></td>
                           <td><code class="literal">ClassFile</code>, <code class="literal">field_info</code>, <code class="literal">method_info</code></td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Deprecated</code></td>
                           <td><code class="literal">ClassFile</code>, <code class="literal">field_info</code>, <code class="literal">method_info</code></td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Signature</code></td>
                           <td><code class="literal">ClassFile</code>, <code class="literal">field_info</code>, <code class="literal">method_info</code></td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleAnnotations</code>, <code class="literal">RuntimeInvisibleAnnotations</code></td>
                           <td><code class="literal">ClassFile</code>, <code class="literal">field_info</code>, <code class="literal">method_info</code></td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">LineNumberTable</code></td>
                           <td><code class="literal">Code</code></td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">LocalVariableTable</code></td>
                           <td><code class="literal">Code</code></td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">LocalVariableTypeTable</code></td>
                           <td><code class="literal">Code</code></td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">StackMapTable</code></td>
                           <td><code class="literal">Code</code></td>
                           <td>50.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleTypeAnnotations</code>, <code class="literal">RuntimeInvisibleTypeAnnotations</code></td>
                           <td><code class="literal">ClassFile</code>, <code class="literal">field_info</code>, <code class="literal">method_info</code>, <code class="literal">Code</code></td>
                           <td>52.0</td>
                        </tr>
                     </tbody>
                  </table>
               </div>
            </div><br class="table-break"><div class="section" title="4.7.1.&nbsp;Defining and Naming New Attributes">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.1"></a>4.7.1.&nbsp;Defining and Naming New Attributes
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.1-100"></a>Compilers are permitted to define
                  and emit <code class="literal">class</code> files containing new attributes in the <code class="literal">attributes</code>
                  tables of <code class="literal">class</code> file structures, <code class="literal">field_info</code> structures,
                  <code class="literal">method_info</code> structures, and <code class="literal">Code</code> attributes
                  (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). Java Virtual Machine implementations are permitted to
                  recognize and use new attributes found in these <code class="literal">attributes</code>
                  tables. However, any attribute not defined as part of the <code class="literal">class</code> file
                  specification must not affect the semantics of  the <code class="literal">class</code> file. Java Virtual Machine implementations are required to
                  silently ignore attributes they do not recognize.
               </p>
               <p class="norm"><a name="jvms-4.7.1-110"></a>For instance, defining a new
                  attribute to support vendor-specific debugging is permitted. Because
                  Java Virtual Machine implementations are required to ignore attributes they do not
                  recognize, <code class="literal">class</code> files intended for that particular Java Virtual Machine
                  implementation will be usable by other implementations even if those
                  implementations cannot make use of the additional debugging
                  information that the <code class="literal">class</code> files contain.
               </p>
               <p class="norm"><a name="jvms-4.7.1-120"></a>Java Virtual Machine implementations are
                  specifically prohibited from throwing an exception or otherwise
                  refusing to use <code class="literal">class</code> files simply because of the presence of some
                  new attribute. Of course, tools operating on <code class="literal">class</code> files may not run
                  correctly if given <code class="literal">class</code> files that do not contain all the
                  attributes they require.
               </p>
               <p class="norm"><a name="jvms-4.7.1-130"></a>Two attributes that are
                  intended to be distinct, but that happen to use the same attribute
                  name and are of the same length, will conflict on implementations that
                  recognize either attribute. Attributes defined other than in this
                  specification must have names chosen according to the package naming
                  convention described in <em class="citetitle">The Java Language Specification, Java SE 8 Edition</em> (JLS &sect;6.1).
               </p>
               <p class="norm"><a name="jvms-4.7.1-140"></a>Future versions of this
                  specification may define additional attributes.
               </p>
            </div>
            <div class="section" title="4.7.2.&nbsp;The ConstantValue Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.2"></a>4.7.2.&nbsp;The <code class="literal">ConstantValue</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.2-100"></a>The <code class="literal">ConstantValue</code> attribute is a
                  fixed-length attribute in the <code class="literal">attributes</code> table of a <code class="literal">field_info</code>
                  structure (<a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>). A <code class="literal">ConstantValue</code> attribute
                  represents the value of a constant expression
                  (JLS &sect;15.28), and is used as follows:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.2-100-A"></a>If the <code class="literal">ACC_STATIC</code>
                                 flag in the <code class="literal">access_flags</code> item of the <code class="literal">field_info</code> structure is
                                 set, then the  field represented by the
                                 <code class="literal">field_info</code> structure is assigned the value represented by its
                                 <code class="literal">ConstantValue</code> attribute as part of the initialization of the
                                 class or interface declaring the  field
                                 (<a class="xref" href="jvms-5.html#jvms-5.5" title="5.5.&nbsp;Initialization">&sect;5.5</a>). This occurs prior to the
                                 invocation of the class or interface initialization method of
                                 that class or interface (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.2-100-B"></a>Otherwise, the Java Virtual Machine
                                 must silently ignore the attribute.
                        </p>
                     </li>
                  </ul>
               </div>
               <p class="norm"><a name="jvms-4.7.2-110"></a>There may be at most one
                  <code class="literal">ConstantValue</code> attribute in the <code class="literal">attributes</code> table of a <code class="literal">field_info</code>
                  structure.
               </p>
               <p class="norm"><a name="jvms-4.7.2-200"></a>The <code class="literal">ConstantValue</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.2-210"></a><pre class="screen">
ConstantValue_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 constantvalue_index;
}
</pre><p class="norm"><a name="jvms-4.7.2-300"></a>The items of
                  the <code class="literal">ConstantValue_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.2-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">ConstantValue</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.2-300-B"></a>The value of
                                 the <code class="literal">attribute_length</code> item of a
                                 <code class="literal">ConstantValue_attribute</code> structure must be
                                 two.
                        </p>
                     </dd>
                     <dt><span class="term">constantvalue_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.2-300-C"></a>The value of the
                                 <code class="literal">constantvalue_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index gives the constant value represented by this
                                 attribute. The <code class="literal">constant_pool</code> entry must be of a type
                                 appropriate to the field, as specified in
                                 <a class="xref" href="jvms-4.html#jvms-4.7.2-300-C.1" title="Table&nbsp;4.7.2-A.&nbsp;Constant value attribute types">Table&nbsp;4.7.2-A</a>.
                        </p>
                        <div class="table"><a name="jvms-4.7.2-300-C.1"></a><p class="title"><b>Table&nbsp;4.7.2-A.&nbsp;Constant value attribute types</b></p>
                           <div class="table-contents">
                              <table summary="Constant value attribute types" border="1">
                                 <colgroup>
                                    <col>
                                    <col>
                                 </colgroup>
                                 <thead>
                                    <tr>
                                       <th>Field Type</th>
                                       <th>Entry Type</th>
                                    </tr>
                                 </thead>
                                 <tbody>
                                    <tr>
                                       <td><code class="literal">long</code></td>
                                       <td><code class="literal">CONSTANT_Long</code></td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">float</code></td>
                                       <td><code class="literal">CONSTANT_Float</code></td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">double</code></td>
                                       <td><code class="literal">CONSTANT_Double</code></td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">int</code>, <code class="literal">short</code>, <code class="literal">char</code>, <code class="literal">byte</code>, <code class="literal">boolean</code></td>
                                       <td><code class="literal">CONSTANT_Integer</code></td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">String</code></td>
                                       <td><code class="literal">CONSTANT_String</code></td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"></dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.3.&nbsp;The Code Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.3"></a>4.7.3.&nbsp;The <code class="literal">Code</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.3-100"></a>The <code class="literal">Code</code> attribute is a
                  variable-length attribute in the <code class="literal">attributes</code> table of a <code class="literal">method_info</code>
                  structure (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). A <code class="literal">Code</code> attribute contains
                  the Java Virtual Machine instructions and auxiliary information for a method,
                  including an instance initialization method or a class or interface
                  initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>).
               </p>
               <p class="norm"><a name="jvms-4.7.3-110"></a>If the method is either
                  <code class="literal">native</code> or <code class="literal">abstract</code>, its <code class="literal">method_info</code> structure must not have a
                  <code class="literal">Code</code> attribute in its <code class="literal">attributes</code> table. Otherwise, its
                  <code class="literal">method_info</code> structure must have exactly one <code class="literal">Code</code> attribute in its
                  <code class="literal">attributes</code> table.
               </p>
               <p class="norm"><a name="jvms-4.7.3-200"></a>The <code class="literal">Code</code> attribute has the
                  following format:
               </p><a name="jvms-4.7.3-210"></a><pre class="screen">
Code_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 max_stack;
    u2 max_locals;
    u4 code_length;
    u1 code[code_length];
    u2 exception_table_length;
    {   u2 start_pc;
        u2 end_pc;
        u2 handler_pc;
        u2 catch_type;
    } exception_table[exception_table_length];
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
</pre><p class="norm"><a name="jvms-4.7.3-300"></a>The items of the
                  <code class="literal">Code_attribute</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">Code</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">max_stack</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-C"></a>The value of the
                                 <code class="literal">max_stack</code> item gives the maximum depth of the
                                  operand stack of this method (<a class="xref" href="jvms-2.html#jvms-2.6.2" title="2.6.2.&nbsp;Operand Stacks">&sect;2.6.2</a>) at
                                  any point during execution of the method.
                        </p>
                     </dd>
                     <dt><span class="term">max_locals</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-D"></a>The value of the
                                 <code class="literal">max_locals</code> item gives the number of local
                                 variables in the local variable array allocated upon invocation
                                 of this method (<a class="xref" href="jvms-2.html#jvms-2.6.1" title="2.6.1.&nbsp;Local Variables">&sect;2.6.1</a>), including the
                                 local variables used to pass parameters to the method on its
                                 invocation.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-D.1"></a>The greatest local
                                 variable index for a value of type <code class="literal">long</code> or <code class="literal">double</code> is
                                 <code class="literal">max_locals - 2</code>. The greatest local variable
                                 index for a value of any other type is <code class="literal">max_locals -
                                    1</code>.
                        </p>
                     </dd>
                     <dt><span class="term">code_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-E"></a>The value of the
                           	<code class="literal">code_length</code> item gives the number of bytes
                           	in the <code class="literal">code</code> array for this method.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-E.1"></a>The
                           	value of <code class="literal">code_length</code> must be greater than
                           	zero (as the <code class="literal">code</code> array must not be empty) and less than
                           	65536.
                        </p>
                     </dd>
                     <dt><span class="term">code[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-F"></a>The <code class="literal">code</code> array
                           	gives the actual bytes of Java Virtual Machine code that implement the
                           	method.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-F.1"></a>When
                                 the <code class="literal">code</code> array is read into memory on a
                                 byte-addressable machine, if the first byte of the array is
                                 aligned on a 4-byte boundary, the <span class="emphasis"><em>tableswitch</em></span> and
                                 <span class="emphasis"><em>lookupswitch</em></span> 32-bit offsets will be 4-byte aligned. (Refer to
                                 the descriptions of those instructions for more information on
                                 the consequences of <code class="literal">code</code> array
                                 alignment.)
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-F.2"></a>The detailed
                                 constraints on the contents of the <code class="literal">code</code> array
                                 are extensive and are given in a separate section
                                 (<a class="xref" href="jvms-4.html#jvms-4.9" title="4.9.&nbsp;Constraints on Java Virtual Machine Code">&sect;4.9</a>).
                        </p>
                     </dd>
                     <dt><span class="term">exception_table_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-G"></a>The value of the
                                 <code class="literal">exception_table_length</code> item gives the number
                                 of entries in the <code class="literal">exception_table</code>
                                 table.
                        </p>
                     </dd>
                     <dt><span class="term">exception_table[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-H"></a>Each entry in the
                                 <code class="literal">exception_table</code> array describes one exception
                                 handler in the <code class="literal">code</code> array. The order of the handlers in
                                 the <code class="literal">exception_table</code> array is significant
                                 (<a class="xref" href="jvms-2.html#jvms-2.10" title="2.10.&nbsp;Exceptions">&sect;2.10</a>).
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-H.1"></a>Each
                                 <code class="literal">exception_table</code> entry contains the following
                                 four items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">start_pc, end_pc</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-A"></a>The values
                                    	    of the two items <code class="literal">start_pc</code>
                                    	    and <code class="literal">end_pc</code> indicate the ranges in the
                                    	    <code class="literal">code</code> array at which the exception handler is active. The
                                    	    value of <code class="literal">start_pc</code> must be a valid index
                                    	    into the <code class="literal">code</code> array of the opcode of an instruction. The
                                    	    value of <code class="literal">end_pc</code> either must be a valid
                                    	    index into the <code class="literal">code</code> array of the opcode of an
                                    	    instruction or must be equal
                                    	    to <code class="literal">code_length</code>, the length of the
                                    	    <code class="literal">code</code> array. The value of <code class="literal">start_pc</code>
                                    	    must be less than the value
                                    	    of <code class="literal">end_pc</code>.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-A.1"></a>The
                                    	    <code class="literal">start_pc</code> is inclusive
                                    	    and <code class="literal">end_pc</code> is exclusive; that is, the
                                    	    exception handler must be active while the program counter
                                    	    is within the interval
                                    	    [<code class="literal">start_pc</code>, <code class="literal">end_pc</code>).
                                 </p>
                                 <p class="note">The fact that <code class="literal">end_pc</code>
                                    	    is exclusive is a historical mistake in the design of the
                                    	    Java Virtual Machine: if the Java Virtual Machine code for a method is exactly 65535
                                    	    bytes long and ends with an instruction that is 1 byte
                                    	    long, then that instruction cannot be protected by an
                                    	    exception handler. A compiler writer can work around this
                                    	    bug by limiting the maximum size of the generated Java Virtual Machine
                                    	    code for any method, instance initialization method, or
                                    	    static initializer (the size of any code array) to 65534
                                    	    bytes.
                                 </p>
                              </dd>
                              <dt><span class="term">handler_pc</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-B"></a>The value
                                    	    of the <code class="literal">handler_pc</code> item indicates the
                                    	    start of the exception handler. The value of the item must
                                    	    be a valid index into the <code class="literal">code</code> array and must be the
                                    	    index of the opcode of an instruction.
                                 </p>
                              </dd>
                              <dt><span class="term">catch_type</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-C"></a>If the
                                    	      value of the <code class="literal">catch_type</code> item is
                                    	      nonzero, it must be a valid index into the
                                    	      <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at that
                                    	      index must be a <code class="literal">CONSTANT_Class_info</code> structure
                                    	      (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) representing a class of
                                    	      exceptions that this exception handler is designated to
                                    	      catch. The exception handler will be called only if the
                                    	      thrown exception is an instance of the given class or
                                    	      one of its subclasses.
                                 </p>
                                 <p class="note">The verifier checks that the class is
                                    	      <code class="literal">Throwable</code> or a subclass of <code class="literal">Throwable</code>
                                    	      (<a class="xref" href="jvms-4.html#jvms-4.9.2" title="4.9.2.&nbsp;Structural Constraints">&sect;4.9.2</a>).
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-C.1"></a>If the
                                    	      value of the <code class="literal">catch_type</code> item is zero,
                                    	      this exception handler is called for all
                                    	      exceptions.
                                 </p>
                                 <p class="note">This is used to implement <code class="literal">finally</code>
                                    	      (<a class="xref" href="jvms-3.html#jvms-3.13" title="3.13.&nbsp;Compiling finally">&sect;3.13</a>).
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                     <dt><span class="term">attributes_count</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-I"></a>The value of the
                                 <code class="literal">attributes_count</code> item indicates the number of
                                 attributes of the <code class="literal">Code</code> attribute.
                        </p>
                     </dd>
                     <dt><span class="term">attributes[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-J"></a>Each value of the
                           	<code class="literal">attributes</code> table must be an <code class="literal">attribute_info</code> structure
                           	(<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>).
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-J.1"></a>A <code class="literal">Code</code> attribute
                           	can have any number of optional attributes associated with
                           	it.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-J.2"></a>
                           	The attributes defined by this specification as appearing in
                           	the <code class="literal">attributes</code> table of a <code class="literal">Code</code> attribute are listed in
                           	<a class="xref" href="jvms-4.html#jvms-4.7-320" title="Table&nbsp;4.7-C.&nbsp;Predefined class file attributes (by location)">Table&nbsp;4.7-C</a>.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-J.3"></a>
                           	The rules concerning attributes defined to appear in the
                                   <code class="literal">attributes</code> table of a <code class="literal">Code</code> attribute are given in
                                   <a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-J.4"></a>
                           	The rules concerning non-predefined attributes in the
                                   <code class="literal">attributes</code> table of a <code class="literal">Code</code> attribute are given in
                                   <a class="xref" href="jvms-4.html#jvms-4.7.1" title="4.7.1.&nbsp;Defining and Naming New Attributes">&sect;4.7.1</a>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.4.&nbsp;The StackMapTable Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.4"></a>4.7.4.&nbsp;The <code class="literal">StackMapTable</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.4-100"></a>The <code class="literal">StackMapTable</code>
                  attribute is a variable-length attribute in the <code class="literal">attributes</code> table of
                  a <code class="literal">Code</code> attribute (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). A <code class="literal">StackMapTable</code>
                  attribute is used during the process of verification by type checking
                  (<a class="xref" href="jvms-4.html#jvms-4.10.1" title="4.10.1.&nbsp;Verification by Type Checking">&sect;4.10.1</a>).
               </p>
               <p class="norm"><a name="jvms-4.7.4-110"></a>There may be at most one
                  <code class="literal">StackMapTable</code> attribute in the <code class="literal">attributes</code> table of a <code class="literal">Code</code>
                  attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.4-120"></a>In a <code class="literal">class</code> file whose
                  version number is 50.0 or above, if a method's <code class="literal">Code</code> attribute does
                  not have a <code class="literal">StackMapTable</code> attribute, it has an
                  <span class="emphasis"><em>implicit stack map attribute</em></span>
                  (<a class="xref" href="jvms-4.html#jvms-4.10.1" title="4.10.1.&nbsp;Verification by Type Checking">&sect;4.10.1</a>). This implicit stack map attribute is
                  equivalent to a <code class="literal">StackMapTable</code> attribute with
                  <code class="literal">number_of_entries</code> equal to zero.
               </p>
               <p class="norm"><a name="jvms-4.7.4-200"></a>The <code class="literal">StackMapTable</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.4-210"></a><pre class="screen">
StackMapTable_attribute {
    u2              attribute_name_index;
    u4              attribute_length;
    u2              number_of_entries;
    stack_map_frame entries[number_of_entries];
}
</pre><p class="norm"><a name="jvms-4.7.4-300"></a>The items of the
                  <code class="literal">StackMapTable_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.4-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">StackMapTable</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.4-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">number_of_entries</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.4-300-C"></a>The value of the
                                 <code class="literal">number_of_entries</code> item gives the number of
                                 <code class="literal">stack_map_frame</code> entries in
                                 the <code class="literal">entries</code> table.
                        </p>
                     </dd>
                     <dt><span class="term">entries[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.4-300-D"></a>Each entry in
                                 the <code class="literal">entries</code> table describes one stack map
                                 frame of the method. The order of the stack map frames in
                                 the <code class="literal">entries</code> table is significant.
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="norm"><a name="jvms-4.7.4-400"></a>A <span class="emphasis"><em>stack map frame</em></span>
                  specifies (either explicitly or implicitly) the bytecode offset at
                  which it applies, and the verification types of local variables and
                  operand stack entries for that offset.
               </p>
               <p class="norm"><a name="jvms-4.7.4-410"></a>Each stack map frame
                  described in the <code class="literal">entries</code> table relies on the
                  previous frame for some of its semantics. The first stack map frame of
                  a method is implicit, and computed from the method descriptor by the
                  type checker (<a class="xref" href="jvms-4.html#jvms-4.10.1.6" title="4.10.1.6.&nbsp;Type Checking Methods with Code">&sect;4.10.1.6</a>). The
                  <code class="literal">stack_map_frame</code> structure
                  at <code class="literal">entries[0]</code> therefore describes the second stack
                  map frame of the method.
               </p>
               <p class="norm"><a name="jvms-4.7.4-420"></a>
                  The <span class="emphasis"><em>bytecode offset</em></span> at which a stack map frame
                  applies is calculated by taking the value <code class="literal">offset_delta</code> specified in
                  the frame (either explicitly or implicitly), and
                  adding <code class="literal">offset_delta + 1</code> to the bytecode offset of
                  the previous frame, unless the previous frame is the initial frame of
                  the method. In that case, the bytecode offset at which the stack map
                  frame applies is the value <code class="literal">offset_delta</code> specified in the
                  frame.
               </p>
               <p class="note">By using an offset delta rather than storing the
                  actual bytecode offset, we ensure, by definition, that stack map
                  frames are in the correctly sorted order. Furthermore, by consistently
                  using the formula <code class="literal">offset_delta + 1</code> for all explicit
                  frames (as opposed to the implicit first frame), we guarantee the
                  absence of duplicates.
               </p>
               <p class="norm"><a name="jvms-4.7.4-430"></a>We say that an instruction
                  in the bytecode has a <span class="emphasis"><em>corresponding stack map
                        frame</em></span> if the instruction starts at offset <span class="emphasis"><em>i</em></span> in the
                  <code class="literal">code</code> array of a <code class="literal">Code</code> attribute, and the <code class="literal">Code</code> attribute has a
                  <code class="literal">StackMapTable</code> attribute whose <code class="literal">entries</code> array
                  contains a stack map frame that applies at bytecode offset
                  <span class="emphasis"><em>i</em></span>.
               </p>
               <p class="norm"><a name="jvms-4.7.4-500"></a>A <span class="emphasis"><em>verification
                        type</em></span> specifies the type of either one or two locations,
                  where a <span class="emphasis"><em>location</em></span> is either a single local
                  variable or a single operand stack entry. A verification type is
                  represented by a discriminated union, <code class="literal">verification_type_info</code>, that
                  consists of a one-byte tag, indicating which item of the union is in
                  use, followed by zero or more bytes, giving more information about the
                  tag.
               </p><a name="jvms-4.7.4-510"></a><pre class="screen">
union verification_type_info {
    Top_variable_info;
    Integer_variable_info;
    Float_variable_info;
    Long_variable_info;
    Double_variable_info;
    Null_variable_info;
    UninitializedThis_variable_info;
    Object_variable_info;
    Uninitialized_variable_info;
}
</pre><p class="norm"><a name="jvms-4.7.4-520"></a>A verification type that
                  specifies one location in the local variable array or in the operand
                  stack is represented by the following items of the
                  <code class="literal">verification_type_info</code> union:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-520-A"></a>The
                                 <code class="literal">Top_variable_info</code> item indicates that the local variable has
                                 the verification type <code class="literal">top</code>.
                        </p><a name="jvms-4.7.4-520-A.1"></a><pre class="screen">
Top_variable_info {
    u1 tag = ITEM_Top; /* 0 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-520-B"></a>The
                                 <code class="literal">Integer_variable_info</code> item indicates that the location has the
                                 verification type <code class="literal">int</code>.
                        </p><a name="jvms-4.7.4-520-B.1"></a><pre class="screen">
Integer_variable_info {
    u1 tag = ITEM_Integer; /* 1 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-520-C"></a>The
                                 <code class="literal">Float_variable_info</code> item indicates that the location has the
                                 verification type <code class="literal">float</code>.
                        </p><a name="jvms-4.7.4-520-C.1"></a><pre class="screen">
Float_variable_info {
    u1 tag = ITEM_Float; /* 2 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-520-D"></a>The
                                 <code class="literal">Null_variable_info</code> type indicates that the location has the
                                 verification type <code class="literal">null</code>.
                        </p><a name="jvms-4.7.4-520-D.1"></a><pre class="screen">
Null_variable_info {
    u1 tag = ITEM_Null; /* 5 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-520-E"></a>The
                                 <code class="literal">UninitializedThis_variable_info</code> item indicates that the
                                 location has the verification type <code class="literal">uninitializedThis</code>.
                        </p><a name="jvms-4.7.4-520-E.1"></a><pre class="screen">
UninitializedThis_variable_info {
    u1 tag = ITEM_UninitializedThis; /* 6 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-520-F"></a>The
                                 <code class="literal">Object_variable_info</code> item indicates that the
                                 location  has the
                                 verification type which is the class represented by the
                                 <code class="literal">CONSTANT_Class_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>)
                                 found in the <code class="literal">constant_pool</code> table at the index given by
                                 <code class="literal">cpool_index</code>.
                        </p><a name="jvms-4.7.4-520-F.1"></a><pre class="screen">
Object_variable_info {
    u1 tag = ITEM_Object; /* 7 */
    u2 cpool_index;
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-520-G"></a>The
                                 <code class="literal">Uninitialized_variable_info</code> item indicates that the location
                                 has the verification type <code class="literal">uninitialized(Offset)</code>.
                                 The <code class="literal">Offset</code> item indicates the offset, in the
                                 <code class="literal">code</code> array of the <code class="literal">Code</code> attribute that contains this
                                 <code class="literal">StackMapTable</code> attribute, of the <span class="emphasis"><em>new</em></span> instruction
                                 (<a class="xref" href="jvms-6.html#jvms-6.5.new" title="new">&sect;<span class="emphasis"><em>new</em></span></a>) that created the object being
                                 stored in the location.
                        </p><a name="jvms-4.7.4-520-G.1"></a><pre class="screen">
Uninitialized_variable_info {
    u1 tag = ITEM_Uninitialized; /* 8 */
    u2 offset;
}
    </pre></li>
                  </ul>
               </div>
               <p class="norm"><a name="jvms-4.7.4-530"></a>A verification type that
                  specifies two locations in the local variable array or in the operand
                  stack is represented by the following items of the
                  <code class="literal">verification_type_info</code> union:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-530-A"></a>The
                                 <code class="literal">Long_variable_info</code> item indicates that the first of two
                                 locations has the verification type <code class="literal">long</code>.
                        </p><a name="jvms-4.7.4-530-A.1"></a><pre class="screen">
Long_variable_info {
    u1 tag = ITEM_Long; /* 4 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-530-B"></a>The
                                 <code class="literal">Double_variable_info</code> item indicates that the first of two
                                 locations has the verification type <code class="literal">double</code>.
                        </p><a name="jvms-4.7.4-530-B.1"></a><pre class="screen">
Double_variable_info {
    u1 tag = ITEM_Double; /* 3 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-530-C"></a>The
                                 <code class="literal">Long_variable_info</code> and <code class="literal">Double_variable_info</code> items indicate
                                 the verification type of the second of two locations as
                                 follows:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-530-C-A"></a>If the first of
                                    	  the two locations is a local variable, then:
                                 </p>
                                 <div class="norm">
                                    <ul class="norm" type="square">
                                       <li class="listitem">
                                          <p class="norm"><a name="jvms-4.7.4-530-C-A-A"></a>It must
                                             	      not be the local variable with the highest index.
                                          </p>
                                       </li>
                                       <li class="listitem">
                                          <p class="norm"><a name="jvms-4.7.4-530-C-A-B"></a>The next
                                             	      higher numbered local variable has the verification type
                                             	      <code class="literal">top</code>.
                                          </p>
                                       </li>
                                    </ul>
                                 </div>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-530-C-B"></a>If the first of
                                    	  the two locations is an operand stack entry, then:
                                 </p>
                                 <div class="norm">
                                    <ul class="norm" type="square">
                                       <li class="listitem">
                                          <p class="norm"><a name="jvms-4.7.4-530-C-B-A"></a>It must
                                             	      not be the topmost location of the operand stack.
                                          </p>
                                       </li>
                                       <li class="listitem">
                                          <p class="norm"><a name="jvms-4.7.4-530-C-B-B"></a>The next
                                             	      location closer to the top of the operand stack has the
                                             	      verification type <code class="literal">top</code>.
                                          </p>
                                       </li>
                                    </ul>
                                 </div>
                              </li>
                           </ul>
                        </div>
                     </li>
                  </ul>
               </div>
               <p class="norm"><a name="jvms-4.7.4-600"></a>A stack map frame is
                  represented by a discriminated union,
                  <code class="literal">stack_map_frame</code>, which consists of a one-byte tag,
                  indicating which item of the union is in use, followed by zero or more
                  bytes, giving more information about the tag.
               </p><a name="jvms-4.7.4-610"></a><pre class="screen">
union stack_map_frame {
    same_frame;
    same_locals_1_stack_item_frame;
    same_locals_1_stack_item_frame_extended;
    chop_frame;
    same_frame_extended;
    append_frame;
    full_frame;
}
</pre><p class="norm"><a name="jvms-4.7.4-620"></a>The tag indicates
                  the <span class="emphasis"><em>frame type</em></span> of the stack map frame:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-620-A"></a>The frame type
                                 <code class="literal">same_frame</code> is represented by tags in the range [0-63]. This
                                 frame type indicates that the frame has exactly the same local
                                 variables as the previous frame and that the operand stack is
                                 empty. The <code class="literal">offset_delta</code> value for the frame is the value of
                                 the tag item, <code class="literal">frame_type</code>.
                        </p><a name="jvms-4.7.4-620-A.1"></a><pre class="screen">
same_frame {
    u1 frame_type = SAME; /* 0-63 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-620-B"></a>The frame type
                                 <code class="literal">same_locals_1_stack_item_frame</code> is represented by tags in the
                                 range [64, 127]. This frame type indicates that the frame has
                                 exactly the same local variables as the previous frame and that
                                 the operand stack has one entry. The <code class="literal">offset_delta</code> value for
                                 the frame is given by the formula <code class="literal">frame_type -
                                    64</code>. The verification type of the one stack entry
                                 appears after the frame type.
                        </p><a name="jvms-4.7.4-620-B.1"></a><pre class="screen">
same_locals_1_stack_item_frame {
    u1 frame_type = SAME_LOCALS_1_STACK_ITEM; /* 64-127 */
    verification_type_info stack[1];
}
</pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-620-C"></a>Tags in the range
                                 [128-246] are reserved for future use.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-620-D"></a>The frame type
                                 <code class="literal">same_locals_1_stack_item_frame_extended</code> is represented by the
                                 tag 247. This frame type indicates that the frame has exactly
                                 the same local variables as the previous frame and that the
                                 operand stack has one entry. The <code class="literal">offset_delta</code> value for the
                                 frame is given explicitly, unlike in the frame type
                                 <code class="literal">same_locals_1_stack_item_frame</code>. The verification type of the
                                 one stack entry appears after <code class="literal">offset_delta</code>.
                        </p><a name="jvms-4.7.4-620-D.1"></a><pre class="screen">
same_locals_1_stack_item_frame_extended {
    u1 frame_type = SAME_LOCALS_1_STACK_ITEM_EXTENDED; /* 247 */
    u2 offset_delta;
    verification_type_info stack[1];
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-620-E"></a>The frame type
                                 <code class="literal">chop_frame</code> is represented by tags in the range [248-250]. This
                                 frame type indicates that the frame has the same local variables
                                 as the previous frame except that the last <span class="emphasis"><em>k</em></span> local
                                 variables are absent, and that the operand stack is empty. The
                                 value of <span class="emphasis"><em>k</em></span> is given by the formula <code class="literal">251 -
                                    frame_type</code>. The <code class="literal">offset_delta</code> value for the frame is
                                 given explicitly.
                        </p><a name="jvms-4.7.4-620-E.1"></a><pre class="screen">
chop_frame {
    u1 frame_type = CHOP; /* 248-250 */
    u2 offset_delta;
}
    </pre><p class="norm"><a name="jvms-4.7.4-620-E.2"></a>
                                 Assume the verification types of local variables in the previous
                                 frame are given by <code class="literal">locals</code>, an array
                                 structured as in the <code class="literal">full_frame</code> frame type.
                                 If <code class="literal">locals[M-1]</code> in the previous frame
                                 represented local variable <span class="type">X</span> and <code class="literal">locals[M]</code>
                                 represented local variable <span class="type">Y</span>, then the effect of removing one
                                 local variable is that <code class="literal">locals[M-1]</code> in the new
                                 frame represents local variable <span class="type">X</span> and
                                 <code class="literal">locals[M]</code> is undefined.
                        </p>
                        <p class="norm-error"><a name="jvms-4.7.4-620-E.3"></a>
                                 It is an error if <span class="emphasis"><em>k</em></span> is larger than the number of local variables
                                 in <code class="literal">locals</code> for the previous frame, that is, if
                                 the number of local variables in the new frame would be less
                                 than zero.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-620-F"></a>The frame type
                               <code class="literal">same_frame_extended</code> is represented by the tag 251. This frame
                               type indicates that the frame has exactly the same local variables
                               as the previous frame and that the operand stack is empty. The
                               <code class="literal">offset_delta</code> value for the frame is given explicitly, unlike in
                               the frame type <code class="literal">same_frame</code>.
                        </p><a name="jvms-4.7.4-620-F.1"></a><pre class="screen">
same_frame_extended {
    u1 frame_type = SAME_FRAME_EXTENDED; /* 251 */
    u2 offset_delta;
}
   </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-620-G"></a>The frame type
                                 <code class="literal">append_frame</code> is represented by tags in the range
                                 [252-254]. This frame type indicates that the frame has the same
                                 locals as the previous frame except that <span class="emphasis"><em>k</em></span> additional
                                 locals are defined, and that the operand stack is empty. The
                                 value of <span class="emphasis"><em>k</em></span> is given by the formula <code class="literal">frame_type -
                                    251</code>. The <code class="literal">offset_delta</code> value for the frame is given
                                 explicitly.
                        </p><a name="jvms-4.7.4-620-G.1"></a><pre class="screen">
append_frame {
    u1 frame_type = APPEND; /* 252-254 */
    u2 offset_delta;
    verification_type_info locals[frame_type - 251];
}
    </pre><p class="norm"><a name="jvms-4.7.4-620-G.2"></a>The 0th entry in
                                 <code class="literal">locals</code> represents the verification type of
                                 the first additional local
                                 variable. If <code class="literal">locals[M]</code> represents local
                                 variable <code class="literal">N</code>, then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-620-G.2-A"></a><code class="literal">locals[M+1]</code>
                                    	  represents local variable <code class="literal">N+1</code>
                                    	  if <code class="literal">locals[M]</code> is one of
                                    	  <code class="literal">Top_variable_info</code>, <code class="literal">Integer_variable_info</code>,
                                    	  <code class="literal">Float_variable_info</code>, <code class="literal">Null_variable_info</code>,
                                    	  <code class="literal">UninitializedThis_variable_info</code>, <code class="literal">Object_variable_info</code>,
                                    	  or <code class="literal">Uninitialized_variable_info</code>; and
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-620-G.2-B"></a><code class="literal">locals[M+1]</code>
                                    	  represents local variable <code class="literal">N+2</code>
                                    	  if <code class="literal">locals[M]</code> is either
                                    	  <code class="literal">Long_variable_info</code> or <code class="literal">Double_variable_info</code>.
                                 </p>
                              </li>
                           </ul>
                        </div>
                        <p class="norm-error"><a name="jvms-4.7.4-620-G.3"></a>It
                                 is an error if, for any index <span class="emphasis"><em>i</em></span>,
                                 <code class="literal">locals[<span class="emphasis"><em>i</em></span>]</code> represents a local variable
                                 whose index is greater than the maximum number of local
                                 variables for the method.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-620-H"></a>The frame type
                               <code class="literal">full_frame</code> is represented by the tag 255. The <code class="literal">offset_delta</code>
                               value for the frame is given explicitly.
                        </p><a name="jvms-4.7.4-620-H.1"></a><pre class="screen">
full_frame {
    u1 frame_type = FULL_FRAME; /* 255 */
    u2 offset_delta;
    u2 number_of_locals;
    verification_type_info locals[number_of_locals];
    u2 number_of_stack_items;
    verification_type_info stack[number_of_stack_items];
}
    </pre><p class="norm"><a name="jvms-4.7.4-620-H.2"></a>The 0th entry in
                               <code class="literal">locals</code> represents the verification type of
                               local variable 0. If <code class="literal">locals[M]</code> represents local
                               variable <code class="literal">N</code>, then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-620-H.2-A"></a><code class="literal">locals[M+1]</code>
                                    	  represents local variable <code class="literal">N+1</code>
                                    	  if <code class="literal">locals[M]</code> is one of
                                    	  <code class="literal">Top_variable_info</code>, <code class="literal">Integer_variable_info</code>,
                                    	  <code class="literal">Float_variable_info</code>, <code class="literal">Null_variable_info</code>,
                                    	  <code class="literal">UninitializedThis_variable_info</code>, <code class="literal">Object_variable_info</code>,
                                    	  or <code class="literal">Uninitialized_variable_info</code>; and
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-620-H.2-B"></a><code class="literal">locals[M+1]</code>
                                    	  represents local variable <code class="literal">N+2</code>
                                    	  if <code class="literal">locals[M]</code> is either
                                    	  <code class="literal">Long_variable_info</code> or <code class="literal">Double_variable_info</code>.
                                 </p>
                              </li>
                           </ul>
                        </div>
                        <p class="norm-error"><a name="jvms-4.7.4-620-H.3"></a>It
                                 is an error if, for any index <span class="emphasis"><em>i</em></span>,
                                 <code class="literal">locals[<span class="emphasis"><em>i</em></span>]</code> represents a local variable
                                 whose index is greater than the maximum number of local
                                 variables for the method.
                        </p>
                        <p class="norm"><a name="jvms-4.7.4-620-H.4"></a>The 0th entry in
                                 <code class="literal">stack</code> represents the verification type of the
                                 bottom of the operand stack, and subsequent entries
                                 in <code class="literal">stack</code> represent the verification types of
                                 stack entries closer to the top of the operand stack. We refer
                                 to the bottom of the operand stack as stack entry 0, and to
                                 subsequent entries of the operand stack as stack entry 1, 2,
                                 etc. If <code class="literal">stack[M]</code> represents stack
                                 entry <code class="literal">N</code>, then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-620-H.4-A"></a>
                                    	  <code class="literal">stack[M+1]</code> represents stack
                                    	  entry <code class="literal">N+1</code> if
                                    	  <code class="literal">stack[M]</code> is one of <code class="literal">Top_variable_info</code>,
                                    	  <code class="literal">Integer_variable_info</code>, <code class="literal">Float_variable_info</code>,
                                    	  <code class="literal">Null_variable_info</code>, <code class="literal">UninitializedThis_variable_info</code>,
                                    	  <code class="literal">Object_variable_info</code>, or <code class="literal">Uninitialized_variable_info</code>;
                                    	  and
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-620-H.4-B"></a><code class="literal">stack[M+1]</code>
                                    	  represents stack entry <code class="literal">N+2</code>
                                    	  if <code class="literal">stack[M]</code> is either
                                    	  <code class="literal">Long_variable_info</code> or <code class="literal">Double_variable_info</code>.
                                 </p>
                              </li>
                           </ul>
                        </div>
                        <p class="norm-error"><a name="jvms-4.7.4-620-H.5"></a>It
                                 is an error if, for any index <span class="emphasis"><em>i</em></span>,
                                 <code class="literal">stack[<span class="emphasis"><em>i</em></span>]</code> represents a stack entry whose
                                 index is greater than the maximum operand stack size for the
                                 method.
                        </p>
                     </li>
                  </ul>
               </div>
            </div>
            <div class="section" title="4.7.5.&nbsp;The Exceptions Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.5"></a>4.7.5.&nbsp;The <code class="literal">Exceptions</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.5-100"></a>The <code class="literal">Exceptions</code> attribute
                  is a variable-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The <code class="literal">Exceptions</code>
                  attribute indicates which checked exceptions a method may throw.
               </p>
               <p class="norm"><a name="jvms-4.7.5-110"></a>There may be at most one
                  <code class="literal">Exceptions</code> attribute in the <code class="literal">attributes</code> table of a <code class="literal">method_info</code>
                  structure.
               </p>
               <p class="norm"><a name="jvms-4.7.5-200"></a>The <code class="literal">Exceptions</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.5-210"></a><pre class="screen">
Exceptions_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 number_of_exceptions;
    u2 exception_index_table[number_of_exceptions];
}
</pre><p class="norm"><a name="jvms-4.7.5-300"></a>The items of
                  the <code class="literal">Exceptions_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.5-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be the <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">Exceptions</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.5-300-B"></a>The value of
                                 the <code class="literal">attribute_length</code> item indicates the
                                 attribute length, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">number_of_exceptions</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.5-300-C"></a>The value of the
                                 <code class="literal">number_of_exceptions</code> item indicates the
                                 number of entries in
                                 the <code class="literal">exception_index_table</code>.
                        </p>
                     </dd>
                     <dt><span class="term">exception_index_table[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.5-300-D"></a>Each value in
                                 the <code class="literal">exception_index_table</code> array must be a
                                 valid index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                                 entry at that index must be a <code class="literal">CONSTANT_Class_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) representing a class type that
                                 this method is declared to throw.
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="note">A method should throw an exception only if at least
                  one of the following three criteria is met:
               </p>
               <div class="note">
                  <ul class="note" type="disc">
                     <li class="listitem">
                        <p class="note">The exception is an instance of <code class="literal">RuntimeException</code>
                               or one of its subclasses.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="note">The exception is an instance of <code class="literal">Error</code> or one
                               of its subclasses.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="note">The exception is an instance of one of the
                               exception classes specified in
                               the <code class="literal">exception_index_table</code> just described, or
                               one of their subclasses.
                        </p>
                     </li>
                  </ul>
               </div>
               <p class="note">These requirements are not enforced in the Java Virtual Machine;
                  they are enforced only at compile time.
               </p>
            </div>
            <div class="section" title="4.7.6.&nbsp;The InnerClasses Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.6"></a>4.7.6.&nbsp;The <code class="literal">InnerClasses</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.6-100"></a>The <code class="literal">InnerClasses</code> attribute
                  is a variable-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>).
               </p>
               <p class="norm"><a name="jvms-4.7.6-110"></a>If the constant pool of a class or
                  interface <span class="type">C</span> contains  at least one <code class="literal">CONSTANT_Class_info</code>
                  entry (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) which represents a class or
                  interface that is not a member of a package, then there must be
                  exactly one <code class="literal">InnerClasses</code> attribute in the <code class="literal">attributes</code> table of the
                  <code class="literal">ClassFile</code> structure for <span class="type">C</span>.
               </p>
               <p class="norm"><a name="jvms-4.7.6-200"></a>The <code class="literal">InnerClasses</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.6-210"></a><pre class="screen">
InnerClasses_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 number_of_classes;
    {   u2 inner_class_info_index;
        u2 outer_class_info_index;
        u2 inner_name_index;
        u2 inner_class_access_flags;
    } classes[number_of_classes];
}
</pre><p class="norm"><a name="jvms-4.7.6-300"></a>The items of
                  the <code class="literal">InnerClasses_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.6-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">InnerClasses</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.6-300-B"></a>The value of
                                 the <code class="literal">attribute_length</code> item indicates the
                                 length of the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">number_of_classes</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.6-300-C"></a>The value of the
                                 <code class="literal">number_of_classes</code> item indicates the number
                                 of entries in the <code class="literal">classes</code> array.
                        </p>
                     </dd>
                     <dt><span class="term">classes[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.6-300-D"></a>Every
                           	<code class="literal">CONSTANT_Class_info</code> entry in the <code class="literal">constant_pool</code> table which
                           	represents a class or interface <span class="type">C</span> that is not a package
                           	member must have exactly one corresponding entry in
                           	the <code class="literal">classes</code> array.
                        </p>
                        <p class="note">If a class or interface has members that are
                                   classes or interfaces, its <code class="literal">constant_pool</code> table (and hence
                                   its <code class="literal">InnerClasses</code> attribute) must refer to each such member
                                   (JLS &sect;13.1), even if that member is not otherwise mentioned by
                                   the class.
                        </p>
                        <p class="note">In addition, the <code class="literal">constant_pool</code>
                                   table of every nested class and nested interface must refer to
                                   its enclosing class, so altogether, every nested class and
                                   nested interface will have <code class="literal">InnerClasses</code> information for each
                                   enclosing class and for each of its own nested classes and
                                   interfaces.
                        </p>
                        <p class="norm"><a name="jvms-4.7.6-300-D.1"></a>Each entry in
                           	the <code class="literal">classes</code> array contains the following
                           	four items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">inner_class_info_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.1-A"></a>The value
                                    	    of the <code class="literal">inner_class_info_index</code> item must
                                    	    be a valid index into the <code class="literal">constant_pool</code> table. The
                                    	    <code class="literal">constant_pool</code> entry at that index must be a
                                    	    <code class="literal">CONSTANT_Class_info</code> structure representing <span class="type">C</span>. The
                                    	    remaining items in the <code class="literal">classes</code> array
                                    	    entry give information about <span class="type">C</span>.
                                 </p>
                              </dd>
                              <dt><span class="term">outer_class_info_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.1-B"></a>If <span class="type">C</span> is
                                    	    not a member of a class or an interface (that is, if <span class="type">C</span>
                                    	    is a top-level class or interface (JLS &sect;7.6) or a local
                                    	    class (JLS &sect;14.3) or an anonymous class (JLS &sect;15.9.5)),
                                    	    the value of the <code class="literal">outer_class_info_index</code>
                                    	    item must be zero.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.1-B.1"></a>Otherwise, the value of
                                    	    the <code class="literal">outer_class_info_index</code> item must be
                                    	    a valid index into the <code class="literal">constant_pool</code> table, and the
                                    	    entry at that index must be a <code class="literal">CONSTANT_Class_info</code>
                                    	    structure representing the class or interface of which <span class="type">C</span>
                                    	    is a member.
                                 </p>
                              </dd>
                              <dt><span class="term">inner_name_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.1-C"></a>If <span class="type">C</span> is
                                    	    anonymous (JLS &sect;15.9.5), the value of
                                    	    the <code class="literal">inner_name_index</code> item must be
                                    	    zero.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.1-C.1"></a>Otherwise, the value of
                                    	    the <code class="literal">inner_name_index</code> item must be a
                                    	    valid index into the <code class="literal">constant_pool</code> table, and the entry
                                    	    at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) that represents the
                                    	    original simple name of <span class="type">C</span>, as given in the source code
                                    	    from which this <code class="literal">class</code> file was compiled.
                                 </p>
                              </dd>
                              <dt><span class="term">inner_class_access_flags</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.1-D"></a>The value
                                    	    of the <code class="literal">inner_class_access_flags</code> item is
                                    	    a mask of flags used to denote access permissions to and
                                    	    properties of class or interface <span class="type">C</span> as declared in the
                                    	    source code from which this <code class="literal">class</code> file was compiled. It
                                    	    is used by a compiler to recover the original information
                                    	    when source code is not available. The flags are specified
                                    	    in <a class="xref" href="jvms-4.html#jvms-4.7.6-300-D.1-D.1" title="Table&nbsp;4.7.6-A.&nbsp;Nested class access and property flags">Table&nbsp;4.7.6-A</a>.
                                 </p>
                                 <div class="table"><a name="jvms-4.7.6-300-D.1-D.1"></a><p class="title"><b>Table&nbsp;4.7.6-A.&nbsp;Nested class access and property flags</b></p>
                                    <div class="table-contents">
                                       <table summary="Nested class access and property flags" border="1">
                                          <colgroup>
                                             <col>
                                             <col>
                                             <col>
                                          </colgroup>
                                          <thead>
                                             <tr>
                                                <th>Flag Name</th>
                                                <th>Value</th>
                                                <th>Interpretation</th>
                                             </tr>
                                          </thead>
                                          <tbody>
                                             <tr>
                                                <td><code class="literal">ACC_PUBLIC</code></td>
                                                <td>0x0001</td>
                                                <td>Marked or implicitly <code class="literal">public</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_PRIVATE</code></td>
                                                <td>0x0002</td>
                                                <td>Marked <code class="literal">private</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_PROTECTED</code></td>
                                                <td>0x0004</td>
                                                <td>Marked <code class="literal">protected</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_STATIC</code></td>
                                                <td>0x0008</td>
                                                <td>Marked or implicitly <code class="literal">static</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_FINAL</code></td>
                                                <td>0x0010</td>
                                                <td>Marked <code class="literal">final</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_INTERFACE</code></td>
                                                <td>0x0200</td>
                                                <td>Was an <code class="literal">interface</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_ABSTRACT</code></td>
                                                <td>0x0400</td>
                                                <td>Marked or implicitly <code class="literal">abstract</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_SYNTHETIC</code></td>
                                                <td>0x1000</td>
                                                <td>Declared synthetic; not present in the source
                                                   		      code.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_ANNOTATION</code></td>
                                                <td>0x2000</td>
                                                <td>Declared as an annotation type.</td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_ENUM</code></td>
                                                <td>0x4000</td>
                                                <td>Declared as an <code class="literal">enum</code> type.
                                                </td>
                                             </tr>
                                          </tbody>
                                       </table>
                                    </div>
                                 </div><br class="table-break"><p class="norm"><a name="jvms-4.7.6-300-D.1-D.2"></a>All bits
                                    	    of the <code class="literal">inner_class_access_flags</code> item
                                    	    not assigned in <a class="xref" href="jvms-4.html#jvms-4.7.6-300-D.1-D.1" title="Table&nbsp;4.7.6-A.&nbsp;Nested class access and property flags">Table&nbsp;4.7.6-A</a> are
                                    	    reserved for future use. They should be set to zero in
                                    	    generated <code class="literal">class</code> files and should be ignored by Java Virtual Machine
                                    	    implementations.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                        <p class="norm"><a name="jvms-4.7.6-300-D.2"></a>
                           	If a <code class="literal">class</code> file has a version number that is 51.0 or above,
                           	and has an <code class="literal">InnerClasses</code> attribute in its <code class="literal">attributes</code> table,
                           	then for all entries in the <code class="literal">classes</code> array
                           	of the <code class="literal">InnerClasses</code> attribute, the value of the
                           	<code class="literal">outer_class_info_index</code> item must be zero if
                           	the value of the <code class="literal">inner_name_index</code> item is
                           	zero.
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="note">Oracle's Java Virtual Machine implementation does not check the
                  consistency of an <code class="literal">InnerClasses</code> attribute against a <code class="literal">class</code> file
                  representing a class or interface referenced by the attribute.
               </p>
            </div>
            <div class="section" title="4.7.7.&nbsp;The EnclosingMethod Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.7"></a>4.7.7.&nbsp;The <code class="literal">EnclosingMethod</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.7-100"></a>The <code class="literal">EnclosingMethod</code> attribute is
                  a fixed-length attribute in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>
                  structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). A class must have an
                  <code class="literal">EnclosingMethod</code> attribute if and only if it represents a local class
                  or an anonymous class (JLS &sect;14.3, JLS &sect;15.9.5).
               </p>
               <p class="norm"><a name="jvms-4.7.7-110"></a>There may be at most one
                  <code class="literal">EnclosingMethod</code> attribute in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>
                  structure.
               </p>
               <p class="norm"><a name="jvms-4.7.7-200"></a>The <code class="literal">EnclosingMethod</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.7-210"></a><pre class="screen">
EnclosingMethod_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 class_index;
    u2 method_index;
}
</pre><p class="norm"><a name="jvms-4.7.7-300"></a>The items of
                  the <code class="literal">EnclosingMethod_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.7-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">EnclosingMethod</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.7-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item must be four.
                        </p>
                     </dd>
                     <dt><span class="term">class_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.7-300-C"></a>
                           	The value of the <code class="literal">class_index</code> item must be a
                           	valid index into the <code class="literal">constant_pool</code> table. The
                           	<code class="literal">constant_pool</code> entry at that index must be a
                           	<code class="literal">CONSTANT_Class_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>)
                           	representing the innermost class that encloses the declaration
                           	of the current class.
                        </p>
                     </dd>
                     <dt><span class="term">method_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.7-300-D"></a>If the current class
                                   is not immediately enclosed by a method or constructor, then
                                   the value of the <code class="literal">method_index</code> item must be
                                   zero.
                        </p>
                        <p class="note">In
                                   particular, <code class="literal">method_index</code> must be zero if
                                   the current class was immediately enclosed in source code by
                                   an instance initializer, static initializer, instance variable
                                   initializer, or class variable initializer. (The first two
                                   concern both local classes and anonymous classes, while the
                                   last two concern anonymous classes declared on the right hand
                                   side of a field assignment.)
                        </p>
                        <p class="norm"><a name="jvms-4.7.7-300-D.1"></a>Otherwise, the
                           	value of the <code class="literal">method_index</code> item must be a
                           	valid index into the <code class="literal">constant_pool</code> table. The
                           	<code class="literal">constant_pool</code> entry at that index must be a
                           	<code class="literal">CONSTANT_NameAndType_info</code> structure
                           	(<a class="xref" href="jvms-4.html#jvms-4.4.6" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">&sect;4.4.6</a>) representing the name and type
                           	of a method in the class referenced by
                           	the <code class="literal">class_index</code> attribute above.
                        </p>
                        <p class="note">It is the responsibility of a Java compiler to
                           	ensure that the method identified via
                           	the <code class="literal">method_index</code> is indeed the closest
                           	lexically enclosing method of the class that contains this
                           	<code class="literal">EnclosingMethod</code> attribute.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.8.&nbsp;The Synthetic Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.8"></a>4.7.8.&nbsp;The <code class="literal">Synthetic</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.8-100"></a>The <code class="literal">Synthetic</code> attribute is
                  a fixed-length attribute in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>,
                  <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>, <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). A class
                  member that does not appear in the source code must be marked using a
                  <code class="literal">Synthetic</code> attribute, or else it must have its <code class="literal">ACC_SYNTHETIC</code> flag
                  set. The only exceptions to this requirement are compiler-generated
                  methods which are not considered implementation artifacts, namely the
                  instance initialization method representing a default constructor of
                  the Java programming language (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), the class initialization
                  method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), and
                  the <code class="literal">Enum.values()</code>
                  and <code class="literal">Enum.valueOf()</code> methods.
               </p>
               <p class="note">The <code class="literal">Synthetic</code> attribute was introduced in JDK 1.1
                   to support nested classes and interfaces.
               </p>
               <p class="norm"><a name="jvms-4.7.8-200"></a>The <code class="literal">Synthetic</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.8-210"></a><pre class="screen">
Synthetic_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
}
</pre><p class="norm"><a name="jvms-4.7.8-300"></a>The items of
                  the <code class="literal">Synthetic_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.8-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">Synthetic</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.8-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item must be zero.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.9.&nbsp;The Signature Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.9"></a>4.7.9.&nbsp;The <code class="literal">Signature</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.9-100"></a>The <code class="literal">Signature</code> attribute is a
                  fixed-length attribute in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>,
                  <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>, <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). A <code class="literal">Signature</code>
                  attribute records a signature (<a class="xref" href="jvms-4.html#jvms-4.7.9.1" title="4.7.9.1.&nbsp;Signatures">&sect;4.7.9.1</a>) for a
                  class, interface, constructor, method, or field whose declaration in
                  the Java programming language uses type variables or parameterized types. See <em class="citetitle">The Java Language Specification, Java SE 8 Edition</em>
                  for details about these types.
               </p>
               <p class="norm"><a name="jvms-4.7.9-200"></a>The <code class="literal">Signature</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.9-210"></a><pre class="screen">
Signature_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 signature_index;
}
</pre><p class="norm"><a name="jvms-4.7.9-300"></a>The items of
                  the <code class="literal">Signature_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.9-300-A"></a>The value of
                                 the <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">Signature</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.9-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item of a
                                 <code class="literal">Signature_attribute</code> structure must be
                                 two.
                        </p>
                     </dd>
                     <dt><span class="term">signature_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.9-300-C"></a>The value of the
                                 <code class="literal">signature_index</code> item must be a valid index
                                 into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                                 that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a class signature if
                                 this <code class="literal">Signature</code> attribute is an attribute of a <code class="literal">ClassFile</code>
                                 structure; a method signature if this <code class="literal">Signature</code> attribute is
                                 an attribute of a <code class="literal">method_info</code> structure; or a field signature
                                 otherwise.
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="note">Oracle's Java Virtual Machine implementation does not check the
                  well-formedness of <code class="literal">Signature</code> attributes during class loading or
                  linking. Instead, <code class="literal">Signature</code> attributes are checked by methods of the
                  Java SE platform class libraries which expose generic signatures of classes,
                  interfaces, constructors, methods, and fields. Examples
                  include <code class="literal">getGenericSuperclass</code> in <code class="literal">Class</code>
                  and <code class="literal">toGenericString</code>
                  in <code class="literal">java.lang.reflect.Executable</code>.
               </p>
               <div class="section" title="4.7.9.1.&nbsp;Signatures">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.7.9.1"></a>4.7.9.1.&nbsp;Signatures
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.7.9.1-100"></a>
                     <span class="emphasis"><em>Signatures</em></span> encode declarations written in the
                     Java programming language that use types outside the type system of the Java Virtual Machine. They
                     support reflection and debugging, as well as compilation when only
                     <code class="literal">class</code> files are available.
                  </p>
                  <p class="norm"><a name="jvms-4.7.9.1-110"></a>A Java compiler must
                     emit a signature for any class,
                     interface, constructor, method, or field whose declaration uses type variables or parameterized
                     types. Specifically, a Java compiler must emit:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.9.1-110-A"></a>A class signature
                                    for any class or interface declaration which is either generic,
                                    or has a parameterized type as a superclass or superinterface,
                                    or both.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.9.1-110-B"></a>A method signature
                                    for any method or constructor declaration which is either
                                    generic, or has a type variable or parameterized type as the
                                    return type or a formal parameter type, or has a type variable
                                    in a <code class="literal">throws</code> clause, or any combination thereof.
                           </p>
                           <p class="norm"><a name="jvms-4.7.9.1-110-B.1"></a>If the <code class="literal">throws</code>
                                    clause of a method or constructor declaration does not involve
                                    type variables, then a compiler may treat the declaration as
                                    having no <code class="literal">throws</code> clause for the purpose of emitting a method
                                    signature.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.9.1-110-C"></a>A field signature
                                    for any field, formal parameter, or local variable declaration
                                    whose type uses a type variable or a parameterized type.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.7.9.1-200"></a>Signatures are specified
                     using a grammar which follows the notation of
                     <a class="xref" href="jvms-4.html#jvms-4.3.1" title="4.3.1.&nbsp;Grammar Notation">&sect;4.3.1</a>. In addition to that notation:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.9.1-200-A"></a>The
                                    syntax <span class="emphasis"><em>[x]</em></span> on the right-hand side of a
                                    production denotes zero or one occurrences
                                    of <span class="emphasis"><em>x</em></span>. That is, <span class="emphasis"><em>x</em></span> is
                                    an <span class="emphasis"><em>optional symbol</em></span>. The alternative which
                                    contains the optional symbol actually defines two alternatives:
                                    one that omits the optional symbol and one that includes
                                    it.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.9.1-200-B"></a>A very long
                                    right-hand side may be continued on a second line by clearly
                                    indenting the second line.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.7.9.1-210"></a>The grammar includes the
                     terminal symbol <span class="emphasis"><em>Identifier</em></span> to denote the name of a type, field,
                     method, formal parameter, local variable, or type variable, as
                     generated by a Java compiler. Such a name must not contain any of the
                     ASCII characters <code class="literal">.</code> <code class="literal">;</code> <code class="literal">[</code> <code class="literal">/</code> <code class="literal">&lt;</code> <code class="literal">&gt;</code>
                     <code class="literal">:</code> (that is, the characters forbidden in method names
                     (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>) and also colon) but may contain
                     characters that must not appear in an identifier in the Java programming language
                     (JLS &sect;3.8).
                  </p>
                  <p class="norm"><a name="jvms-4.7.9.1-300"></a>Signatures rely on a
                     hierarchy of nonterminals known as <span class="emphasis"><em>type
                           signatures</em></span>:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.9.1-300-A"></a>A <span class="emphasis"><em>Java
                                          type signature</em></span> represents either a reference type or
                                    a primitive type of the Java programming language.
                           </p>
                           <div id="jvms-4.7.9.1-300-A.1" class="productionset"><a name="jvms-4.7.9.1-300-A.1"></a>
                                    
                              <div class="production"><a name="jvms-JavaTypeSignature"></a>
                                 	
                                 <div class="lhs">JavaTypeSignature:</div>
                                 	
                                 <div class="rhs">
                                    	  <a href="jvms-4.html#jvms-ReferenceTypeSignature" title="ReferenceTypeSignature">ReferenceTypeSignature</a> <br>
                                    	  <a href="jvms-4.html#jvms-BaseType" title="BaseType">BaseType</a>
                                    	
                                 </div>
                                       
                              </div>
                                  
                           </div>
                           <p class="note">The following production from
                                    <a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a> is repeated here for
                                    convenience:
                           </p>
                           <div id="d5e6657" class="productionset"><a name="d5e6657"></a>
                                    
                              <div class="productionrecap-note">
                                 <div class="production">
                                        
                                    <div class="lhs">BaseType:</div>
                                        
                                    <div class="rhs">
                                             (one of) <br>
                                             <code class="literal">B</code> <code class="literal">C</code> <code class="literal">D</code> <code class="literal">F</code> 
                                             <code class="literal">I</code> <code class="literal">J</code> <code class="literal">S</code> <code class="literal">Z</code> 
                                           
                                    </div>
                                      
                                 </div>
                              </div>
                                  
                           </div>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.9.1-300-B"></a>A <span class="emphasis"><em>reference type
                                          signature</em></span> represents a reference type of the
                                    Java programming language, that is, a class or interface type, a type variable,
                                    or an array type.
                           </p>
                           <p class="norm"><a name="jvms-4.7.9.1-300-B.1"></a>A <span class="emphasis"><em>class
                                          type signature</em></span> represents a (possibly parameterized)
                                    class or interface type. A class type signature must be
                                    formulated such that it can be reliably mapped to the binary
                                    name of the class it denotes by erasing any type arguments and
                                    converting each <code class="literal">.</code> character to a <code class="literal">$</code> character.
                           </p>
                           <p class="norm"><a name="jvms-4.7.9.1-300-B.2"></a>A
                                    <span class="emphasis"><em>type variable signature</em></span> represents a type
                                    variable.
                           </p>
                           <p class="norm"><a name="jvms-4.7.9.1-300-B.3"></a>An
                                    <span class="emphasis"><em>array type signature</em></span> represents one
                                    dimension of an array type.
                           </p>
                           <div id="jvms-4.7.9.1-300-B.4" class="productionset"><a name="jvms-4.7.9.1-300-B.4"></a>
                                    
                              <div class="production"><a name="jvms-ReferenceTypeSignature"></a>
                                 	
                                 <div class="lhs">ReferenceTypeSignature:</div>
                                 	
                                 <div class="rhs">
                                    	  <a href="jvms-4.html#jvms-ClassTypeSignature" title="ClassTypeSignature">ClassTypeSignature</a> <br>	
                                    	  <a href="jvms-4.html#jvms-TypeVariableSignature" title="TypeVariableSignature">TypeVariableSignature</a> <br>
                                    	  <a href="jvms-4.html#jvms-ArrayTypeSignature" title="ArrayTypeSignature">ArrayTypeSignature</a>
                                    	
                                 </div>
                                       
                              </div>
                              
                                    
                              <div class="production"><a name="jvms-ClassTypeSignature"></a>
                                 	
                                 <div class="lhs">ClassTypeSignature:</div>
                                 	
                                 <div class="rhs">
                                    	  <code class="literal">L</code>
                                    	  [<a href="jvms-4.html#jvms-PackageSpecifier" title="PackageSpecifier">PackageSpecifier</a>]
                                    	  
                                    	  <a href="jvms-4.html#jvms-SimpleClassTypeSignature" title="SimpleClassTypeSignature">SimpleClassTypeSignature</a>
                                    	  {<a href="jvms-4.html#jvms-ClassTypeSignatureSuffix" title="ClassTypeSignatureSuffix">ClassTypeSignatureSuffix</a>}
                                    	  <code class="literal">;</code>
                                    	
                                 </div>
                                       
                              </div>
                              
                                    
                              <div class="production"><a name="jvms-PackageSpecifier"></a>
                                 	
                                 <div class="lhs">PackageSpecifier:</div>
                                 	
                                 <div class="rhs">
                                    	  Identifier <code class="literal">/</code>
                                    	  {<a href="jvms-4.html#jvms-PackageSpecifier" title="PackageSpecifier">PackageSpecifier</a>}
                                    	
                                 </div>
                                       
                              </div>
                              
                                    
                              <div class="production"><a name="jvms-SimpleClassTypeSignature"></a>
                                 	
                                 <div class="lhs">SimpleClassTypeSignature:</div>
                                 	
                                 <div class="rhs">
                                    	  Identifier [<a href="jvms-4.html#jvms-TypeArguments" title="TypeArguments">TypeArguments</a>]
                                    	
                                 </div>
                                       
                              </div>
                              
                                    
                              <div class="production"><a name="jvms-TypeArguments"></a>
                                 	
                                 <div class="lhs">TypeArguments:</div>
                                 	
                                 <div class="rhs">
                                    	  <code class="literal">&lt;</code>
                                    	  <a href="jvms-4.html#jvms-TypeArgument" title="TypeArgument">TypeArgument</a>
                                    	  {<a href="jvms-4.html#jvms-TypeArgument" title="TypeArgument">TypeArgument</a>}
                                    	  <code class="literal">&gt;</code>
                                    	
                                 </div>
                                       
                              </div>
                              
                                    
                              <div class="production"><a name="jvms-TypeArgument"></a>
                                 	
                                 <div class="lhs">TypeArgument:</div>
                                 	
                                 <div class="rhs">
                                    	  [<a href="jvms-4.html#jvms-WildcardIndicator" title="WildcardIndicator">WildcardIndicator</a>]
                                    	  <a href="jvms-4.html#jvms-ReferenceTypeSignature" title="ReferenceTypeSignature">ReferenceTypeSignature</a> <br>
                                    	  <code class="literal">*</code>
                                    	
                                 </div>
                                       
                              </div>
                              
                                    
                              <div class="production"><a name="jvms-WildcardIndicator"></a>
                                 	
                                 <div class="lhs">WildcardIndicator:</div>
                                 	
                                 <div class="rhs"><code class="literal">+</code> <br> <code class="literal">-</code></div>
                                       
                              </div>
                              
                                    
                              <div class="production"><a name="jvms-ClassTypeSignatureSuffix"></a>
                                 	
                                 <div class="lhs">ClassTypeSignatureSuffix:</div>
                                 	
                                 <div class="rhs">
                                    	  <code class="literal">.</code> <a href="jvms-4.html#jvms-SimpleClassTypeSignature" title="SimpleClassTypeSignature">SimpleClassTypeSignature</a>
                                    	
                                 </div>
                                       
                              </div>
                              
                                    
                              <div class="production"><a name="jvms-TypeVariableSignature"></a>
                                 	
                                 <div class="lhs">TypeVariableSignature:</div>
                                 	
                                 <div class="rhs">
                                    	  <code class="literal">T</code> Identifier <code class="literal">;</code>
                                    	
                                 </div>
                                       
                              </div>
                              
                                    
                              <div class="production"><a name="jvms-ArrayTypeSignature"></a>
                                 	
                                 <div class="lhs">ArrayTypeSignature:</div>
                                 	
                                 <div class="rhs">
                                    	  <code class="literal">[</code> <a href="jvms-4.html#jvms-JavaTypeSignature" title="JavaTypeSignature">JavaTypeSignature</a>
                                    	
                                 </div>
                                       
                              </div>
                                  
                           </div>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.7.9.1-400"></a>A <span class="emphasis"><em>class
                           signature</em></span> encodes type information about a (possibly
                     generic) class declaration. It describes any type parameters of the
                     class, and lists its (possibly parameterized) direct superclass and
                     direct superinterfaces, if any. A type parameter is described by its
                     name, followed by any class bound and interface bounds.
                  </p>
                  <div id="jvms-4.7.9.1-410" class="productionset"><a name="jvms-4.7.9.1-410"></a>
                       
                     <div class="production"><a name="jvms-ClassSignature"></a>
                            
                        <div class="lhs">ClassSignature:</div>
                            
                        <div class="rhs">
                                 [<a href="jvms-4.html#jvms-TypeParameters" title="TypeParameters">TypeParameters</a>]
                                 <a href="jvms-4.html#jvms-SuperclassSignature" title="SuperclassSignature">SuperclassSignature</a>
                                 {<a href="jvms-4.html#jvms-SuperinterfaceSignature" title="SuperinterfaceSignature">SuperinterfaceSignature</a>}
                               
                        </div>
                          
                     </div>
                     
                       
                     <div class="production"><a name="jvms-TypeParameters"></a>
                            
                        <div class="lhs">TypeParameters:</div>
                            
                        <div class="rhs">
                                 <code class="literal">&lt;</code>
                                 <a href="jvms-4.html#jvms-TypeParameter" title="TypeParameter">TypeParameter</a>
                                 {<a href="jvms-4.html#jvms-TypeParameter" title="TypeParameter">TypeParameter</a>}
                                 <code class="literal">&gt;</code>
                               
                        </div>
                          
                     </div>
                     
                       
                     <div class="production"><a name="jvms-TypeParameter"></a>
                            
                        <div class="lhs">TypeParameter:</div>
                            
                        <div class="rhs">
                                 Identifier
                                 <a href="jvms-4.html#jvms-ClassBound" title="ClassBound">ClassBound</a>
                                 {<a href="jvms-4.html#jvms-InterfaceBound" title="InterfaceBound">InterfaceBound</a>}
                               
                        </div>
                          
                     </div>
                     
                       
                     <div class="production"><a name="jvms-ClassBound"></a>
                            
                        <div class="lhs">ClassBound:</div>
                            
                        <div class="rhs">
                                 <code class="literal">:</code> [<a href="jvms-4.html#jvms-ReferenceTypeSignature" title="ReferenceTypeSignature">ReferenceTypeSignature</a>]
                               
                        </div>
                          
                     </div>
                     
                       
                     <div class="production"><a name="jvms-InterfaceBound"></a>
                            
                        <div class="lhs">InterfaceBound:</div>
                            
                        <div class="rhs">
                                 <code class="literal">:</code> <a href="jvms-4.html#jvms-ReferenceTypeSignature" title="ReferenceTypeSignature">ReferenceTypeSignature</a>
                               
                        </div>
                          
                     </div>
                     
                       
                     <div class="production"><a name="jvms-SuperclassSignature"></a>
                            
                        <div class="lhs">SuperclassSignature:</div>
                            
                        <div class="rhs"><a href="jvms-4.html#jvms-ClassTypeSignature" title="ClassTypeSignature">ClassTypeSignature</a></div>
                          
                     </div>
                     
                       
                     <div class="production"><a name="jvms-SuperinterfaceSignature"></a>
                            
                        <div class="lhs">SuperinterfaceSignature:</div>
                            
                        <div class="rhs"><a href="jvms-4.html#jvms-ClassTypeSignature" title="ClassTypeSignature">ClassTypeSignature</a></div>
                          
                     </div>
                     
                  </div>
                  <p class="norm"><a name="jvms-4.7.9.1-500"></a>A <span class="emphasis"><em>method
                           signature</em></span> encodes type information about a (possibly
                     generic) method declaration. It describes any type parameters of the
                     method; the (possibly parameterized) types of any formal parameters;
                     the (possibly parameterized) return type, if any; and the types of any
                     exceptions declared in the method's <code class="literal">throws</code> clause.
                  </p>
                  <div id="jvms-4.7.9.1-510" class="productionset"><a name="jvms-4.7.9.1-510"></a>
                       
                     <div class="production"><a name="jvms-MethodSignature"></a>
                            
                        <div class="lhs">MethodSignature:</div>
                            
                        <div class="rhs">
                                 [<a href="jvms-4.html#jvms-TypeParameters" title="TypeParameters">TypeParameters</a>]
                                 <code class="literal">(</code> {<a href="jvms-4.html#jvms-JavaTypeSignature" title="JavaTypeSignature">JavaTypeSignature</a>} <code class="literal">)</code>
                                 <a href="jvms-4.html#jvms-Result" title="Result">Result</a>
                                 {<a href="jvms-4.html#jvms-ThrowsSignature" title="ThrowsSignature">ThrowsSignature</a>}
                               
                        </div>
                          
                     </div>
                     
                       
                     <div class="production"><a name="jvms-Result"></a>
                            
                        <div class="lhs">Result:</div>
                            
                        <div class="rhs">
                                 <a href="jvms-4.html#jvms-JavaTypeSignature" title="JavaTypeSignature">JavaTypeSignature</a> <br>
                                 <a href="jvms-4.html#jvms-VoidDescriptor" title="VoidDescriptor">VoidDescriptor</a>
                               
                        </div>
                          
                     </div>
                     
                       
                     <div class="production"><a name="jvms-ThrowsSignature"></a>
                            
                        <div class="lhs">ThrowsSignature:</div>
                            
                        <div class="rhs">
                                 <code class="literal">^</code> <a href="jvms-4.html#jvms-ClassTypeSignature" title="ClassTypeSignature">ClassTypeSignature</a> <br>
                                 <code class="literal">^</code> <a href="jvms-4.html#jvms-TypeVariableSignature" title="TypeVariableSignature">TypeVariableSignature</a>
                               
                        </div>
                          
                     </div>
                     
                  </div>
                  <p class="note">The following production from
                     <a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a> is repeated here for convenience:
                  </p>
                  <div id="d5e6794" class="productionset"><a name="d5e6794"></a>
                       
                     <div class="productionrecap-note">
                        <div class="production">
                               
                           <div class="lhs">VoidDescriptor:</div>
                               
                           <div class="rhs"><code class="literal">V</code></div>
                             
                        </div>
                     </div>
                     
                  </div>
                  <p class="note">Due to compiler-generated artifacts, the method
                     signature of a method may not correspond exactly to the method
                     descriptor of the method (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>). In
                     particular, the number of formal parameter types in the method
                     signature may be less than the number of parameter descriptors in the
                     method descriptor.
                  </p>
                  <p class="norm"><a name="jvms-4.7.9.1-600"></a>A <span class="emphasis"><em>field
                           signature</em></span> encodes the (possibly parameterized) type of a
                     field, formal parameter, or local variable declaration.
                  </p>
                  <div id="jvms-4.7.9.1-610" class="productionset"><a name="jvms-4.7.9.1-610"></a>
                       
                     <div class="production"><a name="jvms-FieldSignature"></a>
                            
                        <div class="lhs">FieldSignature:</div>
                            
                        <div class="rhs">
                                 <a href="jvms-4.html#jvms-ReferenceTypeSignature" title="ReferenceTypeSignature">ReferenceTypeSignature</a>
                               
                        </div>
                          
                     </div>
                     
                  </div>
               </div>
            </div>
            <div class="section" title="4.7.10.&nbsp;The SourceFile Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.10"></a>4.7.10.&nbsp;The <code class="literal">SourceFile</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.10-100"></a>The <code class="literal">SourceFile</code> attribute
                  is an optional fixed-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>).
               </p>
               <p class="norm"><a name="jvms-4.7.10-110"></a>There may be at most one
                  <code class="literal">SourceFile</code> attribute in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>
                  structure.
               </p>
               <p class="norm"><a name="jvms-4.7.10-200"></a>The <code class="literal">SourceFile</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.10-210"></a><pre class="screen">
SourceFile_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 sourcefile_index;
}
</pre><p class="norm"><a name="jvms-4.7.10-300"></a>The items of
                  the <code class="literal">SourceFile_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.10-300-A"></a>The value of the
                           	<code class="literal">attribute_name_index</code> item must be a valid
                           	index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                           	entry at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                           	(<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                           	"<code class="literal">SourceFile</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.10-300-B"></a>The value of
                           	the <code class="literal">attribute_length</code> item of
                           	a <code class="literal">SourceFile_attribute</code> structure must be
                           	two.
                        </p>
                     </dd>
                     <dt><span class="term">sourcefile_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.10-300-C"></a>The value of the
                           	<code class="literal">sourcefile_index</code> item must be a valid index
                           	into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                           	that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                           	(<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a string.
                        </p>
                        <p class="note">The string referenced by
                           	the <code class="literal">sourcefile_index</code> item will be
                           	interpreted as indicating the name of the source file from
                           	which this <code class="literal">class</code> file was compiled. It will not be
                           	interpreted as indicating the name of a directory containing
                           	the file or an absolute path name for the file; such
                           	platform-specific additional information must be supplied by
                           	the run-time interpreter or development tool at the time the
                           	file name is actually used.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.11.&nbsp;The SourceDebugExtension Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.11"></a>4.7.11.&nbsp;The <code class="literal">SourceDebugExtension</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.11-100"></a>The <code class="literal">SourceDebugExtension</code>
                  attribute is an optional attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>).
               </p>
               <p class="norm"><a name="jvms-4.7.11-110"></a>There may be at most one
                  <code class="literal">SourceDebugExtension</code> attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.11-200"></a>The <code class="literal">SourceDebugExtension</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.11-210"></a><pre class="screen">
SourceDebugExtension_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 debug_extension[attribute_length];
}
</pre><p class="norm"><a name="jvms-4.7.11-300"></a>The items of
                  the <code class="literal">SourceDebugExtension_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.11-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">SourceDebugExtension</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.11-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">debug_extension[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.11-300-C"></a>The <code class="literal">debug_extension</code>
                                 array holds extended debugging information which has no semantic
                                 effect on the Java Virtual Machine. The information is represented using a
                                 modified UTF-8 string (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) with no
                                 terminating zero byte.
                        </p>
                        <p class="note">Note that
                                 the <code class="literal">debug_extension</code> array may denote a string
                                 longer than that which can be represented with an instance of
                                 class <code class="literal">String</code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.12.&nbsp;The LineNumberTable Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.12"></a>4.7.12.&nbsp;The <code class="literal">LineNumberTable</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.12-100"></a>The <code class="literal">LineNumberTable</code>
                  attribute is an optional variable-length attribute in the <code class="literal">attributes</code>
                  table of a <code class="literal">Code</code> attribute (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). It may be
                  used by debuggers to determine which part of the <code class="literal">code</code> array
                  corresponds to a given line number in the original source file.
               </p>
               <p class="norm"><a name="jvms-4.7.12-110"></a>If multiple
                  <code class="literal">LineNumberTable</code> attributes are present in the <code class="literal">attributes</code> table of
                  a <code class="literal">Code</code> attribute, then they may appear in any order.
               </p>
               <p class="norm"><a name="jvms-4.7.12-120"></a>There may be more than one
                  <code class="literal">LineNumberTable</code> attribute <span class="emphasis"><em>per line of a source
                        file</em></span> in the <code class="literal">attributes</code> table of a <code class="literal">Code</code> attribute. That
                  is, <code class="literal">LineNumberTable</code> attributes may together represent a given line
                  of a source file, and need not be one-to-one with source lines.
               </p>
               <p class="norm"><a name="jvms-4.7.12-200"></a>The <code class="literal">LineNumberTable</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.12-210"></a><pre class="screen">
LineNumberTable_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 line_number_table_length;
    {   u2 start_pc;
        u2 line_number;	
    } line_number_table[line_number_table_length];
}
</pre><p class="norm"><a name="jvms-4.7.12-300"></a>The items of
                  the <code class="literal">LineNumberTable_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.12-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">LineNumberTable</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.12-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">line_number_table_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.12-300-C"></a>The value of the
                                 <code class="literal">line_number_table_length</code> item indicates the
                                 number of entries in the <code class="literal">line_number_table</code>
                                 array.
                        </p>
                     </dd>
                     <dt><span class="term">line_number_table[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.12-300-D"></a>Each entry in the
                                 <code class="literal">line_number_table</code> array indicates that the
                                 line number in the original source file changes at a given point
                                 in the <code class="literal">code</code> array. Each <code class="literal">line_number_table</code>
                                 entry must contain the following two items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">start_pc</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.12-300-D-A"></a>The value
                                    	    of the <code class="literal">start_pc</code> item must indicate the
                                    	    index into the <code class="literal">code</code> array at which the code for a new
                                    	    line in the original source file begins.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.12-300-D-A.1"></a>The value
                                    	    of <code class="literal">start_pc</code> must be less than the value
                                    	    of the <code class="literal">code_length</code> item of the <code class="literal">Code</code>
                                    	    attribute of which this <code class="literal">LineNumberTable</code> is an
                                    	    attribute.
                                 </p>
                              </dd>
                              <dt><span class="term">line_number</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.12-300-D-B"></a>The value
                                    	    of the <code class="literal">line_number</code> item must give the
                                    	    corresponding line number in the original source
                                    	    file.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.13.&nbsp;The LocalVariableTable Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.13"></a>4.7.13.&nbsp;The <code class="literal">LocalVariableTable</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.13-100"></a>The <code class="literal">LocalVariableTable</code>
                  attribute is an optional variable-length attribute in the <code class="literal">attributes</code>
                  table of a <code class="literal">Code</code> attribute (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). It may be
                  used by debuggers to determine the value of a given local variable
                  during the execution of a method.
               </p>
               <p class="norm"><a name="jvms-4.7.13-110"></a>If multiple
                  <code class="literal">LocalVariableTable</code> attributes are present in the <code class="literal">attributes</code> table
                  of a <code class="literal">Code</code> attribute, then they may appear in any order.
               </p>
               <p class="norm"><a name="jvms-4.7.13-120"></a>There may be no more than
                  one <code class="literal">LocalVariableTable</code> attribute <span class="emphasis"><em>per local
                        variable</em></span> in the <code class="literal">attributes</code> table of a <code class="literal">Code</code>
                  attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.13-200"></a>The <code class="literal">LocalVariableTable</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.13-210"></a><pre class="screen">
LocalVariableTable_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 local_variable_table_length;
    {   u2 start_pc;
        u2 length;
        u2 name_index;
        u2 descriptor_index;
        u2 index;
    } local_variable_table[local_variable_table_length];
}
</pre><p class="norm"><a name="jvms-4.7.13-300"></a>The items of
                  the <code class="literal">LocalVariableTable_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.13-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">LocalVariableTable</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.13-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">local_variable_table_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.13-300-C"></a>The value of the
                                 <code class="literal">local_variable_table_length</code> item indicates
                                 the number of entries in
                                 the <code class="literal">local_variable_table</code> array.
                        </p>
                     </dd>
                     <dt><span class="term">local_variable_table[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.13-300-D"></a>Each entry in the
                                 <code class="literal">local_variable_table</code> array indicates a range
                                 of <code class="literal">code</code> array offsets within which a local variable has a
                                 value. It also indicates the index into the local variable array
                                 of the current frame at which that local variable can be
                                 found. Each entry must contain the following five items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">start_pc, length</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-A"></a>The given
                                    	    local variable must have a value at indices into the
                                    	    <code class="literal">code</code> array in the interval
                                    	    [<code class="literal">start_pc</code>, <code class="literal">start_pc +
                                       	    length</code>), that is,
                                    	    between <code class="literal">start_pc</code> inclusive
                                    	    and <code class="literal">start_pc + length</code> exclusive.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-A.1"></a>The value
                                    	    of <code class="literal">start_pc</code> must be a valid index into
                                    	    the <code class="literal">code</code> array of this <code class="literal">Code</code> attribute and must be the
                                    	    index of the opcode of an instruction.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-A.2"></a>The value of
                                    	    <code class="literal">start_pc + length</code> must either be a
                                    	    valid index into the <code class="literal">code</code> array of this <code class="literal">Code</code> attribute
                                    	    and be the index of the opcode of an instruction, or it
                                    	    must be the first index beyond the end of that <code class="literal">code</code>
                                    	    array.
                                 </p>
                              </dd>
                              <dt><span class="term">name_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-B"></a>The value
                                    	    of the <code class="literal">name_index</code> item must be a valid
                                    	    index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                                    	    entry at that index must contain a <code class="literal">CONSTANT_Utf8_info</code>
                                    	    structure (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a
                                    	    valid unqualified name denoting a local variable
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>).
                                 </p>
                              </dd>
                              <dt><span class="term">descriptor_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-C"></a>The value
                                    	    of the <code class="literal">descriptor_index</code> item must be a
                                    	    valid index into the <code class="literal">constant_pool</code> table. The
                                    	    <code class="literal">constant_pool</code> entry at that index must contain a
                                    	    <code class="literal">CONSTANT_Utf8_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a field
                                    	    descriptor which encodes the type of a local variable in
                                    	    the source program (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>).
                                 </p>
                              </dd>
                              <dt><span class="term">index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-D"></a>The given
                                    	    local variable must be at <code class="literal">index</code> in the
                                    	    local variable array of the current frame.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-D.1"></a>If the
                                    	    local variable at <code class="literal">index</code> is of type
                                    	    <code class="literal">double</code> or <code class="literal">long</code>, it occupies
                                    	    both <code class="literal">index</code> and <code class="literal">index +
                                       	    1</code>.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.14.&nbsp;The LocalVariableTypeTable Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.14"></a>4.7.14.&nbsp;The <code class="literal">LocalVariableTypeTable</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.14-100"></a>The
                  <code class="literal">LocalVariableTypeTable</code> attribute is an optional variable-length
                  attribute in the <code class="literal">attributes</code> table of a <code class="literal">Code</code> attribute
                  (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). It may be used by debuggers to
                  determine the value of a given local variable during the execution of
                  a method.
               </p>
               <p class="norm"><a name="jvms-4.7.14-110"></a>If multiple
                  <code class="literal">LocalVariableTypeTable</code> attributes are present in the <code class="literal">attributes</code>
                  table of a given <code class="literal">Code</code> attribute, then they may appear in any
                  order.
               </p>
               <p class="norm"><a name="jvms-4.7.14-120"></a>There may be no more than
                  one <code class="literal">LocalVariableTypeTable</code> attribute <span class="emphasis"><em>per local
                        variable</em></span> in the <code class="literal">attributes</code> table of a <code class="literal">Code</code>
                  attribute.
               </p>
               <p class="note">The <code class="literal">LocalVariableTypeTable</code> attribute differs from
                  the <code class="literal">LocalVariableTable</code> attribute (<a class="xref" href="jvms-4.html#jvms-4.7.13" title="4.7.13.&nbsp;The LocalVariableTable Attribute">&sect;4.7.13</a>) in
                  that it provides signature information rather than descriptor
                  information. This difference is only significant for variables whose
                  type uses a type variable or parameterized type. Such variables will
                  appear in both tables, while variables of other types will appear only
                  in <code class="literal">LocalVariableTable</code>.
               </p>
               <p class="norm"><a name="jvms-4.7.14-200"></a>The
                  <code class="literal">LocalVariableTypeTable</code> attribute has the following format:
               </p><a name="jvms-4.7.14-210"></a><pre class="screen">
LocalVariableTypeTable_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 local_variable_type_table_length;
    {   u2 start_pc;
        u2 length;
        u2 name_index;
        u2 signature_index;
        u2 index;
    } local_variable_type_table[local_variable_type_table_length];
}
</pre><p class="norm"><a name="jvms-4.7.14-300"></a>The items of
                  the <code class="literal">LocalVariableTypeTable_attribute</code> structure are
                  as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.14-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">LocalVariableTypeTable</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.14-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">local_variable_type_table_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.14-300-C"></a>The value of the
                                 <code class="literal">local_variable_type_table_length</code> item
                                 indicates the number of entries in
                                 the <code class="literal">local_variable_type_table</code> array.
                        </p>
                     </dd>
                     <dt><span class="term">local_variable_type_table[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.14-300-D"></a>Each entry in the
                                 <code class="literal">local_variable_type_table</code> array indicates a
                                 range of <code class="literal">code</code> array offsets within which a local variable has
                                 a value. It also indicates the index into the local variable
                                 array of the current frame at which that local variable can be
                                 found. Each entry must contain the following five items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">start_pc, length</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-A"></a>The given
                                    	    local variable must have a value at indices into the
                                    	    <code class="literal">code</code> array in the interval
                                    	    [<code class="literal">start_pc</code>, <code class="literal">start_pc +
                                       	    length</code>), that is,
                                    	    between <code class="literal">start_pc</code> inclusive
                                    	    and <code class="literal">start_pc + length</code> exclusive.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-A.1"></a>The value
                                    	    of <code class="literal">start_pc</code> must be a valid index into
                                    	    the <code class="literal">code</code> array of this <code class="literal">Code</code> attribute and must be the
                                    	    index of the opcode of an instruction.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-A.2"></a>The value
                                    	    of <code class="literal">start_pc + length</code> must either be a
                                    	    valid index into the <code class="literal">code</code> array of this <code class="literal">Code</code> attribute
                                    	    and be the index of the opcode of an instruction, or it
                                    	    must be the first index beyond the end of that <code class="literal">code</code>
                                    	    array.
                                 </p>
                              </dd>
                              <dt><span class="term">name_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-B"></a>The value
                                    	    of the <code class="literal">name_index</code> item must be a valid
                                    	    index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                                    	    entry at that index must contain a <code class="literal">CONSTANT_Utf8_info</code>
                                    	    structure (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a
                                    	    valid unqualified name denoting a local variable
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>).
                                 </p>
                              </dd>
                              <dt><span class="term">signature_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-C"></a>The value
                                    	    of the <code class="literal">signature_index</code> item must be a
                                    	    valid index into the <code class="literal">constant_pool</code> table. The
                                    	    <code class="literal">constant_pool</code> entry at that index must contain a
                                    	    <code class="literal">CONSTANT_Utf8_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a field
                                    	    signature which encodes the type of a local variable in
                                    	    the source program
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.7.9.1" title="4.7.9.1.&nbsp;Signatures">&sect;4.7.9.1</a>).
                                 </p>
                              </dd>
                              <dt><span class="term">index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-D"></a>The given
                                    	    local variable must be at <code class="literal">index</code> in the
                                    	    local variable array of the current frame.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-D.1"></a>If the
                                    	    local variable at <code class="literal">index</code> is of type
                                    	    <code class="literal">double</code> or <code class="literal">long</code>, it occupies
                                    	    both <code class="literal">index</code> and <code class="literal">index +
                                       	    1</code>.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.15.&nbsp;The Deprecated Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.15"></a>4.7.15.&nbsp;The <code class="literal">Deprecated</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.15-100"></a>The <code class="literal">Deprecated</code> attribute
                  is an optional fixed-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure
                  (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>, <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). A class, interface, method, or field may
                  be marked using a <code class="literal">Deprecated</code> attribute to indicate that the class,
                  interface, method, or field has been superseded.
               </p>
               <p class="norm"><a name="jvms-4.7.15-110"></a>A run-time interpreter or
                  tool that reads the <code class="literal">class</code> file format, such as a compiler, can use
                  this marking to advise the user that a superseded class, interface,
                  method, or field is being referred to. The presence of a <code class="literal">Deprecated</code>
                  attribute does not alter the semantics of a class or interface.
               </p>
               <p class="norm"><a name="jvms-4.7.15-200"></a>The <code class="literal">Deprecated</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.15-210"></a><pre class="screen">
Deprecated_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
}
</pre><p class="norm"><a name="jvms-4.7.15-300"></a>The items of
                  the <code class="literal">Deprecated_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.15-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">Deprecated</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.15-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item must be zero.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.16"></a>4.7.16.&nbsp;The <code class="literal">RuntimeVisibleAnnotations</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.16-100"></a>The
                  <code class="literal">RuntimeVisibleAnnotations</code> attribute is a variable-length attribute
                  in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or
                  <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>, <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The
                  <code class="literal">RuntimeVisibleAnnotations</code> attribute records run-time visible
                  annotations on the declaration of the corresponding class, field, or
                  method. The Java Virtual Machine must make these annotations available so they can be
                  returned by the appropriate reflective APIs.
               </p>
               <p class="norm"><a name="jvms-4.7.16-110"></a>There may be at most one
                  <code class="literal">RuntimeVisibleAnnotations</code> attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.16-200"></a>The
                  <code class="literal">RuntimeVisibleAnnotations</code> attribute has the following format:
               </p><a name="jvms-4.7.16-210"></a><pre class="screen">
RuntimeVisibleAnnotations_attribute {
    u2         attribute_name_index;
    u4         attribute_length;
    u2         num_annotations;
    annotation annotations[num_annotations];
}
</pre><p class="norm"><a name="jvms-4.7.16-300"></a>The items of
                  the <code class="literal">RuntimeVisibleAnnotations_attribute</code> structure
                  are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.16-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">RuntimeVisibleAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.16-300-B"></a>The value of the
                                   <code class="literal">attribute_length</code> item indicates the length
                                   of the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">num_annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.16-300-C"></a>The value of the
                                   <code class="literal">num_annotations</code> item gives the number of
                           	run-time visible annotations represented by the
                           	structure.
                        </p>
                     </dd>
                     <dt><span class="term">annotations[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.16-300-D"></a>Each entry in the
                           	<code class="literal">annotations</code> table represents a single
                           	run-time visible annotation on a
                           	declaration. The <code class="literal">annotation</code> structure has
                           	the following format:
                        </p><a name="jvms-4.7.16-300-D.1"></a><pre class="screen">
annotation {
    u2 type_index;
    u2 num_element_value_pairs;
    {   u2            element_name_index;
        element_value value;
    } element_value_pairs[num_element_value_pairs];
}
      </pre><p class="norm"><a name="jvms-4.7.16-300-D.2"></a>The items of the
                                 <code class="literal">annotation</code> structure are as follows:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">type_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.16-300-D.2-A"></a>The value
                                    	      of the <code class="literal">type_index</code> item must be a
                                    	      valid index into the <code class="literal">constant_pool</code> table. The
                                    	      <code class="literal">constant_pool</code> entry at that index must be a
                                    	      <code class="literal">CONSTANT_Utf8_info</code> structure
                                    	      (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a field
                                    	      descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>). The field
                                    	      descriptor denotes the type of the annotation
                                    	      represented by this <code class="literal">annotation</code>
                                    	      structure.
                                 </p>
                              </dd>
                              <dt><span class="term">num_element_value_pairs</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.16-300-D.2-B"></a>The value
                                    	    of the <code class="literal">num_element_value_pairs</code> item
                                    	    gives the number of element-value pairs of the annotation
                                    	    represented by this <code class="literal">annotation</code>
                                    	    structure.
                                 </p>
                              </dd>
                              <dt><span class="term">element_value_pairs[]</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.16-300-D.2-C"></a>Each
                                    	    value of the <code class="literal">element_value_pairs</code> table
                                    	    represents a single element-value pair in the annotation
                                    	    represented by this <code class="literal">annotation</code>
                                    	    structure. Each <code class="literal">element_value_pairs</code>
                                    	    entry contains the following two items:
                                 </p>
                                 <div class="variablelist">
                                    <dl>
                                       <dt><span class="term">element_name_index</span></dt>
                                       <dd>
                                          <p class="norm"><a name="jvms-4.7.16-300-D.2-C-A"></a>The value of the
                                             		    <code class="literal">element_name_index</code> item must be
                                             		    a valid index into the <code class="literal">constant_pool</code> table. The
                                             		    <code class="literal">constant_pool</code> entry at that index must be a
                                             		    <code class="literal">CONSTANT_Utf8_info</code> structure
                                             		    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>). The
                                             		    <code class="literal">constant_pool</code> entry denotes the name of the
                                             		    element of the element-value pair represented by
                                             		    this <code class="literal">element_value_pairs</code>
                                             		    entry.
                                          </p>
                                          <p class="note">In other words, the entry denotes
                                             		    an element of the annotation type specified
                                             		    by <code class="literal">type_index</code>.
                                          </p>
                                       </dd>
                                       <dt><span class="term">value</span></dt>
                                       <dd>
                                          <p class="norm"><a name="jvms-4.7.16-300-D.2-C-B"></a>The value of
                                             		  the <code class="literal">value</code> item represents the
                                             		  value of the element-value pair represented by this
                                             		  <code class="literal">element_value_pairs</code> entry.
                                          </p>
                                       </dd>
                                    </dl>
                                 </div>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
               <div class="section" title="4.7.16.1.&nbsp;The element_value structure">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.7.16.1"></a>4.7.16.1.&nbsp;The <code class="literal">element_value</code> structure
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.7.16.1-100"></a>The 
                     <code class="literal">element_value</code> structure is a discriminated union
                     representing the value of an element-value pair. It has the following
                     format:
                  </p><a name="jvms-4.7.16.1-110"></a><pre class="screen">
element_value {
    u1 tag;
    union {
        u2 const_value_index;

        {   u2 type_name_index;
            u2 const_name_index;
        } enum_const_value;

        u2 class_info_index;

        annotation annotation_value;

        {   u2            num_values;
            element_value values[num_values];
        } array_value;
    } value;
}
</pre><p class="norm"><a name="jvms-4.7.16.1-120"></a>The <code class="literal">tag</code> item uses a single ASCII
                     character to indicate the type of the value of the element-value
                     pair. This determines which item of the <code class="literal">value</code> union
                     is in use. <a class="xref" href="jvms-4.html#jvms-4.7.16.1-130" title="Table&nbsp;4.7.16.1-A.&nbsp;Interpretation of tag values as types">Table&nbsp;4.7.16.1-A</a> shows the valid
                     characters for the <code class="literal">tag</code> item, the type indicated by each character,
                     and the item used in the <code class="literal">value</code> union for each
                     character. The table's fourth column is used in the description below
                     of one item of the <code class="literal">value</code> union.
                  </p>
                  <div class="table"><a name="jvms-4.7.16.1-130"></a><p class="title"><b>Table&nbsp;4.7.16.1-A.&nbsp;Interpretation of <code class="literal">tag</code> values as types</b></p>
                     <div class="table-contents">
                        <table summary="Interpretation of tag values as types" border="1">
                           <colgroup>
                              <col>
                              <col>
                              <col>
                              <col>
                           </colgroup>
                           <thead>
                              <tr>
                                 <th><code class="literal">tag</code> Item
                                 </th>
                                 <th>Type</th>
                                 <th><code class="literal">value</code> Item
                                 </th>
                                 <th>Constant Type</th>
                              </tr>
                           </thead>
                           <tbody>
                              <tr>
                                 <td><code class="literal">B</code></td>
                                 <td><code class="literal">byte</code></td>
                                 <td><code class="literal">const_value_index</code></td>
                                 <td><code class="literal">CONSTANT_Integer</code></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">C</code></td>
                                 <td><code class="literal">char</code></td>
                                 <td><code class="literal">const_value_index</code></td>
                                 <td><code class="literal">CONSTANT_Integer</code></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">D</code></td>
                                 <td><code class="literal">double</code></td>
                                 <td><code class="literal">const_value_index</code></td>
                                 <td><code class="literal">CONSTANT_Double</code></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">F</code></td>
                                 <td><code class="literal">float</code></td>
                                 <td><code class="literal">const_value_index</code></td>
                                 <td><code class="literal">CONSTANT_Float</code></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">I</code></td>
                                 <td><code class="literal">int</code></td>
                                 <td><code class="literal">const_value_index</code></td>
                                 <td><code class="literal">CONSTANT_Integer</code></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">J</code></td>
                                 <td><code class="literal">long</code></td>
                                 <td><code class="literal">const_value_index</code></td>
                                 <td><code class="literal">CONSTANT_Long</code></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">S</code></td>
                                 <td><code class="literal">short</code></td>
                                 <td><code class="literal">const_value_index</code></td>
                                 <td><code class="literal">CONSTANT_Integer</code></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">Z</code></td>
                                 <td><code class="literal">boolean</code></td>
                                 <td><code class="literal">const_value_index</code></td>
                                 <td><code class="literal">CONSTANT_Integer</code></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">s</code></td>
                                 <td><code class="literal">String</code></td>
                                 <td><code class="literal">const_value_index</code></td>
                                 <td><code class="literal">CONSTANT_Utf8</code></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">e</code></td>
                                 <td>Enum type</td>
                                 <td><code class="literal">enum_const_value</code></td>
                                 <td><span class="emphasis"><em>Not applicable</em></span></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">c</code></td>
                                 <td><code class="literal">Class</code></td>
                                 <td><code class="literal">class_info_index</code></td>
                                 <td><span class="emphasis"><em>Not applicable</em></span></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">@</code></td>
                                 <td>Annotation type</td>
                                 <td><code class="literal">annotation_value</code></td>
                                 <td><span class="emphasis"><em>Not applicable</em></span></td>
                              </tr>
                              <tr>
                                 <td><code class="literal">[</code></td>
                                 <td>Array type</td>
                                 <td><code class="literal">array_value</code></td>
                                 <td><span class="emphasis"><em>Not applicable</em></span></td>
                              </tr>
                           </tbody>
                        </table>
                     </div>
                  </div><br class="table-break"><p class="norm"><a name="jvms-4.7.16.1-200"></a>The
                     <code class="literal">value</code> item represents the value of an element-value
                     pair. The item is a union, whose own items are as follows:
                  </p>
                  <div class="variablelist">
                     <dl>
                        <dt><span class="term">const_value_index</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.7.16.1-200-A"></a>
                              	The <code class="literal">const_value_index</code> item denotes either a
                              	primitive constant value or a <code class="literal">String</code> literal as the value of
                              	this element-value pair.
                           </p>
                           <p class="norm"><a name="jvms-4.7.16.1-200-A.1"></a>
                              	The value of the <code class="literal">const_value_index</code> item
                              	must be a valid index into the <code class="literal">constant_pool</code> table. The
                              	<code class="literal">constant_pool</code> entry at that index must be of a type
                              	appropriate to the <code class="literal">tag</code> item, as specified in the fourth
                              	column of <a class="xref" href="jvms-4.html#jvms-4.7.16.1-130" title="Table&nbsp;4.7.16.1-A.&nbsp;Interpretation of tag values as types">Table&nbsp;4.7.16.1-A</a>.
                           </p>
                        </dd>
                        <dt><span class="term">enum_const_value</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.7.16.1-200-B"></a>
                              	The <code class="literal">enum_const_value</code> item denotes an enum
                              	constant as the value of this element-value pair.
                           </p>
                           <p class="norm"><a name="jvms-4.7.16.1-200-B.1"></a>The
                              	<code class="literal">enum_const_value</code> item consists of the
                              	following two items:
                           </p>
                           <div class="variablelist">
                              <dl>
                                 <dt><span class="term">type_name_index</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.16.1-200-B.1-A"></a>
                                       	      The value of the <code class="literal">type_name_index</code> item
                                                     must be a valid index into the <code class="literal">constant_pool</code>
                                                     table. The <code class="literal">constant_pool</code> entry at that index must be a
                                                     <code class="literal">CONSTANT_Utf8_info</code> structure
                                                     (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a field
                                                     descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>). The
                                                     <code class="literal">constant_pool</code> entry gives the internal form of the
                                                     binary name of the type of the enum constant represented
                                                     by this <code class="literal">element_value</code> structure
                                                     (<a class="xref" href="jvms-4.html#jvms-4.2.1" title="4.2.1.&nbsp;Binary Class and Interface Names">&sect;4.2.1</a>).
                                    </p>
                                 </dd>
                                 <dt><span class="term">const_name_index</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.16.1-200-B.1-B"></a>
                                       	      The value of the <code class="literal">const_name_index</code>
                                                     item must be a valid index into the <code class="literal">constant_pool</code>
                                                     table. The <code class="literal">constant_pool</code> entry at that index must be a
                                                     <code class="literal">CONSTANT_Utf8_info</code> structure
                                                     (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>). The <code class="literal">constant_pool</code>
                                                     entry gives the simple name of the enum constant
                                                     represented by this <code class="literal">element_value</code>
                                                     structure.
                                    </p>
                                 </dd>
                              </dl>
                           </div>
                        </dd>
                        <dt><span class="term">class_info_index</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.7.16.1-200-C"></a>
                              	The <code class="literal">class_info_index</code> item denotes a class
                              	literal as the value of this element-value pair.
                           </p>
                           <p class="norm"><a name="jvms-4.7.16.1-200-C.1"></a>The
                              	<code class="literal">class_info_index</code> item must be a valid index
                              	into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                              	that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                              	(<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a return
                              	descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>). The return
                              	descriptor gives the type corresponding to the class literal
                              	represented by this <code class="literal">element_value</code>
                              	structure. Types correspond to class literals as
                              	follows:
                           </p>
                           <div class="norm">
                              <ul class="norm" type="disc">
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.7.16.1-200-C.1-A"></a>
                                       	    For a class literal <span class="type">C</span><code class="literal">.</code><code class="literal">class</code>, where <span class="type">C</span> is the name
                                       	    of a class, interface, or array type, the corresponding
                                       	    type is <span class="type">C</span>. The return descriptor in the <code class="literal">constant_pool</code>
                                       	    will be an <span class="emphasis"><em>ObjectType</em></span> or
                                       	    an <span class="emphasis"><em>ArrayType</em></span>.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.7.16.1-200-C.1-B"></a>
                                       	    For a class literal <span class="type">p</span><code class="literal">.</code><code class="literal">class</code>,
                                       	    where <span class="type">p</span> is the name of a primitive type, the
                                       	    corresponding type is <span class="type">p</span>. The return
                                       	    descriptor in the <code class="literal">constant_pool</code> will be
                                       	    a <span class="emphasis"><em>BaseType</em></span> character.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.7.16.1-200-C.1-C"></a>
                                       	    For a class literal <code class="literal">void</code><code class="literal">.</code><code class="literal">class</code>, the corresponding
                                                   type is <code class="literal">void</code>. The return descriptor in the
                                                   <code class="literal">constant_pool</code> will be <span class="emphasis"><em>V</em></span>.
                                    </p>
                                 </li>
                              </ul>
                           </div>
                           <p class="note">For example, the class literal
                              	<code class="literal">Object.class</code> corresponds to the type
                              	<code class="literal">Object</code>, so the <code class="literal">constant_pool</code> entry
                              	is <code class="literal">Ljava/lang/Object;</code>, whereas the class
                              	literal <code class="literal">int.class</code> corresponds to the type
                              	<code class="literal">int</code>, so the <code class="literal">constant_pool</code> entry is <code class="literal">I</code>.
                           </p>
                           <p class="note">The class literal 
                              	<code class="literal">void.class</code> corresponds to <code class="literal">void</code>, so the
                              	<code class="literal">constant_pool</code> entry is <span class="emphasis"><em>V</em></span>, whereas the
                              	class literal <code class="literal">Void.class</code> corresponds to the
                              	type <code class="literal">Void</code>, so the <code class="literal">constant_pool</code> entry
                              	is <code class="literal">Ljava/lang/Void;</code>.
                           </p>
                        </dd>
                        <dt><span class="term">annotation_value</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.7.16.1-200-D"></a>
                              	The <code class="literal">annotation_value</code> item denotes a
                              	"nested" annotation as the value of this element-value
                              	pair.
                           </p>
                           <p class="norm"><a name="jvms-4.7.16.1-200-D.1"></a>
                              	The value of the <code class="literal">annotation_value</code> item is an
                                      <code class="literal">annotation</code> structure
                                      (<a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations Attribute">&sect;4.7.16</a>) that gives the annotation
                                      represented by this <code class="literal">element_value</code>
                                      structure.
                           </p>
                        </dd>
                        <dt><span class="term">array_value</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.7.16.1-200-E"></a>
                              	The <code class="literal">array_value</code> item denotes an array as
                              	the value of this element-value pair.
                           </p>
                           <p class="norm"><a name="jvms-4.7.16.1-200-E.1"></a>
                              	The <code class="literal">array_value</code> item consists of the
                              	following two items:
                           </p>
                           <div class="variablelist">
                              <dl>
                                 <dt><span class="term">num_values</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.16.1-200-E.1-A"></a>
                                       	      The value of the <code class="literal">num_values</code> item
                                       	      gives the number of elements in the array represented by
                                       	      this <code class="literal">element_value</code> structure.
                                    </p>
                                 </dd>
                                 <dt><span class="term">values[]</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.16.1-200-E.1-B"></a>
                                       	      Each value in the <code class="literal">values</code> table gives
                                        	      the corresponding element of the array represented by
                                        	      this <code class="literal">element_value</code> structure.
                                    </p>
                                 </dd>
                              </dl>
                           </div>
                        </dd>
                     </dl>
                  </div>
               </div>
            </div>
            <div class="section" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.17"></a>4.7.17.&nbsp;The <code class="literal">RuntimeInvisibleAnnotations</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.17-100"></a>The
                  <code class="literal">RuntimeInvisibleAnnotations</code> attribute is a variable-length attribute
                  in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or
                  <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>, <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The
                  <code class="literal">RuntimeInvisibleAnnotations</code> attribute records run-time invisible
                  annotations on the declaration of the corresponding class, method, or
                  field.
               </p>
               <p class="norm"><a name="jvms-4.7.17-110"></a>There may be at most one
                  <code class="literal">RuntimeInvisibleAnnotations</code> attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure.
               </p>
               <p class="note">The <code class="literal">RuntimeInvisibleAnnotations</code> attribute is
                  similar to the <code class="literal">RuntimeVisibleAnnotations</code> attribute
                  (<a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations Attribute">&sect;4.7.16</a>), except that the annotations
                  represented by a <code class="literal">RuntimeInvisibleAnnotations</code> attribute must not be
                  made available for return by reflective APIs, unless the Java Virtual Machine has
                  been instructed to retain these annotations via some
                  implementation-specific mechanism such as a command line flag. In the
                  absence of such instructions, the Java Virtual Machine ignores this attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.17-200"></a>The
                  <code class="literal">RuntimeInvisibleAnnotations</code> attribute has the following
                  format:
               </p><a name="jvms-4.7.17-210"></a><pre class="screen">
RuntimeInvisibleAnnotations_attribute {
    u2         attribute_name_index;
    u4         attribute_length;
    u2         num_annotations;
    annotation annotations[num_annotations];
}
</pre><p class="norm"><a name="jvms-4.7.17-300"></a>The items of
                  the <code class="literal">RuntimeInvisibleAnnotations_attribute</code> structure
                  are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.17-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">RuntimeInvisibleAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.17-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">num_annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.17-300-C"></a>The value of the
                                 <code class="literal">num_annotations</code> item gives the number of
                                 run-time invisible annotations represented by the
                                 structure.
                        </p>
                     </dd>
                     <dt><span class="term">annotations[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.17-300-D"></a>Each entry in the
                           	<code class="literal">annotations</code> table represents a single
                           	run-time invisible annotation on a
                           	declaration. The <code class="literal">annotation</code> structure is
                           	specified in <a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations Attribute">&sect;4.7.16</a>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.18.&nbsp;The RuntimeVisibleParameterAnnotations Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.18"></a>4.7.18.&nbsp;The <code class="literal">RuntimeVisibleParameterAnnotations</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.18-100"></a>The
                  <code class="literal">RuntimeVisibleParameterAnnotations</code> attribute is a variable-length
                  attribute in the <code class="literal">attributes</code> table of the <code class="literal">method_info</code> structure
                  (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The <code class="literal">RuntimeVisibleParameterAnnotations</code>
                  attribute records run-time visible annotations on the declarations of
                  formal parameters of the corresponding method. The Java Virtual Machine must make
                  these annotations available so they can be returned by the appropriate
                  reflective APIs.
               </p>
               <p class="norm"><a name="jvms-4.7.18-110"></a>There may be at most one
                  <code class="literal">RuntimeVisibleParameterAnnotations</code> attribute in the <code class="literal">attributes</code>
                  table of a <code class="literal">method_info</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.18-200"></a>The
                  <code class="literal">RuntimeVisibleParameterAnnotations</code> attribute has the following
                  format:
               </p><a name="jvms-4.7.18-210"></a><pre class="screen">
RuntimeVisibleParameterAnnotations_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 num_parameters;
    {   u2         num_annotations;
        annotation annotations[num_annotations];
    } parameter_annotations[num_parameters];
}
</pre><p class="norm"><a name="jvms-4.7.18-300"></a>The items of
                  the <code class="literal">RuntimeVisibleParameterAnnotations_attribute</code>
                  structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.18-300-A"></a>The value of the
                           	<code class="literal">attribute_name_index</code> item must be a valid
                           	index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                           	entry at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                           	(<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                           	"<code class="literal">RuntimeVisibleParameterAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.18-300-B"></a>The value of the
                           	<code class="literal">attribute_length</code> item indicates the length
                           	of the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">num_parameters</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.18-300-C"></a>The value of the
                           	<code class="literal">num_parameters</code> item gives the number of
                           	formal parameters of the method represented by the
                           	<code class="literal">method_info</code> structure on which the annotation occurs.
                        </p>
                        <p class="note">This duplicates information that could be
                           	extracted from the method descriptor.
                        </p>
                     </dd>
                     <dt><span class="term">parameter_annotations[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.18-300-D"></a>Each entry in the
                           	<code class="literal">parameter_annotations</code> table represents all
                           	of the run-time visible annotations on the declaration of a
                           	single formal parameter. The <span class="emphasis"><em>i</em></span>'th entry in the table
                           	corresponds to the <span class="emphasis"><em>i</em></span>'th formal parameter in the method
                           	descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>). Each
                           	<code class="literal">parameter_annotations</code> entry contains the
                           	following two items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">num_annotations</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.18-300-D-A"></a>The value
                                    	    of the <code class="literal">num_annotations</code> item indicates
                                    	    the number of run-time visible annotations on the
                                    	    declaration of the formal parameter corresponding to the
                                    	    <code class="literal">parameter_annotations</code> entry.
                                 </p>
                              </dd>
                              <dt><span class="term">annotations[]</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.18-300-D-B"></a>Each entry
                                                  in the <code class="literal">annotations</code> table represents a
                                                  single run-time visible annotation on the declaration of
                                                  the formal parameter corresponding to
                                                  the <code class="literal">parameter_annotations</code>
                                                  entry. The <code class="literal">annotation</code> structure is
                                                  specified in <a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations Attribute">&sect;4.7.16</a>.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.19.&nbsp;The RuntimeInvisibleParameterAnnotations Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.19"></a>4.7.19.&nbsp;The <code class="literal">RuntimeInvisibleParameterAnnotations</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.19-100"></a>The
                  <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute is a variable-length
                  attribute in the <code class="literal">attributes</code> table of a <code class="literal">method_info</code> structure
                  (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The
                  <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute records run-time
                  invisible annotations on the declarations of formal parameters of the
                  corresponding method.
               </p>
               <p class="norm"><a name="jvms-4.7.19-110"></a>There may be at most one
                  <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute in the <code class="literal">attributes</code>
                  table of a <code class="literal">method_info</code> structure.
               </p>
               <p class="note">The <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute
                  is similar to the <code class="literal">RuntimeVisibleParameterAnnotations</code> attribute
                  (<a class="xref" href="jvms-4.html#jvms-4.7.18" title="4.7.18.&nbsp;The RuntimeVisibleParameterAnnotations Attribute">&sect;4.7.18</a>), except that the annotations
                  represented by a <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute must
                  not be made available for return by reflective APIs, unless the Java Virtual Machine
                  has specifically been instructed to retain these annotations via some
                  implementation-specific mechanism such as a command line flag. In the
                  absence of such instructions, the Java Virtual Machine ignores this attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.19-200"></a>The
                  <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute has the following
                  format:
               </p><a name="jvms-4.7.19-210"></a><pre class="screen">
RuntimeInvisibleParameterAnnotations_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 num_parameters;
    {   u2         num_annotations;
        annotation annotations[num_annotations];
    } parameter_annotations[num_parameters];
}
</pre><p class="norm"><a name="jvms-4.7.19-300"></a>The items of
                  the <code class="literal">RuntimeInvisibleParameterAnnotations_attribute</code>
                  structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.19-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">RuntimeInvisibleParameterAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.19-300-B"></a>The value of the
                           	<code class="literal">attribute_length</code> item indicates the length
                           	of the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">num_parameters</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.19-300-C"></a>The value of the
                           	<code class="literal">num_parameters</code> item gives the number of
                           	formal parameters of the method represented by the
                           	<code class="literal">method_info</code> structure on which the annotation occurs.
                        </p>
                        <p class="note">This duplicates information that could be
                           	extracted from the method descriptor.
                        </p>
                     </dd>
                     <dt><span class="term">parameter_annotations[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.19-300-D"></a>Each entry in the
                           	<code class="literal">parameter_annotations</code> table represents all
                           	of the run-time invisible annotations on the declaration of a
                           	single formal parameter. The <span class="emphasis"><em>i</em></span>'th entry in the table
                           	corresponds to the <span class="emphasis"><em>i</em></span>'th formal parameter in the method
                           	descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>). Each
                           	<code class="literal">parameter_annotations</code> entry contains the
                           	following two items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">num_annotations</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.19-300-D-A"></a>The value
                                    	      of the <code class="literal">num_annotations</code> item indicates
                                    	      the number of run-time invisible annotations on the
                                    	      declaration of the formal parameter corresponding to the
                                    	      <code class="literal">parameter_annotations</code> entry.
                                 </p>
                              </dd>
                              <dt><span class="term">annotations[]</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.19-300-D-B"></a>Each entry
                                    	      in the <code class="literal">annotations</code> table represents a
                                    	      single run-time invisible annotation on the declaration
                                    	      of the formal parameter corresponding to the
                                    	      <code class="literal">parameter_annotations</code>
                                                  entry. The <code class="literal">annotation</code> structure is
                                                  specified in <a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations Attribute">&sect;4.7.16</a>.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.20.&nbsp;The RuntimeVisibleTypeAnnotations Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.20"></a>4.7.20.&nbsp;The <code class="literal">RuntimeVisibleTypeAnnotations</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.20-100"></a>The
                  <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute is an variable-length
                  attribute in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or
                  <code class="literal">method_info</code> structure, or <code class="literal">Code</code> attribute
                  (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>, <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>, <a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). The
                  <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute records run-time visible
                  annotations on types used in the declaration of the corresponding
                  class, field, or method, or in an expression in the corresponding
                  method body. The <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute also
                  records run-time visible annotations on type parameter declarations of
                  generic classes, interfaces, methods, and constructors. The Java Virtual Machine must
                  make these annotations available so they can be returned by the
                  appropriate reflective APIs.
               </p>
               <p class="norm"><a name="jvms-4.7.20-110"></a>There may be at most one
                  <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute in the <code class="literal">attributes</code> table of
                  a <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure, or <code class="literal">Code</code>
                  attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.20-120"></a>An <code class="literal">attributes</code> table
                  contains a <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute only if types are
                  annotated in kinds of declaration or expression that correspond to the
                  parent structure or attribute of the <code class="literal">attributes</code> table.
               </p>
               <p class="note">For example, all annotations on types in the
                  <code class="literal">implements</code> clause of a class declaration are recorded in the
                  <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute of the class's <code class="literal">ClassFile</code>
                  structure. Meanwhile, all annotations on the type in a field
                  declaration are recorded in the <code class="literal">RuntimeVisibleTypeAnnotations</code>
                  attribute of the field's <code class="literal">field_info</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.20-200"></a>The
                  <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute has the following
                  format:
               </p><a name="jvms-4.7.20-210"></a><pre class="screen">
RuntimeVisibleTypeAnnotations_attribute {
    u2              attribute_name_index;
    u4              attribute_length;
    u2              num_annotations;
    type_annotation annotations[num_annotations];
}
</pre><p class="norm"><a name="jvms-4.7.20-300"></a>The items of
                  the <code class="literal">RuntimeVisibleTypeAnnotations_attribute</code>
                  structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.20-300-A"></a>
                           	The value of the
                           	<code class="literal">attribute_name_index</code> item must be a valid
                           	index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                           	entry at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                           	representing the string "<code class="literal">RuntimeVisibleTypeAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.20-300-B"></a>
                           	The value of the <code class="literal">attribute_length</code> item
                           	indicates the length of the attribute, excluding the initial
                           	six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">num_annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.20-300-C"></a>
                           	The value of the <code class="literal">num_annotations</code> item gives
                           	the number of run-time visible type annotations represented by
                           	the structure.
                        </p>
                     </dd>
                     <dt><span class="term">annotations[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.20-300-D"></a>
                           	Each entry in the <code class="literal">annotations</code> table
                           	represents a single run-time visible annotation on a type used
                           	in a declaration or expression. The 
                           	<code class="literal">type_annotation</code> structure has the following
                           	format:
                        </p><a name="jvms-4.7.20-300-D.1"></a><pre class="screen">
type_annotation {
    u1 target_type;
    union {
        type_parameter_target;
        supertype_target;
        type_parameter_bound_target;
        empty_target;
        method_formal_parameter_target;
        throws_target;
        localvar_target;
        catch_target;
        offset_target;
        type_argument_target;
    } target_info;
    type_path target_path;
    u2        type_index;
    u2        num_element_value_pairs;
    {   u2            element_name_index;
        element_value value;
    } element_value_pairs[num_element_value_pairs];
}
      </pre><p class="norm"><a name="jvms-4.7.20-300-D.2"></a>
                           	The first three items - <code class="literal">target_type</code>, <code class="literal">target_info</code>,
                           	and <code class="literal">target_path</code> - specify the precise
                           	location of the annotated type. The last three items
                           	- <code class="literal">type_index</code>,
                           	<code class="literal">num_element_value_pairs</code>,
                           	and <code class="literal">element_value_pairs[]</code> - specify the
                           	annotation's own type and element-value pairs.
                        </p>
                        <p class="norm"><a name="jvms-4.7.20-300-D.3"></a>
                           	The items of the <code class="literal">type_annotation</code> structure
                           	are as follows:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">target_type</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.20-300-D.3-A"></a>
                                    	      The value of the <code class="literal">target_type</code> item denotes the kind of
                                    	      target on which the annotation appears. The various
                                    	      kinds of target correspond to the <span class="emphasis"><em>type
                                          	      contexts</em></span> of the Java programming language where types are
                                    	      used in declarations and expressions (JLS &sect;4.11).
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.20-300-D.3-A.1"></a>
                                    	      The legal values of <code class="literal">target_type</code> are specified in
                                    	      <a class="xref" href="jvms-4.html#jvms-4.7.20-400" title="Table&nbsp;4.7.20-A.&nbsp;Interpretation of target_type values (Part 1)">Table&nbsp;4.7.20-A</a> and
                                    	      <a class="xref" href="jvms-4.html#jvms-4.7.20-410" title="Table&nbsp;4.7.20-B.&nbsp;Interpretation of target_type values (Part 2)">Table&nbsp;4.7.20-B</a>. Each value is a
                                    	      one-byte tag indicating which item of the <code class="literal">target_info</code>
                                    	      union follows the <code class="literal">target_type</code> item to give more
                                    	      information about the target.
                                 </p>
                                 <p class="note">The kinds of target in
                                    	      <a class="xref" href="jvms-4.html#jvms-4.7.20-400" title="Table&nbsp;4.7.20-A.&nbsp;Interpretation of target_type values (Part 1)">Table&nbsp;4.7.20-A</a> and
                                    	      <a class="xref" href="jvms-4.html#jvms-4.7.20-410" title="Table&nbsp;4.7.20-B.&nbsp;Interpretation of target_type values (Part 2)">Table&nbsp;4.7.20-B</a> correspond to the type
                                    	      contexts in JLS &sect;4.11. Namely, <code class="literal">target_type</code> values
                                    	      0x10-0x17 and 0x40-0x42 correspond to type contexts
                                    	      1-10, while <code class="literal">target_type</code> values 0x43-0x4B correspond to
                                    	      type contexts 11-16.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.20-300-D.3-A.2"></a>
                                    	      The value of the <code class="literal">target_type</code> item determines whether
                                    	      the <code class="literal">type_annotation</code> structure appears
                                    	      in a <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute in a
                                    	      <code class="literal">ClassFile</code> structure, a <code class="literal">field_info</code> structure, a
                                    	      <code class="literal">method_info</code> structure, or a <code class="literal">Code</code>
                                    	      attribute. <a class="xref" href="jvms-4.html#jvms-4.7.20-420" title="Table&nbsp;4.7.20-C.&nbsp;Location of enclosing attribute for target_type values">Table&nbsp;4.7.20-C</a> gives the
                                    	      location of the <code class="literal">RuntimeVisibleTypeAnnotations</code>
                                    	      attribute for a <code class="literal">type_annotation</code>
                                    	      structure with each legal <code class="literal">target_type</code> value.
                                 </p>
                              </dd>
                              <dt><span class="term">target_info</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.20-300-D.3-B"></a>The value
                                    	      of the <code class="literal">target_info</code> item denotes precisely which type
                                    	      in a declaration or expression is annotated.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.20-300-D.3-B.1"></a>The
                                    	      items of the <code class="literal">target_info</code> union are specified in
                                    	      <a class="xref" href="jvms-4.html#jvms-4.7.20.1" title="4.7.20.1.&nbsp;The target_info union">&sect;4.7.20.1</a>.
                                 </p>
                              </dd>
                              <dt><span class="term">target_path</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.20-300-D.3-C"></a>The value
                                    	      of the <code class="literal">target_path</code> item denotes
                                    	      precisely which part of the type indicated by
                                    	      <code class="literal">target_info</code> is annotated.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.20-300-D.3-C.1"></a>The
                                    	      format of the <code class="literal">type_path</code> structure is specified in
                                    	      <a class="xref" href="jvms-4.html#jvms-4.7.20.2" title="4.7.20.2.&nbsp;The type_path structure">&sect;4.7.20.2</a>.
                                 </p>
                              </dd>
                              <dt><span class="term">type_index, num_element_value_pairs,
                                    	    element_value_pairs[]</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.20-300-D.3-D"></a>The
                                    	      meaning of these items in
                                    	      the <code class="literal">type_annotation</code> structure is the
                                    	      same as their meaning in
                                    	      the <code class="literal">annotation</code> structure
                                    	      (<a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations Attribute">&sect;4.7.16</a>).
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
               <div class="table"><a name="jvms-4.7.20-400"></a><p class="title"><b>Table&nbsp;4.7.20-A.&nbsp;Interpretation of <code class="literal">target_type</code> values (Part 1)</b></p>
                  <div class="table-contents">
                     <table summary="Interpretation of target_type values (Part 1)" border="1">
                        <colgroup>
                           <col>
                           <col>
                           <col>
                        </colgroup>
                        <thead>
                           <tr>
                              <th>Value</th>
                              <th>Kind of target</th>
                              <th><code class="literal">target_info</code> item
                              </th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td>0x00</td>
                              <td>type parameter declaration of generic class or
                                 	  interface
                              </td>
                              <td><code class="literal">type_parameter_target</code></td>
                           </tr>
                           <tr>
                              <td>0x01</td>
                              <td>type parameter declaration of generic method or
                                 	  constructor
                              </td>
                              <td><code class="literal">type_parameter_target</code></td>
                           </tr>
                           <tr>
                              <td>0x10</td>
                              <td>type in <code class="literal">extends</code> or <code class="literal">implements</code> clause of class
                                 	  declaration (including the direct superclass or direct
                                 	  superinterface of an anonymous class declaration), or in
                                 	  <code class="literal">extends</code> clause of interface declaration
                              </td>
                              <td><code class="literal">supertype_target</code></td>
                           </tr>
                           <tr>
                              <td>0x11</td>
                              <td>type in bound of type parameter declaration of
                                 	  generic class or interface
                              </td>
                              <td><code class="literal">type_parameter_bound_target</code></td>
                           </tr>
                           <tr>
                              <td>0x12</td>
                              <td>type in bound of type parameter declaration of
                                 	  generic method or constructor
                              </td>
                              <td><code class="literal">type_parameter_bound_target</code></td>
                           </tr>
                           <tr>
                              <td>0x13</td>
                              <td>type in field declaration</td>
                              <td><code class="literal">empty_target</code></td>
                           </tr>
                           <tr>
                              <td>0x14</td>
                              <td>return type of method, or type of newly constructed
                                 	  object
                              </td>
                              <td><code class="literal">empty_target</code></td>
                           </tr>
                           <tr>
                              <td>0x15</td>
                              <td>receiver type of method or constructor</td>
                              <td><code class="literal">empty_target</code></td>
                           </tr>
                           <tr>
                              <td>0x16</td>
                              <td>type in formal parameter declaration of method,
                                           constructor, or lambda expression
                              </td>
                              <td><code class="literal">formal_parameter_target</code></td>
                           </tr>
                           <tr>
                              <td>0x17</td>
                              <td>type in <code class="literal">throws</code> clause of method or
                                 	  constructor
                              </td>
                              <td><code class="literal">throws_target</code></td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div><br class="table-break"><div class="table"><a name="jvms-4.7.20-410"></a><p class="title"><b>Table&nbsp;4.7.20-B.&nbsp;Interpretation of <code class="literal">target_type</code> values (Part 2)</b></p>
                  <div class="table-contents">
                     <table summary="Interpretation of target_type values (Part 2)" border="1">
                        <colgroup>
                           <col>
                           <col>
                           <col>
                        </colgroup>
                        <thead>
                           <tr>
                              <th>Value</th>
                              <th>Kind of target</th>
                              <th><code class="literal">target_info</code> item
                              </th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td>0x40</td>
                              <td>type in local variable declaration</td>
                              <td><code class="literal">localvar_target</code></td>
                           </tr>
                           <tr>
                              <td>0x41</td>
                              <td>type in resource variable declaration</td>
                              <td><code class="literal">localvar_target</code></td>
                           </tr>
                           <tr>
                              <td>0x42</td>
                              <td>type in exception parameter declaration</td>
                              <td><code class="literal">catch_target</code></td>
                           </tr>
                           <tr>
                              <td>0x43</td>
                              <td>type in <span class="emphasis"><em>instanceof</em></span> expression
                              </td>
                              <td><code class="literal">offset_target</code></td>
                           </tr>
                           <tr>
                              <td>0x44</td>
                              <td>type in <span class="emphasis"><em>new</em></span> expression
                              </td>
                              <td><code class="literal">offset_target</code></td>
                           </tr>
                           <tr>
                              <td>0x45</td>
                              <td>type in method reference expression using <code class="literal">::</code><span class="emphasis"><em>new</em></span></td>
                              <td><code class="literal">offset_target</code></td>
                           </tr>
                           <tr>
                              <td>0x46</td>
                              <td>type in method reference expression using <code class="literal">::</code><span class="emphasis"><em>Identifier</em></span></td>
                              <td><code class="literal">offset_target</code></td>
                           </tr>
                           <tr>
                              <td>0x47</td>
                              <td>type in cast expression</td>
                              <td><code class="literal">type_argument_target</code></td>
                           </tr>
                           <tr>
                              <td>0x48</td>
                              <td>type argument for generic constructor in <span class="emphasis"><em>new</em></span>
                                 	  expression or explicit constructor invocation
                                 	  statement
                              </td>
                              <td><code class="literal">type_argument_target</code></td>
                           </tr>
                           <tr>
                              <td>0x49</td>
                              <td>type argument for generic method in method invocation
                                 	  expression
                              </td>
                              <td><code class="literal">type_argument_target</code></td>
                           </tr>
                           <tr>
                              <td>0x4A</td>
                              <td>type argument for generic constructor in method
                                 	reference expression using <code class="literal">::</code><span class="emphasis"><em>new</em></span></td>
                              <td><code class="literal">type_argument_target</code></td>
                           </tr>
                           <tr>
                              <td>0x4B</td>
                              <td>type argument for generic method in method reference
                                 	  expression using <code class="literal">::</code><span class="emphasis"><em>Identifier</em></span></td>
                              <td><code class="literal">type_argument_target</code></td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div><br class="table-break"><div class="table"><a name="jvms-4.7.20-420"></a><p class="title"><b>Table&nbsp;4.7.20-C.&nbsp;Location of enclosing attribute for <code class="literal">target_type</code> values</b></p>
                  <div class="table-contents">
                     <table summary="Location of enclosing attribute for target_type values" border="1">
                        <colgroup>
                           <col>
                           <col>
                           <col>
                        </colgroup>
                        <thead>
                           <tr>
                              <th>Value</th>
                              <th>Kind of target</th>
                              <th>Location</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td>0x00</td>
                              <td>type parameter declaration of generic class or
                                 	  interface
                              </td>
                              <td><code class="literal">ClassFile</code></td>
                           </tr>
                           <tr>
                              <td>0x01</td>
                              <td>type parameter declaration of generic method or
                                 	  constructor
                              </td>
                              <td><code class="literal">method_info</code></td>
                           </tr>
                           <tr>
                              <td>0x10</td>
                              <td>type in <code class="literal">extends</code> clause of class or interface
                                 	  declaration, or in <code class="literal">implements</code> clause of interface
                                 	  declaration
                              </td>
                              <td><code class="literal">ClassFile</code></td>
                           </tr>
                           <tr>
                              <td>0x11</td>
                              <td>type in bound of type parameter declaration of
                                 	  generic class or interface
                              </td>
                              <td><code class="literal">ClassFile</code></td>
                           </tr>
                           <tr>
                              <td>0x12</td>
                              <td>type in bound of type parameter declaration of
                                 	  generic method or constructor
                              </td>
                              <td><code class="literal">method_info</code></td>
                           </tr>
                           <tr>
                              <td>0x13</td>
                              <td>type in field declaration</td>
                              <td><code class="literal">field_info</code></td>
                           </tr>
                           <tr>
                              <td>0x14</td>
                              <td>return type of method or constructor</td>
                              <td><code class="literal">method_info</code></td>
                           </tr>
                           <tr>
                              <td>0x15</td>
                              <td>receiver type of method or constructor</td>
                              <td><code class="literal">method_info</code></td>
                           </tr>
                           <tr>
                              <td>0x16</td>
                              <td>type in formal parameter declaration of method,
                                           constructor, or lambda expression
                              </td>
                              <td><code class="literal">method_info</code></td>
                           </tr>
                           <tr>
                              <td>0x17</td>
                              <td>type in <code class="literal">throws</code> clause of method or
                                 	  constructor
                              </td>
                              <td><code class="literal">method_info</code></td>
                           </tr>
                           <tr>
                              <td>0x40-0x4B</td>
                              <td>types in local variable declarations, resource variable
                                 	  declarations, exception parameter declarations,
                                 	  expressions
                              </td>
                              <td><code class="literal">Code</code></td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div><br class="table-break"><div class="section" title="4.7.20.1.&nbsp;The target_info union">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.7.20.1"></a>4.7.20.1.&nbsp;The <code class="literal">target_info</code> union
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.7.20.1-100"></a>The items of the
                     <code class="literal">target_info</code> union (except for the first) specify precisely which
                     type in a declaration or expression is annotated. The first item
                     specifies not which type, but rather which declaration of a type
                     parameter is annotated. The items are as follows:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-A"></a>
                                    The <code class="literal">type_parameter_target</code> item indicates that an annotation
                                    appears on the declaration of the <span class="emphasis"><em>i</em></span>'th type parameter of a
                                    generic class, generic interface, generic method, or generic
                                    constructor.
                           </p><a name="jvms-4.7.20.1-100-A.1"></a><pre class="screen">
type_parameter_target {
    u1 type_parameter_index;
}
    </pre><p class="norm"><a name="jvms-4.7.20.1-100-A.2"></a>
                                    The value of the <code class="literal">type_parameter_index</code> item
                                    specifies which type parameter declaration is
                                    annotated. A <code class="literal">type_parameter_index</code> value of
                                    <code class="literal">0</code> specifies the first type parameter declaration.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-B"></a>
                                    The <code class="literal">supertype_target</code> item indicates that an annotation appears
                                    on a type in the <code class="literal">extends</code> or <code class="literal">implements</code> clause of a class or
                                    interface declaration.
                           </p><a name="jvms-4.7.20.1-100-B.1"></a><pre class="screen">
supertype_target {
    u2 supertype_index;
}
    </pre><p class="norm"><a name="jvms-4.7.20.1-100-B.2"></a>
                                    A <code class="literal">supertype_index</code> value of 65535 specifies
                                    that the annotation appears on the superclass in an <code class="literal">extends</code>
                                    clause of a class declaration.
                           </p>
                           <p class="norm"><a name="jvms-4.7.20.1-100-B.3"></a>
                                    Any other <code class="literal">supertype_index</code> value is an index
                                    into the <code class="literal">interfaces</code> array of the enclosing
                                    <code class="literal">ClassFile</code> structure, and specifies that the annotation appears
                                    on that superinterface in either the <code class="literal">implements</code> clause of a
                                    class declaration or the <code class="literal">extends</code> clause of an interface
                                    declaration.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-C"></a>
                                    The <code class="literal">type_parameter_bound_target</code> item indicates that an
                                    annotation appears on the <span class="emphasis"><em>i</em></span>'th bound of the <span class="emphasis"><em>j</em></span>'th type
                                    parameter declaration of a generic class, interface, method, or
                                    constructor.
                           </p><a name="jvms-4.7.20.1-100-C.1"></a><pre class="screen">
type_parameter_bound_target {
    u1 type_parameter_index;
    u1 bound_index;
}
    </pre><p class="norm"><a name="jvms-4.7.20.1-100-C.2"></a>
                                    The value of the of <code class="literal">type_parameter_index</code> item
                                    specifies which type parameter declaration has an annotated
                                    bound. A <code class="literal">type_parameter_index</code> value of <code class="literal">0</code>
                                    specifies the first type parameter declaration.
                           </p>
                           <p class="norm"><a name="jvms-4.7.20.1-100-C.3"></a>
                                    The value of the <code class="literal">bound_index</code> item specifies
                                    which bound of the type parameter declaration indicated
                                    by <code class="literal">type_parameter_index</code> is
                                    annotated. A <code class="literal">bound_index</code> value of <code class="literal">0</code>
                                    specifies the first bound of a type parameter
                                    declaration.
                           </p>
                           <p class="note">The <code class="literal">type_parameter_bound_target</code> item records
                                    that a bound is annotated, but does not record the type which
                                    constitutes the bound. The type may be found by inspecting the
                                    class signature or method signature stored in the appropriate
                                    <code class="literal">Signature</code> attribute.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-D"></a>
                                    The <code class="literal">empty_target</code> item indicates that an annotation appears on
                                    either the type in a field declaration, the return type of a
                                    method, the type of a newly constructed object, or the receiver
                                    type of a method or constructor.
                           </p><a name="jvms-4.7.20.1-100-D.1"></a><pre class="screen">
empty_target {
}
    </pre><p class="note">Only one type appears in each of these
                                    locations, so there is no per-type information to represent in
                                    the <code class="literal">target_info</code> union.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-E"></a>
                                    The <code class="literal">formal_parameter_target</code> item indicates that an annotation
                                    appears on the type in a formal parameter declaration of a
                                    method, constructor, or lambda expression.
                           </p><a name="jvms-4.7.20.1-100-E.1"></a><pre class="screen">
formal_parameter_target {
    u1 formal_parameter_index;
}
    </pre><p class="norm"><a name="jvms-4.7.20.1-100-E.2"></a>
                                    The value of the <code class="literal">formal_parameter_index</code> item
                                    specifies which formal parameter declaration has an annotated
                                    type. A <code class="literal">formal_parameter_index</code> value of
                                    <code class="literal">0</code> specifies the first formal parameter declaration.
                           </p>
                           <p class="note">The <code class="literal">formal_parameter_target</code> item records that
                                    a formal parameter's type is annotated, but does not record the
                                    type itself. The type may be found by inspecting the method
                                    descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>) of the <code class="literal">method_info</code>
                                    structure enclosing the <code class="literal">RuntimeVisibleTypeAnnotations</code>
                                    attribute. A <code class="literal">formal_parameter_index</code> value of
                                    <code class="literal">0</code> indicates the first parameter descriptor in the method
                                    descriptor.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-F"></a>
                                    The <code class="literal">throws_target</code> item indicates that an annotation appears on
                                    the <span class="emphasis"><em>i</em></span>'th type in the <code class="literal">throws</code> clause of a method or
                                    constructor declaration.
                           </p><a name="jvms-4.7.20.1-100-F.1"></a><pre class="screen">
throws_target {
    u2 throws_type_index;
}
    </pre><p class="norm"><a name="jvms-4.7.20.1-100-F.2"></a>
                                    The value of the <code class="literal">throws_type_index</code> item is an
                                    index into the <code class="literal">exception_index_table</code> array of
                                    the <code class="literal">Exceptions</code> attribute of the <code class="literal">method_info</code> structure
                                    enclosing the <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-G"></a>
                                    The <code class="literal">localvar_target</code> item indicates that an annotation appears
                                    on the type in a local variable declaration, including a
                                    variable declared as a resource in a <code class="literal">try</code>-with-resources
                                    statement.
                           </p><a name="jvms-4.7.20.1-100-G.1"></a><pre class="screen">
localvar_target {
    u2 table_length;
    {   u2 start_pc;
        u2 length;
        u2 index;
    } table[table_length];
}
    </pre><p class="norm"><a name="jvms-4.7.20.1-100-G.2"></a>
                                    The value of the <code class="literal">table_length</code> item gives the
                                    number of entries in the <code class="literal">table</code> array. Each
                                    entry indicates a range of <code class="literal">code</code> array offsets within which a
                                    local variable has a value. It also indicates the index into the
                                    local variable array of the current frame at which that local
                                    variable can be found. Each entry contains the following three
                                    items:
                           </p>
                           <div class="variablelist">
                              <dl>
                                 <dt><span class="term">start_pc, length</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.20.1-100-G.2-A"></a>
                                       	    The given local variable has a value at indices into the
                                       	    <code class="literal">code</code> array in the interval
                                       	    [<code class="literal">start_pc</code>, <code class="literal">start_pc +
                                          	    length</code>), that is,
                                       	    between <code class="literal">start_pc</code> inclusive
                                       	    and <code class="literal">start_pc + length</code> exclusive.
                                    </p>
                                 </dd>
                                 <dt><span class="term">index</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.20.1-100-G.2-B"></a>
                                       	    The given local variable must be
                                       	    at <code class="literal">index</code> in the local variable array of
                                       	    the current frame.
                                    </p>
                                    <p class="norm"><a name="jvms-4.7.20.1-100-G.2-B.1"></a>
                                       	    If the local variable at <code class="literal">index</code> is of
                                       	    type <code class="literal">double</code> or <code class="literal">long</code>, it occupies
                                       	    both <code class="literal">index</code> and <code class="literal">index +
                                          	    1</code>.
                                    </p>
                                 </dd>
                              </dl>
                           </div>
                           <p class="note">A table is needed to fully specify the local
                                    variable whose type is annotated, because a single local
                                    variable may be represented with different local variable
                                    indices over multiple live ranges. The 
                                    <code class="literal">start_pc</code>, <code class="literal">length</code>,
                                    and <code class="literal">index</code> items in each table entry specify
                                    the same information as a <code class="literal">LocalVariableTable</code> attribute.
                           </p>
                           <p class="note">The <code class="literal">localvar_target</code> item records that a local
                                    variable's type is annotated, but does not record the type
                                    itself. The type may be found by inspecting the appropriate
                                    <code class="literal">LocalVariableTable</code> attribute.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-H"></a>
                                    The <code class="literal">catch_target</code> item indicates that an annotation appears on
                                    the <span class="emphasis"><em>i</em></span>'th type in an exception parameter declaration.
                           </p><a name="jvms-4.7.20.1-100-H.1"></a><pre class="screen">
catch_target {
    u2 exception_table_index;
}
    </pre><p class="norm"><a name="jvms-4.7.20.1-100-H.2"></a>
                                    The value of the <code class="literal">exception_table_index</code> item
                                    is an index into the <code class="literal">exception_table</code> array of
                                    the <code class="literal">Code</code> attribute enclosing the
                                    <code class="literal">RuntimeVisibleTypeAnnotations</code> attribute.
                           </p>
                           <p class="note">The possibility of more than one type in an
                                    exception parameter declaration arises from the multi-<code class="literal">catch</code>
                                    clause of the <code class="literal">try</code> statement, where the type of the exception
                                    parameter is a union of types (JLS &sect;14.20). A compiler usually
                                    creates one <code class="literal">exception_table</code> entry for each
                                    type in the union, which allows the <code class="literal">catch_target</code> item to
                                    distinguish them. This preserves the correspondence between a
                                    type and its annotations.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-I"></a>
                                    The <code class="literal">offset_target</code> item indicates that an annotation appears on
                                    either the type in an <span class="emphasis"><em>instanceof</em></span> expression or a <span class="emphasis"><em>new</em></span>
                                    expression, or the type before the <code class="literal">::</code> in a
                                    method reference expression.
                           </p><a name="jvms-4.7.20.1-100-I.1"></a><pre class="screen">
offset_target {
    u2 offset;
}
    </pre><p class="norm"><a name="jvms-4.7.20.1-100-I.2"></a>
                                    The value of the <code class="literal">offset</code> item specifies the
                                    <code class="literal">code</code> array offset of either the <span class="emphasis"><em>instanceof</em></span> bytecode
                                    instruction corresponding to the <span class="emphasis"><em>instanceof</em></span> expression, the
                                    <span class="emphasis"><em>new</em></span> bytecode instruction corresponding to the <span class="emphasis"><em>new</em></span>
                                    expression, or the bytecode instruction corresponding to the
                                    method reference expression.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.1-100-J"></a>
                                    The <code class="literal">type_argument_target</code> item indicates that an annotation
                                    appears either on the <span class="emphasis"><em>i</em></span>'th type in a cast expression, or on
                                    the <span class="emphasis"><em>i</em></span>'th type argument in the explicit type argument list
                                    for any of the following: a <span class="emphasis"><em>new</em></span> expression, an explicit
                                    constructor invocation statement, a method invocation
                                    expression, or a method reference expression.
                           </p><a name="jvms-4.7.20.1-100-J.1"></a><pre class="screen">
type_argument_target {
    u2 offset;
    u1 type_argument_index;
}
    </pre><p class="norm"><a name="jvms-4.7.20.1-100-J.2"></a>
                                    The value of the <code class="literal">offset</code> item specifies the
                                    <code class="literal">code</code> array offset of either the bytecode instruction
                                    corresponding to the cast expression, the <span class="emphasis"><em>new</em></span> bytecode
                                    instruction corresponding to the <span class="emphasis"><em>new</em></span> expression, the bytecode
                                    instruction corresponding to the explicit constructor invocation
                                    statement, the bytecode instruction corresponding to the method
                                    invocation expression, or the bytecode instruction corresponding
                                    to the method reference expression.
                           </p>
                           <p class="norm"><a name="jvms-4.7.20.1-100-J.3"></a>
                                    For a cast expression, the value of
                                    the <code class="literal">type_argument_index</code> item specifies which
                                    type in the cast operator is
                                    annotated. A <code class="literal">type_argument_index</code> value of
                                    <code class="literal">0</code> specifies the first (or only) type in the cast
                                    operator.
                           </p>
                           <p class="note">The possibility of more than one type in a cast
                                    expression arises from a cast to an intersection type.
                           </p>
                           <p class="norm"><a name="jvms-4.7.20.1-100-J.4"></a>
                                    For an explicit type argument list, the value of
                                    the <code class="literal">type_argument_index</code> item specifies which
                                    type argument is annotated. A 
                                    <code class="literal">type_argument_index</code> value of <code class="literal">0</code> specifies
                                    the first type argument.
                           </p>
                        </li>
                     </ul>
                  </div>
               </div>
               <div class="section" title="4.7.20.2.&nbsp;The type_path structure">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.7.20.2"></a>4.7.20.2.&nbsp;The <code class="literal">type_path</code> structure
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.7.20.2-100"></a>Wherever a type is used
                     in a declaration or expression, the <code class="literal">type_path</code> structure identifies
                     which part of the type is annotated. An annotation may appear on the
                     type itself, but if the type is a reference type, then there are
                     additional locations where an annotation may appear:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.2-100-A"></a>
                                    If an array type <span class="type">T<code class="literal">[]</code></span> is used in a
                                    declaration or expression, then an annotation may appear on any
                                    component type of the array type, including the element
                                    type.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.2-100-B"></a>
                                    If a nested type <span class="type">T1<code class="literal">.</code>T2</span> is used in a declaration
                                    or expression, then an annotation may appear on the name of the
                                    top level type or any member type.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.2-100-C"></a>
                                    If a parameterized type <span class="type">T<code class="literal">&lt;</code>A<code class="literal">&gt;</code></span>
                                    or <span class="type">T<code class="literal">&lt;</code>?  extends A<code class="literal">&gt;</code></span>
                                    or <span class="type">T<code class="literal">&lt;</code>?  super A<code class="literal">&gt;</code></span> is used in a
                                    declaration or expression, then an annotation may appear on any
                                    type argument or on the bound of any wildcard type
                                    argument.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <div class="informalexample">
                     <p class="note">For example, consider the different parts of
                        <code class="literal">String</code><code class="literal">[]</code><code class="literal">[]</code> that are annotated in:
                     </p><pre class="screen">
@Foo String[][]   // Annotates the class type String
String @Foo [][]  // Annotates the array type String[][]
String[] @Foo []  // Annotates the array type String[]
</pre><p class="note">or the different parts of the nested
                        type <code class="literal">Outer.Middle.Inner</code> that are annotated
                        in:
                     </p><pre class="screen">
@Foo Outer.Middle.Inner
Outer.@Foo Middle.Inner
Outer.Middle.@Foo Inner
</pre><p class="note">or the different parts of the parameterized
                        types <code class="literal">Map&lt;String,Object&gt;</code>
                        and <code class="literal">List&lt;...&gt;</code> that are annotated in:
                     </p><pre class="screen">
@Foo Map&lt;String,Object&gt;
Map&lt;@Foo String,Object&gt;
Map&lt;String,@Foo Object&gt;

List&lt;@Foo ? extends String&gt;
List&lt;? extends @Foo String&gt;
</pre></div>
                  <p class="norm"><a name="jvms-4.7.20.2-200"></a>The <code class="literal">type_path</code> structure
                     has the following format:
                  </p><a name="jvms-4.7.20.2-210"></a><pre class="screen">
type_path {
    u1 path_length;
    {   u1 type_path_kind;
        u1 type_argument_index;
    } path[path_length];
}
</pre><p class="norm"><a name="jvms-4.7.20.2-220"></a>The value of
                     the <code class="literal">path_length</code> item gives the number of entries in
                     the <code class="literal">path</code> array:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.2-220-A"></a>
                                    If the value of <code class="literal">path_length</code> is <code class="literal">0</code>, then
                                    the annotation appears directly on the type itself.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.7.20.2-220-B"></a>
                                    If the value of <code class="literal">path_length</code> is non-zero, then
                                    each entry in the <code class="literal">path</code> array represents an
                                    iterative, left-to-right step towards the precise location of
                                    the annotation in an array type, nested type, or parameterized
                                    type. (In an array type, the iteration visits the array type
                                    itself, then its component type, then the component type of that
                                    component type, and so on, until the element type is reached.)
                                    Each entry contains the following two items:
                           </p>
                           <div class="variablelist">
                              <dl>
                                 <dt><span class="term">type_path_kind</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.20.2-220-B-A"></a>
                                       	    The legal values for the <code class="literal">type_path_kind</code>
                                       	    item are listed in <a class="xref" href="jvms-4.html#jvms-4.7.20.2-220-B-A.1" title="Table&nbsp;4.7.20.2-A.&nbsp;Interpretation of type_path_kind values">Table&nbsp;4.7.20.2-A</a>.
                                    </p>
                                    <div class="table"><a name="jvms-4.7.20.2-220-B-A.1"></a><p class="title"><b>Table&nbsp;4.7.20.2-A.&nbsp;Interpretation of <code class="literal">type_path_kind</code> values</b></p>
                                       <div class="table-contents">
                                          <table summary="Interpretation of type_path_kind values" border="1">
                                             <colgroup>
                                                <col>
                                                <col>
                                             </colgroup>
                                             <thead>
                                                <tr>
                                                   <th>Value</th>
                                                   <th>Interpretation</th>
                                                </tr>
                                             </thead>
                                             <tbody>
                                                <tr>
                                                   <td><code class="literal">0</code></td>
                                                   <td>Annotation is deeper in an array type</td>
                                                </tr>
                                                <tr>
                                                   <td><code class="literal">1</code></td>
                                                   <td>Annotation is deeper in a nested type</td>
                                                </tr>
                                                <tr>
                                                   <td><code class="literal">2</code></td>
                                                   <td>Annotation is on the bound of a wildcard type
                                                      		    argument of a parameterized type
                                                   </td>
                                                </tr>
                                                <tr>
                                                   <td><code class="literal">3</code></td>
                                                   <td>Annotation is on a type argument of a
                                                      		    parameterized type
                                                   </td>
                                                </tr>
                                             </tbody>
                                          </table>
                                       </div>
                                    </div><br class="table-break"></dd>
                                 <dt><span class="term">type_argument_index</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.20.2-220-B-B"></a>
                                       	    If the value of the <code class="literal">type_path_kind</code> item
                                       	    is <code class="literal">0</code>, <code class="literal">1</code>, or <code class="literal">2</code>, then the value of
                                       	    the <code class="literal">type_argument_index</code> item is
                                       	    <code class="literal">0</code>.
                                    </p>
                                    <p class="norm"><a name="jvms-4.7.20.2-220-B-B.1"></a>
                                       	    If the value of the <code class="literal">type_path_kind</code> item
                                       	    is <code class="literal">3</code>, then the value of
                                       	    the <code class="literal">type_argument_index</code> item specifies
                                       	    which type argument of a parameterized type is annotated,
                                       	    where <code class="literal">0</code> indicates the first type argument of a
                                       	    parameterized type.
                                    </p>
                                 </dd>
                              </dl>
                           </div>
                        </li>
                     </ul>
                  </div>
                  <div class="informalexample">
                     <div class="table"><a name="d5e8400"></a><p class="title"><b>Table&nbsp;4.7.20.2-B.&nbsp;<code class="literal">type_path</code> structures for
                                  <code class="literal">@A Map&lt;@B ? extends @C String, @D List&lt;@E
                                       Object&gt;&gt;</code></b></p>
                        <div class="table-contents">
                           <table summary="type_path structures for&#xA;    @A Map<@B ? extends @C String, @D List<@E&#xA;      Object&gt;&gt;" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Annotation</th>
                                    <th><code class="literal">path_length</code></th>
                                    <th><code class="literal">path</code></th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">@A</code></td>
                                    <td><code class="literal">0</code></td>
                                    <td><code class="literal">[]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@B</code></td>
                                    <td><code class="literal">1</code></td>
                                    <td><code class="literal">[{type_path_kind: 3; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@C</code></td>
                                    <td><code class="literal">2</code></td>
                                    <td><code class="literal">[{type_path_kind: 3; type_argument_index: 0}, {type_path_kind: 2; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@D</code></td>
                                    <td><code class="literal">1</code></td>
                                    <td><code class="literal">[{type_path_kind: 3; type_argument_index: 1}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@E</code></td>
                                    <td><code class="literal">2</code></td>
                                    <td><code class="literal">[{type_path_kind: 3; type_argument_index: 1}, {type_path_kind: 3; type_argument_index: 0}]</code></td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><div class="table"><a name="d5e8451"></a><p class="title"><b>Table&nbsp;4.7.20.2-C.&nbsp;<code class="literal">type_path</code> structures for
                                  <code class="literal">@I String @F [] @G [] @H []</code></b></p>
                        <div class="table-contents">
                           <table summary="type_path structures for&#xA;    @I String @F [] @G [] @H []" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Annotation</th>
                                    <th><code class="literal">path_length</code></th>
                                    <th><code class="literal">path</code></th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">@F</code></td>
                                    <td><code class="literal">0</code></td>
                                    <td><code class="literal">[]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@G</code></td>
                                    <td><code class="literal">1</code></td>
                                    <td><code class="literal">[{type_path_kind: 0; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@H</code></td>
                                    <td><code class="literal">2</code></td>
                                    <td><code class="literal">[{type_path_kind: 0; type_argument_index: 0}, {type_path_kind: 0; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@I</code></td>
                                    <td><code class="literal">3</code></td>
                                    <td><code class="literal">[{type_path_kind: 0; type_argument_index: 0}, {type_path_kind: 0; type_argument_index: 0}, {type_path_kind: 0; type_argument_index:
                                          0}]</code></td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><div class="table"><a name="d5e8495"></a><p class="title"><b>Table&nbsp;4.7.20.2-D.&nbsp;<code class="literal">type_path</code> structures for 
                                  <code class="literal">@A List&lt;@B Comparable&lt;@F Object @C [] @D [] @E
                                     []&gt;&gt;</code></b></p>
                        <div class="table-contents">
                           <table summary="type_path structures for &#xA;    @A List<@B Comparable<@F Object @C [] @D [] @E&#xA;    []&gt;&gt;" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Annotation</th>
                                    <th><code class="literal">path_length</code></th>
                                    <th><code class="literal">path</code></th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">@A</code></td>
                                    <td><code class="literal">0</code></td>
                                    <td><code class="literal">[]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@B</code></td>
                                    <td><code class="literal">1</code></td>
                                    <td><code class="literal">[{type_path_kind: 3; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@C</code></td>
                                    <td><code class="literal">2</code></td>
                                    <td><code class="literal">[{type_path_kind: 3; type_argument_index: 0}, {type_path_kind: 3; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@D</code></td>
                                    <td><code class="literal">3</code></td>
                                    <td><code class="literal">[{type_path_kind: 3; type_argument_index: 0}, {type_path_kind: 3; type_argument_index: 0}, {type_path_kind: 0; type_argument_index:
                                          0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@E</code></td>
                                    <td><code class="literal">4</code></td>
                                    <td><code class="literal">[{type_path_kind: 3; type_argument_index: 0}, {type_path_kind: 3; type_argument_index: 0}, {type_path_kind: 0; type_argument_index:
                                          0}, {type_path_kind: 0; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@F</code></td>
                                    <td><code class="literal">5</code></td>
                                    <td><code class="literal">[{type_path_kind: 3; type_argument_index: 0}, {type_path_kind: 3; type_argument_index: 0}, {type_path_kind: 0; type_argument_index:
                                          0}, {type_path_kind: 0; type_argument_index: 0}, {type_path_kind: 0; type_argument_index: 0}]</code></td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><div class="table"><a name="d5e8553"></a><p class="title"><b>Table&nbsp;4.7.20.2-E.&nbsp;<code class="literal">type_path</code> structures for 
                                  <code class="literal">@C Outer . @B Middle . @A Inner</code></b></p>
                        <div class="table-contents">
                           <table summary="type_path structures for &#xA;    @C Outer . @B Middle . @A Inner" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Annotation</th>
                                    <th><code class="literal">path_length</code></th>
                                    <th><code class="literal">path</code></th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">@A</code></td>
                                    <td><code class="literal">2</code></td>
                                    <td><code class="literal">[{type_path_kind: 1; type_argument_index: 0}, {type_path_kind: 1; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@B</code></td>
                                    <td><code class="literal">1</code></td>
                                    <td><code class="literal">[{type_path_kind: 1; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@C</code></td>
                                    <td><code class="literal">0</code></td>
                                    <td><code class="literal">[]</code></td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><div class="table"><a name="d5e8590"></a><p class="title"><b>Table&nbsp;4.7.20.2-F.&nbsp;<code class="literal">type_path</code> structures for 
                                  <code class="literal">Outer . Middle&lt;@D Foo . @C Bar&gt; . Inner&lt;@B
                                     String @A []&gt;</code></b></p>
                        <div class="table-contents">
                           <table summary="type_path structures for &#xA;    Outer . Middle<@D Foo . @C Bar&gt; . Inner<@B&#xA;    String @A []&gt;" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Annotation</th>
                                    <th><code class="literal">path_length</code></th>
                                    <th><code class="literal">path</code></th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">@A</code></td>
                                    <td><code class="literal">3</code></td>
                                    <td><code class="literal">[{type_path_kind: 1; type_argument_index: 0}, {type_path_kind: 1; type_argument_index: 0}, {type_path_kind: 3; type_argument_index:
                                          0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@B</code></td>
                                    <td><code class="literal">4</code></td>
                                    <td><code class="literal">[{type_path_kind: 1; type_argument_index: 0}, {type_path_kind: 1; type_argument_index: 0}, {type_path_kind: 3; type_argument_index:
                                          0}, {type_path_kind: 0; type_argument_index: 0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@C</code></td>
                                    <td><code class="literal">3</code></td>
                                    <td><code class="literal">[{type_path_kind: 1; type_argument_index: 0}, {type_path_kind: 3; type_argument_index: 0}, {type_path_kind: 1; type_argument_index:
                                          0}]</code></td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">@D</code></td>
                                    <td><code class="literal">2</code></td>
                                    <td><code class="literal">[{type_path_kind: 1; type_argument_index: 0}, {type_path_kind: 3; type_argument_index: 0}]</code></td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"></div>
               </div>
            </div>
            <div class="section" title="4.7.21.&nbsp;The RuntimeInvisibleTypeAnnotations Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.21"></a>4.7.21.&nbsp;The <code class="literal">RuntimeInvisibleTypeAnnotations</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.21-100"></a>The
                  <code class="literal">RuntimeInvisibleTypeAnnotations</code> attribute is an variable-length
                  attribute in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or
                  <code class="literal">method_info</code> structure, or <code class="literal">Code</code> attribute
                  (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>, <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>, <a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). The
                  <code class="literal">RuntimeInvisibleTypeAnnotations</code> attribute records run-time invisible
                  annotations on types used in the corresponding declaration of a class,
                  field, or method, or in an expression in the corresponding method
                  body. The <code class="literal">RuntimeInvisibleTypeAnnotations</code> attribute also records
                  annotations on type parameter declarations of generic classes,
                  interfaces, methods, and constructors.
               </p>
               <p class="norm"><a name="jvms-4.7.21-110"></a>There may be at most one
                  <code class="literal">RuntimeInvisibleTypeAnnotations</code> attribute in the <code class="literal">attributes</code> table
                  of a <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure, or <code class="literal">Code</code>
                  attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.21-120"></a>An <code class="literal">attributes</code> table contains a
                  <code class="literal">RuntimeInvisibleTypeAnnotations</code> attribute only if types are
                  annotated in kinds of declaration or expression that correspond to the
                  parent structure or attribute of the <code class="literal">attributes</code> table.
               </p>
               <p class="norm"><a name="jvms-4.7.21-200"></a>The
                  <code class="literal">RuntimeInvisibleTypeAnnotations</code> attribute has the following
                  format:
               </p><a name="jvms-4.7.21-210"></a><pre class="screen">
RuntimeInvisibleTypeAnnotations_attribute {
    u2              attribute_name_index;
    u4              attribute_length;
    u2              num_annotations;
    type_annotation annotations[num_annotations];
}
</pre><p class="norm"><a name="jvms-4.7.21-300"></a>The items of
                  the <code class="literal">RuntimeInvisibleTypeAnnotations_attribute</code>
                  structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.21-300-A"></a>
                           	The value of the <code class="literal">attribute_name_index</code> item
                           	must be a valid index into the <code class="literal">constant_pool</code> table. The
                           	<code class="literal">constant_pool</code> entry at that index must be a
                           	<code class="literal">CONSTANT_Utf8_info</code> structure representing the string
                           	"<code class="literal">RuntimeInvisibleTypeAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.21-300-B"></a>
                           	The value of the <code class="literal">attribute_length</code> item
                           	indicates the length of the attribute, excluding the initial
                           	six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">num_annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.21-300-C"></a>
                           	The value of the <code class="literal">num_annotations</code> item gives
                           	the number of run-time invisible type annotations represented
                           	by the structure.
                        </p>
                     </dd>
                     <dt><span class="term">annotations[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.21-300-D"></a>
                           	Each entry in the <code class="literal">annotations</code> table
                           	represents a single run-time invisible annotation on a type
                           	used in a declaration or expression. The 
                           	<code class="literal">type_annotation</code> structure is specified in
                           	<a class="xref" href="jvms-4.html#jvms-4.7.20" title="4.7.20.&nbsp;The RuntimeVisibleTypeAnnotations Attribute">&sect;4.7.20</a>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.22.&nbsp;The AnnotationDefault Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.22"></a>4.7.22.&nbsp;The <code class="literal">AnnotationDefault</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.22-100"></a>The <code class="literal">AnnotationDefault</code>
                  attribute is a variable-length attribute in the <code class="literal">attributes</code> table of
                  certain <code class="literal">method_info</code> structures (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>), namely
                  those representing elements of annotation types (JLS &sect;9.6.1). The
                  <code class="literal">AnnotationDefault</code> attribute records the default value (JLS &sect;9.6.2)
                  for the element represented by the <code class="literal">method_info</code> structure. The Java Virtual Machine
                  must make this default value available so it can be applied by
                  appropriate reflective APIs.
               </p>
               <p class="norm"><a name="jvms-4.7.22-110"></a>There may be at most one
                  <code class="literal">AnnotationDefault</code> attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">method_info</code> structure which represents an element of an annotation
                  type.
               </p>
               <p class="norm"><a name="jvms-4.7.22-200"></a>The <code class="literal">AnnotationDefault</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.22-210"></a><pre class="screen">
AnnotationDefault_attribute {
    u2            attribute_name_index;
    u4            attribute_length;
    element_value default_value;
}
</pre><p class="norm"><a name="jvms-4.7.22-300"></a>The items of
                  the <code class="literal">AnnotationDefault_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.22-300-A"></a>The value of the
                           	<code class="literal">attribute_name_index</code> item must be a valid
                           	index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                           	entry at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                           	(<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                           	"<code class="literal">AnnotationDefault</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.22-300-B"></a>The value of the
                           	<code class="literal">attribute_length</code> item indicates the length
                           	of the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">default_value</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.22-300-C"></a>The 
                           	<code class="literal">default_value</code> item represents the default
                           	value of the annotation type element represented by the
                           	<code class="literal">method_info</code> structure enclosing this <code class="literal">AnnotationDefault</code>
                           	attribute.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.23.&nbsp;The BootstrapMethods Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.23"></a>4.7.23.&nbsp;The <code class="literal">BootstrapMethods</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.23-100"></a>The <code class="literal">BootstrapMethods</code>
                  attribute is a variable-length attribute in the <code class="literal">attributes</code> table of
                  a <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). The
                  <code class="literal">BootstrapMethods</code> attribute records bootstrap method specifiers
                  referenced by <span class="emphasis"><em>invokedynamic</em></span> instructions
                  (<a class="xref" href="jvms-6.html#jvms-6.5.invokedynamic" title="invokedynamic">&sect;<span class="emphasis"><em>invokedynamic</em></span></a>).
               </p>
               <p class="norm"><a name="jvms-4.7.23-110"></a>There must be exactly one
                  <code class="literal">BootstrapMethods</code> attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code> structure if the <code class="literal">constant_pool</code> table of the <code class="literal">ClassFile</code>
                  structure has at least one <code class="literal">CONSTANT_InvokeDynamic_info</code> entry
                  (<a class="xref" href="jvms-4.html#jvms-4.4.10" title="4.4.10.&nbsp;The CONSTANT_InvokeDynamic_info Structure">&sect;4.4.10</a>).
               </p>
               <p class="norm"><a name="jvms-4.7.23-120"></a>There may be at most one
                  <code class="literal">BootstrapMethods</code> attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.23-200"></a>The <code class="literal">BootstrapMethods</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.23-210"></a><pre class="screen">
BootstrapMethods_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 num_bootstrap_methods;
    {   u2 bootstrap_method_ref;
        u2 num_bootstrap_arguments;
        u2 bootstrap_arguments[num_bootstrap_arguments];
    } bootstrap_methods[num_bootstrap_methods];
}
</pre><p class="norm"><a name="jvms-4.7.23-300"></a>The items of
                  the <code class="literal">BootstrapMethods_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.23-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">BootstrapMethods</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.23-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                        <p class="note">The value of the
                                 <code class="literal">attribute_length</code> item is thus dependent on
                                 the number of <span class="emphasis"><em>invokedynamic</em></span> instructions in this <code class="literal">ClassFile</code>
                                 structure.
                        </p>
                     </dd>
                     <dt><span class="term">num_bootstrap_methods</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.23-300-C"></a>The value of the
                                 <code class="literal">num_bootstrap_methods</code> item determines the
                                 number of bootstrap method specifiers in
                                 the <code class="literal">bootstrap_methods</code> array.
                        </p>
                     </dd>
                     <dt><span class="term">bootstrap_methods[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.23-300-D"></a>Each entry in the
                                 <code class="literal">bootstrap_methods</code> table contains an index to
                                 a <code class="literal">CONSTANT_MethodHandle_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.8" title="4.4.8.&nbsp;The CONSTANT_MethodHandle_info Structure">&sect;4.4.8</a>) which specifies a bootstrap
                                 method, and a sequence (perhaps empty) of indexes
                                 to <span class="emphasis"><em>static arguments</em></span> for the bootstrap
                                 method.
                        </p>
                        <p class="norm"><a name="jvms-4.7.23-300-D.1"></a>Each
                                 <code class="literal">bootstrap_methods</code> entry must contain the
                                 following three items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">bootstrap_method_ref</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.23-300-D.1-A"></a>The value
                                    	      of the <code class="literal">bootstrap_method_ref</code> item must
                                    	      be a valid index into the <code class="literal">constant_pool</code> table. The
                                    	      <code class="literal">constant_pool</code> entry at that index must be a
                                    	      <code class="literal">CONSTANT_MethodHandle_info</code> structure
                                    	      (<a class="xref" href="jvms-4.html#jvms-4.4.8" title="4.4.8.&nbsp;The CONSTANT_MethodHandle_info Structure">&sect;4.4.8</a>).
                                 </p>
                                 <p class="note">The form of the method handle is
                                    	      driven by the continuing resolution of the call site
                                    	      specifier in <a class="xref" href="jvms-6.html#jvms-6.5.invokedynamic" title="invokedynamic">&sect;<span class="emphasis"><em>invokedynamic</em></span></a>,
                                    	      where execution of <code class="literal">invoke</code> in <code class="literal">java.lang.invoke.MethodHandle</code> requires
                                    	      that the bootstrap method handle be adjustable to the
                                    	      actual arguments being passed, as if by a call to
                                    	      <code class="literal">java.lang.invoke.MethodHandle.asType</code>. Accordingly,
                                    	      the <code class="literal">reference_kind</code> item of the
                                    	      <code class="literal">CONSTANT_MethodHandle_info</code> structure should have the
                                    	      value 6 or 8 (<a class="xref" href="jvms-5.html#jvms-5.4.3.5" title="5.4.3.5.&nbsp;Method Type and Method Handle Resolution">&sect;5.4.3.5</a>), and
                                    	      the <code class="literal">reference_index</code> item should
                                    	      specify a static method or constructor that takes three
                                    	      arguments of type <code class="literal">java.lang.invoke.MethodHandles.Lookup</code>, <code class="literal">String</code>, and
                                    	      <code class="literal">java.lang.invoke.MethodType</code>, in that order. Otherwise, invocation of
                                    	      the bootstrap method handle during call site specifier
                                    	      resolution will complete abruptly.
                                 </p>
                              </dd>
                              <dt><span class="term">num_bootstrap_arguments</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.23-300-D.1-B"></a>The value
                                    	    of the <code class="literal">num_bootstrap_arguments</code> item
                                    	    gives the number of items in
                                    	    the <code class="literal">bootstrap_arguments</code> array.
                                 </p>
                              </dd>
                              <dt><span class="term">bootstrap_arguments[]</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.23-300-D.1-C"></a>Each
                                    	    entry in the <code class="literal">bootstrap_arguments</code> array
                                    	    must be a valid index into the <code class="literal">constant_pool</code> table. The
                                    	    <code class="literal">constant_pool</code> entry at that index must be a
                                    	    <code class="literal">CONSTANT_String_info</code>, <code class="literal">CONSTANT_Class_info</code>,
                                    	    <code class="literal">CONSTANT_Integer_info</code>, <code class="literal">CONSTANT_Long_info</code>,
                                    	    <code class="literal">CONSTANT_Float_info</code>, <code class="literal">CONSTANT_Double_info</code>,
                                    	    <code class="literal">CONSTANT_MethodHandle_info</code>, or
                                    	    <code class="literal">CONSTANT_MethodType_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.3" title="4.4.3.&nbsp;The CONSTANT_String_info Structure">&sect;4.4.3</a>,
                                    	    <a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>,
                                    	    <a class="xref" href="jvms-4.html#jvms-4.4.4" title="4.4.4.&nbsp;The CONSTANT_Integer_info and CONSTANT_Float_info Structures">&sect;4.4.4</a>,
                                    	    <a class="xref" href="jvms-4.html#jvms-4.4.5" title="4.4.5.&nbsp;The CONSTANT_Long_info and CONSTANT_Double_info Structures">&sect;4.4.5</a>,
                                    	    <a class="xref" href="jvms-4.html#jvms-4.4.8" title="4.4.8.&nbsp;The CONSTANT_MethodHandle_info Structure">&sect;4.4.8</a>,
                                    	    <a class="xref" href="jvms-4.html#jvms-4.4.9" title="4.4.9.&nbsp;The CONSTANT_MethodType_info Structure">&sect;4.4.9</a>).
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.24.&nbsp;The MethodParameters Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.24"></a>4.7.24.&nbsp;The <code class="literal">MethodParameters</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.24-100"></a>The <code class="literal">MethodParameters</code>
                  attribute is a variable-length attribute in the <code class="literal">attributes</code> table of
                  a <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). A
                  <code class="literal">MethodParameters</code> attribute records information about the formal
                  parameters of a method, such as their names.
               </p>
               <p class="norm"><a name="jvms-4.7.24-110"></a>There may be at most one
                  <code class="literal">MethodParameters</code> attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">method_info</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.24-200"></a>The <code class="literal">MethodParameters</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.24-210"></a><pre class="screen">
MethodParameters_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 parameters_count;
    {   u2 name_index;
        u2 access_flags;
    } parameters[parameters_count];
}
</pre><p class="norm"><a name="jvms-4.7.24-300"></a>The items of
                  the <code class="literal">MethodParameters_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.24-300-A"></a>The value of the
                           	<code class="literal">attribute_name_index</code> item must be a valid
                           	index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                           	entry at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                           	representing the string "<code class="literal">MethodParameters</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.24-300-B"></a>The value of
                           	the <code class="literal">attribute_length</code> item indicates the
                           	length of the attribute, excluding the initial six
                           	bytes.
                        </p>
                     </dd>
                     <dt><span class="term">parameters_count</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.24-300-C"></a>The value of
                           	the <code class="literal">parameters_count</code> item indicates the
                           	number of parameter descriptors in the method descriptor
                           	(<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>) referenced by
                           	the <code class="literal">descriptor_index</code> of the attribute's
                           	enclosing <code class="literal">method_info</code> structure.
                        </p>
                        <p class="note">This is not a constraint which a Java Virtual Machine
                           	implementation must enforce during format checking
                           	(<a class="xref" href="jvms-4.html#jvms-4.8" title="4.8.&nbsp;Format Checking">&sect;4.8</a>). The task of matching parameter
                           	descriptors in a method descriptor against the items in
                           	the <code class="literal">parameters</code> array below is done by the
                           	reflection libraries of the Java SE platform.
                        </p>
                     </dd>
                     <dt><span class="term">parameters[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.24-300-D"></a>Each entry in the
                           	<code class="literal">parameters</code> array contains the following
                           	pair of items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">name_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.24-300-D-A"></a>The value
                                    	      of the <code class="literal">name_index</code> item must either be
                                    	      zero or a valid index into the <code class="literal">constant_pool</code>
                                    	      table.
                                 </p>
                                 <p><a name="jvms-4.7.24-300-D-A.1"></a>If the value of
                                    	      the <code class="literal">name_index</code> item is zero, then
                                    	      this <code class="literal">parameters</code> element indicates a
                                    	      formal parameter with no name.
                                 </p>
                                 <p><a name="jvms-4.7.24-300-D-A.2"></a>If the value of
                                    	      the <code class="literal">name_index</code> item is nonzero, the
                                    	      <code class="literal">constant_pool</code> entry at that index must be a
                                    	      <code class="literal">CONSTANT_Utf8_info</code> structure representing a valid
                                    	      unqualified name denoting a formal parameter
                                    	      (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>).
                                 </p>
                              </dd>
                              <dt><span class="term">access_flags</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.24-300-D-B"></a>The value
                                    	      of the <code class="literal">access_flags</code> item is as
                                    	      follows:
                                 </p>
                                 <div class="variablelist">
                                    <dl>
                                       <dt><span class="term">0x0010 (<code class="literal">ACC_FINAL</code>)</span></dt>
                                       <dd>
                                          <p class="norm"><a name="jvms-4.7.24-300-D-B-A"></a>
                                             		    Indicates that the formal parameter was declared
                                               		    <code class="literal">final</code>.
                                          </p>
                                       </dd>
                                       <dt><span class="term">0x1000 (<code class="literal">ACC_SYNTHETIC</code>)</span></dt>
                                       <dd>
                                          <p class="norm"><a name="jvms-4.7.24-300-D-B-B"></a>
                                             		    Indicates that the formal parameter was not
                                             		    explicitly or implicitly declared in source code,
                                             		    according to the specification of the language in
                                             		    which the source code was written (JLS
                                             		    &sect;13.1). (The formal parameter is an implementation
                                             		    artifact of the compiler which produced this
                                             		    <code class="literal">class</code> file.)
                                          </p>
                                       </dd>
                                       <dt><span class="term">0x8000 (<code class="literal">ACC_MANDATED</code>)</span></dt>
                                       <dd>
                                          <p class="norm"><a name="jvms-4.7.24-300-D-B-C"></a>
                                             		    Indicates that the formal parameter was implicitly
                                             		    declared in source code, according to the
                                             		    specification of the language in which the source
                                             		    code was written (JLS &sect;13.1). (The formal
                                             		    parameter is mandated by a language specification,
                                             		    so all compilers for the language must emit
                                             		    it.)
                                          </p>
                                       </dd>
                                    </dl>
                                 </div>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
               <p class="note">The <span class="emphasis"><em>i</em></span>'th entry in the 
                  <code class="literal">parameters</code> array corresponds to the <span class="emphasis"><em>i</em></span>'th
                  parameter descriptor in the enclosing method's descriptor. (The
                  <code class="literal">parameters_count</code> item is one byte because a method
                  descriptor is limited to 255 parameters.) Effectively, this means
                  the <code class="literal">parameters</code> array stores information for all the
                  parameters of the method. One could imagine other schemes, where
                  entries in the <code class="literal">parameters</code> array specify their
                  corresponding parameter descriptors, but it would unduly complicate
                  the <code class="literal">MethodParameters</code> attribute.
               </p>
               <p class="note">The <span class="emphasis"><em>i</em></span>'th entry in
                  the <code class="literal">parameters</code> array may or may not correspond to
                  the <span class="emphasis"><em>i</em></span>'th type in the enclosing method's <code class="literal">Signature</code> attribute (if
                  present), or to the <span class="emphasis"><em>i</em></span>'th annotation in the enclosing method's
                  parameter annotations.
               </p>
            </div>
         </div>
         <div class="section" title="4.8.&nbsp;Format Checking">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.8"></a>4.8.&nbsp;Format Checking
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.8-100"></a>When a prospective <code class="literal">class</code>
               file is loaded by the Java Virtual Machine (<a class="xref" href="jvms-5.html#jvms-5.3" title="5.3.&nbsp;Creation and Loading">&sect;5.3</a>), the Java Virtual Machine
               first ensures that the file has the basic format of a <code class="literal">class</code> file
               (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). This process is known
               as <span class="emphasis"><em>format checking</em></span>. The checks are as
               follows:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.8-100-A"></a>
                              The first four bytes must contain the right magic number.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.8-100-B"></a>
                              All recognized attributes must be of the proper length.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.8-100-C"></a>
                              The <code class="literal">class</code> file must not be truncated or have extra bytes at
                              the end.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.8-100-D"></a>
                              The constant pool must satisfy the constraints documented
                              throughout <a class="xref" href="jvms-4.html#jvms-4.4" title="4.4.&nbsp;The Constant Pool">&sect;4.4</a>.
                     </p>
                     <p class="note">For example, each <code class="literal">CONSTANT_Class_info</code>
                              structure in the constant pool must contain in
                              its <code class="literal">name_index</code> item a valid constant pool
                              index for a <code class="literal">CONSTANT_Utf8_info</code> structure.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.8-100-E"></a>
                              All field references and method references in the constant pool
                              must have valid names, valid classes, and valid descriptors
                              (<a class="xref" href="jvms-4.html#jvms-4.3" title="4.3.&nbsp;Descriptors">&sect;4.3</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.8-100-E.1"></a>
                              Format checking does not ensure that the given field or method
                              actually exists in the given class, nor that the descriptors
                              given refer to real classes. Format checking ensures only that
                              these items are well formed. More detailed checking is performed
                              when the bytecodes themselves are verified, and during
                              resolution.
                     </p>
                  </li>
               </ul>
            </div>
            <p class="norm"><a name="jvms-4.8-110"></a>These checks for basic <code class="literal">class</code>
               file integrity are necessary for any interpretation of the <code class="literal">class</code>
               file contents. Format checking is distinct from bytecode verification,
               although historically they have been confused because both are a form
               of integrity check. 
            </p>
         </div>
         <div class="section" title="4.9.&nbsp;Constraints on Java Virtual Machine Code">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.9"></a>4.9.&nbsp;Constraints on Java Virtual Machine Code
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.9-100"></a>The code for a method,
               instance initialization method, or class or interface initialization
               method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) is stored in the <code class="literal">code</code> array of
               the <code class="literal">Code</code> attribute of a <code class="literal">method_info</code> structure of a <code class="literal">class</code> file
               (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). This section describes the constraints
               associated with the contents of the <code class="literal">Code_attribute</code> structure.
            </p>
            <div class="section" title="4.9.1.&nbsp;Static Constraints">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.9.1"></a>4.9.1.&nbsp;Static Constraints
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.9.1-100"></a>The <span class="emphasis"><em>static
                        constraints</em></span> on a <code class="literal">class</code> file are those defining the
                  well-formedness of the file. These constraints have been given in the
                  previous sections, except for static constraints on the code in the
                  <code class="literal">class</code> file. The static constraints on the code in a <code class="literal">class</code> file
                  specify how Java Virtual Machine instructions must be laid out in the <code class="literal">code</code> array
                  and what the operands of individual instructions must be.
               </p>
               <p class="norm"><a name="jvms-4.9.1-110"></a>The static constraints on
                  the instructions in the <code class="literal">code</code> array are as follows:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-B"></a>
                                 Only instances of the instructions documented in
                                 <a class="xref" href="jvms-6.html#jvms-6.5" title="6.5.&nbsp;Instructions">&sect;6.5</a> may appear in the <code class="literal">code</code>
                                 array. Instances of instructions using the reserved opcodes
                                 (<a class="xref" href="jvms-6.html#jvms-6.2" title="6.2.&nbsp;Reserved Opcodes">&sect;6.2</a>) or any opcodes not documented in
                                 this specification must not appear in the <code class="literal">code</code> array.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-110-B.1"></a>
                                 If the <code class="literal">class</code> file version number is 51.0 or above, then
                                 neither the <span class="emphasis"><em>jsr</em></span> opcode or the <span class="emphasis"><em>jsr_w</em></span> opcode may appear in the
                                 <code class="literal">code</code> array.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-C"></a>
                                 The opcode of the first instruction in the <code class="literal">code</code> array begins
                                 at index <code class="literal">0</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-D"></a>
                                 For each instruction in the <code class="literal">code</code> array except the last, the
                                 index of the opcode of the next instruction equals the index of
                                 the opcode of the current instruction plus the length of that
                                 instruction, including all its operands.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-110-D.1"></a>
                                 The <span class="emphasis"><em>wide</em></span> instruction is treated like any other instruction for
                                 these purposes; the opcode specifying the operation that a
                                 <span class="emphasis"><em>wide</em></span> instruction is to modify is treated as one of the
                                 operands of that <span class="emphasis"><em>wide</em></span> instruction. That opcode must never be
                                 directly reachable by the computation.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-E"></a>
                                 The last byte of the last instruction in the <code class="literal">code</code> array must
                                 be the byte at index
                                 <code class="literal">code_length - 1</code>.
                        </p>
                     </li>
                  </ul>
               </div>
               <p class="norm"><a name="jvms-4.9.1-120"></a>The static constraints on
                  the operands of instructions in the <code class="literal">code</code> array are as
                  follows:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-A"></a>
                                 The target of each jump and branch instruction (<span class="emphasis"><em>jsr</em></span>, <span class="emphasis"><em>jsr_w</em></span>,
                                 <span class="emphasis"><em>goto</em></span>, <span class="emphasis"><em>goto_w</em></span>, <span class="emphasis"><em>ifeq</em></span>, <span class="emphasis"><em>ifne</em></span>, <span class="emphasis"><em>ifle</em></span>, <span class="emphasis"><em>iflt</em></span>, <span class="emphasis"><em>ifge</em></span>,
                                 <span class="emphasis"><em>ifgt</em></span>, <span class="emphasis"><em>ifnull</em></span>, <span class="emphasis"><em>ifnonnull</em></span>, <span class="emphasis"><em>if_icmpeq</em></span>, <span class="emphasis"><em>if_icmpne</em></span>,
                                 <span class="emphasis"><em>if_icmple</em></span>, <span class="emphasis"><em>if_icmplt</em></span>, <span class="emphasis"><em>if_icmpge</em></span>, <span class="emphasis"><em>if_icmpgt</em></span>, <span class="emphasis"><em>if_acmpeq</em></span>,
                                 <span class="emphasis"><em>if_acmpne</em></span>) must be the opcode of an instruction within this
                                 method.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-A.1"></a>
                                 The target of a jump or branch instruction must never be the
                                 opcode used to specify the operation to be modified by a <span class="emphasis"><em>wide</em></span>
                                 instruction; a jump or branch target may be the <span class="emphasis"><em>wide</em></span>
                                 instruction itself.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-B"></a>
                                 Each target, including the default, of each <span class="emphasis"><em>tableswitch</em></span>
                                 instruction must be the opcode of an instruction within this
                                 method.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-B.1"></a>
                                 Each <span class="emphasis"><em>tableswitch</em></span> instruction must have a number of entries in
                                 its jump table that is consistent with the value of
                                 its <span class="emphasis"><em>low</em></span> and
                                 <span class="emphasis"><em>high</em></span> jump table operands, and
                                 its <span class="emphasis"><em>low</em></span> value must be less than or equal to
                                 its <span class="emphasis"><em>high</em></span> value.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-B.2"></a>
                                 No target of a <span class="emphasis"><em>tableswitch</em></span> instruction may be the opcode used
                                 to specify the operation to be modified by a <span class="emphasis"><em>wide</em></span> instruction;
                                 a <span class="emphasis"><em>tableswitch</em></span> target may be a <span class="emphasis"><em>wide</em></span> instruction
                                 itself.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-C"></a>
                                 Each target, including the default, of each <span class="emphasis"><em>lookupswitch</em></span>
                                 instruction must be the opcode of an instruction within this
                                 method.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-C.1"></a>
                                 Each <span class="emphasis"><em>lookupswitch</em></span> instruction must have a number
                                 of <span class="emphasis"><em>match-offset</em></span> pairs that is consistent
                                 with the value of its <span class="emphasis"><em>npairs</em></span> operand. The
                                 <span class="emphasis"><em>match-offset</em></span> pairs must be sorted in
                                 increasing numerical order by signed match value.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-C.2"></a>
                                 No target of a <span class="emphasis"><em>lookupswitch</em></span> instruction may be the opcode used
                                 to specify the operation to be modified by a <span class="emphasis"><em>wide</em></span> instruction;
                                 a <span class="emphasis"><em>lookupswitch</em></span> target may be a <span class="emphasis"><em>wide</em></span> instruction
                                 itself.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-D"></a>
                                 The operand of each <span class="emphasis"><em>ldc</em></span> instruction and each <span class="emphasis"><em>ldc_w</em></span>
                                 instruction must be a valid index into the <code class="literal">constant_pool</code>
                                 table. The constant pool entry referenced by that index must be
                                 of type:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.1-120-D-A"></a>
                                    	  <code class="literal">CONSTANT_Integer</code>, <code class="literal">CONSTANT_Float</code>, or <code class="literal">CONSTANT_String</code>
                                    	  if the <code class="literal">class</code> file version number is less than 49.0.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.1-120-D-B"></a>
                                    	  <code class="literal">CONSTANT_Integer</code>, <code class="literal">CONSTANT_Float</code>, <code class="literal">CONSTANT_String</code>, or
                                    	  <code class="literal">CONSTANT_Class</code> if the <code class="literal">class</code> file version number is 49.0
                                    	  or 50.0.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.1-120-D-C"></a>
                                    	  <code class="literal">CONSTANT_Integer</code>, <code class="literal">CONSTANT_Float</code>, <code class="literal">CONSTANT_String</code>,
                                    	  <code class="literal">CONSTANT_Class</code>, <code class="literal">CONSTANT_MethodType</code>, or
                                    	  <code class="literal">CONSTANT_MethodHandle</code> if the <code class="literal">class</code> file version number
                                    	  is 51.0 or above.
                                 </p>
                              </li>
                           </ul>
                        </div>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-E"></a>
                                 The operands of each <span class="emphasis"><em>ldc2_w</em></span> instruction must represent a valid
                                 index into the <code class="literal">constant_pool</code> table. The constant pool entry
                                 referenced by that index must be of type <code class="literal">CONSTANT_Long</code> or
                                 <code class="literal">CONSTANT_Double</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-E.1"></a>
                                 The subsequent constant pool index must also be a valid index
                                 into the constant pool, and the constant pool entry at that
                                 index must not be used.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-F"></a>
                                 The operands of each <span class="emphasis"><em>getfield</em></span>, <span class="emphasis"><em>putfield</em></span>, <span class="emphasis"><em>getstatic</em></span>, and
                                 <span class="emphasis"><em>putstatic</em></span> instruction must represent a valid index into the
                                 <code class="literal">constant_pool</code> table. The constant pool entry referenced by
                                 that index must be of type <code class="literal">CONSTANT_Fieldref</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-G"></a>
                                 The <span class="emphasis"><em>indexbyte</em></span> operands of each
                                 <span class="emphasis"><em>invokevirtual</em></span> instruction must represent a valid index into
                                 the <code class="literal">constant_pool</code> table. The constant pool entry referenced by
                                 that index must be of type <code class="literal">CONSTANT_Methodref</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-H"></a>
                                 The <span class="emphasis"><em>indexbyte</em></span> operands of each
                                 <span class="emphasis"><em>invokespecial</em></span> and <span class="emphasis"><em>invokestatic</em></span> instruction must represent a
                                 valid index into the <code class="literal">constant_pool</code> table. If the <code class="literal">class</code> file
                                 version number is less than 52.0, the constant pool entry
                                 referenced by that index must be of type <code class="literal">CONSTANT_Methodref</code>;
                                 if the <code class="literal">class</code> file version number is 52.0 or above, the
                                 constant pool entry referenced by that index must be of type
                                 <code class="literal">CONSTANT_Methodref</code> or <code class="literal">CONSTANT_InterfaceMethodref</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-I"></a>
                                 The <span class="emphasis"><em>indexbyte</em></span> operands of each
                                 <span class="emphasis"><em>invokeinterface</em></span> instruction must represent a valid index into
                                 the <code class="literal">constant_pool</code> table. The constant pool entry referenced by
                                 that index must be of type <code class="literal">CONSTANT_InterfaceMethodref</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-I.1"></a>
                                 The value of the <span class="emphasis"><em>count</em></span> operand of each
                                 <span class="emphasis"><em>invokeinterface</em></span> instruction must reflect the number of local
                                 variables necessary to store the arguments to be passed to the
                                 interface method, as implied by the descriptor of the
                                 <code class="literal">CONSTANT_NameAndType_info</code> structure referenced by the
                                 <code class="literal">CONSTANT_InterfaceMethodref</code> constant pool entry.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-I.2"></a>
                                 The fourth operand byte of each <span class="emphasis"><em>invokeinterface</em></span> instruction
                                 must have the value zero.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-J"></a>
                                 The <span class="emphasis"><em>indexbyte</em></span> operands of each
                                 <span class="emphasis"><em>invokedynamic</em></span> instruction must represent a valid index into
                                 the <code class="literal">constant_pool</code> table. The constant pool entry referenced by
                                 that index must be of type <code class="literal">CONSTANT_InvokeDynamic</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-J.1"></a>
                                 The third and fourth operand bytes of each <span class="emphasis"><em>invokedynamic</em></span>
                                 instruction must have the value zero.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-K"></a>
                                 Only the <span class="emphasis"><em>invokespecial</em></span> instruction is allowed to invoke an
                                 instance initialization method
                                 (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>).
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-K.1"></a>
                                 No other method whose name begins with the character '<code class="literal">&lt;</code>'
                                 ('<code class="literal">\u003c</code>') may be called by the method
                                 invocation instructions. In particular, the class or interface
                                 initialization method specially named <code class="literal">&lt;clinit&gt;</code> is never called
                                 explicitly from Java Virtual Machine instructions, but only implicitly by the
                                 Java Virtual Machine itself.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-L"></a>
                                 The operands of each <span class="emphasis"><em>instanceof</em></span>, <span class="emphasis"><em>checkcast</em></span>, <span class="emphasis"><em>new</em></span>, and
                                 <span class="emphasis"><em>anewarray</em></span> instruction, and the <span class="emphasis"><em>indexbyte</em></span>
                                 operands of each <span class="emphasis"><em>multianewarray</em></span> instruction, must represent a
                                 valid index into the <code class="literal">constant_pool</code> table. The constant pool
                                 entry referenced by that index must be of type
                                 <code class="literal">CONSTANT_Class</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-M"></a>
                                 No <span class="emphasis"><em>new</em></span> instruction may reference a constant pool entry of type
                                 <code class="literal">CONSTANT_Class</code> that represents an array type
                                 (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>). The <span class="emphasis"><em>new</em></span> instruction cannot be
                                 used to create an array.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-N"></a>
                                 No <span class="emphasis"><em>anewarray</em></span> instruction may be used to create an array of
                                 more than 255 dimensions.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-O"></a>
                                 A <span class="emphasis"><em>multianewarray</em></span> instruction must be used only to create an
                                 array of a type that has at least as many dimensions as the
                                 value of its <span class="emphasis"><em>dimensions</em></span> operand. That is,
                                 while a <span class="emphasis"><em>multianewarray</em></span> instruction is not required to create
                                 all of the dimensions of the array type referenced by
                                 its <span class="emphasis"><em>indexbyte</em></span> operands, it must not attempt
                                 to create more dimensions than are in the array type.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-O.1"></a>
                                 The <span class="emphasis"><em>dimensions</em></span> operand of each
                                 <span class="emphasis"><em>multianewarray</em></span> instruction must not be zero.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-P"></a>
                                 The <span class="emphasis"><em>atype</em></span> operand of each <span class="emphasis"><em>newarray</em></span>
                                 instruction must take one of the values <code class="literal">T_BOOLEAN</code> (4),
                                 <code class="literal">T_CHAR</code> (5), <code class="literal">T_FLOAT</code> (6), <code class="literal">T_DOUBLE</code> (7), <code class="literal">T_BYTE</code> (8),
                                 <code class="literal">T_SHORT</code> (9), <code class="literal">T_INT</code> (10), or <code class="literal">T_LONG</code> (11).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-Q"></a>
                                 The <span class="emphasis"><em>index</em></span> operand of each <span class="emphasis"><em>iload</em></span>, <span class="emphasis"><em>fload</em></span>,
                                 <span class="emphasis"><em>aload</em></span>, <span class="emphasis"><em>istore</em></span>, <span class="emphasis"><em>fstore</em></span>, <span class="emphasis"><em>astore</em></span>, <span class="emphasis"><em>iinc</em></span>, and <span class="emphasis"><em>ret</em></span>
                                 instruction must be a non-negative integer no greater
                                 than <code class="literal">max_locals - 1</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-Q.1"></a>
                                 The implicit index of each <span class="emphasis"><em>iload_&lt;n&gt;</em></span>, <span class="emphasis"><em>fload_&lt;n&gt;</em></span>, <span class="emphasis"><em>aload_&lt;n&gt;</em></span>,
                                 <span class="emphasis"><em>istore_&lt;n&gt;</em></span>, <span class="emphasis"><em>fstore_&lt;n&gt;</em></span>, and <span class="emphasis"><em>astore_&lt;n&gt;</em></span> instruction must be no
                                 greater than <code class="literal">max_locals - 1</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-R"></a>
                                 The <span class="emphasis"><em>index</em></span> operand of each <span class="emphasis"><em>lload</em></span>, <span class="emphasis"><em>dload</em></span>,
                                 <span class="emphasis"><em>lstore</em></span>, and <span class="emphasis"><em>dstore</em></span> instruction must be no greater
                                 than <code class="literal">max_locals - 2</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-R.1"></a>
                                 The implicit index of each <span class="emphasis"><em>lload_&lt;n&gt;</em></span>, <span class="emphasis"><em>dload_&lt;n&gt;</em></span>, <span class="emphasis"><em>lstore_&lt;n&gt;</em></span>, and
                                 <span class="emphasis"><em>dstore_&lt;n&gt;</em></span> instruction must be no greater
                                 than <code class="literal">max_locals - 2</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-S"></a>
                                 The <span class="emphasis"><em>indexbyte</em></span> operands of each <span class="emphasis"><em>wide</em></span>
                                 instruction modifying an <span class="emphasis"><em>iload</em></span>, <span class="emphasis"><em>fload</em></span>, <span class="emphasis"><em>aload</em></span>, <span class="emphasis"><em>istore</em></span>,
                                 <span class="emphasis"><em>fstore</em></span>, <span class="emphasis"><em>astore</em></span>, <span class="emphasis"><em>iinc</em></span>, or <span class="emphasis"><em>ret</em></span> instruction must represent
                                 a non-negative integer no greater than
                                 <code class="literal">max_locals - 1</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-S.1"></a>
                                 The <span class="emphasis"><em>indexbyte</em></span> operands of each <span class="emphasis"><em>wide</em></span>
                                 instruction modifying an <span class="emphasis"><em>lload</em></span>, <span class="emphasis"><em>dload</em></span>, <span class="emphasis"><em>lstore</em></span>, or <span class="emphasis"><em>dstore</em></span>
                                 instruction must represent a non-negative integer no greater
                                 than <code class="literal">max_locals - 2</code>.
                        </p>
                     </li>
                  </ul>
               </div>
            </div>
            <div class="section" title="4.9.2.&nbsp;Structural Constraints">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.9.2"></a>4.9.2.&nbsp;Structural Constraints
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.9.2-100"></a>The structural constraints
                  on the <code class="literal">code</code> array specify constraints on relationships between Java Virtual Machine
                  instructions. The structural constraints are as follows:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-100-A"></a>
                                 Each instruction must only be executed with the appropriate type
                                 and number of arguments in the operand stack and local variable
                                 array, regardless of the execution path that leads to its
                                 invocation.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-100-A.1"></a>
                                 An instruction operating on values of type <code class="literal">int</code> is also
                                 permitted to operate on values of type <code class="literal">boolean</code>, <code class="literal">byte</code>,
                                 <code class="literal">char</code>, and <code class="literal">short</code>.
                        </p>
                        <p class="note">As noted in <a class="xref" href="jvms-2.html#jvms-2.3.4" title="2.3.4.&nbsp;The boolean Type">&sect;2.3.4</a> and
                                 <a class="xref" href="jvms-2.html#jvms-2.11.1" title="2.11.1.&nbsp;Types and the Java Virtual Machine">&sect;2.11.1</a>, the Java Virtual Machine internally converts
                                 values of types <code class="literal">boolean</code>, <code class="literal">byte</code>, <code class="literal">short</code>, and <code class="literal">char</code> to type
                                 <code class="literal">int</code>.)
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-B"></a>
                                 If an instruction can be executed along several different
                                 execution paths, the operand stack must have the same depth
                                 (<a class="xref" href="jvms-2.html#jvms-2.6.2" title="2.6.2.&nbsp;Operand Stacks">&sect;2.6.2</a>) prior to the execution of the
                                 instruction, regardless of the path taken.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-C"></a>
                                 At no point during execution can the operand stack grow to a
                                 depth greater than that implied by
                                 the <code class="literal">max_stack</code> item.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-D"></a>
                                 At no point during execution can more values be popped from the
                                 operand stack than it contains.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-E"></a>
                                 At no point during execution can the order of the local variable
                                 pair holding a value of type <code class="literal">long</code> or <code class="literal">double</code> be reversed or
                                 the pair split up. At no point can the local variables of such a
                                 pair be operated on individually.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-F"></a>
                                 No local variable (or local variable pair, in the case of a
                                 value of type <code class="literal">long</code> or <code class="literal">double</code>) can be accessed before it is
                                 assigned a value.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-G"></a>
                                 Each <span class="emphasis"><em>invokespecial</em></span> instruction must name an instance
                                 initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), a method in
                                 the current class or interface, a method in a superclass of the
                                 current class, a method in a direct superinterface of the
                                 current class or interface, or a method in <code class="literal">Object</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-G.1"></a>
                                 When an instance initialization method is invoked, an
                                 uninitialized class instance must be in an appropriate position
                                 on the operand stack. An instance initialization method must
                                 never be invoked on an initialized class instance.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-G.2"></a>
                                 If an <span class="emphasis"><em>invokespecial</em></span> instruction names an instance
                                 initialization method and the target reference on the operand
                                 stack is an uninitialized class instance for the current class,
                                 then <span class="emphasis"><em>invokespecial</em></span> must name an instance initialization method
                                 from the current class or its direct superclass.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-G.3"></a>
                                 If an <span class="emphasis"><em>invokespecial</em></span> instruction names an instance
                                 initialization method  and the target reference on the
                                 operand stack is a class instance created by an earlier <span class="emphasis"><em>new</em></span>
                                 instruction, then <span class="emphasis"><em>invokespecial</em></span> must name an instance
                                 initialization method from the class of that class
                                 instance.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-G.4"></a>
                                 If an <span class="emphasis"><em>invokespecial</em></span> instruction names a method which is not an
                                 instance initialization method, then the type of the target
                                 reference on the operand stack must be assignment compatible
                                 with the current class (JLS &sect;5.2).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-H"></a>
                                 Each instance initialization method, except for the instance
                                 initialization method derived from the constructor of class
                                 <code class="literal">Object</code>, must call either another instance initialization
                                 method of <code class="literal">this</code> or an instance initialization method of its
                                 direct superclass <code class="literal">super</code> before its instance members
                                 are <span class="emphasis"><em>accessed</em></span>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-H.1"></a>
                                 However, instance fields of <code class="literal">this</code> that are declared in the
                                 current class may be <span class="emphasis"><em>assigned</em></span> before
                                 calling any instance initialization method.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-I"></a>
                                 When any instance method is invoked or when any instance
                                 variable is accessed, the class instance that contains the
                                 instance method or instance variable must already be
                                 initialized.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-I2"></a>
                                 If there is an uninitialized class instance in a local variable
                                 in code protected by an exception handler, then i) if the
                                 handler is inside an <code class="literal">&lt;init&gt;</code> method, the handler must throw an
                                 exception or loop forever, and ii) if the handler is not inside
                                 an <code class="literal">&lt;init&gt;</code> method, the uninitialized class instance must remain
                                 uninitialized.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-J"></a>
                                 There must never be an uninitialized class instance on the
                                 operand stack or in a local variable when a <span class="emphasis"><em>jsr</em></span> or <span class="emphasis"><em>jsr_w</em></span>
                                 instruction is executed.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-K"></a>
                                 The type of every class instance that is the target of a method
                                 invocation instruction must be assignment compatible with the
                                 class or interface type specified in the instruction (JLS
                                 &sect;5.2).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-L"></a>
                                 The types of the arguments to each method invocation must be
                                 method invocation compatible with the method descriptor (JLS
                                 &sect;5.3, <a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-M"></a>
                                 Each return instruction must match its method's return
                                 type:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-M-A"></a>
                                    	  If the method returns a <code class="literal">boolean</code>, <code class="literal">byte</code>, <code class="literal">char</code>, <code class="literal">short</code>,
                                    	  or <code class="literal">int</code>, only the <span class="emphasis"><em>ireturn</em></span> instruction may be used.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-M-B"></a>
                                    	  If the method returns a <code class="literal">float</code>, <code class="literal">long</code>, or <code class="literal">double</code>, only
                                    	  an <span class="emphasis"><em>freturn</em></span>, <span class="emphasis"><em>lreturn</em></span>, or <span class="emphasis"><em>dreturn</em></span> instruction,
                                    	  respectively, may be used.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-M-C"></a>
                                    	  If the method returns a <code class="literal">reference</code> type, only an <span class="emphasis"><em>areturn</em></span>
                                    	  instruction may be used, and the type of the returned value
                                    	  must be assignment compatible with the return descriptor of
                                    	  the method (JLS &sect;5.2, <a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-M-D"></a>
                                    	  All instance initialization methods, class or interface
                                    	  initialization methods, and methods declared to return
                                    	  <code class="literal">void</code> must use only the <span class="emphasis"><em>return</em></span> instruction.
                                 </p>
                              </li>
                           </ul>
                        </div>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-N"></a>
                                 The type of every class instance accessed by a <span class="emphasis"><em>getfield</em></span>
                                 instruction or modified by a <span class="emphasis"><em>putfield</em></span> instruction must be
                                 assignment compatible with the class type specified in the
                                 instruction (JLS &sect;5.2).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-O"></a>
                                 The type of every value stored by a <span class="emphasis"><em>putfield</em></span> or <span class="emphasis"><em>putstatic</em></span>
                                 instruction must be compatible with the descriptor of the field
                                 (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>) of the class instance or class
                                 being stored into:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-O-A"></a>
                                    	  If the descriptor type is <code class="literal">boolean</code>, <code class="literal">byte</code>, <code class="literal">char</code>,
                                    	  <code class="literal">short</code>, or <code class="literal">int</code>, then the value must be an <code class="literal">int</code>.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-O-B"></a>
                                    	  If the descriptor type is <code class="literal">float</code>, <code class="literal">long</code>, or <code class="literal">double</code>, then
                                    	  the value must be a <code class="literal">float</code>, <code class="literal">long</code>, or <code class="literal">double</code>,
                                    	  respectively.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-O-C"></a>
                                    	  If the descriptor type is a <code class="literal">reference</code> type, then the value must
                                    	  be of a type that is assignment compatible with the
                                    	  descriptor type (JLS &sect;5.2).
                                 </p>
                              </li>
                           </ul>
                        </div>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-P"></a>
                                 The type of every value stored into an array by an <span class="emphasis"><em>aastore</em></span>
                                 instruction must be a <code class="literal">reference</code> type.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-P.1"></a>
                                 The component type of the array being stored into by the
                                 <span class="emphasis"><em>aastore</em></span> instruction must also be a <code class="literal">reference</code> type.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-Q"></a>
                                 Each <span class="emphasis"><em>athrow</em></span> instruction must throw only values that are
                                 instances of class <code class="literal">Throwable</code> or of subclasses of
                                 <code class="literal">Throwable</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-Q.1"></a>
                                 Each class mentioned in a <code class="literal">catch_type</code> item of
                                 the <code class="literal">exception_table</code> array of the method's
                                 <code class="literal">Code_attribute</code> structure must be <code class="literal">Throwable</code> or a subclass of
                                 <code class="literal">Throwable</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-R"></a>
                                 If <span class="emphasis"><em>getfield</em></span> or <span class="emphasis"><em>putfield</em></span> is used to access a <code class="literal">protected</code>
                                 field declared in a superclass that is a member of a different
                                 run-time package than the current class, then the type of the
                                 class instance being accessed must be the same as or a subclass
                                 of the current class.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-R.1"></a>
                                 If <span class="emphasis"><em>invokevirtual</em></span> or <span class="emphasis"><em>invokespecial</em></span> is used to access a
                                 <code class="literal">protected</code> method declared in a superclass that is a member of
                                 a different run-time package than the current class, then the
                                 type of the class instance being accessed must be the same as or
                                 a subclass of the current class.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-S"></a>
                                 Execution never falls off the bottom of the <code class="literal">code</code> array.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-T"></a>
                                 No return address (a value of type <code class="literal">returnAddress</code>) may be
                                 loaded from a local variable.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-U"></a>
                                 The instruction following each <span class="emphasis"><em>jsr</em></span> or <span class="emphasis"><em>jsr_w</em></span> instruction may
                                 be returned to only by a single <span class="emphasis"><em>ret</em></span> instruction.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-V"></a>
                                 No <span class="emphasis"><em>jsr</em></span> or <span class="emphasis"><em>jsr_w</em></span> instruction that is returned to may be used
                                 to recursively call a subroutine if that subroutine is already
                                 present in the subroutine call chain. (Subroutines can be nested
                                 when using <code class="literal">try</code>-<code class="literal">finally</code> constructs from within a <code class="literal">finally</code>
                                 clause.)
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-W"></a>
                                 Each instance of type <code class="literal">returnAddress</code> can be returned to at most
                                 once.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-W.1"></a>
                                 If a <span class="emphasis"><em>ret</em></span> instruction returns to a point in the subroutine call
                                 chain above the <span class="emphasis"><em>ret</em></span> instruction corresponding to a given
                                 instance of type <code class="literal">returnAddress</code>, then that instance can never
                                 be used as a return address.
                        </p>
                     </li>
                  </ul>
               </div>
            </div>
         </div>
         <div class="section" title="4.10.&nbsp;Verification of class Files">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.10"></a>4.10.&nbsp;Verification of <code class="literal">class</code> Files
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.10-100"></a>Even though a compiler for
               the Java programming language must only produce <code class="literal">class</code> files that satisfy all the
               static and structural constraints in the previous sections, the Java Virtual Machine
               has no guarantee that any file it is asked to load was generated by
               that compiler or is properly formed. Applications such as web browsers
               do not download source code, which they then compile; these
               applications download already-compiled <code class="literal">class</code> files. The browser
               needs to determine whether the <code class="literal">class</code> file was produced by a
               trustworthy compiler or by an adversary attempting to exploit the
               Java Virtual Machine.
            </p>
            <p class="note">An additional problem with compile-time checking is
               version skew. A user may have successfully compiled a class,
               say <code class="literal">PurchaseStockOptions</code>, to be a subclass
               of <code class="literal">TradingClass</code>. But the definition of
               <code class="literal">TradingClass</code> might have changed since the time the
               class was compiled in a way that is not compatible with pre-existing
               binaries. Methods might have been deleted or had their return types or
               modifiers changed. Fields might have changed types or changed from
               instance variables to class variables. The access modifiers of a
               method or variable may have changed from <code class="literal">public</code> to <code class="literal">private</code>. For a
               discussion of these issues, see Chapter 13, "Binary Compatibility," in
               <em class="citetitle">The Java Language Specification, Java SE 8 Edition</em>.
            </p>
            <p class="norm"><a name="jvms-4.10-110"></a>Because of these potential
               problems, the Java Virtual Machine needs to verify for itself that the desired
               constraints are satisfied by the <code class="literal">class</code> files it attempts to
               incorporate. A Java Virtual Machine implementation verifies that each <code class="literal">class</code> file
               satisfies the necessary constraints at linking time
               (<a class="xref" href="jvms-5.html#jvms-5.4" title="5.4.&nbsp;Linking">&sect;5.4</a>). 
            </p>
            <p class="norm"><a name="jvms-4.10-120"></a>Link-time verification
               enhances the performance of the run-time interpreter. Expensive checks
               that would otherwise have to be performed to verify constraints at run
               time for each interpreted instruction can be eliminated. The Java Virtual Machine can
               assume that these checks have already been performed. For example, the
               Java Virtual Machine will already know the following:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-120-A"></a>There are no operand
                            stack overflows or underflows.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-120-B"></a>All local variable uses
                            and stores are valid.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-120-C"></a>The arguments to all
                            the Java Virtual Machine instructions are of valid types.
                     </p>
                  </li>
               </ul>
            </div>
            <p class="norm"><a name="jvms-4.10-200"></a>There are two strategies that
               Java Virtual Machine implementations may use for verification:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-200-A"></a>Verification by type
                              checking must be used to verify <code class="literal">class</code> files whose version
                              number is greater than or equal to 50.0.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-200-B"></a>Verification by type
                              inference must be supported by all Java Virtual Machine implementations, except
                              those conforming to the Java ME CLDC and Java Card profiles, in
                              order to verify <code class="literal">class</code> files whose version number is less than
                              50.0.
                     </p>
                     <p class="norm"><a name="jvms-4.10-200-B.1"></a>Verification on Java Virtual Machine
                              implementations supporting the Java ME CLDC and Java Card
                              profiles is governed by their respective specifications.
                     </p>
                  </li>
               </ul>
            </div>
            <p class="norm"><a name="jvms-4.10-300a"></a>In both strategies, verification is
               mainly concerned with enforcing the static and structural constraints
               from <a class="xref" href="jvms-4.html#jvms-4.9" title="4.9.&nbsp;Constraints on Java Virtual Machine Code">&sect;4.9</a> on the <code class="literal">code</code> array of the <code class="literal">Code</code>
               attribute (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). However, there are three
               additional checks outside the <code class="literal">Code</code> attribute which must be performed
               during verification:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-300-A"></a>
                              Ensuring that <code class="literal">final</code> classes are not subclassed.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-300-B"></a>
                              Ensuring that <code class="literal">final</code> methods are not overridden
                            (<a class="xref" href="jvms-5.html#jvms-5.4.5" title="5.4.5.&nbsp;Overriding">&sect;5.4.5</a>).
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-300-C"></a>
                              Checking that every class (except <code class="literal">Object</code>) has a direct
                            superclass.
                     </p>
                  </li>
               </ul>
            </div>
            <div class="section" title="4.10.1.&nbsp;Verification by Type Checking">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.10.1"></a>4.10.1.&nbsp;Verification by Type Checking
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.10.1-100"></a>A <code class="literal">class</code> file whose
                  version number is 50.0 or above (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>) must be
                  verified using the type checking rules given in this section.
               </p>
               <p class="norm"><a name="jvms-4.10.1-110"></a>If, and only if, a <code class="literal">class</code>
                  file's version number equals 50.0, then if the type checking fails, a
                  Java Virtual Machine implementation may choose to attempt to perform verification by
                  type inference (<a class="xref" href="jvms-4.html#jvms-4.10.2" title="4.10.2.&nbsp;Verification by Type Inference">&sect;4.10.2</a>).
               </p>
               <p class="note">This is a pragmatic adjustment, designed to ease the
                  transition to the new verification discipline. Many tools that
                  manipulate <code class="literal">class</code> files may alter the bytecodes of a method in a
                  manner that requires adjustment of the method's stack map frames. If a
                  tool does not make the necessary adjustments to the stack map frames,
                  type checking may fail even though the bytecode is in principle valid
                  (and would consequently verify under the old type inference
                  scheme). To allow implementors time to adapt their
                  tools, Java Virtual Machine implementations may fall back to
                  the older verification discipline, but only for a limited time.
               </p>
               <p class="note">In cases where type checking fails but type inference
                  is invoked and succeeds, a certain performance penalty is
                  expected. Such a penalty is unavoidable. It also should serve as a
                  signal to tool vendors that their output needs to be adjusted, and
                  provides vendors with additional incentive to make these
                  adjustments.
               </p>
               <p class="note">In summary, failover to verification by type
                  inference supports both the gradual addition of stack map frames to
                  the Java SE platform (if they are not present in a version 50.0 <code class="literal">class</code>
                  file, failover is allowed) and the gradual removal of the <span class="emphasis"><em>jsr</em></span> and
                  <span class="emphasis"><em>jsr_w</em></span> instructions from the Java SE platform (if they are present in a
                  version 50.0 <code class="literal">class</code> file, failover is allowed).
               </p>
               <p class="norm"><a name="jvms-4.10.1-120"></a>If a Java Virtual Machine implementation
                  ever attempts to perform verification by type inference on version
                  50.0 class files, it must do so in all cases where verification by
                  type checking fails.
               </p>
               <p class="note">This means that a Java Virtual Machine implementation cannot choose
                  to resort to type inference in once case and not in another. It must
                  either reject <code class="literal">class</code> files that do not verify via type checking, or
                  else consistently failover to the type inferencing verifier whenever
                  type checking fails.
               </p>
               <p class="norm"><a name="jvms-4.10.1-200"></a>The type checker enforces
                  type rules that are specified by means of Prolog clauses. English
                  language text is used to describe the type rules in an informal way,
                  while the Prolog clauses provide a formal specification.
               </p>
               <p class="norm"><a name="jvms-4.10.1-210"></a>The type checker requires a
                  list of stack map frames for each method with a <code class="literal">Code</code> attribute
                  (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). A list of stack map frames is given by
                  the <code class="literal">StackMapTable</code> attribute (<a class="xref" href="jvms-4.html#jvms-4.7.4" title="4.7.4.&nbsp;The StackMapTable Attribute">&sect;4.7.4</a>) of a
                  <code class="literal">Code</code> attribute. The intent is that a stack map frame must appear at
                  the beginning of each basic block in a method. The stack map frame
                  specifies the verification type of each operand stack entry and of
                  each local variable at the start of each basic block. The type checker
                  reads the stack map frames for each method with a <code class="literal">Code</code> attribute and
                  uses these maps to generate a proof of the type safety of the
                  instructions in the <code class="literal">Code</code> attribute.
               </p>
               <p class="norm">A class is type safe if all its methods are type
                  safe, and it does not subclass a <code class="literal">final</code> class.
               </p><pre class="programlisting">
classIsTypeSafe(Class) :-
    classClassName(Class, Name), 
    classDefiningLoader(Class, L),
    superclassChain(Name, L, Chain),
    Chain \= [],
    classSuperClassName(Class, SuperclassName),
    loadedClass(SuperclassName, L, Superclass),
    classIsNotFinal(Superclass),	 
    classMethods(Class, Methods), 
    checklist(methodIsTypeSafe(Class), Methods).
</pre><pre class="programlisting">
classIsTypeSafe(Class) :-
    classClassName(Class, 'java/lang/Object'),
    classDefiningLoader(Class, L),
    isBootstrapLoader(L),
    classMethods(Class, Methods), 
    checklist(methodIsTypeSafe(Class), Methods).
</pre><p class="norm">The Prolog
                  predicate <code class="literal">classIsTypeSafe</code> assumes
                  that <code class="literal">Class</code> is a Prolog term representing a binary
                  class that has been successfully parsed and loaded. This specification
                  does not mandate the precise structure of this term, but does require
                  that certain predicates be defined upon it.
               </p>
               <p class="note">For example, we assume a predicate
                  <code class="literal">classMethods(Class, Methods)</code> that, given a term
                  representing a class as described above as its first argument, binds
                  its second argument to a list comprising all the methods of the class,
                  represented in a convenient form described later.
               </p>
               <p class="norm-error"><a name="jvms-4.10.1-300"></a>Iff the
                  predicate <code class="literal">classIsTypeSafe</code> is not true, the type
                  checker must throw the exception <code class="literal">VerifyError</code> to indicate that the <code class="literal">class</code>
                  file is malformed. Otherwise, the <code class="literal">class</code> file has type checked
                  successfully and bytecode verification has completed
                  successfully.
               </p>
               <p class="norm"><a name="jvms-4.10.1-400"></a>The rest of this section
                  explains the process of type checking in detail:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-A"></a>First, we give Prolog
                                 predicates for core Java Virtual Machine artifacts like classes and methods
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.1" title="4.10.1.1.&nbsp;Accessors for Java Virtual Machine Artifacts">&sect;4.10.1.1</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-B"></a>Second, we specify
                                 the type system known to the type checker
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.2" title="4.10.1.2.&nbsp;Verification Type System">&sect;4.10.1.2</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-C"></a>Third, we specify the
                                 Prolog representation of instructions and stack map frames
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.3" title="4.10.1.3.&nbsp;Instruction Representation">&sect;4.10.1.3</a>,
                                 <a class="xref" href="jvms-4.html#jvms-4.10.1.4" title="4.10.1.4.&nbsp;Stack Map Frame Representation">&sect;4.10.1.4</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-D"></a>Fourth, we specify
                                 how a method is type checked, for methods without code
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.5" title="4.10.1.5.&nbsp;Type Checking Abstract and Native Methods">&sect;4.10.1.5</a>) and methods with code
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.6" title="4.10.1.6.&nbsp;Type Checking Methods with Code">&sect;4.10.1.6</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-E"></a>Fifth, we discuss
                                 type checking issues common to all load and store instructions
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.7" title="4.10.1.7.&nbsp;Type Checking Load and Store Instructions">&sect;4.10.1.7</a>), and also issues of access to
                                 <code class="literal">protected</code> members (<a class="xref" href="jvms-4.html#jvms-4.10.1.8" title="4.10.1.8.&nbsp;Type Checking for protected Members">&sect;4.10.1.8</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-F"></a>Finally, we specify
                                 the rules to type check each instruction
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.9" title="4.10.1.9.&nbsp;Type Checking Instructions">&sect;4.10.1.9</a>).
                        </p>
                     </li>
                  </ul>
               </div>
               <div class="section" title="4.10.1.1.&nbsp;Accessors for Java Virtual Machine Artifacts">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.1"></a>4.10.1.1.&nbsp;Accessors for Java Virtual Machine Artifacts
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.1-100"></a>We stipulate the
                     existence of 28 Prolog predicates ("accessors") that have certain
                     expected behavior but whose formal definitions are not given in this
                     specification.
                  </p>
                  <div class="variablelist">
                     <dl>
                        <dt><span class="term">classClassName(Class, ClassName)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-A"></a>
                              	Extracts the name, <code class="literal">ClassName</code>, of the
                              	class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">classIsInterface(Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-B"></a>
                              	True iff the class, <code class="literal">Class</code>, is an
                              	interface.
                           </p>
                        </dd>
                        <dt><span class="term">classIsNotFinal(Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-C"></a>
                              	True iff the class, <code class="literal">Class</code>, is not a <code class="literal">final</code>
                              	class.
                           </p>
                        </dd>
                        <dt><span class="term">classSuperClassName(Class, SuperClassName)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-D"></a>
                              	Extracts the name, <code class="literal">SuperClassName</code>, of the
                              	superclass of class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">classInterfaces(Class, Interfaces)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-E"></a>
                              	Extracts a list, <code class="literal">Interfaces</code>, of the direct
                              	superinterfaces of the class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">classMethods(Class, Methods)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-F"></a>
                              	Extracts a list, <code class="literal">Methods</code>, of the methods
                              	declared in the class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">classAttributes(Class, Attributes)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-G"></a>
                              	Extracts a list, <code class="literal">Attributes</code>, of the
                              	attributes of the class <code class="literal">Class</code>.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.1-100-G.1"></a>
                              	Each attribute is represented as a functor application of the
                              	form <code class="literal">attribute(AttributeName, AttributeContents)</code>,
                                      where <code class="literal">AttributeName</code> is the name of the
                              	attribute. The format of the attribute's contents is
                              	unspecified.
                           </p>
                        </dd>
                        <dt><span class="term">classDefiningLoader(Class, Loader)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-H"></a>
                              	Extracts the defining class loader, <code class="literal">Loader</code>,
                              	of the class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isBootstrapLoader(Loader)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-I"></a>
                              	True iff the class loader <code class="literal">Loader</code> is the
                              	bootstrap class loader.
                           </p>
                        </dd>
                        <dt><span class="term">loadedClass(Name, InitiatingLoader, ClassDefinition)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-J"></a>
                              	True iff there exists a class named <code class="literal">Name</code>
                              	whose representation (in accordance with this specification)
                              	when loaded by the class
                              	loader <code class="literal">InitiatingLoader</code>
                              	is <code class="literal">ClassDefinition</code>.
                           </p>
                        </dd>
                        <dt><span class="term">methodName(Method, Name)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-K"></a>
                              	Extracts the name, <code class="literal">Name</code>, of the
                              	method <code class="literal">Method</code>.
                           </p>
                        </dd>
                        <dt><span class="term">methodAccessFlags(Method, AccessFlags)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-L"></a>
                              	Extracts the access flags, <code class="literal">AccessFlags</code>, of
                              	the method <code class="literal">Method</code>.
                           </p>
                        </dd>
                        <dt><span class="term">methodDescriptor(Method, Descriptor)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-M"></a>
                              	Extracts the descriptor, <code class="literal">Descriptor</code>, of the
                              	method <code class="literal">Method</code>.
                           </p>
                        </dd>
                        <dt><span class="term">methodAttributes(Method, Attributes)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-N"></a>
                              	Extracts a list, <code class="literal">Attributes</code>, of the
                              	attributes of the method <code class="literal">Method</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isInit(Method)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-O"></a>
                              	True iff <code class="literal">Method</code> (regardless of class) is <code class="literal">&lt;init&gt;</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isNotInit(Method)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-P"></a>
                              	True iff <code class="literal">Method</code> (regardless of class) is not <code class="literal">&lt;init&gt;</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isNotFinal(Method, Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-Q"></a>
                              	True iff <code class="literal">Method</code> in
                              	class <code class="literal">Class</code> is not <code class="literal">final</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isStatic(Method, Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-R"></a>
                              	True iff <code class="literal">Method</code> in
                              	class <code class="literal">Class</code> is <code class="literal">static</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isNotStatic(Method, Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-S"></a>
                              	True iff <code class="literal">Method</code> in
                              	class <code class="literal">Class</code> is not <code class="literal">static</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isPrivate(Method, Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-T"></a>
                              	True iff <code class="literal">Method</code> in
                              	class <code class="literal">Class</code> is <code class="literal">private</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isNotPrivate(Method, Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-U"></a>
                              	True iff <code class="literal">Method</code> in
                              	class <code class="literal">Class</code> is not <code class="literal">private</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isProtected(MemberClass, MemberName, MemberDescriptor)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-V"></a>
                              	True iff there is a member named <code class="literal">MemberName</code>
                              	with descriptor <code class="literal">MemberDescriptor</code> in the
                              	class <code class="literal">MemberClass</code> and it is
                              	<code class="literal">protected</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isNotProtected(MemberClass, MemberName, MemberDescriptor)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-W"></a>
                              	True iff there is a member named <code class="literal">MemberName</code>
                              	with descriptor <code class="literal">MemberDescriptor</code> in the
                              	class <code class="literal">MemberClass</code> and it is not
                              	<code class="literal">protected</code>.
                           </p>
                        </dd>
                        <dt><span class="term">parseFieldDescriptor(Descriptor, Type)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-X"></a>
                              	Converts a field descriptor, <code class="literal">Descriptor</code>,
                              	into the corresponding verification type <code class="literal">Type</code>
                              	(<a class="xref" href="jvms-4.html#jvms-4.10.1.2" title="4.10.1.2.&nbsp;Verification Type System">&sect;4.10.1.2</a>).
                           </p>
                        </dd>
                        <dt><span class="term">parseMethodDescriptor(Descriptor, ArgTypeList, ReturnType)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-Y"></a>
                              	Converts a method descriptor, <code class="literal">Descriptor</code>,
                              	into a list of verification
                              	types, <code class="literal">ArgTypeList</code>, corresponding to the
                              	method argument types, and a verification
                              	type, <code class="literal">ReturnType</code>, corresponding to the
                              	return type.
                           </p>
                        </dd>
                        <dt><span class="term">parseCodeAttribute(Class, Method, FrameSize, MaxStack, ParsedCode, Handlers, StackMap)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-Z"></a>
                              	Extracts the instruction
                              	stream, <code class="literal">ParsedCode</code>, of the method
                              	<code class="literal">Method</code> in <code class="literal">Class</code>, as well
                              	as the maximum operand stack
                              	size, <code class="literal">MaxStack</code>, the maximal number of local
                              	variables, <code class="literal">FrameSize</code>, the exception
                              	handlers, <code class="literal">Handlers</code>, and the stack
                              	map <code class="literal">StackMap</code>.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.1-100-Z.1"></a>
                              	The representation of the instruction stream and stack map
                              	attribute must be as specified in
                              	<a class="xref" href="jvms-4.html#jvms-4.10.1.3" title="4.10.1.3.&nbsp;Instruction Representation">&sect;4.10.1.3</a> and
                              	<a class="xref" href="jvms-4.html#jvms-4.10.1.4" title="4.10.1.4.&nbsp;Stack Map Frame Representation">&sect;4.10.1.4</a>.
                           </p>
                        </dd>
                        <dt><span class="term">samePackageName(Class1, Class2)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-AA"></a>
                              	True iff the package names of <code class="literal">Class1</code>
                              	and <code class="literal">Class2</code> are the same.
                           </p>
                        </dd>
                        <dt><span class="term">differentPackageName(Class1, Class2)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-AB"></a>
                              	True iff the package names of <code class="literal">Class1</code>
                              	and <code class="literal">Class2</code> are different.
                           </p>
                        </dd>
                     </dl>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.1-200"></a>When type checking a
                     method's body, it is convenient to access information about the
                     method. For this purpose, we define
                     an <span class="emphasis"><em>environment</em></span>, a six-tuple consisting of:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm">a class</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">a method</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">the declared return type of the method</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">the instructions in a method</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">the maximal size of the operand stack</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">a list of exception handlers</p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.1-300"></a>We specify accessors to
                     extract information from the environment.
                  </p><pre class="programlisting">
allInstructions(Environment, Instructions) :-
    Environment = environment(_Class, _Method, _ReturnType,
                              Instructions, _, _).

exceptionHandlers(Environment, Handlers) :-
    Environment = environment(_Class, _Method, _ReturnType,
                              _Instructions, _, Handlers).

maxOperandStackLength(Environment, MaxStack) :-
    Environment = environment(_Class, _Method, _ReturnType,
                              _Instructions, MaxStack, _Handlers).

thisClass(Environment, class(ClassName, L)) :-
    Environment = environment(Class, _Method, _ReturnType,
                              _Instructions, _, _),
    classDefiningLoader(Class, L),
    classClassName(Class, ClassName).

thisMethodReturnType(Environment, ReturnType) :-
    Environment = environment(_Class, _Method, ReturnType,
                              _Instructions, _, _).
</pre><p class="norm">We specify additional predicates to extract
                     higher-level information from the environment.
                  </p><pre class="programlisting">
offsetStackFrame(Environment, Offset, StackFrame) :-
    allInstructions(Environment, Instructions),
    member(stackMap(Offset, StackFrame), Instructions).

currentClassLoader(Environment, Loader) :-
    thisClass(Environment, class(_, Loader)).
</pre><p class="norm"><a name="jvms-4.10.1.1-400"></a>Finally, we specify a
                     general predicate used throughout the type rules:
                  </p><pre class="programlisting">
notMember(_, []).
notMember(X, [A | More]) :- X \= A, notMember(X, More).
</pre><p class="note">The principle guiding the determination as to which
                     accessors are stipulated and which are fully specified is that we do
                     not want to over-specify the representation of the <code class="literal">class</code>
                     file. Providing specific accessors to the <code class="literal">Class</code>
                     or <code class="literal">Method</code> term would force us to completely specify
                     the format for a Prolog term representing the <code class="literal">class</code> file.
                  </p>
               </div>
               <div class="section" title="4.10.1.2.&nbsp;Verification Type System">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.2"></a>4.10.1.2.&nbsp;Verification Type System
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.2-100"></a>The type checker enforces
                     a type system based upon a hierarchy of <span class="emphasis"><em>verification
                           types</em></span>, illustrated below.
                  </p><pre class="programlisting">
Verification type hierarchy:

                             top
                 ____________/\____________
                /                          \
               /                            \
            oneWord                       twoWord
           /   |   \                     /       \
          /    |    \                   /         \
        int  float  reference        long        double
                     /     \
                    /       \_____________
                   /                      \
                  /                        \
           uninitialized                    +------------------+
            /         \                     |  Java reference  |
           /           \                    |  type hierarchy  |
uninitializedThis  uninitialized(Offset)    +------------------+  
                                                     |
                                                     |
                                                    null
</pre><p class="norm"><a name="jvms-4.10.1.2-110"></a>Most verification types
                     have a direct correspondence with the primitive and reference types
                     represented by field descriptors in
                     <a class="xref" href="jvms-4.html#jvms-4.3.2-200" title="Table&nbsp;4.3-A.&nbsp;Interpretation of field descriptors">Table&nbsp;4.3-A</a>:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.2-110-A"></a>The primitive types
                                    <code class="literal">double</code>, <code class="literal">float</code>, <code class="literal">int</code>, and <code class="literal">long</code> (field descriptors
                                    <code class="literal">D</code>, <code class="literal">F</code>, <code class="literal">I</code>, <code class="literal">J</code>) each
                                    correspond to the verification type of the same name.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.2-110-B"></a>The primitive types
                                    <code class="literal">byte</code>, <code class="literal">char</code>, <code class="literal">short</code>, and <code class="literal">boolean</code> (field descriptors
                                    <code class="literal">B</code>, <code class="literal">C</code>, <code class="literal">S</code>, <code class="literal">Z</code>) all
                                    correspond to the verification type <code class="literal">int</code>.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.2-110-C"></a>Class and interface
                                    types correspond to verification types that use the
                                    functor <code class="literal">class</code>. The verification type
                                    <code class="literal">class(<span class="emphasis"><em>N</em></span>, <span class="emphasis"><em>L</em></span>)</code>
                                    represents the class whose binary name
                                    is <code class="literal"><span class="emphasis"><em>N</em></span></code> as loaded by the
                                    loader <code class="literal"><span class="emphasis"><em>L</em></span></code>. Note
                                    that <code class="literal"><span class="emphasis"><em>L</em></span></code> is an initiating
                                    loader (<a class="xref" href="jvms-5.html#jvms-5.3" title="5.3.&nbsp;Creation and Loading">&sect;5.3</a>) of the class represented
                                    by <code class="literal">class(<span class="emphasis"><em>N</em></span>, <span class="emphasis"><em>L</em></span>)</code>
                                    and may, or may not, be the class's defining loader.
                           </p>
                           <p class="note">For example, the class type <code class="literal">Object</code> would be
                                    represented as <code class="literal">class('java/lang/Object', BL)</code>,
                                    where <code class="literal">BL</code> is the bootstrap loader.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.2-110-D"></a>Array types
                                    correspond to verification types that use the
                                    functor <code class="literal">arrayOf</code>. The verification
                                    type <code class="literal">arrayOf(<span class="emphasis"><em>T</em></span>)</code>
                                    represents the array type whose component type is the
                                    verification
                                    type <code class="literal"><span class="emphasis"><em>T</em></span></code>.
                           </p>
                           <p class="note">For example, the types <code class="literal">int[]</code>
                                    and <code class="literal">Object[]</code> would be represented
                                    by <code class="literal">arrayOf(int)</code> and
                                    <code class="literal">arrayOf(class('java/lang/Object', BL))</code>
                                    respectively.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.2-120"></a>The verification type
                     <code class="literal">uninitialized(Offset)</code> is represented by applying the
                     functor <code class="literal">uninitialized</code> to an argument representing
                     the numerical value of the <code class="literal">Offset</code>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.2-200"></a>Other verification types
                     are represented in Prolog as atoms whose name denotes the verification
                     type in question.
                  </p>
                  <p class="norm">The subtyping rules for verification types are as
                     follows.
                  </p>
                  <p class="norm">Subtyping is reflexive.</p><pre class="programlisting">
isAssignable(X, X).
</pre><p class="norm">The verification types which are not
                     reference types in the Java programming language have subtype rules of the
                     form:
                  </p><pre class="programlisting">
isAssignable(v, X) :- isAssignable(the_direct_supertype_of_v, X).
</pre><p class="norm">That is, <code class="literal">v</code> is a subtype
                     of <code class="literal">X</code> if the direct supertype
                     of <code class="literal">v</code> is a subtype of <code class="literal">X</code>. The
                     rules are:
                  </p><pre class="programlisting">
isAssignable(oneWord, top).
isAssignable(twoWord, top).

isAssignable(int, X)    :- isAssignable(oneWord, X).
isAssignable(float, X)  :- isAssignable(oneWord, X).
isAssignable(long, X)   :- isAssignable(twoWord, X).
isAssignable(double, X) :- isAssignable(twoWord, X).

isAssignable(reference, X)   :- isAssignable(oneWord, X).
isAssignable(class(_, _), X) :- isAssignable(reference, X).
isAssignable(arrayOf(_), X)  :- isAssignable(reference, X).

isAssignable(uninitialized, X)     :- isAssignable(reference, X).
isAssignable(uninitializedThis, X) :- isAssignable(uninitialized, X).
isAssignable(uninitialized(_), X)  :- isAssignable(uninitialized, X).

isAssignable(null, class(_, _)).
isAssignable(null, arrayOf(_)).
isAssignable(null, X) :- isAssignable(class('java/lang/Object', BL), X),
                         isBootstrapLoader(BL).
</pre><p class="note">These subtype rules are not necessarily the most
                     obvious formulation of subtyping. There is a clear split between
                     subtyping rules for reference types in the Java programming language, and rules for
                     the remaining verification types. The split allows us to state general
                     subtyping relations between Java programming language reference types and other
                     verification types. These relations hold independently of a Java
                     reference type's position in the type hierarchy, and help to prevent
                     excessive class loading by a Java Virtual Machine implementation. For example, we do
                     not want to start climbing the Java superclass hierarchy in response
                     to a query of the form <code class="literal">class(foo, L) &lt;:
                        twoWord</code>.
                  </p>
                  <p class="note">We also have a rule that says subtyping is
                     reflexive, so together these rules cover most verification types that
                     are not reference types in the Java programming language.
                  </p>
                  <p class="norm">Subtype rules for the reference types in the
                     Java programming language are specified recursively  with
                     <code class="literal">isJavaAssignable</code>.
                  </p><pre class="programlisting">
isAssignable(class(X, Lx), class(Y, Ly)) :-
    isJavaAssignable(class(X, Lx), class(Y, Ly)).

isAssignable(arrayOf(X), class(Y, L)) :-
    isJavaAssignable(arrayOf(X), class(Y, L)).

isAssignable(arrayOf(X), arrayOf(Y)) :-
    isJavaAssignable(arrayOf(X), arrayOf(Y)).
</pre><p class="norm">For assignments, interfaces are treated like
                     <code class="literal">Object</code>.
                  </p><pre class="programlisting">
isJavaAssignable(class(_, _), class(To, L)) :-
    loadedClass(To, L, ToClass),
    classIsInterface(ToClass).

isJavaAssignable(From, To) :-
    isJavaSubclassOf(From, To).
</pre><p class="norm">Array types are subtypes of <code class="literal">Object</code>. The intent is
                     also that array types are subtypes of <code class="literal">Cloneable</code> and
                     <code class="literal">java.io.Serializable</code>.
                  </p><pre class="programlisting">
isJavaAssignable(arrayOf(_), class('java/lang/Object', BL)) :-
    isBootstrapLoader(BL).

isJavaAssignable(arrayOf(_), X) :-
    isArrayInterface(X).

isArrayInterface(class('java/lang/Cloneable', BL)) :-
    isBootstrapLoader(BL).

isArrayInterface(class('java/io/Serializable', BL)) :-
    isBootstrapLoader(BL).
</pre><p class="norm">Subtyping between arrays of primitive type is the
                     identity relation.
                  </p><pre class="programlisting">
isJavaAssignable(arrayOf(X), arrayOf(Y)) :-
    atom(X),
    atom(Y),
    X = Y.
</pre><p class="norm">Subtyping between arrays of reference type is
                     covariant.
                  </p><pre class="programlisting">
isJavaAssignable(arrayOf(X), arrayOf(Y)) :-
    compound(X), compound(Y), isJavaAssignable(X, Y).
</pre><p class="norm">Subclassing is reflexive.</p><pre class="programlisting">
isJavaSubclassOf(class(SubclassName, L), class(SubclassName, L)).
</pre><pre class="programlisting">
isJavaSubclassOf(class(SubclassName, LSub), class(SuperclassName, LSuper)) :-
    superclassChain(SubclassName, LSub, Chain),
    member(class(SuperclassName, L), Chain),
    loadedClass(SuperclassName, L, Sup),
    loadedClass(SuperclassName, LSuper, Sup).

superclassChain(ClassName, L, [class(SuperclassName, Ls) | Rest]) :-
    loadedClass(ClassName, L, Class),
    classSuperClassName(Class, SuperclassName),
    classDefiningLoader(Class, Ls),
    superclassChain(SuperclassName, Ls, Rest).

superclassChain('java/lang/Object', L, []) :-
    loadedClass('java/lang/Object', L, Class),
    classDefiningLoader(Class, BL),
    isBootstrapLoader(BL).
</pre></div>
               <div class="section" title="4.10.1.3.&nbsp;Instruction Representation">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.3"></a>4.10.1.3.&nbsp;Instruction Representation
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.3-100"></a>Individual bytecode
                     instructions are represented in Prolog as terms whose functor is the
                     name of the instruction and whose arguments are its parsed
                     operands.
                  </p>
                  <p class="note">For example, an <span class="emphasis"><em>aload</em></span> instruction is represented
                     as the term <code class="literal">aload(N)</code>, which includes the
                     index <code class="literal">N</code> that is the operand of the
                     instruction.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.3-110"></a>The instructions as a
                     whole are represented as a list of terms of the form:
                  </p><pre class="screen">
instruction(Offset, AnInstruction)
</pre><p class="note">For example, <code class="literal">instruction(21,
                        aload(1))</code>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.3-120"></a>The order of instructions
                     in this list must be the same as in the <code class="literal">class</code> file.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.3-130"></a>A few instructions have
                     operands that are constant pool entries representing fields, methods,
                     and dynamic call sites. In the constant pool, a field is represented
                     by a <code class="literal">CONSTANT_Fieldref_info</code> structure, a method is represented by a
                     <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure (for an interface's
                     method) or a <code class="literal">CONSTANT_Methodref_info</code> structure (for a class's
                     method), and a dynamic call site is represented by a
                     <code class="literal">CONSTANT_InvokeDynamic_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.2" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">&sect;4.4.2</a>,
                     <a class="xref" href="jvms-4.html#jvms-4.4.10" title="4.4.10.&nbsp;The CONSTANT_InvokeDynamic_info Structure">&sect;4.4.10</a>). Such structures are represented as
                     functor applications of the form:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.3-130-A"></a>
                                    <code class="literal">field(FieldClassName, FieldName,
                                       FieldDescriptor)</code> for a field, where
                                    <code class="literal">FieldClassName</code> is the name of the class
                                    referenced by the <code class="literal">class_index</code> item in the
                                    <code class="literal">CONSTANT_Fieldref_info</code> structure,
                                    and <code class="literal">FieldName</code>
                                    and <code class="literal">FieldDescriptor</code> correspond to the name
                                    and field descriptor referenced by
                                    the <code class="literal">name_and_type_index</code> item of the
                                    <code class="literal">CONSTANT_Fieldref_info</code> structure.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.3-130-B"></a>
                                    <code class="literal">imethod(MethodIntfName, MethodName,
                                       MethodDescriptor)</code> for an interface's method,
                                    where <code class="literal">MethodIntfName</code> is the name of the
                                    interface referenced by the <code class="literal">class_index</code> item
                                    of the <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure,
                                    and <code class="literal">MethodName</code>
                                    and <code class="literal">MethodDescriptor</code> correspond to the name
                                    and method descriptor referenced by
                                    the <code class="literal">name_and_type_index</code> item of the
                                    <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure;
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.3-130-C"></a>
                                    <code class="literal">method(MethodClassName, MethodName,
                                       MethodDescriptor)</code> for a class's method,
                                    where <code class="literal">MethodClassName</code> is the name of the
                                    class referenced by the <code class="literal">class_index</code> item of
                                    the <code class="literal">CONSTANT_Methodref_info</code> structure,
                                    and <code class="literal">MethodName</code> and
                                    <code class="literal">MethodDescriptor</code> correspond to the name and
                                    method descriptor referenced by
                                    the <code class="literal">name_and_type_index</code> item of the
                                    <code class="literal">CONSTANT_Methodref_info</code> structure; and
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.3-130-D"></a>
                                    <code class="literal">dmethod(CallSiteName, MethodDescriptor)</code> for a
                                    dynamic call site, where
                                    <code class="literal">CallSiteName</code>
                                    and <code class="literal">MethodDescriptor</code> correspond to the name
                                    and method descriptor referenced by
                                    the <code class="literal">name_and_type_index</code> item of the
                                    <code class="literal">CONSTANT_InvokeDynamic_info</code> structure.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.3-140"></a>For clarity, we assume
                     that field and method descriptors (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>,
                     <a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>) are mapped into more readable names: the
                     leading <code class="literal">L</code> and trailing <code class="literal">;</code> are dropped from class names,
                     and the <span class="emphasis"><em>BaseType</em></span> characters used for primitive
                     types are mapped to the names of those types.
                  </p>
                  <p class="note">For example, a <span class="emphasis"><em>getfield</em></span> instruction whose operand
                     was an index into the constant pool that refers to a
                     field <code class="literal">foo</code> of type <code class="literal">F</code> in
                     class <code class="literal">Bar</code> would be represented
                     as <code class="literal">getfield(field('Bar', 'foo', 'F'))</code>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.3-150"></a>Constant pool entries
                     that refer to constant values, such as <code class="literal">CONSTANT_String</code>,
                     <code class="literal">CONSTANT_Integer</code>, <code class="literal">CONSTANT_Float</code>, <code class="literal">CONSTANT_Long</code>,
                     <code class="literal">CONSTANT_Double</code>, and <code class="literal">CONSTANT_Class</code>, are encoded via the functors
                     whose names are <code class="literal">string</code>, <code class="literal">int</code>, <code class="literal">float</code>, <code class="literal">long</code>,
                     <code class="literal">double</code>, and <code class="literal">classConstant</code> respectively.
                  </p>
                  <p class="note">For example, an <span class="emphasis"><em>ldc</em></span> instruction for loading the
                     integer 91 would be encoded as <code class="literal">ldc(int(91))</code>.
                  </p>
               </div>
               <div class="section" title="4.10.1.4.&nbsp;Stack Map Frame Representation">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.4"></a>4.10.1.4.&nbsp;Stack Map Frame Representation
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.4-100"></a>Stack map frames are
                     represented in Prolog as a list of terms of the form:
                  </p><a name="jvms-4.10.1.4-110"></a><pre class="screen">
stackMap(Offset, TypeState)
</pre><p class="norm"><a name="jvms-4.10.1.4-120"></a>where:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.4-120-A"></a>
                                    <code class="literal">Offset</code> is an integer indicating
                                    the bytecode offset at which the stack map frame applies
                                    (<a class="xref" href="jvms-4.html#jvms-4.7.4" title="4.7.4.&nbsp;The StackMapTable Attribute">&sect;4.7.4</a>).
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-130"></a>
                                    The order of bytecode offsets in this list
                                    must be the same as in the <code class="literal">class</code> file.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.4-120-B"></a>
                                    <code class="literal">TypeState</code> is the expected incoming type state
                                    for the instruction at <code class="literal">Offset</code>.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.4-200"></a>A <span class="emphasis"><em>type
                           state</em></span> is a mapping from locations in the operand stack and
                     local variables of a method to verification types. It has the
                     form:
                  </p><a name="jvms-4.10.1.4-210"></a><pre class="screen">
frame(Locals, OperandStack, Flags)
</pre><p class="norm"><a name="jvms-4.10.1.4-220"></a>where:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.4-220-A"></a>
                                    <code class="literal">Locals</code> is a list of verification types, such
                                    that the <span class="emphasis"><em>i</em></span>'th element of the list (with 0-based indexing)
                                    represents the type of local variable <span class="emphasis"><em>i</em></span>.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.4-220-B"></a>
                                    <code class="literal">OperandStack</code> is a list of verification types,
                                    such that the first element of the list represents the type of
                                    the top of the operand stack, and the types of stack entries
                                    below the top follow in the list in the appropriate
                                    order.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-220-B.1"></a>
                                    Types of size 2 (<code class="literal">long</code> and <code class="literal">double</code>) are represented by two
                                    stack entries, with the first entry being <code class="literal">top</code> and the second
                                    entry being the type itself.
                           </p>
                           <p class="note">For example, a stack with a <code class="literal">double</code> value, an
                                    <code class="literal">int</code> value, and a <code class="literal">long</code> value is represented in a type state
                                    as a stack with five entries: <code class="literal">top</code> and <code class="literal">double</code> entries for the
                                    <code class="literal">double</code> value, an <code class="literal">int</code> entry for the <code class="literal">int</code> value, and <code class="literal">top</code>
                                    and <code class="literal">long</code> entries for the <code class="literal">long</code>
                                    value. Accordingly, <code class="literal">OperandStack</code> is the
                                    list <code class="literal">[top, double, int, top, long]</code>.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.4-220-C"></a>
                                    <code class="literal">Flags</code> is a list which may either be empty or
                                    have the single element <code class="literal">flagThisUninit</code>.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-220-C.1"></a>
                                    If any local variable in <code class="literal">Locals</code> has the type
                                    <code class="literal">uninitializedThis</code>, then <code class="literal">Flags</code> has the
                                    single element <code class="literal">flagThisUninit</code>,
                                    otherwise <code class="literal">Flags</code> is an empty list.
                           </p>
                           <p class="note"><code class="literal">flagThisUninit</code> is used in constructors to mark
                                    type states where initialization of <code class="literal">this</code> has not yet been
                                    completed. In such type states, it is illegal to return from the
                                    method.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.4-300"></a>Subtyping of verification
                     types is extended pointwise to type states.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.4-310"></a>The local variable array
                     of a method has a fixed length by construction
                     (see <code class="literal">methodInitialStackFrame</code> in
                     <a class="xref" href="jvms-4.html#jvms-4.10.1.6" title="4.10.1.6.&nbsp;Type Checking Methods with Code">&sect;4.10.1.6</a>) while the operand stack grows and
                     shrinks. Therefore, we require an explicit check on the length of the
                     operand stacks whose assignability is desired.
                  </p><pre class="programlisting">
frameIsAssignable(frame(Locals1, StackMap1, Flags1),
                  frame(Locals2, StackMap2, Flags2)) :-
    length(StackMap1, StackMapLength),
    length(StackMap2, StackMapLength),
    maplist(isAssignable, Locals1, Locals2),
    maplist(isAssignable, StackMap1, StackMap2),
    subset(Flags1, Flags2).
</pre><p class="norm"><a name="jvms-4.10.1.4-320"></a>The length of the operand
                     stack must not exceed the declared maximum stack length.
                  </p><pre class="programlisting">
operandStackHasLegalLength(Environment, OperandStack) :-
    length(OperandStack, Length),
    maxOperandStackLength(Environment, MaxStack),
    Length =&lt; MaxStack.
</pre><p class="norm"><a name="jvms-4.10.1.4-330"></a>Certain array
                     instructions (<a class="xref" href="jvms-4.html#jvms-4.10.1.9.aaload" title="aaload">&sect;<span class="emphasis"><em>aaload</em></span></a>,
                     <a class="xref" href="jvms-4.html#jvms-4.10.1.9.arraylength" title="arraylength">&sect;<span class="emphasis"><em>arraylength</em></span></a>,
                     <a class="xref" href="jvms-4.html#jvms-4.10.1.9.baload" title="baload">&sect;<span class="emphasis"><em>baload</em></span></a>,
                     <a class="xref" href="jvms-4.html#jvms-4.10.1.9.bastore" title="bastore">&sect;<span class="emphasis"><em>bastore</em></span></a>) peek at the types of values
                     on the operand stack in order to check they are array types. The
                     following clause accesses the <span class="emphasis"><em>i</em></span>'th element of the operand stack
                     from a type state.
                  </p><pre class="programlisting">
nth1OperandStackIs(<span class="emphasis"><em>i</em></span>, frame(_Locals, OperandStack, _Flags), Element) :-
    nth1(<span class="emphasis"><em>i</em></span>, OperandStack, Element).
</pre><p class="norm"><a name="jvms-4.10.1.4-400"></a>
                     Manipulation of the operand stack by load and store instructions
                     (<a class="xref" href="jvms-4.html#jvms-4.10.1.7" title="4.10.1.7.&nbsp;Type Checking Load and Store Instructions">&sect;4.10.1.7</a>) is complicated by the fact that some
                     types occupy two entries on the stack. The predicates given below take
                     this into account, allowing the rest of the specification to abstract
                     from this issue.
                  </p>
                  <p class="norm">Pop a list of types off the stack.</p><pre class="programlisting">
canPop(frame(Locals, OperandStack, Flags), Types,
       frame(Locals, PoppedOperandStack, Flags)) :-
    popMatchingList(OperandStack, Types, PoppedOperandStack).

popMatchingList(OperandStack, [], OperandStack).
popMatchingList(OperandStack, [P | Rest], NewOperandStack) :-
    popMatchingType(OperandStack, P, TempOperandStack, _ActualType),
    popMatchingList(TempOperandStack, Rest, NewOperandStack).
</pre><p class="norm">Pop an individual type off the stack. More
                     precisely, if the logical top of the stack is some subtype of the
                     specified type, <code class="literal">Type</code>, then pop it. If a type occupies two stack
                     entries, then the logical top of the stack is really the type just
                     below the top, and the top of the stack is the unusable type
                     <code class="literal">top</code>.
                  </p><pre class="programlisting">
popMatchingType([ActualType | OperandStack],
                Type, OperandStack, ActualType) :-
    sizeOf(Type, 1),
    isAssignable(ActualType, Type).

popMatchingType([top, ActualType | OperandStack],
                Type, OperandStack, ActualType) :-
    sizeOf(Type, 2),
    isAssignable(ActualType, Type).

sizeOf(X, 2) :- isAssignable(X, twoWord).
sizeOf(X, 1) :- isAssignable(X, oneWord).
sizeOf(top, 1).
</pre><p class="norm">Push a logical type onto the stack. The exact
                     behavior varies with the size of the type. If the pushed type is of
                     size 1, we just push it onto the stack. If the pushed type is of size
                     2, we push it, and then push <code class="literal">top</code>.
                  </p><pre class="programlisting">
pushOperandStack(OperandStack, 'void', OperandStack).
pushOperandStack(OperandStack, Type, [Type | OperandStack]) :-
    sizeOf(Type, 1).
pushOperandStack(OperandStack, Type, [top, Type | OperandStack]) :-
    sizeOf(Type, 2).
</pre><p class="norm">Push a list of types onto the stack if there is
                     space.
                  </p><pre class="programlisting">
canSafelyPush(Environment, InputOperandStack, Type, OutputOperandStack) :-
    pushOperandStack(InputOperandStack, Type, OutputOperandStack),
    operandStackHasLegalLength(Environment, OutputOperandStack).

canSafelyPushList(Environment, InputOperandStack, Types,
                  OutputOperandStack) :-
    canPushList(InputOperandStack, Types, OutputOperandStack),
    operandStackHasLegalLength(Environment, OutputOperandStack).

canPushList(InputOperandStack, [], InputOperandStack).
canPushList(InputOperandStack, [Type | Rest], OutputOperandStack) :-
    pushOperandStack(InputOperandStack, Type, InterimOperandStack),
    canPushList(InterimOperandStack, Rest, OutputOperandStack).
</pre><p class="norm"><a name="jvms-4.10.1.4-500"></a>Manipulation of the
                     operand stack by the <span class="emphasis"><em>dup</em></span> instructions is specified entirely in terms
                     of the <span class="emphasis"><em>category</em></span> of types for values on the stack
                     (<a class="xref" href="jvms-2.html#jvms-2.11.1" title="2.11.1.&nbsp;Types and the Java Virtual Machine">&sect;2.11.1</a>).
                  </p>
                  <p class="norm">Category 1 types occupy a single stack
                     entry. Popping a logical type of category 1, <code class="literal">Type</code>, off the stack is
                     possible if the top of the stack is <code class="literal">Type</code> and <code class="literal">Type</code> is not <code class="literal">top</code>
                     (otherwise it could denote the upper half of a category 2 type). The
                     result is the incoming stack, with the top entry popped off.
                  </p><pre class="programlisting">
popCategory1([Type | Rest], Type, Rest) :-
    Type \= top,
    sizeOf(Type, 1).
</pre><p class="norm">Category 2 types occupy two stack entries. Popping a
                     logical type of category 2, <code class="literal">Type</code>, off the stack is possible if the
                     top of the stack is type <code class="literal">top</code>, and the entry directly below it is
                     <code class="literal">Type</code>. The result is the incoming stack, with the top two entries
                     popped off.
                  </p><pre class="programlisting">
popCategory2([top, Type | Rest], Type, Rest) :-
    sizeOf(Type, 2).
</pre><p class="norm"><a name="jvms-4.10.1.4-600"></a>Most of the type rules
                     for individual instructions (<a class="xref" href="jvms-4.html#jvms-4.10.1.9" title="4.10.1.9.&nbsp;Type Checking Instructions">&sect;4.10.1.9</a>) depend
                     on the notion of a valid <span class="emphasis"><em>type transition</em></span>. A type
                     transition is <span class="emphasis"><em>valid</em></span> if one can pop a list of
                     expected types off the incoming type state's operand stack and replace
                     them with an expected result type, resulting in a new valid type
                     state. In particular, the size of the operand stack in the new type
                     state must not exceed its maximum declared size.
                  </p><pre class="programlisting">
validTypeTransition(Environment, ExpectedTypesOnStack, ResultType,
                    frame(Locals, InputOperandStack, Flags),
                    frame(Locals, NextOperandStack, Flags)) :-
    popMatchingList(InputOperandStack, ExpectedTypesOnStack,
                    InterimOperandStack),
    pushOperandStack(InterimOperandStack, ResultType, NextOperandStack),
    operandStackHasLegalLength(Environment, NextOperandStack).
</pre></div>
               <div class="section" title="4.10.1.5.&nbsp;Type Checking Abstract and Native Methods">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.5"></a>4.10.1.5.&nbsp;Type Checking Abstract and Native Methods
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.5-100"></a><code class="literal">abstract</code> methods and
                     <code class="literal">native</code> methods are considered to be type safe if they do not
                     override a <code class="literal">final</code> method.
                  </p><a name="jvms-4.10.1.5-110"></a><pre class="programlisting">
methodIsTypeSafe(Class, Method) :-
    doesNotOverrideFinalMethod(Class, Method),
    methodAccessFlags(Method, AccessFlags),
    member(abstract, AccessFlags).

methodIsTypeSafe(Class, Method) :-
    doesNotOverrideFinalMethod(Class, Method),
    methodAccessFlags(Method, AccessFlags),
    member(native, AccessFlags).
</pre><p class="norm"><a name="jvms-4.10.1.5-200"></a><code class="literal">private</code> methods and <code class="literal">static</code>
                     methods are orthogonal to dynamic method dispatch, so they never
                     override other methods (<a class="xref" href="jvms-5.html#jvms-5.4.5" title="5.4.5.&nbsp;Overriding">&sect;5.4.5</a>).
                  </p><a name="jvms-4.10.1.5-210"></a><pre class="programlisting">
doesNotOverrideFinalMethod(class('java/lang/Object', L), Method) :-
    isBootstrapLoader(L).

doesNotOverrideFinalMethod(Class, Method) :-
    isPrivate(Method, Class).

doesNotOverrideFinalMethod(Class, Method) :-
    isStatic(Method, Class).

doesNotOverrideFinalMethod(Class, Method) :-
    isNotPrivate(Method, Class),
    isNotStatic(Method, Class),
    doesNotOverrideFinalMethodOfSuperclass(Class, Method).

doesNotOverrideFinalMethodOfSuperclass(Class, Method) :-
    classSuperClassName(Class, SuperclassName),
    classDefiningLoader(Class, L),
    loadedClass(SuperclassName, L, Superclass),
    classMethods(Superclass, SuperMethodList),
    finalMethodNotOverridden(Method, Superclass, SuperMethodList).
</pre><p class="norm"><a name="jvms-4.10.1.5-300"></a><code class="literal">final</code> methods that are <code class="literal">private</code>
                     and/or <code class="literal">static</code> are unusual, as <code class="literal">private</code> methods and <code class="literal">static</code> methods
                     cannot be overridden per se. Therefore, if a <code class="literal">final</code> <code class="literal">private</code> method
                     or a <code class="literal">final</code> <code class="literal">static</code> method is found, it was logically not overridden
                     by another method.
                  </p><a name="jvms-4.10.1.5-310"></a><pre class="programlisting">
finalMethodNotOverridden(Method, Superclass, SuperMethodList) :-
    methodName(Method, Name),
    methodDescriptor(Method, Descriptor),
    member(method(_, Name, Descriptor), SuperMethodList),
    isFinal(Method, Superclass),
    isPrivate(Method, Superclass).

finalMethodNotOverridden(Method, Superclass, SuperMethodList) :-
    methodName(Method, Name),
    methodDescriptor(Method, Descriptor),
    member(method(_, Name, Descriptor), SuperMethodList),
    isFinal(Method, Superclass),
    isStatic(Method, Superclass). 
</pre><p class="norm"><a name="jvms-4.10.1.5-400"></a>If a non-<code class="literal">final</code> <code class="literal">private</code> method
                     or a non-<code class="literal">final</code> <code class="literal">static</code> method is found, skip over it because it is
                     orthogonal to overriding.
                  </p><a name="jvms-4.10.1.5-410"></a><pre class="programlisting">
finalMethodNotOverridden(Method, Superclass, SuperMethodList) :-
    methodName(Method, Name),
    methodDescriptor(Method, Descriptor),
    member(method(_, Name, Descriptor), SuperMethodList),
    isNotFinal(Method, Superclass),
    isPrivate(Method, Superclass),
    doesNotOverrideFinalMethodOfSuperclass(Superclass, Method).

finalMethodNotOverridden(Method, Superclass, SuperMethodList) :-
    methodName(Method, Name),
    methodDescriptor(Method, Descriptor),
    member(method(_, Name, Descriptor), SuperMethodList),
    isNotFinal(Method, Superclass),
    isStatic(Method, Superclass),
    doesNotOverrideFinalMethodOfSuperclass(Superclass, Method).
</pre><p class="norm"><a name="jvms-4.10.1.5-500"></a>If a non-<code class="literal">final</code>, non-<code class="literal">private</code>,
                     non-<code class="literal">static</code> method is found, then indeed a <code class="literal">final</code> method was not
                     overridden. Otherwise, recurse upwards.
                  </p><a name="jvms-4.10.1.5-510"></a><pre class="programlisting">
finalMethodNotOverridden(Method, Superclass, SuperMethodList) :-
    methodName(Method, Name),
    methodDescriptor(Method, Descriptor),
    member(method(_, Name, Descriptor), SuperMethodList),
    isNotFinal(Method, Superclass),
    isNotStatic(Method, Superclass),
    isNotPrivate(Method, Superclass).

finalMethodNotOverridden(Method, Superclass, SuperMethodList) :-
    methodName(Method, Name),
    methodDescriptor(Method, Descriptor),
    notMember(method(_, Name, Descriptor), SuperMethodList),
    doesNotOverrideFinalMethodOfSuperclass(Superclass, Method).
</pre></div>
               <div class="section" title="4.10.1.6.&nbsp;Type Checking Methods with Code">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.6"></a>4.10.1.6.&nbsp;Type Checking Methods with Code
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm">Non-<code class="literal">abstract</code>, non-<code class="literal">native</code> methods are type
                     correct if they have code and the code is type correct.
                  </p><pre class="programlisting">
methodIsTypeSafe(Class, Method) :-
    doesNotOverrideFinalMethod(Class, Method),
    methodAccessFlags(Method, AccessFlags),
    methodAttributes(Method, Attributes),
    notMember(native, AccessFlags),
    notMember(abstract, AccessFlags),
    member(attribute('Code', _), Attributes),
    methodWithCodeIsTypeSafe(Class, Method).
</pre><p class="norm">A method with code is type safe if it is possible to
                     merge the code and the stack map frames into a single stream such that
                     each stack map frame precedes the instruction it corresponds to, and
                     the merged stream is type correct. The method's exception
                     handlers, if any, must also be legal.
                  </p><pre class="programlisting">
methodWithCodeIsTypeSafe(Class, Method) :-
    parseCodeAttribute(Class, Method, FrameSize, MaxStack,
                       ParsedCode, Handlers, StackMap),
    mergeStackMapAndCode(StackMap, ParsedCode, MergedCode),
    methodInitialStackFrame(Class, Method, FrameSize, StackFrame, ReturnType),
    Environment = environment(Class, Method, ReturnType, MergedCode,
                              MaxStack, Handlers),
    handlersAreLegal(Environment),
    mergedCodeIsTypeSafe(Environment, MergedCode, StackFrame).
</pre><p class="norm">Let us consider exception handlers first.</p>
                  <p class="norm">An exception handler is represented by a functor
                     application of the form:
                  </p><pre class="screen">
handler(Start, End, Target, ClassName)
</pre><p class="norm">whose arguments are, respectively, the start and end
                     of the range of instructions covered by the handler, the first
                     instruction of the handler code, and the name of the exception class
                     that this handler is designed to handle.
                  </p>
                  <p class="norm">An exception handler is <span class="emphasis"><em>legal</em></span>
                     if its start (<code class="literal">Start</code>) is less than its end
                     (<code class="literal">End</code>), there exists an instruction whose offset is
                     equal to <code class="literal">Start</code>, there exists an instruction whose
                     offset equals <code class="literal">End</code>, and the handler's exception
                     class is assignable to the class <code class="literal">Throwable</code>. The exception class of a
                     handler is <code class="literal">Throwable</code> if the handler's class entry is 0, otherwise it
                     is the class named in the handler.
                  </p>
                  <p class="norm-static">
                     An additional requirement exists for a handler inside an <code class="literal">&lt;init&gt;</code> method
                     if one of the instructions covered by the handler is <span class="emphasis"><em>invokespecial</em></span>
                     of an <code class="literal">&lt;init&gt;</code> method. In this case, the fact that a handler is running
                     means the object under construction is likely broken, so it is
                     important that the handler does not swallow the exception and allow
                     the enclosing <code class="literal">&lt;init&gt;</code> method to return normally to the
                     caller. Accordingly, the handler is required to either complete
                     abruptly by throwing an exception to the caller of the enclosing
                     <code class="literal">&lt;init&gt;</code> method, or to loop forever.
                  </p><pre class="programlisting">
handlersAreLegal(Environment) :-
    exceptionHandlers(Environment, Handlers),
    checklist(handlerIsLegal(Environment), Handlers).

handlerIsLegal(Environment, Handler) :-
    Handler = handler(Start, End, Target, _),
    Start &lt; End,
    allInstructions(Environment, Instructions),
    member(instruction(Start, _), Instructions),
    offsetStackFrame(Environment, Target, _),
    instructionsIncludeEnd(Instructions, End),
    currentClassLoader(Environment, CurrentLoader),
    handlerExceptionClass(Handler, ExceptionClass, CurrentLoader), 
    isBootstrapLoader(BL),
    isAssignable(ExceptionClass, class('java/lang/Throwable', BL)),
    initHandlerIsLegal(Environment, Handler).

instructionsIncludeEnd(Instructions, End) :-
    member(instruction(End, _), Instructions).
instructionsIncludeEnd(Instructions, End) :-
    member(endOfCode(End), Instructions).

handlerExceptionClass(handler(_, _, _, 0),
                      class('java/lang/Throwable', BL), _) :-
    isBootstrapLoader(BL).

handlerExceptionClass(handler(_, _, _, Name),
                      class(Name, L), L) :-
    Name \= 0.
</pre><pre class="programlisting">
initHandlerIsLegal(Environment, Handler) :-
    notInitHandler(Environment, Handler).

notInitHandler(Environment, Handler) :-
    Environment = environment(_Class, Method, _, Instructions, _, _),
    isNotInit(Method).

notInitHandler(Environment, Handler) :-
    Environment = environment(_Class, Method, _, Instructions, _, _),
    isInit(Method),
    member(instruction(_, invokespecial(CP)), Instructions),
    CP = method(MethodClassName, MethodName, Descriptor),
    MethodName \= '<code class="literal">&lt;init&gt;</code>'. 


initHandlerIsLegal(Environment, Handler) :-
    isInitHandler(Environment, Handler),
    sublist(isApplicableInstruction(Target), Instructions,
            HandlerInstructions),
    noAttemptToReturnNormally(HandlerInstructions).

isInitHandler(Environment, Handler) :-
    Environment = environment(_Class, Method, _, Instructions, _, _),
    isInit(Method).
    member(instruction(_, invokespecial(CP)), Instructions),
    CP = method(MethodClassName, '<code class="literal">&lt;init&gt;</code>', Descriptor).

isApplicableInstruction(HandlerStart, instruction(Offset, _)) :-
    Offset &gt;= HandlerStart.

noAttemptToReturnNormally(Instructions) :-
    notMember(instruction(_, return), Instructions).

noAttemptToReturnNormally(Instructions) :-
    member(instruction(_, athrow), Instructions). 
</pre><p class="norm">Let us now turn to the stream of instructions and
                     stack map frames.
                  </p>
                  <p class="norm">Merging instructions and stack map frames into a
                     single stream involves four cases:
                  </p>
                  <div class="">
                     <ul class="" type="disc">
                        <li class="listitem">
                           <p class="norm">Merging an empty <code class="literal">StackMap</code> and
                                    a list of instructions yields the original list of
                                    instructions.
                           </p><pre class="programlisting">
mergeStackMapAndCode([], CodeList, CodeList).
</pre></li>
                        <li class="listitem">
                           <p class="norm">Given a list of stack map frames beginning with
                                    the type state for the instruction at <code class="literal">Offset</code>,
                                    and a list of instructions beginning
                                    at <code class="literal">Offset</code>, the merged list is the head of the
                                    stack map frame list, followed by the head of the instruction
                                    list, followed by the merge of the tails of the two
                                    lists.
                           </p><pre class="programlisting">
mergeStackMapAndCode([stackMap(Offset, Map) | RestMap],
                     [instruction(Offset, Parse) | RestCode],
                     [stackMap(Offset, Map),
                       instruction(Offset, Parse) | RestMerge]) :-
    mergeStackMapAndCode(RestMap, RestCode, RestMerge).
</pre></li>
                        <li class="listitem">
                           <p class="norm">Otherwise, given a list of stack map frames
                                    beginning with the type state for the instruction
                                    at <code class="literal">OffsetM</code>, and a list of instructions
                                    beginning at <code class="literal">OffsetP</code>, then,
                                    if <code class="literal">OffsetP &lt; OffsetM</code>, the merged list
                                    consists of the head of the instruction list, followed by the
                                    merge of the stack map frame list and the tail of the
                                    instruction list.
                           </p><pre class="programlisting">
mergeStackMapAndCode([stackMap(OffsetM, Map) | RestMap],
                     [instruction(OffsetP, Parse) | RestCode],
                     [instruction(OffsetP, Parse) | RestMerge]) :-
    OffsetP &lt; OffsetM,
    mergeStackMapAndCode([stackMap(OffsetM, Map) | RestMap],
                         RestCode, RestMerge).
</pre></li>
                        <li class="listitem">
                           <p class="norm">Otherwise, the merge of the two lists is
                                    undefined. Since the instruction list has monotonically
                                    increasing offsets, the merge of the two lists is not defined
                                    unless every stack map frame offset has a corresponding
                                    instruction offset and the stack map frames are in monotonically
                                    increasing order.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm">To determine if the merged stream for a method is
                     type correct, we first infer the method's initial type state.
                  </p>
                  <p class="norm">The initial type state of a method consists of an
                     empty operand stack and local variable types derived from the type of
                     <code class="literal">this</code> and the arguments, as well as the appropriate flag, depending
                     on whether this is an <code class="literal">&lt;init&gt;</code> method.
                  </p><pre class="programlisting">
methodInitialStackFrame(Class, Method, FrameSize, frame(Locals, [], Flags),
                        ReturnType):-
    methodDescriptor(Method, Descriptor),
    parseMethodDescriptor(Descriptor, RawArgs, ReturnType),
    expandTypeList(RawArgs, Args),
    methodInitialThisType(Class, Method, ThisList),
    flags(ThisList, Flags),
    append(ThisList, Args, ThisArgs),
    expandToLength(ThisArgs, FrameSize, top, Locals).
</pre><p class="norm">Given a list of types, the following clause produces
                     a list where every type of size 2 has been substituted by two entries:
                     one for itself, and one <code class="literal">top</code> entry. The result then corresponds to
                     the representation of the list as 32-bit words in the Java Virtual Machine.
                  </p><pre class="programlisting">
expandTypeList([], []).
expandTypeList([Item | List], [Item | Result]) :-
    sizeOf(Item, 1),
    expandTypeList(List, Result).
expandTypeList([Item | List], [Item, top | Result]) :-
    sizeOf(Item, 2),
    expandTypeList(List, Result).
</pre><pre class="programlisting">
flags([uninitializedThis], [flagThisUninit]).
flags(X, []) :- X \= [uninitializedThis].

expandToLength(List, Size, _Filler, List) :-
    length(List, Size).
expandToLength(List, Size, Filler, Result) :-
    length(List, ListLength),
    ListLength &lt; Size,
    Delta is Size - ListLength,
    length(Extra, Delta),
    checklist(=(Filler), Extra),
    append(List, Extra, Result).
</pre><p class="norm">For the initial type state of an instance method, we
                     compute the type of <code class="literal">this</code> and put it in a list. The type of <code class="literal">this</code> in
                     the <code class="literal">&lt;init&gt;</code> method of <code class="literal">Object</code> is <code class="literal">Object</code>; in other <code class="literal">&lt;init&gt;</code> methods,
                     the type of <code class="literal">this</code> is <code class="literal">uninitializedThis</code>; otherwise, the type of
                     <code class="literal">this</code> in an instance method is <code class="literal">class(N, L)</code>
                     where <code class="literal">N</code> is the name of the class containing the
                     method and <code class="literal">L</code> is its defining class loader.
                  </p>
                  <p class="norm">For the initial type state of a static method,
                     <code class="literal">this</code> is irrelevant, so the list is empty.
                  </p><pre class="programlisting">
methodInitialThisType(_Class, Method, []) :-
    methodAccessFlags(Method, AccessFlags),
    member(static, AccessFlags),
    methodName(Method, MethodName),
    MethodName \= '<code class="literal">&lt;init&gt;</code>'.

methodInitialThisType(Class, Method, [This]) :-
    methodAccessFlags(Method, AccessFlags),
    notMember(static, AccessFlags),
    instanceMethodInitialThisType(Class, Method, This).

instanceMethodInitialThisType(Class, Method, class('java/lang/Object', L)) :-
    methodName(Method, '<code class="literal">&lt;init&gt;</code>'), 
    classDefiningLoader(Class, L),
    isBootstrapLoader(L),
    classClassName(Class, 'java/lang/Object').

instanceMethodInitialThisType(Class, Method, uninitializedThis) :-
    methodName(Method, '<code class="literal">&lt;init&gt;</code>'), 
    classClassName(Class, ClassName),
    classDefiningLoader(Class, CurrentLoader),
    superclassChain(ClassName, CurrentLoader, Chain),
    Chain \= [].

instanceMethodInitialThisType(Class, Method, class(ClassName, L)) :-
    methodName(Method, MethodName),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    classDefiningLoader(Class, L),
    classClassName(Class, ClassName).
</pre><p class="norm">We now compute whether the merged stream for a
                     method is type correct, using the method's initial type state:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm">If we have a stack map frame and an incoming
                                    type state, the type state must be assignable to the one in the
                                    stack map frame. We may then proceed to type check the rest of
                                    the stream with the type state given in the stack map
                                    frame.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(Environment, [stackMap(Offset, MapFrame) | MoreCode],
                     frame(Locals, OperandStack, Flags)) :-
    frameIsAssignable(frame(Locals, OperandStack, Flags), MapFrame),
    mergedCodeIsTypeSafe(Environment, MoreCode, MapFrame).
</pre></li>
                        <li class="listitem">
                           <p class="norm">A merged code stream is type safe relative to an
                                    incoming type state <code class="literal">T</code> if it begins with an
                                    instruction <code class="literal">I</code> that is type safe relative
                                    to <code class="literal">T</code>,
                                    and <code class="literal">I</code> <span class="emphasis"><em>satisfies</em></span> its
                                    exception handlers (see below), and the tail of the stream is
                                    type safe given the type state following that execution
                                    of <code class="literal">I</code>.
                           </p>
                           <p class="norm"><code class="literal">NextStackFrame</code> indicates what
                                    falls through to the following instruction. For an unconditional
                                    branch instruction, it will have the special value
                                    <code class="literal">afterGoto</code>. <code class="literal">ExceptionStackFrame</code> indicates
                                    what is passed to exception handlers.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(Environment, [instruction(Offset, Parse) | MoreCode],
                     frame(Locals, OperandStack, Flags)) :-
    instructionIsTypeSafe(Parse, Environment, Offset,
                          frame(Locals, OperandStack, Flags),
                          NextStackFrame, ExceptionStackFrame),
    instructionSatisfiesHandlers(Environment, Offset, ExceptionStackFrame),
    mergedCodeIsTypeSafe(Environment, MoreCode, NextStackFrame).
</pre></li>
                        <li class="listitem">
                           <p class="norm">After an unconditional branch (indicated by an
                                    incoming type state of <code class="literal">afterGoto</code>), if we have a stack map
                                    frame giving the type state for the following instructions, we
                                    can proceed and type check them using the type state provided by
                                    the stack map frame.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(Environment, [stackMap(Offset, MapFrame) | MoreCode],
                     afterGoto) :-
    mergedCodeIsTypeSafe(Environment, MoreCode, MapFrame).
</pre></li>
                        <li class="listitem">
                           <p class="norm">It is illegal to have code after an
                                    unconditional branch without a stack map frame being provided
                                    for it.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(_Environment, [instruction(_, _) | _MoreCode],
                     afterGoto) :-
    write_ln('No stack frame after unconditional branch'),
    fail.
</pre></li>
                        <li class="listitem">
                           <p class="norm">If we have an unconditional branch at the end of
                                    the code, stop.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(_Environment, [endOfCode(Offset)],
                     afterGoto).
</pre></li>
                     </ul>
                  </div>
                  <p class="norm">Branching to a target is type safe if the target has
                     an associated stack frame, <code class="literal">Frame</code>, and the current
                     stack frame, <code class="literal">StackFrame</code>, is assignable
                     to <code class="literal">Frame</code>.
                  </p><pre class="programlisting">
targetIsTypeSafe(Environment, StackFrame, Target) :-
    offsetStackFrame(Environment, Target, Frame),
    frameIsAssignable(StackFrame, Frame).
</pre><p class="norm">An instruction <span class="emphasis"><em>satisfies its exception
                           handlers</em></span> if it satisfies every exception handler that is
                     applicable to the instruction.
                  </p><pre class="programlisting">
instructionSatisfiesHandlers(Environment, Offset, ExceptionStackFrame) :-
    exceptionHandlers(Environment, Handlers),
    sublist(isApplicableHandler(Offset), Handlers, ApplicableHandlers),
    checklist(instructionSatisfiesHandler(Environment, ExceptionStackFrame),
              ApplicableHandlers).
</pre><p class="norm">An exception handler
                     is <span class="emphasis"><em>applicable</em></span> to an instruction if the offset of
                     the instruction is greater or equal to the start of the handler's
                     range and less than the end of the handler's range.
                  </p><pre class="programlisting">
isApplicableHandler(Offset, handler(Start, End, _Target, _ClassName)) :-
    Offset &gt;= Start,
    Offset &lt; End.
</pre><p class="norm">An instruction <span class="emphasis"><em>satisfies</em></span> an
                     exception handler if the instructions's outgoing type state
                     is <code class="literal">ExcStackFrame</code>, and the handler's target (the
                     initial instruction of the handler code) is type safe assuming an
                     incoming type state <code class="literal">T</code>. The type
                     state <code class="literal">T</code> is derived
                     from <code class="literal">ExcStackFrame</code> by replacing the operand stack
                     with a stack whose sole element is the handler's exception
                     class.
                  </p><pre class="programlisting">
instructionSatisfiesHandler(Environment, ExcStackFrame, Handler) :-
    Handler = handler(_, _, Target, _),
    currentClassLoader(Environment, CurrentLoader),
    handlerExceptionClass(Handler, ExceptionClass, CurrentLoader), 
    /* The stack consists of just the exception. */
    ExcStackFrame = frame(Locals, _, Flags),
    TrueExcStackFrame = frame(Locals, [ ExceptionClass ], Flags),
    operandStackHasLegalLength(Environment, TrueExcStackFrame),
    targetIsTypeSafe(Environment, TrueExcStackFrame, Target).
</pre></div>
               <div class="section" title="4.10.1.7.&nbsp;Type Checking Load and Store Instructions">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.7"></a>4.10.1.7.&nbsp;Type Checking Load and Store Instructions
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.7-100"></a>All load instructions are
                     variations on a common pattern, varying the type of the value that the
                     instruction loads.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.7-110"></a>Loading a value of type
                     <code class="literal">Type</code> from local variable <code class="literal">Index</code> is type safe, if
                     the type of that local variable
                     is <code class="literal">ActualType</code>, <code class="literal">ActualType</code> is
                     assignable to <code class="literal">Type</code>, and pushing <code class="literal">ActualType</code> onto
                     the incoming operand stack is a valid type transition
                     (<a class="xref" href="jvms-4.html#jvms-4.10.1.4" title="4.10.1.4.&nbsp;Stack Map Frame Representation">&sect;4.10.1.4</a>) that yields a new type
                     state <code class="literal">NextStackFrame</code>. After execution of the load
                     instruction, the type state will
                     be <code class="literal">NextStackFrame</code>.
                  </p><pre class="programlisting">
loadIsTypeSafe(Environment, Index, Type, StackFrame, NextStackFrame) :-
    StackFrame = frame(Locals, _OperandStack, _Flags),
    nth0(Index, Locals, ActualType),
    isAssignable(ActualType, Type),
    validTypeTransition(Environment, [], ActualType, StackFrame,
                        NextStackFrame).
</pre><p class="norm"><a name="jvms-4.10.1.7-200"></a>All store instructions
                     are variations on a common pattern, varying the type of the value that
                     the instruction stores.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.7-210"></a>In general, a store
                     instruction is type safe if the local variable it references is of a
                     type that is a supertype of <code class="literal">Type</code>, and the top of the operand stack
                     is of a subtype of <code class="literal">Type</code>, where <code class="literal">Type</code> is the type the instruction is
                     designed to store.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.7-220"></a>More precisely, the store
                     is type safe if one can pop a type <code class="literal">ActualType</code> that
                     "matches" <code class="literal">Type</code> (that is, is a subtype of <code class="literal">Type</code>) off the operand
                     stack (<a class="xref" href="jvms-4.html#jvms-4.10.1.4" title="4.10.1.4.&nbsp;Stack Map Frame Representation">&sect;4.10.1.4</a>), and then legally assign that
                     type the local
                     variable <code class="literal">L<sub>Index</sub></code>.
                  </p><pre class="programlisting">
storeIsTypeSafe(_Environment, Index, Type,
                frame(Locals, OperandStack, Flags),
                frame(NextLocals, NextOperandStack, Flags)) :-
    popMatchingType(OperandStack, Type, NextOperandStack, ActualType),
    modifyLocalVariable(Index, ActualType, Locals, NextLocals).
</pre><p class="norm">Given local variables <code class="literal">Locals</code>,
                     modifying <code class="literal">Index</code> to have type <code class="literal">Type</code> results in the
                     local variable list <code class="literal">NewLocals</code>. The modifications
                     are somewhat involved, because some values (and their corresponding
                     types) occupy two local variables. Hence,
                     modifying <code class="literal">L<sub>N</sub></code> may require
                     modifying <code class="literal">L<sub>N+1</sub></code> (because the
                     type will occupy both the <code class="literal">N</code>
                     and <code class="literal">N+1</code> slots)
                     or <code class="literal">L<sub>N-1</sub></code> (because
                     local <code class="literal">N</code> used to be the upper half of the two word
                     value/type starting at local <code class="literal">N-1</code>, and so
                     local <code class="literal">N-1</code> must be invalidated), or both. This is
                     described further below. We start
                     at <code class="literal">L<sub>0</sub></code> and count up.
                  </p><pre class="programlisting">
modifyLocalVariable(Index, Type, Locals, NewLocals) :-
    modifyLocalVariable(0, Index, Type, Locals, NewLocals).
</pre><p class="norm">Given <code class="literal">LocalsRest</code>, the suffix of
                     the local variable list starting at index <code class="literal">I</code>,
                     modifying local variable <code class="literal">Index</code> to have type <code class="literal">Type</code>
                     results in the local variable list
                     suffix <code class="literal">NextLocalsRest</code>.
                  </p>
                  <p class="norm">If <code class="literal">I &lt; Index-1</code>, just copy the
                     input to the output and recurse forward. If <code class="literal">I =
                        Index-1</code>, the type of local <code class="literal">I</code> may
                     change. This can occur if <code class="literal">L<sub>I</sub></code>
                     has a type of size 2. Once we
                     set <code class="literal">L<sub>I+1</sub></code> to the new type
                     (and the corresponding value), the type/value
                     of <code class="literal">L<sub>I</sub></code> will be invalidated,
                     as its upper half will be trashed. Then we recurse forward.
                  </p><pre class="programlisting">
modifyLocalVariable(I, Index, Type,
                    [Locals1 | LocalsRest],
                    [Locals1 | NextLocalsRest] ) :-
    I &lt; Index - 1, 
    I1 is I + 1,
    modifyLocalVariable(I1, Index, Type, LocalsRest, NextLocalsRest).

modifyLocalVariable(I, Index, Type,
                    [Locals1 | LocalsRest],
                    [NextLocals1 | NextLocalsRest] ) :-
    I =:= Index - 1,
    modifyPreIndexVariable(Locals1, NextLocals1),
    modifyLocalVariable(Index, Index, Type, LocalsRest, NextLocalsRest).
</pre><p class="norm">When we find the variable, and it only occupies one
                     word, we change it to <code class="literal">Type</code> and we're done. When we find the
                     variable, and it occupies two words, we change its type to <code class="literal">Type</code> and
                     the next word to <code class="literal">top</code>.
                  </p><pre class="programlisting">
modifyLocalVariable(Index, Index, Type,
                    [_ | LocalsRest], [Type | LocalsRest]) :-
    sizeOf(Type, 1).

modifyLocalVariable(Index, Index, Type,
                    [_, _ | LocalsRest], [Type, top | LocalsRest]) :-
    sizeOf(Type, 2).
</pre><p class="norm">We refer to a local whose index immediately precedes
                     a local whose type will be modified as a <span class="emphasis"><em>pre-index
                           variable</em></span>. The future type of a pre-index variable of type
                     <code class="literal">InputType</code> is <code class="literal">Result</code>. If the
                     type, <code class="literal">Type</code>, of the pre-index local is of size 1, it
                     doesn't change. If the type of the pre-index
                     local, <code class="literal">Type</code>, is 2, we need to mark the lower half
                     of its two word value as unusable, by setting its type
                     to <code class="literal">top</code>.
                  </p><pre class="programlisting">
modifyPreIndexVariable(Type, Type) :- sizeOf(Type, 1).
modifyPreIndexVariable(Type, top) :- sizeOf(Type, 2).
</pre></div>
               <div class="section" title="4.10.1.8.&nbsp;Type Checking for protected Members">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.8"></a>4.10.1.8.&nbsp;Type Checking for <code class="literal">protected</code> Members
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.8-100"></a>All instructions that
                     access members must contend with the rules concerning <code class="literal">protected</code>
                     members. This section describes the <code class="literal">protected</code> check that corresponds
                     to JLS &sect;6.6.2.1.
                  </p>
                  <p class="norm-static"><a name="jvms-4.10.1.8-110"></a>
                     The <code class="literal">protected</code> check applies only to <code class="literal">protected</code>
                     members of superclasses of the current class. 
                     <code class="literal">protected</code> members in other classes will be caught by the access
                     checking done at resolution (<a class="xref" href="jvms-5.html#jvms-5.4.4" title="5.4.4.&nbsp;Access Control">&sect;5.4.4</a>). There are
                     four cases:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm-static"><a name="jvms-4.10.1.8-110-A"></a>
                                    If the name of a class is not the name of any superclass, it
                                    cannot be a superclass, and so it can safely be ignored.
                           </p><a name="jvms-4.10.1.8-110-A.P"></a><pre class="programlisting">
passesProtectedCheck(Environment, MemberClassName, MemberName,
                     MemberDescriptor, StackFrame) :-
    thisClass(Environment, class(CurrentClassName, CurrentLoader)),
    superclassChain(CurrentClassName, CurrentLoader, Chain),
    notMember(class(MemberClassName, _), Chain).
</pre></li>
                        <li class="listitem">
                           <p class="norm-static"><a name="jvms-4.10.1.8-110-B"></a>
                                    If the <code class="literal">MemberClassName</code> is the same as the
                                    name of a superclass, the class being resolved may indeed be a
                                    superclass. In this case, if no superclass
                                    named <code class="literal">MemberClassName</code> in a different run-time
                                    package has a <code class="literal">protected</code> member
                                    named <code class="literal">MemberName</code> with
                                    descriptor <code class="literal">MemberDescriptor</code>, the <code class="literal">protected</code>
                                    check does not apply.
                           </p>
                           <p class="note">This is because the actual class being resolved
                                    will either be one of these superclasses, in which case we know
                                    that it is either in the same run-time package, and the access
                                    is legal; or the member in question is not <code class="literal">protected</code> and the
                                    check does not apply; or it will be a subclass, in which case
                                    the check would succeed anyway; or it will be some other class
                                    in the same run-time package, in which case the access is legal
                                    and the check need not take place; or the verifier need not flag
                                    this as a problem, since it will be caught anyway because
                                    resolution will per force fail.
                           </p><a name="jvms-4.10.1.8-110-B.P"></a><pre class="programlisting">
passesProtectedCheck(Environment, MemberClassName, MemberName,
                     MemberDescriptor, StackFrame) :-
    thisClass(Environment, class(CurrentClassName, CurrentLoader)),
    superclassChain(CurrentClassName, CurrentLoader, Chain),
    member(class(MemberClassName, _), Chain),
    classesInOtherPkgWithProtectedMember(
      class(CurrentClassName, CurrentLoader),
      MemberName, MemberDescriptor, MemberClassName, Chain, []).
</pre></li>
                        <li class="listitem">
                           <p class="norm-static"><a name="jvms-4.10.1.8-110-C"></a>
                                    If there does exist a <code class="literal">protected</code> superclass member in a
                                    different run-time package, then
                                    load <code class="literal">MemberClassName</code>; if the member in
                                    question is not <code class="literal">protected</code>, the check does not apply. (Using a
                                    superclass member that is not <code class="literal">protected</code> is trivially
                                    correct.)
                           </p><a name="jvms-4.10.1.8-110-C.P"></a><pre class="programlisting">
passesProtectedCheck(Environment, MemberClassName, MemberName,
                     MemberDescriptor,
                     frame(_Locals, [Target | Rest], _Flags)) :-
    thisClass(Environment, class(CurrentClassName, CurrentLoader)),
    superclassChain(CurrentClassName, CurrentLoader, Chain),
    member(class(MemberClassName, _), Chain),
    classesInOtherPkgWithProtectedMember(
      class(CurrentClassName, CurrentLoader),
      MemberName, MemberDescriptor, MemberClassName, Chain, List),
    List /= [],
    loadedClass(MemberClassName, CurrentLoader, ReferencedClass),
    isNotProtected(ReferencedClass, MemberName, MemberDescriptor).
</pre></li>
                        <li class="listitem">
                           <p class="norm-static"><a name="jvms-4.10.1.8-110-D"></a>
                                    Otherwise, use of a member of an object of
                                    type <code class="literal">Target</code> requires
                                    that <code class="literal">Target</code> be assignable to the type of the
                                    current class.
                           </p><a name="jvms-4.10.1.8-110-D.P"></a><pre class="programlisting">
passesProtectedCheck(Environment, MemberClassName, MemberName,
                     MemberDescriptor,
                     frame(_Locals, [Target | Rest], _Flags)) :-
    thisClass(Environment, class(CurrentClassName, CurrentLoader)),
    superclassChain(CurrentClassName, CurrentLoader, Chain),
    member(class(MemberClassName, _), Chain),
    classesInOtherPkgWithProtectedMember(
      class(CurrentClassName, CurrentLoader),
      MemberName, MemberDescriptor, MemberClassName, Chain, List),
    List /= [],
    loadedClass(MemberClassName, CurrentLoader, ReferencedClass),
    isProtected(ReferencedClass, MemberName, MemberDescriptor),
    isAssignable(Target, class(CurrentClassName, CurrentLoader)).
</pre></li>
                     </ul>
                  </div>
                  <p class="norm-static"><a name="jvms-4.10.1.8-120"></a>
                     The predicate <code class="literal">classesInOtherPkgWithProtectedMember(Class,
                        MemberName, MemberDescriptor, MemberClassName, Chain, List)</code>
                     is true if <code class="literal">List</code> is the set of classes
                     in <code class="literal">Chain</code> with name
                     <code class="literal">MemberClassName</code> that are in a different run-time
                     package than <code class="literal">Class</code> which have a <code class="literal">protected</code> member
                     named <code class="literal">MemberName</code> with descriptor
                     <code class="literal">MemberDescriptor</code>.
                  </p><a name="jvms-4.10.1.8-120.P"></a><pre class="programlisting">
classesInOtherPkgWithProtectedMember(_, _, _, _, [], []).

classesInOtherPkgWithProtectedMember(Class, MemberName,
                                     MemberDescriptor, MemberClassName,
                                     [class(MemberClassName, L) | Tail],
                                     [class(MemberClassName, L) | T]) :-
    differentRuntimePackage(Class, class(MemberClassName, L)),
    loadedClass(MemberClassName, L, Super),
    isProtected(Super, MemberName, MemberDescriptor),
    classesInOtherPkgWithProtectedMember(
      Class, MemberName, MemberDescriptor, MemberClassName, Tail, T).

classesInOtherPkgWithProtectedMember(Class, MemberName,
                                     MemberDescriptor, MemberClassName,
                                     [class(MemberClassName, L) | Tail],
                                     T) :-
    differentRuntimePackage(Class, class(MemberClassName, L)),
    loadedClass(MemberClassName, L, Super),
    isNotProtected(Super, MemberName, MemberDescriptor),
    classesInOtherPkgWithProtectedMember(
      Class, MemberName, MemberDescriptor, MemberClassName, Tail, T).

classesInOtherPkgWithProtectedMember(Class, MemberName,
                                     MemberDescriptor, MemberClassName,
                                     [class(MemberClassName, L) | Tail],
                                     T] :-
    sameRuntimePackage(Class, class(MemberClassName, L)),
    classesInOtherPkgWithProtectedMember(
      Class, MemberName, MemberDescriptor, MemberClassName, Tail, T).

sameRuntimePackage(Class1, Class2) :-
    classDefiningLoader(Class1, L),
    classDefiningLoader(Class2, L),
    samePackageName(Class1, Class2).

differentRuntimePackage(Class1, Class2) :-
    classDefiningLoader(Class1, L1),
    classDefiningLoader(Class2, L2),
    L1 \= L2.

differentRuntimePackage(Class1, Class2) :-
    differentPackageName(Class1, Class2).
</pre></div>
               <div class="section" title="4.10.1.9.&nbsp;Type Checking Instructions">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.9"></a>4.10.1.9.&nbsp;Type Checking Instructions
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.9-100"></a>In general, the type rule
                     for an instruction is given relative to an
                     environment <code class="literal">Environment</code> that defines the class and
                     method in which the instruction occurs
                     (<a class="xref" href="jvms-4.html#jvms-4.10.1.1" title="4.10.1.1.&nbsp;Accessors for Java Virtual Machine Artifacts">&sect;4.10.1.1</a>), and the
                     offset <code class="literal">Offset</code> within the method at which the
                     instruction occurs. The rule states that if the incoming type
                     state <code class="literal">StackFrame</code> fulfills certain requirements,
                     then:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.9-100-A"></a>
                                    The instruction is type safe.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.9-100-B"></a>
                                    It is provable that the type state after the instruction
                                    completes normally has a particular form given
                                    by <code class="literal">NextStackFrame</code>, and that the type state
                                    after the instruction completes abruptly is given
                                    by <code class="literal">ExceptionStackFrame</code>.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.9-100-B.1"></a>
                                    The type state after an instruction completes abruptly is the
                                    same as the incoming type state, except that the operand stack
                                    is empty.
                           </p><pre class="programlisting">
exceptionStackFrame(StackFrame, ExceptionStackFrame) :-
    StackFrame = frame(Locals, _OperandStack, Flags),
    ExceptionStackFrame = frame(Locals, [], Flags).
    </pre></li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.9-200"></a>Many instructions have
                     type rules that are completely isomorphic to the rules for other
                     instructions. If an instruction <code class="literal">b1</code> is isomorphic to
                     another instruction <code class="literal">b2</code>, then the type rule
                     for <code class="literal">b1</code> is the same as the type rule
                     for <code class="literal">b2</code>.
                  </p><pre class="programlisting">
instructionIsTypeSafe(Instruction, Environment, Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    instructionHasEquivalentTypeRule(Instruction, IsomorphicInstruction),
    instructionIsTypeSafe(IsomorphicInstruction, Environment, Offset,
                          StackFrame, NextStackFrame,
                          ExceptionStackFrame).
</pre><p class="norm"><a name="jvms-4.10.1.9-300"></a>The English language
                     description of each rule is intended to be readable, intuitive, and
                     concise. As such, the description avoids repeating all the contextual
                     assumptions given above. In particular:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.9-300-A"></a>
                                    The description does not explicitly mention the environment.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.9-300-B"></a>
                                    When the description speaks of the operand stack or local
                                    variables in the following, it is referring to the operand stack
                                    and local variable components of a type state: either the
                                    incoming type state or the outgoing one.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.9-300-C"></a>
                                    The type state after the instruction completes abruptly is
                                    almost always identical to the incoming type state. The
                                    description only discusses the type state after the instruction
                                    completes abruptly when that is not the case.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.9-300-D"></a>
                                    The description speaks of popping and pushing types onto the
                                    operand stack, and does not explicitly discuss issues of stack
                                    underflow or overflow. The description assumes these operations
                                    can be completed successfully, but the Prolog clauses for
                                    operand stack manipulation ensure that the necessary checks are
                                    made.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.9-300-E"></a>
                                    The description discusses only the manipulation of logical
                                    types. In practice, some types take more than one word. The
                                    description abstracts from these representation details, but the
                                    Prolog clauses that manipulate data do not.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.9-310"></a>Any ambiguities can be
                     resolved by referring to the formal Prolog clauses.
                  </p>
                  <div class="section-verification" title="aaload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.aaload"></a><span class="emphasis"><em>aaload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.aaload-100"></a>
                        An <span class="emphasis"><em>aaload</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">int</code> and an array type with component
                        type <code class="literal">ComponentType</code>
                        where <code class="literal">ComponentType</code> is a subtype of <code class="literal">Object</code>,
                        with <code class="literal">ComponentType</code> yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.aaload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(aaload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    nth1OperandStackIs(2, StackFrame, ArrayType),
    arrayComponentType(ArrayType, ComponentType),
    isBootstrapLoader(BL),
    validTypeTransition(Environment,
                        [int, arrayOf(class('java/lang/Object', BL))],
                        ComponentType, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.aaload-200"></a>
                        The component type of an array of <code class="literal">X</code>
                        is <code class="literal">X</code>. We define the component type of <code class="literal">null</code> to be
                        <code class="literal">null</code>.
                     </p><a name="jvms-4.10.1.9.aaload-200.P"></a><pre class="programlisting">
arrayComponentType(arrayOf(X), X).
arrayComponentType(null, null).
</pre></div>
                  <div class="section-verification" title="aastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.aastore"></a><span class="emphasis"><em>aastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.aastore-100"></a>
                        An <span class="emphasis"><em>aastore</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">Object</code>, <code class="literal">int</code>, and an array of <code class="literal">Object</code> off the incoming
                        operand stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.aastore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(aastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    isBootstrapLoader(BL),
    canPop(StackFrame,
           [class('java/lang/Object', BL),
            int,
            arrayOf(class('java/lang/Object', BL))],
           NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="aconst_null">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.aconst_null"></a><span class="emphasis"><em>aconst_null</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.aconst_null-100"></a>
                        An <span class="emphasis"><em>aconst_null</em></span> instruction is type safe if one can validly push the
                        type <code class="literal">null</code> onto the incoming operand stack yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.aconst_null-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(aconst_null, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], null, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="aload, aload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.aload"></a><span class="emphasis"><em>aload</em></span>, <span class="emphasis"><em>aload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.aload-100"></a>
                        An <span class="emphasis"><em>aload</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a load instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">reference</code> is type safe and
                        yields an outgoing type state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.aload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(aload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, reference, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.aload-200"></a>
                        The instructions <span class="emphasis"><em>aload_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are type safe
                        iff the equivalent <span class="emphasis"><em>aload</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.aload-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(aload_0, aload(0)).
instructionHasEquivalentTypeRule(aload_1, aload(1)).
instructionHasEquivalentTypeRule(aload_2, aload(2)).
instructionHasEquivalentTypeRule(aload_3, aload(3)).
</pre></div>
                  <div class="section-verification" title="anewarray">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.anewarray"></a><span class="emphasis"><em>anewarray</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.anewarray-100"></a>
                        An <span class="emphasis"><em>anewarray</em></span> instruction with operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting either a class type or an
                        array type, and one can legally replace a type matching <code class="literal">int</code> on the
                        incoming operand stack with an array with component type <code class="literal">CP</code> yielding
                        the outgoing type state.
                     </p><a name="jvms-4.10.1.9.anewarray-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(anewarray(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    (CP = class(_, _) ; CP = arrayOf(_)),
    validTypeTransition(Environment, [int], arrayOf(CP),
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="areturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.areturn"></a><span class="emphasis"><em>areturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.areturn-100"></a>
                        An <span class="emphasis"><em>areturn</em></span> instruction is type safe iff the enclosing method has a
                        declared return type, <code class="literal">ReturnType</code>, that is a <code class="literal">reference</code>
                        type, and one can validly pop a type
                        matching <code class="literal">ReturnType</code> off the incoming operand
                        stack.
                     </p><a name="jvms-4.10.1.9.areturn-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(areturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, ReturnType),
    isAssignable(ReturnType, reference),
    canPop(StackFrame, [ReturnType], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="arraylength">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.arraylength"></a><span class="emphasis"><em>arraylength</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.arraylength-100"></a>
                        An <span class="emphasis"><em>arraylength</em></span> instruction is type safe iff one can validly replace
                        an array type on the incoming operand stack with the type <code class="literal">int</code>
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.arraylength-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(arraylength, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    nth1OperandStackIs(1, StackFrame, ArrayType),
    arrayComponentType(ArrayType, _),
    validTypeTransition(Environment, [top], int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="astore, astore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.astore"></a><span class="emphasis"><em>astore</em></span>, <span class="emphasis"><em>astore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.astore-100"></a>
                        An <span class="emphasis"><em>astore</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a store instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">reference</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.astore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(astore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, reference, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.astore-200"></a>
                        The instructions <span class="emphasis"><em>astore_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are type safe
                        iff the equivalent <span class="emphasis"><em>astore</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.astore-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(astore_0, astore(0)).
instructionHasEquivalentTypeRule(astore_1, astore(1)).
instructionHasEquivalentTypeRule(astore_2, astore(2)).
instructionHasEquivalentTypeRule(astore_3, astore(3)).
</pre></div>
                  <div class="section-verification" title="athrow">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.athrow"></a><span class="emphasis"><em>athrow</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.athrow-100"></a>
                        An <span class="emphasis"><em>athrow</em></span> instruction is type safe iff the top of the operand stack
                        matches <code class="literal">Throwable</code>.
                     </p><a name="jvms-4.10.1.9.athrow-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(athrow, _Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    isBootstrapLoader(BL),
    canPop(StackFrame, [class('java/lang/Throwable', BL)], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="baload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.baload"></a><span class="emphasis"><em>baload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.baload-100"></a>
                        A <span class="emphasis"><em>baload</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">int</code> and a small array type on the incoming operand stack
                        with <code class="literal">int</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.baload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(baload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :
    nth1OperandStackIs(2, StackFrame, ArrayType),
    isSmallArray(ArrayType),
    validTypeTransition(Environment, [int, top], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.baload-200"></a>
                        An array type is a <span class="emphasis"><em>small array type</em></span> if it is an
                        array of <code class="literal">byte</code>, an array of <code class="literal">boolean</code>, or a subtype thereof
                        (<code class="literal">null</code>).
                     </p><a name="jvms-4.10.1.9.baload-200.P"></a><pre class="programlisting">
isSmallArray(arrayOf(byte)).
isSmallArray(arrayOf(boolean)).
isSmallArray(null).
</pre></div>
                  <div class="section-verification" title="bastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.bastore"></a><span class="emphasis"><em>bastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.bastore-100"></a>
                        A <span class="emphasis"><em>bastore</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">int</code>, <code class="literal">int</code> and a small array type off the incoming operand
                        stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.bastore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(bastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    nth1OperandStackIs(3, StackFrame, ArrayType),
    isSmallArray(ArrayType),
    canPop(StackFrame, [int, int, top], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="bipush">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.bipush"></a><span class="emphasis"><em>bipush</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.bipush-100"></a>
                        A <span class="emphasis"><em>bipush</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>sipush</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.bipush-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(bipush(Value), sipush(Value)).
</pre></div>
                  <div class="section-verification" title="caload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.caload"></a><span class="emphasis"><em>caload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.caload-100"></a>
                        A <span class="emphasis"><em>caload</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">int</code> and array of <code class="literal">char</code> on the incoming operand stack with
                        <code class="literal">int</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.caload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(caload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(char)], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="castore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.castore"></a><span class="emphasis"><em>castore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.castore-100"></a>
                        A <span class="emphasis"><em>castore</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">int</code>, <code class="literal">int</code> and array of <code class="literal">char</code> off the incoming operand
                        stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.castore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(castore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [int, int, arrayOf(char)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="checkcast">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.checkcast"></a><span class="emphasis"><em>checkcast</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.checkcast-100"></a>
                        A <span class="emphasis"><em>checkcast</em></span> instruction with operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting either a class or an array,
                        and one can validly replace the type <code class="literal">Object</code> on top of the incoming
                        operand stack with the type denoted by <code class="literal">CP</code> yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.checkcast-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(checkcast(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    (CP = class(_, _) ; CP = arrayOf(_)),
    isBootstrapLoader(BL),
    validTypeTransition(Environment, [class('java/lang/Object', BL)], CP,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="d2f, d2i, d2l">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.d2f"></a><span class="emphasis"><em>d2f</em></span>, <span class="emphasis"><em>d2i</em></span>, <span class="emphasis"><em>d2l</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.d2f-100"></a>
                        A <span class="emphasis"><em>d2f</em></span> instruction is type safe if one can validly pop <code class="literal">double</code> off
                        the incoming operand stack and replace it with <code class="literal">float</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.d2f-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(d2f, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.d2f-200"></a>
                        A <span class="emphasis"><em>d2i</em></span> instruction is type safe if one can validly pop <code class="literal">double</code> off
                        the incoming operand stack and replace it with <code class="literal">int</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.d2f-200.P"></a><pre class="programlisting">
instructionIsTypeSafe(d2i, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.d2f-300"></a>
                        A <span class="emphasis"><em>d2l</em></span> instruction is type safe if one can validly pop <code class="literal">double</code> off
                        the incoming operand stack and replace it with <code class="literal">long</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.d2f-300.P"></a><pre class="programlisting">
instructionIsTypeSafe(d2l, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dadd">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dadd"></a><span class="emphasis"><em>dadd</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dadd-100"></a>
                        A <span class="emphasis"><em>dadd</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">double</code> and <code class="literal">double</code> on the incoming operand stack with
                        <code class="literal">double</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.dadd-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dadd, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    validTypeTransition(Environment, [double, double], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="daload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.daload"></a><span class="emphasis"><em>daload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.daload-100"></a>
                        A <span class="emphasis"><em>daload</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">int</code> and array of <code class="literal">double</code> on the incoming operand stack
                        with <code class="literal">double</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.daload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(daload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(double)], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dastore"></a><span class="emphasis"><em>dastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dastore-100"></a>
                        A <span class="emphasis"><em>dastore</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">double</code>, <code class="literal">int</code> and array of <code class="literal">double</code> off the incoming
                        operand stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.dastore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [double, int, arrayOf(double)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dcmp<op&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dcmp_op"></a><span class="emphasis"><em>dcmp&lt;op&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dcmp_op-100"></a>
                        A <span class="emphasis"><em>dcmpg</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">double</code> and <code class="literal">double</code> on the incoming operand stack with
                        <code class="literal">int</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.dcmp_op-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dcmpg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double, double], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dcmp_op-200"></a>
                        A <span class="emphasis"><em>dcmpl</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>dcmpg</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.dcmp_op-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(dcmpl, dcmpg).
</pre></div>
                  <div class="section-verification" title="dconst_<d&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dconst_d"></a><span class="emphasis"><em>dconst_&lt;d&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dconst_d-100"></a>
                        A <span class="emphasis"><em>dconst_0</em></span> instruction is type safe if one can validly push the type
                        <code class="literal">double</code> onto the incoming operand stack yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.dconst_d-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dconst_0, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], double, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dconst_d-200"></a>
                        A <span class="emphasis"><em>dconst_1</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>dconst_0</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.dconst_d-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(dconst_1, dconst_0).
</pre></div>
                  <div class="section-verification" title="ddiv">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ddiv"></a><span class="emphasis"><em>ddiv</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ddiv-100"></a>
                        A <span class="emphasis"><em>ddiv</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>dadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.ddiv-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(ddiv, dadd).
</pre></div>
                  <div class="section-verification" title="dload, dload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dload"></a><span class="emphasis"><em>dload</em></span>, <span class="emphasis"><em>dload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dload-100"></a>
                        A <span class="emphasis"><em>dload</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a load instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">double</code> is type safe and
                        yields an outgoing type state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.dload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, double, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dload-200"></a>
                        The instructions <span class="emphasis"><em>dload_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are typesafe
                        iff the equivalent <span class="emphasis"><em>dload</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.dload-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(dload_0, dload(0)).
instructionHasEquivalentTypeRule(dload_1, dload(1)).
instructionHasEquivalentTypeRule(dload_2, dload(2)).
instructionHasEquivalentTypeRule(dload_3, dload(3)).
</pre></div>
                  <div class="section-verification" title="dmul">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dmul"></a><span class="emphasis"><em>dmul</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dmul-100"></a>
                        A <span class="emphasis"><em>dmul</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>dadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.dmul-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(dmul, dadd).
</pre></div>
                  <div class="section-verification" title="dneg">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dneg"></a><span class="emphasis"><em>dneg</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dneg-100"></a>
                        A <span class="emphasis"><em>dneg</em></span> instruction is type safe iff there is a type matching
                        <code class="literal">double</code> on the incoming operand stack. The <span class="emphasis"><em>dneg</em></span> instruction does
                        not alter the type state.
                     </p><a name="jvms-4.10.1.9.dneg-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dneg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="drem">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.drem"></a><span class="emphasis"><em>drem</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.drem-100"></a>
                        A <span class="emphasis"><em>drem</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>dadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.drem-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(drem, dadd).
</pre></div>
                  <div class="section-verification" title="dreturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dreturn"></a><span class="emphasis"><em>dreturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dreturn-100"></a>
                        A <span class="emphasis"><em>dreturn</em></span> instruction is type safe if the enclosing method has a
                        declared return type of <code class="literal">double</code>, and one can validly pop a type
                        matching <code class="literal">double</code> off the incoming operand stack.
                     </p><a name="jvms-4.10.1.9.dreturn-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dreturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, double),
    canPop(StackFrame, [double], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dstore, dstore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dstore"></a><span class="emphasis"><em>dstore</em></span>, <span class="emphasis"><em>dstore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dstore-100"></a>
                        A <span class="emphasis"><em>dstore</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a store instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">double</code> is type safe and
                        yields an outgoing type state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.dstore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dstore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, double, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dstore-200"></a>
                        The instructions <span class="emphasis"><em>dstore_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are type safe
                        iff the equivalent <span class="emphasis"><em>dstore</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.dstore-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(dstore_0, dstore(0)).
instructionHasEquivalentTypeRule(dstore_1, dstore(1)).
instructionHasEquivalentTypeRule(dstore_2, dstore(2)).
instructionHasEquivalentTypeRule(dstore_3, dstore(3)).
</pre></div>
                  <div class="section-verification" title="dsub">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dsub"></a><span class="emphasis"><em>dsub</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dsub-100"></a>
                        A <span class="emphasis"><em>dsub</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>dadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.dsub-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(dsub, dadd).
</pre></div>
                  <div class="section-verification" title="dup">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup"></a><span class="emphasis"><em>dup</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dup-100"></a>
                        A <span class="emphasis"><em>dup</em></span> instruction is type safe iff one can validly replace a
                        category 1 type, <code class="literal">Type</code>, with the types <code class="literal">Type</code>, <code class="literal">Type</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.dup-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dup, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    StackFrame = frame(Locals, InputOperandStack, Flags),
    popCategory1(InputOperandStack, Type, _),
    canSafelyPush(Environment, InputOperandStack, Type, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dup_x1">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup_x1"></a><span class="emphasis"><em>dup_x1</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm"><a name="jvms-4.10.1.9.dup_x1-100"></a>
                        A <span class="emphasis"><em>dup_x1</em></span> instruction is type safe iff one can validly replace two
                        category 1 types, <code class="literal">Type1</code>, and <code class="literal">Type2</code>, on the incoming operand stack
                        with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type1</code>, yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.dup_x1-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dup_x1, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type2, Type1],
                      OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dup_x2">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup_x2"></a><span class="emphasis"><em>dup_x2</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dup_x2-100"></a>
                        A <span class="emphasis"><em>dup_x2</em></span> instruction is type safe iff it is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>dup_x2</em></span> instruction.
                     </p><a name="jvms-4.10.1.9.dup_x2-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dup_x2, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    dup_x2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup_x2-110"></a>
                        A <span class="emphasis"><em>dup_x2</em></span> instruction is a <span class="emphasis"><em>type safe form</em></span> of the
                        <span class="emphasis"><em>dup_x2</em></span> instruction iff it is a <span class="emphasis"><em>type safe form 1</em></span>
                        <span class="emphasis"><em>dup_x2</em></span> instruction or a <span class="emphasis"><em>type safe form 2</em></span>
                        <span class="emphasis"><em>dup_x2</em></span> instruction.
                     </p><a name="jvms-4.10.1.9.dup_x2-110.P"></a><pre class="programlisting">
dup_x2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup_x2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup_x2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup_x2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup_x2-120"></a>
                        A <span class="emphasis"><em>dup_x2</em></span> instruction is a <span class="emphasis"><em>type safe form 1</em></span>
                        <span class="emphasis"><em>dup_x2</em></span> instruction iff one can validly replace three category 1
                        types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code> on the incoming operand stack with
                        the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, <code class="literal">Type1</code>, yielding the outgoing
                        type state.
                     </p><a name="jvms-4.10.1.9.dup_x2-120.P"></a><pre class="programlisting">
dup_x2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory1(Stack2, Type3, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup_x2-130"></a>
                        A <span class="emphasis"><em>dup_x2</em></span> instruction is a <span class="emphasis"><em>type safe form 2</em></span>
                        <span class="emphasis"><em>dup_x2</em></span> instruction iff one can validly replace a category 1 type,
                        <code class="literal">Type1</code>, and a category 2 type, <code class="literal">Type2</code>, on the incoming operand stack
                        with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type1</code>, yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.dup_x2-130.P"></a><pre class="programlisting">
dup_x2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory2(Stack1, Type2, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type2, Type1],
                      OutputOperandStack).
</pre></div>
                  <div class="section-verification" title="dup2">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup2"></a><span class="emphasis"><em>dup2</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dup2-100"></a>
                        A <span class="emphasis"><em>dup2</em></span> instruction is type safe iff it is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>dup2</em></span> instruction.
                     </p><a name="jvms-4.10.1.9.dup2-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dup2, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    StackFrame = frame(Locals, InputOperandStack, Flags),
    dup2FormIsTypeSafe(Environment,InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2-110"></a>
                        A <span class="emphasis"><em>dup2</em></span> instruction is a <span class="emphasis"><em>type safe form</em></span> of the
                        <span class="emphasis"><em>dup2</em></span> instruction iff it is a <span class="emphasis"><em>type safe form 1</em></span>
                        <span class="emphasis"><em>dup2</em></span> instruction or a <span class="emphasis"><em>type safe form 2</em></span> <span class="emphasis"><em>dup2</em></span>
                        instruction.
                     </p><a name="jvms-4.10.1.9.dup2-110.P"></a><pre class="programlisting">
dup2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2Form1IsTypeSafe(Environment,InputOperandStack, OutputOperandStack).

dup2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2Form2IsTypeSafe(Environment,InputOperandStack, OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2-120"></a>
                        A <span class="emphasis"><em>dup2</em></span> instruction is a <span class="emphasis"><em>type safe form 1</em></span> <span class="emphasis"><em>dup2</em></span>
                        instruction iff one can validly replace two category 1 types, <code class="literal">Type1</code>
                        and <code class="literal">Type2</code> on the incoming operand stack with the types <code class="literal">Type1</code>,
                        <code class="literal">Type2</code>, <code class="literal">Type1</code>, <code class="literal">Type2</code>, yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.dup2-120.P"></a><pre class="programlisting">
dup2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack):-
    popCategory1(InputOperandStack, Type1, TempStack),
    popCategory1(TempStack, Type2, _),
    canSafelyPushList(Environment, InputOperandStack, [Type1, Type2],
                      OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2-130"></a>
                        A <span class="emphasis"><em>dup2</em></span> instruction is a <span class="emphasis"><em>type safe form 2</em></span> <span class="emphasis"><em>dup2</em></span>
                        instruction iff one can validly replace a category 2 type, <code class="literal">Type</code> on
                        the incoming operand stack with the types <code class="literal">Type</code>, <code class="literal">Type</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.dup2-130.P"></a><pre class="programlisting">
dup2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack):-
    popCategory2(InputOperandStack, Type, _),
    canSafelyPush(Environment, InputOperandStack, Type, OutputOperandStack).
</pre></div>
                  <div class="section-verification" title="dup2_x1">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup2_x1"></a><span class="emphasis"><em>dup2_x1</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dup2_x1-100"></a>
                        A <span class="emphasis"><em>dup2_x1</em></span> instruction is type safe iff it is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>dup2_x1</em></span> instruction.
                     </p><a name="jvms-4.10.1.9.dup2_x1-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dup2_x1, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    dup2_x1FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2_x1-110"></a>
                        A <span class="emphasis"><em>dup2_x1</em></span> instruction is a <span class="emphasis"><em>type safe form</em></span> of
                        the <span class="emphasis"><em>dup2_x1</em></span> instruction iff it is a <span class="emphasis"><em>type safe form
                              1</em></span> <span class="emphasis"><em>dup2_x1</em></span> instruction or a
                        <span class="emphasis"><em>type safe form 2</em></span> <span class="emphasis"><em>dup_x2</em></span> instruction.
                     </p><a name="jvms-4.10.1.9.dup2_x1-110.P"></a><pre class="programlisting">
dup2_x1FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x1Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup2_x1FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x1Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2_x1-120"></a>
                        A <span class="emphasis"><em>dup2_x1</em></span> instruction is a <span class="emphasis"><em>type safe form 1</em></span>
                        <span class="emphasis"><em>dup2_x1</em></span> instruction iff one can validly replace three category 1
                        types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, on the incoming operand stack with
                        the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, <code class="literal">Type1</code>, <code class="literal">Type2</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.dup2_x1-120.P"></a><pre class="programlisting">
dup2_x1Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory1(Stack2, Type3, Rest),
    canSafelyPushList(Environment, Rest, [Type2, Type1, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2_x1-130"></a>
                        A <span class="emphasis"><em>dup2_x1</em></span> instruction is a <span class="emphasis"><em>type safe form 2</em></span>
                        <span class="emphasis"><em>dup2_x1</em></span> instruction iff one can validly replace a category 2 type,
                        <code class="literal">Type1</code>, and a category 1 type, <code class="literal">Type2</code>, on the incoming operand stack
                        with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type1</code>, yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.dup2_x1-130.P"></a><pre class="programlisting">
dup2_x1Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory2(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type2, Type1],
                      OutputOperandStack).
</pre></div>
                  <div class="section-verification" title="dup2_x2">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup2_x2"></a><span class="emphasis"><em>dup2_x2</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-100"></a>
                        A <span class="emphasis"><em>dup2_x2</em></span> instruction is type safe iff it is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>dup2_x2</em></span> instruction.
                     </p><a name="jvms-4.10.1.9.dup2_x2-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(dup2_x2, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    dup2_x2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-110"></a>
                        A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe form</em></span> of
                        the <span class="emphasis"><em>dup2_x2</em></span> instruction iff one of the following holds:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-110-A"></a>
                                       it is a <span class="emphasis"><em>type safe form 1</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-110-B"></a>
                                       it is a <span class="emphasis"><em>type safe form 2</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-110-C"></a>
                                       it is a <span class="emphasis"><em>type safe form 3</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-110-D"></a>
                                       it is a <span class="emphasis"><em>type safe form 4</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction.
                              </p>
                           </li>
                        </ul>
                     </div><a name="jvms-4.10.1.9.dup2_x2-110.P"></a><pre class="programlisting">
dup2_x2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup2_x2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup2_x2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x2Form3IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup2_x2FormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x2Form4IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-120"></a>
                        A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe form 1</em></span>
                        <span class="emphasis"><em>dup2_x2</em></span> instruction iff one can validly replace four category 1
                        types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, <code class="literal">Type4</code>, on the incoming operand
                        stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, <code class="literal">Type4</code>, <code class="literal">Type1</code>,
                        <code class="literal">Type2</code>, yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.dup2_x2-120.P"></a><pre class="programlisting">
dup2_x2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory1(Stack2, Type3, Stack3),
    popCategory1(Stack3, Type4, Rest),
    canSafelyPushList(Environment, Rest,
                      [Type2, Type1, Type4, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-130"></a>
                        A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe form 2</em></span>
                        <span class="emphasis"><em>dup2_x2</em></span> instruction iff one can validly replace a category 2 type,
                        <code class="literal">Type1</code>, and two category 1 types, <code class="literal">Type2</code>, <code class="literal">Type3</code>, on the incoming
                        operand stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, <code class="literal">Type1</code>,
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.dup2_x2-130.P"></a><pre class="programlisting">
dup2_x2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory2(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory1(Stack2, Type3, Rest),
    canSafelyPushList(Environment, Rest,
                      [Type1, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-140"></a>
                        A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe form 3</em></span>
                        <span class="emphasis"><em>dup2_x2</em></span> instruction iff one can validly replace two category 1
                        types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, and a category 2 type, <code class="literal">Type3</code>, on the
                        incoming operand stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>,
                        <code class="literal">Type1</code>, <code class="literal">Type2</code>, yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.dup2_x2-140.P"></a><pre class="programlisting">
dup2_x2Form3IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory2(Stack2, Type3, Rest),
    canSafelyPushList(Environment, Rest,
                      [Type2, Type1, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.dup2_x2-150"></a>
                        A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe form 4</em></span>
                        <span class="emphasis"><em>dup2_x2</em></span> instruction iff one can validly replace two category 2
                        types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, on the incoming operand stack with the types
                        <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type1</code>, yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.dup2_x2-150.P"></a><pre class="programlisting">
dup2_x2Form4IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory2(InputOperandStack, Type1, Stack1),
    popCategory2(Stack1, Type2, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type2, Type1],
                      OutputOperandStack).
</pre></div>
                  <div class="section-verification" title="f2d, f2i, f2l">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.f2d"></a><span class="emphasis"><em>f2d</em></span>, <span class="emphasis"><em>f2i</em></span>, <span class="emphasis"><em>f2l</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.f2d-100"></a>
                        An <span class="emphasis"><em>f2d</em></span> instruction is type safe if one can validly pop <code class="literal">float</code> off
                        the incoming operand stack and replace it with <code class="literal">double</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.f2d-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(f2d, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.f2d-200"></a>
                        An <span class="emphasis"><em>f2i</em></span> instruction is type safe if one can validly pop <code class="literal">float</code> off
                        the incoming operand stack and replace it with <code class="literal">int</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.f2d-200.P"></a><pre class="programlisting">
instructionIsTypeSafe(f2i, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.f2d-300"></a>
                        An <span class="emphasis"><em>f2l</em></span> instruction is type safe if one can validly pop <code class="literal">float</code> off
                        the incoming operand stack and replace it with <code class="literal">long</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.f2d-300.P"></a><pre class="programlisting">
instructionIsTypeSafe(f2l, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fadd">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fadd"></a><span class="emphasis"><em>fadd</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fadd-100"></a>
                        An <span class="emphasis"><em>fadd</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">float</code> and <code class="literal">float</code> on the incoming operand stack with
                        <code class="literal">float</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.fadd-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(fadd, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float, float], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="faload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.faload"></a><span class="emphasis"><em>faload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.faload-100"></a>
                        An <span class="emphasis"><em>faload</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">int</code> and array of <code class="literal">float</code> on the incoming operand stack with
                        <code class="literal">float</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.faload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(faload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(float)], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fastore"></a><span class="emphasis"><em>fastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fastore-100"></a>
                        An <span class="emphasis"><em>fastore</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">float</code>, <code class="literal">int</code> and array of <code class="literal">float</code> off the incoming operand
                        stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.fastore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(fastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [float, int, arrayOf(float)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fcmp<op&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fcmp_op"></a><span class="emphasis"><em>fcmp&lt;op&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fcmp_op-100"></a>
                        An <span class="emphasis"><em>fcmpg</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">float</code> and <code class="literal">float</code> on the incoming operand stack with <code class="literal">int</code>
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.fcmp_op-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(fcmpg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float, float], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.fcmp_op-200"></a>
                        An <span class="emphasis"><em>fcmpl</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>fcmpg</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.fcmp_op-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(fcmpl, fcmpg).
</pre></div>
                  <div class="section-verification" title="fconst_<f&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fconst_f"></a><span class="emphasis"><em>fconst_&lt;f&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fconst_f-100"></a>
                        An <span class="emphasis"><em>fconst_0</em></span> instruction is type safe if one can validly push the
                        type <code class="literal">float</code> onto the incoming operand stack yielding the outgoing
                        type state.
                     </p><a name="jvms-4.10.1.9.fconst_f-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(fconst_0, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], float, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.fconst_f-200"></a>
                        The rules for the other variants of <span class="emphasis"><em>fconst</em></span> are equivalent.
                     </p><a name="jvms-4.10.1.9.fconst_f-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(fconst_1, fconst_0).
instructionHasEquivalentTypeRule(fconst_2, fconst_0).
</pre></div>
                  <div class="section-verification" title="fdiv">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fdiv"></a><span class="emphasis"><em>fdiv</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fdiv-100"></a>
                        An <span class="emphasis"><em>fdiv</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>fadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.fdiv-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(fdiv, fadd).
</pre></div>
                  <div class="section-verification" title="fload, fload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fload"></a><span class="emphasis"><em>fload</em></span>, <span class="emphasis"><em>fload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fload-100"></a>
                        An <span class="emphasis"><em>fload</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a load instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">float</code> is type safe and
                        yields an outgoing type state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.fload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(fload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, float, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.fload-200"></a>
                        The instructions <span class="emphasis"><em>fload_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are typesafe
                        iff the equivalent <span class="emphasis"><em>fload</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.fload-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(fload_0, fload(0)).
instructionHasEquivalentTypeRule(fload_1, fload(1)).
instructionHasEquivalentTypeRule(fload_2, fload(2)).
instructionHasEquivalentTypeRule(fload_3, fload(3)).
</pre></div>
                  <div class="section-verification" title="fmul">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fmul"></a><span class="emphasis"><em>fmul</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fmul-100"></a>
                        An <span class="emphasis"><em>fmul</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>fadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.fmul-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(fmul, fadd).
</pre></div>
                  <div class="section-verification" title="fneg">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fneg"></a><span class="emphasis"><em>fneg</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fneg-100"></a>
                        An <span class="emphasis"><em>fneg</em></span> instruction is type safe iff there is a type matching
                        <code class="literal">float</code> on the incoming operand stack. The <span class="emphasis"><em>fneg</em></span> instruction does not
                        alter the type state.
                     </p><a name="jvms-4.10.1.9.fneg-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(fneg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="frem">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.frem"></a><span class="emphasis"><em>frem</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.frem-100"></a>
                        An <span class="emphasis"><em>frem</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>fadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.frem-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(frem, fadd).
</pre></div>
                  <div class="section-verification" title="freturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.freturn"></a><span class="emphasis"><em>freturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.freturn-100"></a>
                        An <span class="emphasis"><em>freturn</em></span> instruction is type safe if the enclosing method has a
                        declared return type of <code class="literal">float</code>, and one can validly pop a type
                        matching <code class="literal">float</code> off the incoming operand stack.
                     </p><a name="jvms-4.10.1.9.freturn-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(freturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, float),
    canPop(StackFrame, [float], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fstore, fstore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fstore"></a><span class="emphasis"><em>fstore</em></span>, <span class="emphasis"><em>fstore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fstore-100"></a>
                        An <span class="emphasis"><em>fstore</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a store instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">float</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.fstore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(fstore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, float, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.fstore-200"></a>
                        The instructions <span class="emphasis"><em>fstore_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are typesafe
                        iff the equivalent <span class="emphasis"><em>fstore</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.fstore-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(fstore_0, fstore(0)).
instructionHasEquivalentTypeRule(fstore_1, fstore(1)).
instructionHasEquivalentTypeRule(fstore_2, fstore(2)).
instructionHasEquivalentTypeRule(fstore_3, fstore(3)).
</pre></div>
                  <div class="section-verification" title="fsub">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fsub"></a><span class="emphasis"><em>fsub</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.fsub-100"></a>
                        An <span class="emphasis"><em>fsub</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>fadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.fsub-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(fsub, fadd).
</pre></div>
                  <div class="section-verification" title="getfield">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.getfield"></a><span class="emphasis"><em>getfield</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.getfield-100"></a>
                        A <span class="emphasis"><em>getfield</em></span> instruction with operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting a field whose declared type
                        is <code class="literal">FieldType</code>, declared in a
                        class <code class="literal">FieldClass</code>, and one can validly replace a
                        type matching <code class="literal">FieldClass</code> with
                        type <code class="literal">FieldType</code> on the incoming operand stack
                        yielding the outgoing type state. <code class="literal">FieldClass</code> must
                        not be an array type. <code class="literal">protected</code> fields are subject to additional
                        checks (<a class="xref" href="jvms-4.html#jvms-4.10.1.8" title="4.10.1.8.&nbsp;Type Checking for protected Members">&sect;4.10.1.8</a>).
                     </p><a name="jvms-4.10.1.9.getfield-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(getfield(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = field(FieldClass, FieldName, FieldDescriptor),
    parseFieldDescriptor(FieldDescriptor, FieldType),
    passesProtectedCheck(Environment, FieldClass, FieldName,
                         FieldDescriptor, StackFrame),
    validTypeTransition(Environment, [class(FieldClass)], FieldType,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="getstatic">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.getstatic"></a><span class="emphasis"><em>getstatic</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.getstatic-100"></a>
                        A <span class="emphasis"><em>getstatic</em></span> instruction with operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting a field whose declared type
                        is <code class="literal">FieldType</code>, and one can validly
                        push <code class="literal">FieldType</code> on the incoming operand stack
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.getstatic-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(getstatic(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = field(_FieldClass, _FieldName, FieldDescriptor),
    parseFieldDescriptor(FieldDescriptor, FieldType),
    validTypeTransition(Environment, [], FieldType,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="goto, goto_w">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.goto"></a><span class="emphasis"><em>goto</em></span>, <span class="emphasis"><em>goto_w</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.goto-100"></a>
                        A <span class="emphasis"><em>goto</em></span> instruction is type safe iff its target operand is a valid
                        branch target.
                     </p><a name="jvms-4.10.1.9.goto-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(goto(Target), Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :-
    targetIsTypeSafe(Environment, StackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.goto-200"></a>
                        A <span class="emphasis"><em>goto_w</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>goto</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.goto-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(goto_w(Target), goto(Target)).
</pre></div>
                  <div class="section-verification" title="i2b, i2c, i2d, i2f, i2l, i2s">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.i2b"></a><span class="emphasis"><em>i2b</em></span>, <span class="emphasis"><em>i2c</em></span>, <span class="emphasis"><em>i2d</em></span>, <span class="emphasis"><em>i2f</em></span>, <span class="emphasis"><em>i2l</em></span>, <span class="emphasis"><em>i2s</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.i2b-100"></a>
                        An <span class="emphasis"><em>i2b</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ineg</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.i2b-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(i2b, ineg).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.i2b-200"></a>
                        An <span class="emphasis"><em>i2c</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ineg</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.i2b-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(i2c, ineg).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.i2b-300"></a>
                        An <span class="emphasis"><em>i2d</em></span> instruction is type safe if one can validly pop <code class="literal">int</code> off the
                        incoming operand stack and replace it with <code class="literal">double</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.i2b-300.P"></a><pre class="programlisting">
instructionIsTypeSafe(i2d, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.i2b-400"></a>
                        An <span class="emphasis"><em>i2f</em></span> instruction is type safe if one can validly pop <code class="literal">int</code> off the
                        incoming operand stack and replace it with <code class="literal">float</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.i2b-400.P"></a><pre class="programlisting">
instructionIsTypeSafe(i2f, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.i2b-500"></a>
                        An <span class="emphasis"><em>i2l</em></span> instruction is type safe if one can validly pop <code class="literal">int</code> off the
                        incoming operand stack and replace it with <code class="literal">long</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.i2b-500.P"></a><pre class="programlisting">
instructionIsTypeSafe(i2l, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.i2b-600"></a>
                        An <span class="emphasis"><em>i2s</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ineg</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.i2b-600.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(i2s, ineg).
</pre></div>
                  <div class="section-verification" title="iadd">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iadd"></a><span class="emphasis"><em>iadd</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.iadd-100"></a>
                        An <span class="emphasis"><em>iadd</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">int</code> and <code class="literal">int</code> on the incoming operand stack with <code class="literal">int</code>
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.iadd-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(iadd, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, int], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="iaload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iaload"></a><span class="emphasis"><em>iaload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.iaload-100"></a>
                        An <span class="emphasis"><em>iaload</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">int</code> and array of <code class="literal">int</code> on the incoming operand stack with
                        <code class="literal">int</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.iaload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(iaload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(int)], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="iand">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iand"></a><span class="emphasis"><em>iand</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.iand-100"></a>
                        An <span class="emphasis"><em>iand</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>iadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.iand-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(iand, iadd).
</pre></div>
                  <div class="section-verification" title="iastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iastore"></a><span class="emphasis"><em>iastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.iastore-100"></a>
                        An <span class="emphasis"><em>iastore</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">int</code>, <code class="literal">int</code> and array of <code class="literal">int</code> off the incoming operand
                        stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.iastore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(iastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [int, int, arrayOf(int)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="if_acmp<cond&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.if_acmp_cond"></a><span class="emphasis"><em>if_acmp&lt;cond&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.if_acmp_cond-100"></a>
                        An <span class="emphasis"><em>if_acmpeq</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">reference</code> and <code class="literal">reference</code> on the incoming operand stack yielding the
                        outgoing type state <code class="literal">NextStackFrame</code>, and the operand
                        of the instruction, <code class="literal">Target</code>, is a valid branch
                        target assuming an incoming type state
                        of <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.if_acmp_cond-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(if_acmpeq(Target), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [reference, reference], NextStackFrame),
    targetIsTypeSafe(Environment, NextStackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.if_acmp_cond-200"></a>
                        The rule for <span class="emphasis"><em>if_acmpne</em></span> is identical.
                     </p><a name="jvms-4.10.1.9.if_acmp_cond-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(if_acmpne(Target), if_acmpeq(Target)).
</pre></div>
                  <div class="section-verification" title="if_icmp<cond&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.if_icmp_cond"></a><span class="emphasis"><em>if_icmp&lt;cond&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.if_icmp_cond-100"></a>
                        An <span class="emphasis"><em>if_icmpeq</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">int</code> and <code class="literal">int</code> on the incoming operand stack yielding the
                        outgoing type state <code class="literal">NextStackFrame</code>, and the operand
                        of the instruction, <code class="literal">Target</code>, is a valid branch
                        target assuming an incoming type state
                        of <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.if_icmp_cond-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(if_icmpeq(Target), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [int, int], NextStackFrame),
    targetIsTypeSafe(Environment, NextStackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.if_icmp_cond-200"></a>
                        The rules for all other variants of the <span class="emphasis"><em>if_icmp&lt;cond&gt;</em></span> instruction are
                        identical.
                     </p><a name="jvms-4.10.1.9.if_icmp_cond-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(if_icmpge(Target), if_icmpeq(Target)).
instructionHasEquivalentTypeRule(if_icmpgt(Target), if_icmpeq(Target)).
instructionHasEquivalentTypeRule(if_icmple(Target), if_icmpeq(Target)).
instructionHasEquivalentTypeRule(if_icmplt(Target), if_icmpeq(Target)).
instructionHasEquivalentTypeRule(if_icmpne(Target), if_icmpeq(Target)).
</pre></div>
                  <div class="section-verification" title="if<cond&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.if_cond"></a><span class="emphasis"><em>if&lt;cond&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.if_cond-100"></a>
                        An <span class="emphasis"><em>ifeq</em></span> instruction is type safe iff one can validly pop a type
                        matching <code class="literal">int</code> off the incoming operand stack yielding the outgoing
                        type state <code class="literal">NextStackFrame</code>, and the operand of the
                        instruction, <code class="literal">Target</code>, is a valid branch target
                        assuming an incoming type state
                        of <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.if_cond-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(ifeq(Target), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    canPop(StackFrame, [int], NextStackFrame), 
    targetIsTypeSafe(Environment, NextStackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.if_cond-200"></a>
                        The rules for all other variations of the <span class="emphasis"><em>if&lt;cond&gt;</em></span> instruction are
                        identical.
                     </p><a name="jvms-4.10.1.9.if_cond-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(ifge(Target), ifeq(Target)).
instructionHasEquivalentTypeRule(ifgt(Target), ifeq(Target)).
instructionHasEquivalentTypeRule(ifle(Target), ifeq(Target)).
instructionHasEquivalentTypeRule(iflt(Target), ifeq(Target)).
instructionHasEquivalentTypeRule(ifne(Target), ifeq(Target)).
</pre></div>
                  <div class="section-verification" title="ifnonnull">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ifnonnull"></a><span class="emphasis"><em>ifnonnull</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ifnonnull-100"></a>
                        An <span class="emphasis"><em>ifnonnull</em></span> instruction is type safe iff one can validly pop a type
                        matching <code class="literal">reference</code> off the incoming operand stack yielding the outgoing
                        type state <code class="literal">NextStackFrame</code>, and the operand of the
                        instruction, <code class="literal">Target</code>, is a valid branch target
                        assuming an incoming type state of <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.ifnonnull-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(ifnonnull(Target), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [reference], NextStackFrame),
    targetIsTypeSafe(Environment, NextStackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ifnull">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ifnull"></a><span class="emphasis"><em>ifnull</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ifnull-100"></a>
                        An <span class="emphasis"><em>ifnull</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ifnonnull</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.ifnull-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(ifnull(Target), ifnonnull(Target)).
</pre></div>
                  <div class="section-verification" title="iinc">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iinc"></a><span class="emphasis"><em>iinc</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.iinc-100"></a>
                        An <span class="emphasis"><em>iinc</em></span> instruction with first operand <code class="literal">Index</code> is
                        type safe iff <code class="literal">L<sub>Index</sub></code> has
                        type <code class="literal">int</code>. The <span class="emphasis"><em>iinc</em></span> instruction does not change the type
                        state.
                     </p><a name="jvms-4.10.1.9.iinc-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(iinc(Index, _Value), _Environment, _Offset,
                      StackFrame, StackFrame, ExceptionStackFrame) :-
    StackFrame = frame(Locals, _OperandStack, _Flags),
    nth0(Index, Locals, int),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="iload, iload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iload"></a><span class="emphasis"><em>iload</em></span>, <span class="emphasis"><em>iload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.iload-100"></a>
                        An <span class="emphasis"><em>iload</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a load instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">int</code> is type safe and
                        yields an outgoing type state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.iload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(iload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.iload-200"></a>
                        The instructions <span class="emphasis"><em>iload_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are typesafe
                        iff the equivalent <span class="emphasis"><em>iload</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.iload-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(iload_0, iload(0)).
instructionHasEquivalentTypeRule(iload_1, iload(1)).
instructionHasEquivalentTypeRule(iload_2, iload(2)).
instructionHasEquivalentTypeRule(iload_3, iload(3)).
</pre></div>
                  <div class="section-verification" title="imul">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.imul"></a><span class="emphasis"><em>imul</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.imul-100"></a>
                        An <span class="emphasis"><em>imul</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>iadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.imul-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(imul, iadd).
</pre></div>
                  <div class="section-verification" title="ineg">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ineg"></a><span class="emphasis"><em>ineg</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ineg-100"></a>
                        An <span class="emphasis"><em>ineg</em></span> instruction is type safe iff there is a type matching <code class="literal">int</code>
                        on the incoming operand stack. The <span class="emphasis"><em>ineg</em></span> instruction does not alter
                        the type state.
                     </p><a name="jvms-4.10.1.9.ineg-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(ineg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int], int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="instanceof">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.instanceof"></a><span class="emphasis"><em>instanceof</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.instanceof-100"></a>
                        An <span class="emphasis"><em>instanceof</em></span> instruction with operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting either a class or an array,
                        and one can validly replace the type <code class="literal">Object</code> on top of the incoming
                        operand stack with type <code class="literal">int</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.instanceof-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(instanceof(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    (CP = class(_, _) ; CP = arrayOf(_)),
    isBootstrapLoader(BL),
    validTypeTransition(Environment, [class('java/lang/Object', BL)], int,
                        StackFrame,NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="invokedynamic">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokedynamic"></a><span class="emphasis"><em>invokedynamic</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.invokedynamic-100"></a>
                        An <span class="emphasis"><em>invokedynamic</em></span> instruction is type safe iff all of the following
                        are true:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokedynamic-100-A"></a>
                                       Its first operand, <code class="literal">CP</code>, refers to a constant pool entry
                                       denoting an dynamic call site with
                                       name <code class="literal">CallSiteName</code> with
                                       descriptor <code class="literal">Descriptor</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokedynamic-100-B"></a>
                                       <code class="literal">CallSiteName</code> is not <code class="literal">&lt;init&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokedynamic-100-C"></a>
                                       <code class="literal">CallSiteName</code> is not <code class="literal">&lt;clinit&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokedynamic-100-D"></a>
                                       One can validly replace types matching the argument types given
                                       in <code class="literal">Descriptor</code> on the incoming operand stack
                                       with the return type given in <code class="literal">Descriptor</code>,
                                       yielding the outgoing type state.
                              </p>
                           </li>
                        </ul>
                     </div><a name="jvms-4.10.1.9.invokedynamic-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(invokedynamic(CP,0,0), Environment, _Offset,
                      StackFrame, NextStackFrame, ExceptionStackFrame) :- 
    CP = dmethod(CallSiteName, Descriptor),
    CallSiteName \= '<code class="literal">&lt;init&gt;</code>',
    CallSiteName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType),
    reverse(OperandArgList, StackArgList),
    validTypeTransition(Environment, StackArgList, ReturnType,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="invokeinterface">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokeinterface"></a><span class="emphasis"><em>invokeinterface</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.invokeinterface-100"></a>
                        An <span class="emphasis"><em>invokeinterface</em></span> instruction is type safe iff all of the following
                        are true:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokeinterface-100-A"></a>
                                       Its first operand, <code class="literal">CP</code>, refers to a constant pool entry
                                       denoting an interface method named <code class="literal">MethodName</code>
                                       with descriptor <code class="literal">Descriptor</code> that is a member
                                       of an interface <code class="literal">MethodIntfName</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokeinterface-100-B"></a>
                                       <code class="literal">MethodName</code> is not <code class="literal">&lt;init&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokeinterface-100-C"></a>
                                       <code class="literal">MethodName</code> is not <code class="literal">&lt;clinit&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokeinterface-100-D"></a>
                                       Its second operand, <code class="literal">Count</code>, is a valid count
                                       operand (see below).
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokeinterface-100-E"></a>
                                       One can validly replace types matching the
                                       type <code class="literal">MethodIntfName</code> and the argument types
                                       given in <code class="literal">Descriptor</code> on the incoming operand
                                       stack with the return type given
                                       in <code class="literal">Descriptor</code>, yielding the outgoing type
                                       state.
                              </p>
                           </li>
                        </ul>
                     </div><a name="jvms-4.10.1.9.invokeinterface-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(invokeinterface(CP, Count, 0), Environment, _Offset,
                      StackFrame, NextStackFrame, ExceptionStackFrame) :- 
    CP = imethod(MethodIntfName, MethodName, Descriptor),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    MethodName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType),
    currentClassLoader(Environment, CurrentLoader),
    reverse([class(MethodIntfName, CurrentLoader) | OperandArgList],
            StackArgList),
    canPop(StackFrame, StackArgList, TempFrame),
    validTypeTransition(Environment, [], ReturnType, TempFrame, NextStackFrame),
    countIsValid(Count, StackFrame, TempFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.invokeinterface-110"></a>
                        The <code class="literal">Count</code> operand of an <span class="emphasis"><em>invokeinterface</em></span>
                        instruction is valid if it equals the size of the arguments to the
                        instruction. This is equal to the difference between the size
                        of <code class="literal">InputFrame</code>
                        and <code class="literal">OutputFrame</code>.
                     </p><a name="jvms-4.10.1.9.invokeinterface-110.P"></a><pre class="programlisting">
countIsValid(Count, InputFrame, OutputFrame) :-
    InputFrame = frame(_Locals1, OperandStack1, _Flags1),
    OutputFrame = frame(_Locals2, OperandStack2, _Flags2),
    length(OperandStack1, Length1),
    length(OperandStack2, Length2),
    Count =:= Length1 - Length2.
</pre></div>
                  <div class="section-verification" title="invokespecial">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokespecial"></a><span class="emphasis"><em>invokespecial</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100"></a>
                        An <span class="emphasis"><em>invokespecial</em></span> instruction is type safe iff all of the following
                        are true:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-A"></a>
                                       Its first operand, <code class="literal">CP</code>, refers to a constant pool entry
                                       denoting a method named <code class="literal">MethodName</code> with
                                       descriptor <code class="literal">Descriptor</code> that is a member of a
                                       class <code class="literal">MethodClassName</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-B"></a>
                                       Either:
                              </p>
                              <div class="norm">
                                 <ul class="norm" type="circle">
                                    <li class="listitem">
                                       <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-B-A"></a>
                                          	  <code class="literal">MethodName</code> is not <code class="literal">&lt;init&gt;</code>.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-B-B"></a>
                                          	  <code class="literal">MethodName</code> is not <code class="literal">&lt;clinit&gt;</code>.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-B-C"></a>
                                          	  One can validly replace types matching the current class and
                                          	  the argument types given in <code class="literal">Descriptor</code> on
                                          	  the incoming operand stack with the return type given
                                          	  in <code class="literal">Descriptor</code>, yielding the outgoing type
                                          	  state.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-B-D"></a>
                                          	  One can validly replace types matching the
                                          	  class <code class="literal">MethodClassName</code> and the argument
                                          	  types given in <code class="literal">Descriptor</code> on the incoming
                                          	  operand stack with the return type given
                                          	  in <code class="literal">Descriptor</code>.
                                       </p>
                                    </li>
                                 </ul>
                              </div>
                           </li>
                        </ul>
                     </div><a name="jvms-4.10.1.9.invokespecial-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(invokespecial(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = method(MethodClassName, MethodName, Descriptor),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    MethodName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType),
    thisClass(Environment, class(CurrentClassName, CurrentLoader)), 
    reverse([class(CurrentClassName, CurrentLoader) | OperandArgList],
            StackArgList),
    validTypeTransition(Environment, StackArgList, ReturnType,
                        StackFrame, NextStackFrame),
    reverse([class(MethodClassName, CurrentLoader) | OperandArgList],
            StackArgList2),
    validTypeTransition(Environment, StackArgList2, ReturnType,
                        StackFrame, _ResultStackFrame),
    isAssignable(class(CurrentClassName, CurrentLoader),
                 class(MethodClassName, CurrentLoader)).
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-C"></a>
                                       Or:
                              </p>
                              <div class="norm">
                                 <ul class="norm" type="circle">
                                    <li class="listitem">
                                       <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-C-A"></a>
                                          	  MethodName is <code class="literal">&lt;init&gt;</code>.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-C-B"></a>
                                          	  <code class="literal">Descriptor</code> specifies a <code class="literal">void</code> return
                                          	  type.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-C-C"></a>
                                          	  One can validly pop types matching the argument types given
                                          	  in <code class="literal">Descriptor</code> and an uninitialized
                                          	  type, <code class="literal">UninitializedArg</code>, off the incoming
                                          	  operand stack,
                                          	  yielding <code class="literal">OperandStack</code>.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-100-C-D"></a>
                                          	  The outgoing type state is derived from the incoming type
                                          	  state by first replacing the incoming operand stack
                                          	  with <code class="literal">OperandStack</code> and then replacing all
                                          	  instances of <code class="literal">UninitializedArg</code> with the
                                          	  type of instance being initialized.
                                       </p>
                                    </li>
                                 </ul>
                              </div>
                           </li>
                        </ul>
                     </div><a name="jvms-4.10.1.9.invokespecial-100.P.1"></a><pre class="programlisting">
instructionIsTypeSafe(invokespecial(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    CP = method(MethodClassName, '<code class="literal">&lt;init&gt;</code>', Descriptor),
    parseMethodDescriptor(Descriptor, OperandArgList, void), 
    reverse(OperandArgList, StackArgList),
    canPop(StackFrame, StackArgList, TempFrame),
    TempFrame = frame(Locals, FullOperandStack, Flags),
    FullOperandStack = [UninitializedArg | OperandStack],
    currentClassLoader(Environment, CurrentLoader),
    rewrittenUninitializedType(UninitializedArg, Environment,
                               class(MethodClassName, CurrentLoader), This), 
    rewrittenInitializationFlags(UninitializedArg, Flags, NextFlags), 
    substitute(UninitializedArg, This, OperandStack, NextOperandStack),
    substitute(UninitializedArg, This, Locals, NextLocals),
    NextStackFrame = frame(NextLocals, NextOperandStack, NextFlags),
    ExceptionStackFrame = frame(Locals, [], Flags),
    passesProtectedCheck(Environment, MethodClassName, '<code class="literal">&lt;init&gt;</code>',
                         Descriptor, NextStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-110"></a>
                        To compute what type the uninitialized argument's type needs to be
                        rewritten to, there are two cases:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-110-A"></a>
                                       If we are initializing an object within its constructor, its
                                       type is initially <code class="literal">uninitializedThis</code>. This type will be
                                       rewritten to the type of the class of the <code class="literal">&lt;init&gt;</code> method.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokespecial-110-B"></a>
                                       The second case arises from initialization of an object created
                                       by <span class="emphasis"><em>new</em></span>. The uninitialized arg type is rewritten
                                       to <code class="literal">MethodClass</code>, the type of the method holder
                                       of <code class="literal">&lt;init&gt;</code>. We check whether there really is a <span class="emphasis"><em>new</em></span> instruction
                                       at <code class="literal">Address</code>.
                              </p>
                           </li>
                        </ul>
                     </div><a name="jvms-4.10.1.9.invokespecial-110.P"></a><pre class="programlisting">
rewrittenUninitializedType(uninitializedThis, Environment,
                           MethodClass, MethodClass) :-
    MethodClass = class(MethodClassName, CurrentLoader),
    thisClass(Environment, MethodClass). 

rewrittenUninitializedType(uninitializedThis, Environment,
                           MethodClass, MethodClass) :-
    MethodClass = class(MethodClassName, CurrentLoader),
    thisClass(Environment, class(thisClassName, thisLoader)),
    superclassChain(thisClassName, thisLoader, [MethodClass | Rest]).

rewrittenUninitializedType(uninitialized(Address), Environment,
                           MethodClass, MethodClass) :-
    allInstructions(Environment, Instructions),
    member(instruction(Address, new(MethodClass)), Instructions).

rewrittenInitializationFlags(uninitializedThis, _Flags, []).
rewrittenInitializationFlags(uninitialized(_), Flags, Flags).

substitute(_Old, _New, [], []).
substitute(Old, New, [Old | FromRest], [New | ToRest]) :-
    substitute(Old, New, FromRest, ToRest).
substitute(Old, New, [From1 | FromRest], [From1 | ToRest]) :-
    From1 \= Old,
    substitute(Old, New, FromRest, ToRest).
</pre><p class="note">The rule for <span class="emphasis"><em>invokespecial</em></span> of an <code class="literal">&lt;init&gt;</code> method is
                        the sole motivation for passing back a distinct exception stack
                        frame. The concern is that when initializing an object within its
                        constructor, <span class="emphasis"><em>invokespecial</em></span> can cause a superclass <code class="literal">&lt;init&gt;</code> method to
                        be invoked, and that invocation could fail, leaving <code class="literal">this</code>
                        uninitialized. This situation cannot be created using source code in
                        the Java programming language, but can be created by programming in bytecode
                        directly.
                     </p>
                     <p class="note">In this situation, the original frame holds an
                        uninitialized object in local variable 0 and has flag
                        <code class="literal">flagThisUninit</code>. Normal termination of <span class="emphasis"><em>invokespecial</em></span> initializes
                        the uninitialized object and turns off the <code class="literal">flagThisUninit</code> flag. But
                        if the invocation of an <code class="literal">&lt;init&gt;</code> method throws an exception, the
                        uninitialized object might be left in a partially initialized state,
                        and needs to be made permanently unusable. This is represented by an
                        exception frame containing the broken object (the new value of the
                        local) and the <code class="literal">flagThisUninit</code> flag (the old flag). There is no way
                        to get from an apparently-initialized object bearing the
                        <code class="literal">flagThisUninit</code> flag to a properly initialized object, so the object
                        is permanently unusable.
                     </p>
                     <p class="note">If not for this situation, the flags of the
                        exception stack frame would always be the same as the flags of the
                        input stack frame.
                     </p>
                  </div>
                  <div class="section-verification" title="invokestatic">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokestatic"></a><span class="emphasis"><em>invokestatic</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.invokestatic-100"></a>
                        An <span class="emphasis"><em>invokestatic</em></span> instruction is type safe iff all of the following
                        are true:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokestatic-100-A"></a>
                                       Its first operand, <code class="literal">CP</code>, refers to a constant pool entry
                                       denoting a method named <code class="literal">MethodName</code> with
                                       descriptor <code class="literal">Descriptor</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokestatic-100-B"></a>
                                       <code class="literal">MethodName</code> is not <code class="literal">&lt;init&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokestatic-100-C"></a>
                                       <code class="literal">MethodName</code> is not <code class="literal">&lt;clinit&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokestatic-100-D"></a>
                                       One can validly replace types matching the argument types given
                                       in <code class="literal">Descriptor</code> on the incoming operand stack
                                       with the return type given in <code class="literal">Descriptor</code>,
                                       yielding the outgoing type state.
                              </p>
                           </li>
                        </ul>
                     </div><a name="jvms-4.10.1.9.invokestatic-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(invokestatic(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = method(_MethodClassName, MethodName, Descriptor),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    MethodName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType), 
    reverse(OperandArgList, StackArgList),
    validTypeTransition(Environment, StackArgList, ReturnType,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="invokevirtual">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokevirtual"></a><span class="emphasis"><em>invokevirtual</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.invokevirtual-100"></a>
                        An <span class="emphasis"><em>invokevirtual</em></span> instruction is type safe iff all of the following
                        are true:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokevirtual-100-A"></a>
                                       Its first operand, <code class="literal">CP</code>, refers to a constant pool entry
                                       denoting a method named <code class="literal">MethodName</code> with
                                       descriptor <code class="literal">Descriptor</code> that is a member of a
                                       class <code class="literal">MethodClassName</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokevirtual-100-B"></a>
                                       <code class="literal">MethodName</code> is not <code class="literal">&lt;init&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokevirtual-100-C"></a>
                                       <code class="literal">MethodName</code> is not <code class="literal">&lt;clinit&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokevirtual-100-D"></a>
                                       One can validly replace types matching the
                                       class <code class="literal">MethodClassName</code> and the argument types
                                       given in <code class="literal">Descriptor</code> on the incoming operand
                                       stack with the return type given
                                       in <code class="literal">Descriptor</code>, yielding the outgoing type
                                       state.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.invokevirtual-100-E"></a>
                                       If the method is <code class="literal">protected</code>, the usage conforms to the special
                                       rules governing access to <code class="literal">protected</code> members
                                       (<a class="xref" href="jvms-4.html#jvms-4.10.1.8" title="4.10.1.8.&nbsp;Type Checking for protected Members">&sect;4.10.1.8</a>).
                              </p>
                           </li>
                        </ul>
                     </div><a name="jvms-4.10.1.9.invokevirtual-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(invokevirtual(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = method(MethodClassName, MethodName, Descriptor),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    MethodName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType), 
    reverse(OperandArgList, ArgList),
    currentClassLoader(Environment, CurrentLoader),
    reverse([class(MethodClassName, CurrentLoader) | OperandArgList],
            StackArgList),
    validTypeTransition(Environment, StackArgList, ReturnType,
                        StackFrame, NextStackFrame),
    canPop(StackFrame, ArgList, PoppedFrame),
    passesProtectedCheck(Environment, MethodClassName, MethodName,
                         Descriptor, PoppedFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ior">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ior"></a><span class="emphasis"><em>ior</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ior-100"></a>
                        An <span class="emphasis"><em>ior</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>iadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.ior-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(ior, iadd).
</pre></div>
                  <div class="section-verification" title="irem">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.irem"></a><span class="emphasis"><em>irem</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.irem-100"></a>
                        An <span class="emphasis"><em>irem</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>iadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.irem-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(irem, iadd).
</pre></div>
                  <div class="section-verification" title="ireturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ireturn"></a><span class="emphasis"><em>ireturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ireturn-100"></a>
                        An <span class="emphasis"><em>ireturn</em></span> instruction is type safe if the enclosing method has a
                        declared return type of <code class="literal">int</code>, and one can validly pop a type matching
                        <code class="literal">int</code> off the incoming operand stack.
                     </p><a name="jvms-4.10.1.9.ireturn-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(ireturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, int),
    canPop(StackFrame, [int], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ishl, ishr, iushr">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ishl"></a><span class="emphasis"><em>ishl</em></span>, <span class="emphasis"><em>ishr</em></span>, <span class="emphasis"><em>iushr</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ishl-100"></a>
                        An <span class="emphasis"><em>ishl</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>iadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.ishl-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(ishl, iadd).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.ishl-200"></a>
                        An <span class="emphasis"><em>ishr</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>iadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.ishl-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(ishr, iadd).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.ishl-300"></a>
                        An <span class="emphasis"><em>iushr</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>iadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.ishl-300.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(iushr, iadd).
</pre></div>
                  <div class="section-verification" title="istore, istore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.istore"></a><span class="emphasis"><em>istore</em></span>, <span class="emphasis"><em>istore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.istore-100"></a>
                        An <span class="emphasis"><em>istore</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a store instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">int</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.istore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(istore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.istore-200"></a>
                        The instructions <span class="emphasis"><em>istore_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are type safe
                        iff the equivalent <span class="emphasis"><em>istore</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.istore-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(istore_0, istore(0)).
instructionHasEquivalentTypeRule(istore_1, istore(1)).
instructionHasEquivalentTypeRule(istore_2, istore(2)).
instructionHasEquivalentTypeRule(istore_3, istore(3)).
</pre></div>
                  <div class="section-verification" title="isub">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.isub"></a><span class="emphasis"><em>isub</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.isub-100"></a>
                        An <span class="emphasis"><em>isub</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>iadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.isub-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(isub, iadd).
</pre></div>
                  <div class="section-verification" title="ixor">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ixor"></a><span class="emphasis"><em>ixor</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ixor-100"></a>
                        An <span class="emphasis"><em>ixor</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>iadd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.ixor-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(ixor, iadd).
</pre></div>
                  <div class="section-verification" title="l2d, l2f, l2i">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.l2d"></a><span class="emphasis"><em>l2d</em></span>, <span class="emphasis"><em>l2f</em></span>, <span class="emphasis"><em>l2i</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.l2d-100"></a>
                        An <span class="emphasis"><em>l2d</em></span> instruction is type safe if one can validly pop <code class="literal">long</code> off
                        the incoming operand stack and replace it with <code class="literal">double</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.l2d-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(l2d, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.l2d-200"></a>
                        An <span class="emphasis"><em>l2f</em></span> instruction is type safe if one can validly pop <code class="literal">long</code> off
                        the incoming operand stack and replace it with <code class="literal">float</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.l2d-200.P"></a><pre class="programlisting">
instructionIsTypeSafe(l2f, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.l2d-300"></a>
                        An <span class="emphasis"><em>l2i</em></span> instruction is type safe if one can validly pop <code class="literal">long</code> off
                        the incoming operand stack and replace it with <code class="literal">int</code>, yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.l2d-300.P"></a><pre class="programlisting">
instructionIsTypeSafe(l2i, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ladd">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ladd"></a><span class="emphasis"><em>ladd</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ladd-100"></a>
                        An <span class="emphasis"><em>ladd</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">long</code> and <code class="literal">long</code> on the incoming operand stack with <code class="literal">long</code>
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.ladd-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(ladd, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long, long], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="laload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.laload"></a><span class="emphasis"><em>laload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.laload-100"></a>
                        An <span class="emphasis"><em>laload</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">int</code> and array of <code class="literal">long</code> on the incoming operand stack with
                        <code class="literal">long</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.laload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(laload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(long)], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="land">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.land"></a><span class="emphasis"><em>land</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.land-100"></a>
                        An <span class="emphasis"><em>land</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ladd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.land-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(land, ladd).
</pre></div>
                  <div class="section-verification" title="lastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lastore"></a><span class="emphasis"><em>lastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lastore-100"></a>
                        An <span class="emphasis"><em>lastore</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">long</code>, <code class="literal">int</code> and array of <code class="literal">long</code> off the incoming operand
                        stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.lastore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(lastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [long, int, arrayOf(long)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lcmp">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lcmp"></a><span class="emphasis"><em>lcmp</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lcmp-100"></a>
                        A <span class="emphasis"><em>lcmp</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">long</code> and <code class="literal">long</code> on the incoming operand stack with <code class="literal">int</code>
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.lcmp-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(lcmp, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long, long], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lconst_<l&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lconst_l"></a><span class="emphasis"><em>lconst_&lt;l&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lconst_l-100"></a>
                        An <span class="emphasis"><em>lconst_0</em></span> instruction is type safe if one can validly push the
                        type <code class="literal">long</code> onto the incoming operand stack yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.lconst_l-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(lconst_0, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], long, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.lconst_l-200"></a>
                        An <span class="emphasis"><em>lconst_1</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>lconst_0</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.lconst_l-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lconst_1, lconst_0).
</pre></div>
                  <div class="section-verification" title="ldc, ldc_w, ldc2_w">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ldc"></a><span class="emphasis"><em>ldc</em></span>, <span class="emphasis"><em>ldc_w</em></span>, <span class="emphasis"><em>ldc2_w</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ldc-100"></a>
                        An <span class="emphasis"><em>ldc</em></span> instruction with operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code> refers to
                        a constant pool entry denoting an entity of type <code class="literal">Type</code>, where <code class="literal">Type</code>
                        is either <code class="literal">int</code>, <code class="literal">float</code>, <code class="literal">String</code>, <code class="literal">Class</code>, <code class="literal">java.lang.invoke.MethodType</code>, or
                        <code class="literal">java.lang.invoke.MethodHandle</code>, and one can validly push <code class="literal">Type</code> onto the incoming
                        operand stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.ldc-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(ldc(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    functor(CP, Tag, _),
    isBootstrapLoader(BL),
    member([Tag, Type], [
        [int, int],
        [float, float],
        [string, class('java/lang/String', BL)],
        [classConst, class('java/lang/Class', BL)],
        [methodTypeConst, class('java/lang/invoke/MethodType', BL)],
        [methodHandleConst, class('java/lang/invoke/MethodHandle', BL)],
    ]),
    validTypeTransition(Environment, [], Type, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.ldc-200"></a>
                        An <span class="emphasis"><em>ldc_w</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ldc</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.ldc-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(ldc_w(CP), ldc(CP))
</pre><p class="norm-static"><a name="jvms-4.10.1.9.ldc-300"></a>
                        An <span class="emphasis"><em>ldc2_w</em></span> instruction with operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code> refers
                        to a constant pool entry denoting an entity of
                        type <code class="literal">Tag</code>, where <code class="literal">Tag</code> is either
                        <code class="literal">long</code> or <code class="literal">double</code>, and one can validly push <code class="literal">Tag</code>
                        onto the incoming operand stack yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.ldc-300.P"></a><pre class="programlisting">
instructionIsTypeSafe(ldc2_w(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    functor(CP, Tag, _),
    member(Tag, [long, double]), 
    validTypeTransition(Environment, [], Tag, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ldiv">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ldiv"></a><span class="emphasis"><em>ldiv</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.ldiv-100"></a>
                        An <span class="emphasis"><em>ldiv</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ladd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.ldiv-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(ldiv, ladd).
</pre></div>
                  <div class="section-verification" title="lload, lload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lload"></a><span class="emphasis"><em>lload</em></span>, <span class="emphasis"><em>lload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lload-100"></a>
                        An <span class="emphasis"><em>lload</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a load instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">long</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.lload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(lload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, long, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.lload-200"></a>
                        The instructions <span class="emphasis"><em>lload_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are type safe
                        iff the equivalent <span class="emphasis"><em>lload</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.lload-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lload_0, lload(0)).
instructionHasEquivalentTypeRule(lload_1, lload(1)).
instructionHasEquivalentTypeRule(lload_2, lload(2)).
instructionHasEquivalentTypeRule(lload_3, lload(3)).
</pre></div>
                  <div class="section-verification" title="lmul">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lmul"></a><span class="emphasis"><em>lmul</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lmul-100"></a>
                        An <span class="emphasis"><em>lmul</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ladd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.lmul-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lmul, ladd).
</pre></div>
                  <div class="section-verification" title="lneg">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lneg"></a><span class="emphasis"><em>lneg</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lneg-100"></a>
                        An <span class="emphasis"><em>lneg</em></span> instruction is type safe iff there is a type matching <code class="literal">long</code>
                        on the incoming operand stack. The <span class="emphasis"><em>lneg</em></span> instruction does not alter
                        the type state.
                     </p><a name="jvms-4.10.1.9.lneg-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(lneg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lookupswitch">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lookupswitch"></a><span class="emphasis"><em>lookupswitch</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lookupswitch-100"></a>
                        A <span class="emphasis"><em>lookupswitch</em></span> instruction is type safe if its keys are sorted, one
                        can validly pop <code class="literal">int</code> off the incoming operand stack yielding a new
                        type state <code class="literal">BranchStackFrame</code>, and all of the
                        instruction's targets are valid branch targets
                        assuming <code class="literal">BranchStackFrame</code> as their incoming type
                        state.
                     </p><a name="jvms-4.10.1.9.lookupswitch-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(lookupswitch(Targets, Keys), Environment, _, StackFrame, 
                      afterGoto, ExceptionStackFrame) :-
    sort(Keys, Keys),
    canPop(StackFrame, [int], BranchStackFrame),
    checklist(targetIsTypeSafe(Environment, BranchStackFrame), Targets),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lor">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lor"></a><span class="emphasis"><em>lor</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lor-100"></a>
                        A <span class="emphasis"><em>lor</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ladd</em></span> instruction
                        is type safe.
                     </p><a name="jvms-4.10.1.9.lor-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lor, ladd).
</pre></div>
                  <div class="section-verification" title="lrem">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lrem"></a><span class="emphasis"><em>lrem</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lrem-100"></a>
                        An <span class="emphasis"><em>lrem</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ladd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.lrem-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lrem, ladd).
</pre></div>
                  <div class="section-verification" title="lreturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lreturn"></a><span class="emphasis"><em>lreturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lreturn-100"></a>
                        An <span class="emphasis"><em>lreturn</em></span> instruction is type safe if the enclosing method has a
                        declared return type of <code class="literal">long</code>, and one can validly pop a type
                        matching <code class="literal">long</code> off the incoming operand stack.
                     </p><a name="jvms-4.10.1.9.lreturn-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(lreturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, long),
    canPop(StackFrame, [long], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lshl, lshr, lushr">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lshl"></a><span class="emphasis"><em>lshl</em></span>, <span class="emphasis"><em>lshr</em></span>, <span class="emphasis"><em>lushr</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lshl-100"></a>
                        An <span class="emphasis"><em>lshl</em></span> instruction is type safe if one can validly replace the
                        types <code class="literal">int</code> and <code class="literal">long</code> on the incoming operand stack with the type
                        <code class="literal">long</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.lshl-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(lshl, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, long], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.lshl-200"></a>
                        An <span class="emphasis"><em>lshr</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>lshl</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.lshl-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lshr, lshl).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.lshl-300"></a>
                        An <span class="emphasis"><em>lushr</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>lshl</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.lshl-300.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lushr, lshl).
</pre></div>
                  <div class="section-verification" title="lstore, lstore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lstore"></a><span class="emphasis"><em>lstore</em></span>, <span class="emphasis"><em>lstore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lstore-100"></a>
                        An <span class="emphasis"><em>lstore</em></span> instruction with operand <code class="literal">Index</code> is type
                        safe and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>, if a store instruction with
                        operand <code class="literal">Index</code> and type <code class="literal">long</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><a name="jvms-4.10.1.9.lstore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(lstore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, long, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.lstore-200"></a>
                        The instructions <span class="emphasis"><em>lstore_&lt;n&gt;</em></span>, for 0 <span class="symbol">&#8804;</span> <span class="emphasis"><em>n</em></span> <span class="symbol">&#8804;</span> 3, are type safe
                        iff the equivalent <span class="emphasis"><em>lstore</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.lstore-200.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lstore_0, lstore(0)).
instructionHasEquivalentTypeRule(lstore_1, lstore(1)).
instructionHasEquivalentTypeRule(lstore_2, lstore(2)).
instructionHasEquivalentTypeRule(lstore_3, lstore(3)).
</pre></div>
                  <div class="section-verification" title="lsub">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lsub"></a><span class="emphasis"><em>lsub</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lsub-100"></a>
                        An <span class="emphasis"><em>lsub</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ladd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.lsub-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lsub, ladd).
</pre></div>
                  <div class="section-verification" title="lxor">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lxor"></a><span class="emphasis"><em>lxor</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.lxor-100"></a>
                        An <span class="emphasis"><em>lxor</em></span> instruction is type safe iff the equivalent <span class="emphasis"><em>ladd</em></span>
                        instruction is type safe.
                     </p><a name="jvms-4.10.1.9.lxor-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(lxor, ladd).
</pre></div>
                  <div class="section-verification" title="monitorenter">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.monitorenter"></a><span class="emphasis"><em>monitorenter</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.monitorenter-100"></a>
                        A <span class="emphasis"><em>monitorenter</em></span> instruction is type safe iff one can validly pop a
                        type matching <code class="literal">reference</code> off the incoming operand stack yielding the
                        outgoing type state.
                     </p><a name="jvms-4.10.1.9.monitorenter-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(monitorenter, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    canPop(StackFrame, [reference], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="monitorexit">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.monitorexit"></a><span class="emphasis"><em>monitorexit</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.monitorexit-100"></a>
                        A <span class="emphasis"><em>monitorexit</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>monitorenter</em></span> instruction is type safe.
                     </p><a name="jvms-4.10.1.9.monitorexit-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(monitorexit, monitorenter).
</pre></div>
                  <div class="section-verification" title="multianewarray">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.multianewarray"></a><span class="emphasis"><em>multianewarray</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.multianewarray-100"></a>
                        A <span class="emphasis"><em>multianewarray</em></span> instruction with operands <code class="literal">CP</code>
                        and <code class="literal">Dim</code> is type safe iff <code class="literal">CP</code> refers to a constant
                        pool entry denoting an array type whose dimension is greater or equal
                        to <code class="literal">Dim</code>, <code class="literal">Dim</code> is strictly
                        positive, and one can validly replace <code class="literal">Dim</code> <code class="literal">int</code>
                        types on the incoming operand stack with the type denoted by <code class="literal">CP</code>
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.multianewarray-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(multianewarray(CP, Dim), Environment, _Offset,
                      StackFrame, NextStackFrame, ExceptionStackFrame) :- 
    CP = arrayOf(_),
    classDimension(CP, Dimension),
    Dimension &gt;= Dim,
    Dim &gt; 0, 
    /* Make a list of Dim ints */
    findall(int, between(1, Dim, _), IntList),
    validTypeTransition(Environment, IntList, CP,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.multianewarray-110"></a>
                        The dimension of an array type whose component type is also an array
                        type is one more than the dimension of its component type.
                     </p><a name="jvms-4.10.1.9.multianewarray-110.P"></a><pre class="programlisting">
classDimension(arrayOf(X), Dimension) :-
    classDimension(X, Dimension1), 
    Dimension is Dimension1 + 1.	

classDimension(_, Dimension) :-
    Dimension = 0. 
</pre></div>
                  <div class="section-verification" title="new">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.new"></a><span class="emphasis"><em>new</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.new-100"></a>
                        A <span class="emphasis"><em>new</em></span> instruction with operand <code class="literal">CP</code> at
                        offset <code class="literal">Offset</code> is type safe iff <code class="literal">CP</code> refers to a
                        constant pool entry denoting a class type, the type
                        <code class="literal">uninitialized(Offset)</code> does not appear in the incoming operand stack,
                        and one can validly push <code class="literal">uninitialized(Offset)</code> onto the incoming
                        operand stack and replace <code class="literal">uninitialized(Offset)</code> with <code class="literal">top</code> in the
                        incoming local variables yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.new-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(new(CP), Environment, Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, OperandStack, Flags), 
    CP = class(_, _), 
    NewItem = uninitialized(Offset),
    notMember(NewItem, OperandStack),
    substitute(NewItem, top, Locals, NewLocals),
    validTypeTransition(Environment, [], NewItem,
                        frame(NewLocals, OperandStack, Flags),
                        NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="note">The <code class="literal">substitute</code> predicate is
                        defined in the rule for <span class="emphasis"><em>invokespecial</em></span>
                        (<a class="xref" href="jvms-4.html#jvms-4.10.1.9.invokespecial" title="invokespecial">&sect;<span class="emphasis"><em>invokespecial</em></span></a>).
                     </p>
                  </div>
                  <div class="section-verification" title="newarray">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.newarray"></a><span class="emphasis"><em>newarray</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.newarray-100"></a>
                        A <span class="emphasis"><em>newarray</em></span> instruction with operand <code class="literal">TypeCode</code> is
                        type safe iff <code class="literal">TypeCode</code> corresponds to the primitive
                        type <code class="literal">ElementType</code>, and one can validly replace the
                        type <code class="literal">int</code> on the incoming operand stack with the type 'array
                        of <code class="literal">ElementType</code>', yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.newarray-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(newarray(TypeCode), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    primitiveArrayInfo(TypeCode, _TypeChar, ElementType, _VerifierType),
    validTypeTransition(Environment, [int], arrayOf(ElementType),
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.newarray-110"></a>
                        The correspondence between type codes and primitive types is specified
                        by the following predicate:
                     </p><a name="jvms-4.10.1.9.newarray-110.P"></a><pre class="programlisting">
primitiveArrayInfo(4,  0'Z, boolean, int).
primitiveArrayInfo(5,  0'C, char,    int).
primitiveArrayInfo(6,  0'F, float,   float).
primitiveArrayInfo(7,  0'D, double,  double).
primitiveArrayInfo(8,  0'B, byte,    int).
primitiveArrayInfo(9,  0'S, short,   int).
primitiveArrayInfo(10, 0'I, int,     int). 
primitiveArrayInfo(11, 0'J, long,    long).
</pre></div>
                  <div class="section-verification" title="nop">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.nop"></a><span class="emphasis"><em>nop</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.nop-100"></a>
                        A <span class="emphasis"><em>nop</em></span> instruction is always type safe. The <span class="emphasis"><em>nop</em></span> instruction does
                        not affect the type state.
                     </p><a name="jvms-4.10.1.9.nop-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(nop, _Environment, _Offset, StackFrame,
                      StackFrame, ExceptionStackFrame) :-
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="pop, pop2">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.pop"></a><span class="emphasis"><em>pop</em></span>, <span class="emphasis"><em>pop2</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.pop-100"></a>
                        A <span class="emphasis"><em>pop</em></span> instruction is type safe iff one can validly pop a category 1
                        type off the incoming operand stack yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.pop-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(pop, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, [Type | Rest], Flags),
    Type \= top,
    sizeOf(Type, 1),
    NextStackFrame = frame(Locals, Rest, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.pop-200"></a>
                        A <span class="emphasis"><em>pop2</em></span> instruction is type safe iff it is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>pop2</em></span> instruction.
                     </p><a name="jvms-4.10.1.9.pop-200.P"></a><pre class="programlisting">
instructionIsTypeSafe(pop2, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    pop2SomeFormIsTypeSafe(InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.pop-210"></a>
                        A <span class="emphasis"><em>pop2</em></span> instruction is a <span class="emphasis"><em>type safe form</em></span> of the
                        <span class="emphasis"><em>pop2</em></span> instruction iff it is a <span class="emphasis"><em>type safe form 1</em></span>
                        <span class="emphasis"><em>pop2</em></span> instruction or a <span class="emphasis"><em>type safe form 2</em></span> <span class="emphasis"><em>pop2</em></span>
                        instruction.
                     </p><a name="jvms-4.10.1.9.pop-210.P"></a><pre class="programlisting">
pop2SomeFormIsTypeSafe(InputOperandStack, OutputOperandStack) :-
    pop2Form1IsTypeSafe(InputOperandStack, OutputOperandStack).

pop2SomeFormIsTypeSafe(InputOperandStack, OutputOperandStack) :-
    pop2Form2IsTypeSafe(InputOperandStack, OutputOperandStack).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.pop-220"></a>
                        A <span class="emphasis"><em>pop2</em></span> instruction is a <span class="emphasis"><em>type safe form 1</em></span> <span class="emphasis"><em>pop2</em></span>
                        instruction iff one can validly pop two types of size 1 off the
                        incoming operand stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.pop-220.P"></a><pre class="programlisting">
pop2Form1IsTypeSafe([Type1, Type2 | Rest], Rest) :-
    sizeOf(Type1, 1),
    sizeOf(Type2, 1).
</pre><p class="norm-static"><a name="jvms-4.10.1.9.pop-230"></a>
                        A <span class="emphasis"><em>pop2</em></span> instruction is a <span class="emphasis"><em>type safe form 2</em></span> <span class="emphasis"><em>pop2</em></span>
                        instruction iff one can validly pop a type of size 2 off the incoming
                        operand stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.pop-230.P"></a><pre class="programlisting">
pop2Form2IsTypeSafe([top, Type | Rest], Rest) :- sizeOf(Type, 2).
</pre></div>
                  <div class="section-verification" title="putfield">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.putfield"></a><span class="emphasis"><em>putfield</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.putfield-100"></a>
                        A <span class="emphasis"><em>putfield</em></span> instruction with operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting a field whose declared type
                        is <code class="literal">FieldType</code>, declared in a
                        class <code class="literal">FieldClass</code>, and one can validly pop types
                        matching <code class="literal">FieldType</code>
                        and <code class="literal">FieldClass</code> off the incoming operand stack
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.putfield-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(putfield(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = field(FieldClass, FieldName, FieldDescriptor),
    parseFieldDescriptor(FieldDescriptor, FieldType),	
    canPop(StackFrame, [FieldType], PoppedFrame),
    passesProtectedCheck(Environment, FieldClass, FieldName,
                         FieldDescriptor, PoppedFrame),
    currentClassLoader(Environment, CurrentLoader),
    canPop(StackFrame, [FieldType, class(FieldClass, CurrentLoader)],
           NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="putstatic">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.putstatic"></a><span class="emphasis"><em>putstatic</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.putstatic-100"></a>
                        A <span class="emphasis"><em>putstatic</em></span> instruction with operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting a field whose declared type
                        is <code class="literal">FieldType</code>, and one can validly pop a type
                        matching <code class="literal">FieldType</code> off the incoming operand stack
                        yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.putstatic-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(putstatic(CP), _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = field(_FieldClass, _FieldName, FieldDescriptor),
    parseFieldDescriptor(FieldDescriptor, FieldType),
    canPop(StackFrame, [FieldType], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="return">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.return"></a><span class="emphasis"><em>return</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.return-100"></a>
                        A <span class="emphasis"><em>return</em></span> instruction is type safe if the enclosing method declares a
                        <code class="literal">void</code> return type, and either:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.return-100-A"></a>
                                       The enclosing method is not an <code class="literal">&lt;init&gt;</code> method, or
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm-static"><a name="jvms-4.10.1.9.return-100-B"></a>
                                       <code class="literal">this</code> has already been completely initialized at the point
                                       where the instruction occurs.
                              </p>
                           </li>
                        </ul>
                     </div><a name="jvms-4.10.1.9.return-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(return, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, void),
    StackFrame = frame(_Locals, _OperandStack, Flags),
    notMember(flagThisUninit, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="saload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.saload"></a><span class="emphasis"><em>saload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.saload-100"></a>
                        An <span class="emphasis"><em>saload</em></span> instruction is type safe iff one can validly replace types
                        matching <code class="literal">int</code> and array of <code class="literal">short</code> on the incoming operand stack with
                        <code class="literal">int</code> yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.saload-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(saload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(short)], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="sastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.sastore"></a><span class="emphasis"><em>sastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.sastore-100"></a>
                        An <span class="emphasis"><em>sastore</em></span> instruction is type safe iff one can validly pop types
                        matching <code class="literal">int</code>, <code class="literal">int</code>, and array of <code class="literal">short</code> off the incoming operand
                        stack yielding the outgoing type state.
                     </p><a name="jvms-4.10.1.9.sastore-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(sastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [int, int, arrayOf(short)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="sipush">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.sipush"></a><span class="emphasis"><em>sipush</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.sipush-100"></a>
                        An <span class="emphasis"><em>sipush</em></span> instruction is type safe iff one can validly push the type
                        <code class="literal">int</code> onto the incoming operand stack yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.sipush-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(sipush(_Value), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="swap">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.swap"></a><span class="emphasis"><em>swap</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.swap-100"></a>
                        A <span class="emphasis"><em>swap</em></span> instruction is type safe iff one can validly replace two
                        category 1 types, <code class="literal">Type1</code> and <code class="literal">Type2</code>, on the incoming operand stack
                        with the types <code class="literal">Type2</code> and <code class="literal">Type1</code> yielding the outgoing type
                        state.
                     </p><a name="jvms-4.10.1.9.swap-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(swap, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(_Locals, [Type1, Type2 | Rest], _Flags),
    sizeOf(Type1, 1),
    sizeOf(Type2, 1),
    NextStackFrame = frame(_Locals, [Type2, Type1 | Rest], _Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="tableswitch">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.tableswitch"></a><span class="emphasis"><em>tableswitch</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.tableswitch-100"></a>
                        A <span class="emphasis"><em>tableswitch</em></span> instruction is type safe if its keys are sorted, one
                        can validly pop <code class="literal">int</code> off the incoming operand stack yielding a new
                        type state <code class="literal">BranchStackFrame</code>, and all of the
                        instruction's targets are valid branch targets
                        assuming <code class="literal">BranchStackFrame</code> as their incoming type
                        state.
                     </p><a name="jvms-4.10.1.9.tableswitch-100.P"></a><pre class="programlisting">
instructionIsTypeSafe(tableswitch(Targets, Keys), Environment, _Offset,
                      StackFrame, afterGoto, ExceptionStackFrame) :- 
    sort(Keys, Keys), 
    canPop(StackFrame, [int], BranchStackFrame),
    checklist(targetIsTypeSafe(Environment, BranchStackFrame), Targets),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="wide">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.wide"></a><span class="emphasis"><em>wide</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm-static"><a name="jvms-4.10.1.9.wide-100"></a>
                        The <span class="emphasis"><em>wide</em></span> instructions follow the same rules as the instructions they
                        widen.
                     </p><a name="jvms-4.10.1.9.wide-100.P"></a><pre class="programlisting">
instructionHasEquivalentTypeRule(wide(WidenedInstruction),
                                 WidenedInstruction).
</pre></div>
               </div>
            </div>
            <div class="section" title="4.10.2.&nbsp;Verification by Type Inference">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.10.2"></a>4.10.2.&nbsp;Verification by Type Inference
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.10.2-100"></a>A <code class="literal">class</code> file that does
                  not contain a <code class="literal">StackMapTable</code> attribute (which necessarily has a
                  version number of 49.0 or below) must be verified using type
                  inference.
               </p>
               <div class="section" title="4.10.2.1.&nbsp;The Process of Verification by Type Inference">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.1"></a>4.10.2.1.&nbsp;The Process of Verification by Type Inference
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.1-100"></a>During linking, the
                     verifier checks the <code class="literal">code</code> array of the <code class="literal">Code</code> attribute for each
                     method of the <code class="literal">class</code> file by performing data-flow analysis on each
                     method. The verifier ensures that at any given point in the program,
                     no matter what code path is taken to reach that point, all of the
                     following are true:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-A"></a>
                                    The operand stack is always the same size and contains the same
                                    types of values.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-B"></a>
                                    No local variable is accessed unless it is known to contain a
                                    value of an appropriate type.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-C"></a>
                                    Methods are invoked with the appropriate arguments.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-D"></a>
                                    Fields are assigned only using values of appropriate
                                    types.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-E"></a>
                                    All opcodes have appropriately typed arguments on the operand
                                    stack and in the local variable array.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.1-110"></a>For efficiency reasons,
                     certain tests that could in principle be performed by the verifier are
                     delayed until the first time the code for the method is actually
                     invoked. In so doing, the verifier avoids loading <code class="literal">class</code> files unless
                     it has to.
                  </p>
                  <p class="note">For example, if a method invokes another method that
                     returns an instance of class <span class="type">A</span>, and that instance is assigned only
                     to a field of the same type, the verifier does not bother to check if
                     the class <span class="type">A</span> actually exists. However, if it is assigned to a field
                     of the type <span class="type">B</span>, the definitions of both <span class="type">A</span> and <span class="type">B</span> must be loaded in
                     to ensure that <span class="type">A</span> is a subclass of <span class="type">B</span>.
                  </p>
               </div>
               <div class="section" title="4.10.2.2.&nbsp;The Bytecode Verifier">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.2"></a>4.10.2.2.&nbsp;The Bytecode Verifier
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.2-100"></a>The code for each method
                     is verified independently. First, the bytes that make up the code are
                     broken up into a sequence of instructions, and the index into the
                     <code class="literal">code</code> array of the start of each instruction is placed in an
                     array. The verifier then goes through the code a second time and
                     parses the instructions. During this pass a data structure is built to
                     hold information about each Java Virtual Machine instruction in the method. The
                     operands, if any, of each instruction are checked to make sure they
                     are valid. For instance:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-A"></a>Branches must be
                                    within the bounds of the <code class="literal">code</code> array for the method.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-B"></a>The targets of all
                                    control-flow instructions are each the start of an
                                    instruction. In the case of a <span class="emphasis"><em>wide</em></span> instruction, the <span class="emphasis"><em>wide</em></span>
                                    opcode is considered the start of the instruction, and the
                                    opcode giving the operation modified by that <span class="emphasis"><em>wide</em></span> instruction
                                    is not considered to start an instruction. Branches into the
                                    middle of an instruction are disallowed.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-C"></a>No instruction can
                                    access or modify a local variable at an index greater than or
                                    equal to the number of local variables that its method indicates
                                    it allocates.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-D"></a>All references to
                                    the constant pool must be to an entry of the appropriate
                                    type. (For example, the instruction <span class="emphasis"><em>getfield</em></span> must reference a
                                    field.)
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-E"></a>The code does not
                                    end in the middle of an instruction.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-F"></a>Execution cannot
                                    fall off the end of the code.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-G"></a>For each exception
                                    handler, the starting and ending point of code protected by the
                                    handler must be at the beginning of an instruction or, in the
                                    case of the ending point, immediately past the end of the
                                    code. The starting point must be before the ending point. The
                                    exception handler code must start at a valid instruction, and it
                                    must not start at an opcode being modified by the <span class="emphasis"><em>wide</em></span>
                                    instruction.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.2-200"></a>For each instruction of
                     the method, the verifier records the contents of the operand stack and
                     the contents of the local variable array prior to the execution of
                     that instruction. For the operand stack, it needs to know the stack
                     height and the type of each value on it. For each local variable, it
                     needs to know either the type of the contents of that local variable
                     or that the local variable contains an unusable or unknown value (it
                     might be uninitialized). The bytecode verifier does not need to
                     distinguish between the integral types (e.g., <code class="literal">byte</code>, <code class="literal">short</code>, <code class="literal">char</code>)
                     when determining the value types on the operand stack.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-210"></a>Next, a data-flow
                     analyzer is initialized. For the first instruction of the method, the
                     local variables that represent parameters initially contain values of
                     the types indicated by the method's type descriptor; the operand stack
                     is empty. All other local variables contain an illegal value. For the
                     other instructions, which have not been examined yet, no information
                     is available regarding the operand stack or local variables.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-220"></a>Finally, the data-flow
                     analyzer is run. For each instruction, a "changed" bit indicates
                     whether this instruction needs to be looked at. Initially, the
                     "changed" bit is set only for the first instruction. The data-flow
                     analyzer executes the following loop:
                  </p>
                  <div class="orderedlist">
                     <ol class="orderedlist" type="1">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-A"></a>Select a Java Virtual Machine
                                  instruction whose "changed" bit is set. If no instruction remains
                                  whose "changed" bit is set, the method has successfully been
                                  verified. Otherwise, turn off the "changed" bit of the selected
                                  instruction.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-B"></a>Model the effect of
                                  the instruction on the operand stack and local variable array by
                                  doing the following:
                           </p>
                           <div class="norm">
                              <ul class="norm" type="disc">
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-B-1"></a>If the
                                       	instruction uses values from the operand stack, ensure that
                                       	there are a sufficient number of values on the stack and that
                                       	the top values on the stack are of an appropriate
                                       	type. Otherwise, verification fails.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-B-2"></a>If the
                                       	instruction uses a local variable, ensure that the specified
                                       	local variable contains a value of the appropriate
                                       	type. Otherwise, verification fails.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-B-3"></a>If the
                                       	instruction pushes values onto the operand stack, ensure that
                                       	there is sufficient room on the operand stack for the new
                                       	values. Add the indicated types to the top of the modeled
                                       	operand stack.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-B-4"></a>If the
                                       	instruction modifies a local variable, record that the local
                                       	variable now contains the new type.
                                    </p>
                                 </li>
                              </ul>
                           </div>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-C"></a>Determine the
                                  instructions that can follow the current instruction. Successor
                                  instructions can be one of the following:
                           </p>
                           <div class="norm">
                              <ul class="norm" type="disc">
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-C-1"></a>The next
                                       	instruction, if the current instruction is not an
                                       	unconditional control transfer instruction (for instance,
                                       	<span class="emphasis"><em>goto</em></span>, <span class="emphasis"><em>return</em></span>, or <span class="emphasis"><em>athrow</em></span>). Verification fails if it is
                                       	possible to "fall off" the last instruction of the
                                       	method.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-C-2"></a>The target(s)
                                       	of a conditional or unconditional branch or switch.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-C-3"></a>Any exception
                                       	handlers for this instruction.
                                    </p>
                                 </li>
                              </ul>
                           </div>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-D"></a>Merge the state of
                                  the operand stack and local variable array at the end of the
                                  execution of the current instruction into each of the successor
                                  instructions.
                           </p>
                           <p class="norm"><a name="jvms-4.10.2.2-220-D.1"></a>In the special
                                  case of control transfer to an exception handler, the operand
                                  stack is set to contain a single object of the exception type
                                  indicated by the exception handler information. There must be
                                  sufficient room on the operand stack for this single value, as if
                                  an instruction had pushed it.
                           </p>
                           <div class="norm">
                              <ul class="norm" type="disc">
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-D-1"></a>If this is
                                       	the first time the successor instruction has been visited,
                                       	record that the operand stack and local variable values
                                       	calculated in steps 2 and 3 are the state of the operand stack
                                       	and local variable array prior to executing the successor
                                       	instruction. Set the "changed" bit for the successor
                                       	instruction.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-D-2"></a>If the
                                       	successor instruction has been seen before, merge the operand
                                       	stack and local variable values calculated in steps 2 and 3
                                       	into the values already there. Set the "changed" bit if there
                                       	is any modification to the values.
                                    </p>
                                 </li>
                              </ul>
                           </div>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-E"></a>Continue at step
                                  1.
                           </p>
                        </li>
                     </ol>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.2-300"></a>To merge two operand stacks, the
                     number of values on each stack must be identical. Then, corresponding
                     values on the two stacks are compared and the value on the merged
                     stack is computed, as follows:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-300-A"></a>
                                    If one value is a primitive type, then the corresponding value
                                    must be the same primitive type. The merged value is the
                                    primitive type.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-300-B"></a>
                                    If one value is a non-array reference type, then the
                                    corresponding value must be a reference type (array or
                                    non-array). The merged value is a reference to an instance of
                                    the first common supertype of the two reference types. (Such a
                                    reference type always exists because the type <code class="literal">Object</code> is a
                                    supertype of all class, interface, and array types.)
                           </p>
                           <p class="note">For example, <code class="literal">Object</code> and <code class="literal">String</code> can be
                                    merged; the result is <code class="literal">Object</code>. Similarly, <code class="literal">Object</code> and
                                    <code class="literal">String</code><code class="literal">[]</code> can be merged; the result is again
                                    <code class="literal">Object</code>. Even <code class="literal">Object</code> and <code class="literal">int</code><code class="literal">[]</code> can be merged, or
                                    <code class="literal">String</code> and <code class="literal">int</code><code class="literal">[]</code>; the result is <code class="literal">Object</code> for
                                    both.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-300-C"></a>
                                    If corresponding values are both array reference types, then
                                    their dimensions are examined. If the array types have the same
                                    dimensions, then the merged value is a <code class="literal">reference</code> to an instance of
                                    an array type which is first common supertype of both array
                                    types. (If either or both of the array types has a primitive
                                    element type, then <code class="literal">Object</code> is used as the element type
                                    instead.) If the array types have different dimensions, then the
                                    merged value is a <code class="literal">reference</code> to an instance of an array type whose
                                    dimension is the smaller of the two; the element type is
                                    <code class="literal">Cloneable</code> or <code class="literal">java.io.Serializable</code> if the smaller array type was
                                    <code class="literal">Cloneable</code> or <code class="literal">java.io.Serializable</code>, and <code class="literal">Object</code> otherwise.
                           </p>
                           <p class="note">For example, <code class="literal">Object</code><code class="literal">[]</code> and
                                    <code class="literal">String</code><code class="literal">[]</code> can be merged; the result is
                                    <code class="literal">Object</code><code class="literal">[]</code>. <code class="literal">Cloneable</code><code class="literal">[]</code> and <code class="literal">String</code><code class="literal">[]</code>
                                    can be merged, or <code class="literal">java.io.Serializable</code><code class="literal">[]</code> and
                                    <code class="literal">String</code><code class="literal">[]</code>; the result is <code class="literal">Cloneable</code><code class="literal">[]</code> and
                                    <code class="literal">java.io.Serializable</code><code class="literal">[]</code> respectively. Even <code class="literal">int</code><code class="literal">[]</code> and
                                    <code class="literal">String</code><code class="literal">[]</code> can be merged; the result is
                                    <code class="literal">Object</code><code class="literal">[]</code>, because <code class="literal">Object</code> is used instead of <code class="literal">int</code>
                                    when computing the first common supertype.
                           </p>
                           <p class="note">Since the array types can have different
                                    dimensions, <code class="literal">Object</code><code class="literal">[]</code> and <code class="literal">String</code><code class="literal">[]</code><code class="literal">[]</code>
                                    can be merged, or <code class="literal">Object</code><code class="literal">[]</code><code class="literal">[]</code> and
                                    <code class="literal">String</code><code class="literal">[]</code>; in both cases the result is
                                    <code class="literal">Object</code><code class="literal">[]</code>. <code class="literal">Cloneable</code><code class="literal">[]</code> and
                                    <code class="literal">String</code><code class="literal">[]</code><code class="literal">[]</code> can be merged; the result is
                                    <code class="literal">Cloneable</code><code class="literal">[]</code>. Finally, <code class="literal">Cloneable</code><code class="literal">[]</code><code class="literal">[]</code>
                                    and <code class="literal">String</code><code class="literal">[]</code> can be merged; the result is
                                    <code class="literal">Object</code><code class="literal">[]</code>.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.2-310"></a>If the operand stacks cannot be
                     merged, verification of the method fails.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-320"></a>To merge two local variable array
                     states, corresponding pairs of local variables are compared. The value
                     of the merged local variable is computed using the rules above, except
                     that the corresponding values are permitted to be different primitive
                     types. In that case, the verifier records that the merged local
                     variable contains an unusable value.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-400"></a>If the data-flow analyzer
                     runs on a method without reporting a verification failure, then the
                     method has been successfully verified by the <code class="literal">class</code> file
                     verifier.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-500"></a>Certain instructions and
                     data types complicate the data-flow analyzer. We now examine each of
                     these in more detail.
                  </p>
               </div>
               <div class="section" title="4.10.2.3.&nbsp;Values of Types long and double">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.3"></a>4.10.2.3.&nbsp;Values of Types <code class="literal">long</code> and <code class="literal">double</code></h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.3-100"></a>Values of the <code class="literal">long</code> and
                     <code class="literal">double</code> types are treated specially by the verification
                     process.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.3-110"></a>Whenever a value of type
                     <code class="literal">long</code> or <code class="literal">double</code> is moved into a local variable at index <span class="emphasis"><em>n</em></span>,
                     index <span class="emphasis"><em>n</em></span>+1 is specially marked to indicate that it has been
                     reserved by the value at index <span class="emphasis"><em>n</em></span> and must not be used as a local
                     variable index. Any value previously at index <span class="emphasis"><em>n</em></span>+1 becomes
                     unusable.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.3-120"></a>Whenever a value is moved
                     to a local variable at index <span class="emphasis"><em>n</em></span>, the index <span class="emphasis"><em>n</em></span>-1 is examined to
                     see if it is the index of a value of type <code class="literal">long</code> or <code class="literal">double</code>. If so,
                     the local variable at index <span class="emphasis"><em>n</em></span>-1 is changed to indicate that it
                     now contains an unusable value. Since the local variable at index
                     <span class="emphasis"><em>n</em></span> has been overwritten, the local variable at index <span class="emphasis"><em>n</em></span>-1
                     cannot represent a value of type <code class="literal">long</code> or <code class="literal">double</code>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.3-130"></a>Dealing with values of
                     types <code class="literal">long</code> or <code class="literal">double</code> on the operand stack is simpler; the verifier
                     treats them as single values on the stack. For example, the
                     verification code for the <span class="emphasis"><em>dadd</em></span> opcode (add two <code class="literal">double</code> values)
                     checks that the top two items on the stack are both of type
                     <code class="literal">double</code>. When calculating operand stack length, values of type <code class="literal">long</code>
                     and <code class="literal">double</code> have length two.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.3-140"></a>Untyped instructions that
                     manipulate the operand stack must treat values of type <code class="literal">long</code> and
                     <code class="literal">double</code> as atomic (indivisible). For example, the verifier reports a
                     failure if the top value on the stack is a <code class="literal">double</code> and it encounters
                     an instruction such as <span class="emphasis"><em>pop</em></span> or <span class="emphasis"><em>dup</em></span>. The instructions <span class="emphasis"><em>pop2</em></span> or
                     <span class="emphasis"><em>dup2</em></span> must be used instead.
                  </p>
               </div>
               <div class="section" title="4.10.2.4.&nbsp;Instance Initialization Methods and Newly Created Objects">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.4"></a>4.10.2.4.&nbsp;Instance Initialization Methods and Newly Created Objects
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.4-100"></a>Creating a new class
                     instance is a multistep process. The statement:
                  </p><pre class="programlisting">
...
new myClass(i, j, k);
...
</pre><p class="norm"><a name="jvms-4.10.2.4-110"></a>can be implemented by the
                     following:
                  </p><pre class="programlisting">
...
new #1            // Allocate uninitialized space for myClass
dup               // Duplicate object on the operand stack
iload_1           // Push i
iload_2           // Push j
iload_3           // Push k
invokespecial #5  // Invoke myClass.<code class="literal">&lt;init&gt;</code>
...
</pre><p class="norm"><a name="jvms-4.10.2.4-120"></a>This instruction sequence
                     leaves the newly created and initialized object on top of the operand
                     stack. (Additional examples of compilation to the instruction set of
                     the Java Virtual Machine are given in <a class="xref" href="jvms-3.html" title="Chapter&nbsp;3.&nbsp;Compiling for the Java Virtual Machine">&sect;3 (<i>Compiling for the Java Virtual Machine</i>)</a>.)
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.4-130"></a>The instance
                     initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) for
                     class <code class="literal">myClass</code> sees the new uninitialized object as
                     its <code class="literal">this</code> argument in local variable 0. Before that method invokes
                     another instance initialization method of <code class="literal">myClass</code>
                     or its direct superclass on <code class="literal">this</code>, the only operation the method can
                     perform on <code class="literal">this</code> is assigning fields declared
                     within <code class="literal">myClass</code>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.4-140"></a>When doing dataflow
                     analysis on instance methods, the verifier initializes local variable
                     0 to contain an object of the current class, or, for instance
                     initialization methods, local variable 0 contains a special type
                     indicating an uninitialized object. After an appropriate instance
                     initialization method is invoked (from the current class or its direct
                     superclass) on this object, all occurrences of this special type on
                     the verifier's model of the operand stack and in the local variable
                     array are replaced by the current class type. The verifier rejects
                     code that uses the new object before it has been initialized or that
                     initializes the object more than once. In addition, it ensures that
                     every normal return of the method has invoked an instance
                     initialization method either in the class of this method or in the
                     direct superclass.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.4-150"></a>Similarly, a special type
                     is created and pushed on the verifier's model of the operand stack as
                     the result of the Java Virtual Machine instruction <span class="emphasis"><em>new</em></span>. The special type indicates
                     the instruction by which the class instance was created and the type
                     of the uninitialized class instance created. When an instance
                     initialization method declared in the class of the uninitialized class
                     instance is invoked on that class instance, all occurrences of the
                     special type are replaced by the intended type of the class
                     instance. This change in type may propagate to subsequent instructions
                     as the dataflow analysis proceeds.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.4-160"></a>The instruction number
                     needs to be stored as part of the special type, as there may be
                     multiple not-yet-initialized instances of a class in existence on the
                     operand stack at one time. For example, the Java Virtual Machine instruction sequence
                     that implements:
                  </p><pre class="programlisting">
new InputStream(new Foo(), new InputStream("foo"))
</pre><p class="norm"><a name="jvms-4.10.2.4-170"></a>may have two
                     uninitialized instances of <code class="literal">InputStream</code> on the
                     operand stack at once. When an instance initialization method is
                     invoked on a class instance, only those occurrences of the special
                     type on the operand stack or in the local variable array that are the
                     same object as the class instance are replaced.
                  </p>
               </div>
               <div class="section" title="4.10.2.5.&nbsp;Exceptions and finally">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.5"></a>4.10.2.5.&nbsp;Exceptions and <code class="literal">finally</code></h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.5-100"></a>To implement the
                     <code class="literal">try</code>-<code class="literal">finally</code> construct, a compiler for the Java programming language that
                     generates <code class="literal">class</code> files with version number 50.0 or below may use the
                     exception-handling facilities together with two special instructions:
                     <span class="emphasis"><em>jsr</em></span> ("jump to subroutine") and <span class="emphasis"><em>ret</em></span> ("return from subroutine"). The
                     <code class="literal">finally</code> clause is compiled as a subroutine within the Java Virtual Machine code for
                     its method, much like the code for an exception handler. When a <span class="emphasis"><em>jsr</em></span>
                     instruction that invokes the subroutine is executed, it pushes its
                     return address, the address of the instruction after the <span class="emphasis"><em>jsr</em></span> that is
                     being executed, onto the operand stack as a value of type
                     <code class="literal">returnAddress</code>. The code for the subroutine stores the return address
                     in a local variable. At the end of the subroutine, a <span class="emphasis"><em>ret</em></span> instruction
                     fetches the return address from the local variable and transfers
                     control to the instruction at the return address.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.5-110"></a>Control can be
                     transferred to the <code class="literal">finally</code> clause (the <code class="literal">finally</code> subroutine can be
                     invoked) in several different ways. If the <code class="literal">try</code> clause completes
                     normally, the <code class="literal">finally</code> subroutine is invoked via a <span class="emphasis"><em>jsr</em></span> instruction
                     before evaluating the next expression. A <code class="literal">break</code> or <code class="literal">continue</code> inside
                     the <code class="literal">try</code> clause that transfers control outside the <code class="literal">try</code> clause
                     executes a <span class="emphasis"><em>jsr</em></span> to the code for the <code class="literal">finally</code> clause first. If the
                     <code class="literal">try</code> clause executes a <span class="emphasis"><em>return</em></span>, the compiled code does the
                     following:
                  </p>
                  <div class="orderedlist">
                     <ol class="orderedlist" type="1">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-110-A"></a>Saves the return
                                  value (if any) in a local variable.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-110-B"></a>Executes a <span class="emphasis"><em>jsr</em></span> to
                                  the code for the <code class="literal">finally</code> clause.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-110-C"></a>Upon return from
                                    the <code class="literal">finally</code> clause, returns the value saved in the local
                                    variable.
                           </p>
                        </li>
                     </ol>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.5-120"></a>The compiler sets up a
                     special exception handler, which catches any exception thrown by the
                     <code class="literal">try</code> clause. If an exception is thrown in the <code class="literal">try</code> clause, this
                     exception handler does the following:
                  </p>
                  <div class="orderedlist">
                     <ol class="orderedlist" type="1">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-120-A"></a>Saves the exception
                                  in a local variable.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-120-B"></a>Executes a <span class="emphasis"><em>jsr</em></span> to
                                  the <code class="literal">finally</code> clause.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-120-C"></a>Upon return from
                                  the <code class="literal">finally</code> clause, rethrows the exception.
                           </p>
                        </li>
                     </ol>
                  </div>
                  <p class="note">For more information about the implementation of the
                     <code class="literal">try</code>-<code class="literal">finally</code> construct, see <a class="xref" href="jvms-3.html#jvms-3.13" title="3.13.&nbsp;Compiling finally">&sect;3.13</a>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.5-200"></a>The code for the
                     <code class="literal">finally</code> clause presents a special problem to the verifier. Usually,
                     if a particular instruction can be reached via multiple paths and a
                     particular local variable contains incompatible values through those
                     multiple paths, then the local variable becomes unusable. However, a
                     <code class="literal">finally</code> clause might be called from several different places,
                     yielding several different circumstances:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-200-A"></a>The invocation from
                                  the exception handler may have a certain local variable that
                                  contains an exception.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-200-B"></a>The invocation to
                                  implement <span class="emphasis"><em>return</em></span> may have some local variable that contains the
                                  return value.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-200-C"></a>The invocation from
                                  the bottom of the <code class="literal">try</code> clause may have an indeterminate value in
                                  that same local variable.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.5-210"></a>The code for the
                     <code class="literal">finally</code> clause itself might pass verification, but after completing
                     the updating all the successors of the <span class="emphasis"><em>ret</em></span> instruction, the verifier
                     would note that the local variable that the exception handler expects
                     to hold an exception, or that the return code expects to hold a return
                     value, now contains an indeterminate value.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.5-220"></a>Verifying code that
                     contains a <code class="literal">finally</code> clause is complicated. The basic idea is the
                     following:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-220-A"></a>Each instruction
                                  keeps track of the list of <span class="emphasis"><em>jsr</em></span> targets needed to reach that
                                  instruction. For most code, this list is empty. For instructions
                                  inside code for the <code class="literal">finally</code> clause, it is of length one. For
                                  multiply nested <code class="literal">finally</code> code (extremely rare!), it may be longer
                                  than one.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-220-B"></a>For each
                                  instruction and each <span class="emphasis"><em>jsr</em></span> needed to reach that instruction, a bit
                                  vector is maintained of all local variables accessed or modified
                                  since the execution of the <span class="emphasis"><em>jsr</em></span> instruction.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-220-C"></a>When executing the
                                  <span class="emphasis"><em>ret</em></span> instruction, which implements a return from a subroutine,
                                  there must be only one possible subroutine from which the
                                  instruction can be returning. Two different subroutines cannot
                                  "merge" their execution to a single <span class="emphasis"><em>ret</em></span> instruction.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-220-D"></a>To perform the
                                  data-flow analysis on a <span class="emphasis"><em>ret</em></span> instruction, a special procedure is
                                  used. Since the verifier knows the subroutine from which the
                                  instruction must be returning, it can find all the <span class="emphasis"><em>jsr</em></span>
                                  instructions that call the subroutine and merge the state of the
                                  operand stack and local variable array at the time of the <span class="emphasis"><em>ret</em></span>
                                  instruction into the operand stack and local variable array of the
                                  instructions following the <span class="emphasis"><em>jsr</em></span>. Merging uses a special set of
                                  values for local variables:
                           </p>
                           <div class="norm">
                              <ul class="norm" type="circle">
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.5-220-D-1"></a>For any local
                                       	variable that the bit vector (constructed above) indicates has
                                       	been accessed or modified by the subroutine, use the type of
                                       	the local variable at the time of the <span class="emphasis"><em>ret</em></span>.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.5-220-D-2"></a>For other
                                       	local variables, use the type of the local variable before the
                                       	<span class="emphasis"><em>jsr</em></span> instruction.
                                    </p>
                                 </li>
                              </ul>
                           </div>
                        </li>
                     </ul>
                  </div>
               </div>
            </div>
         </div>
         <div class="section" title="4.11.&nbsp;Limitations of the Java Virtual Machine">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.11"></a>4.11.&nbsp;Limitations of the Java Virtual Machine
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.11-100"></a>The following limitations of
               the Java Virtual Machine are implicit in the <code class="literal">class</code> file format:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-A"></a>The per-class or
                            per-interface constant pool is limited to 65535 entries by the
                            16-bit <code class="literal">constant_pool_count</code> field of the
                            <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). This acts as
                            an internal limit on the total complexity of a single class or
                            interface.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-B"></a>The number of fields
                            that may be declared by a class or interface is limited to 65535
                            by the size of the <code class="literal">fields_count</code> item of the
                            <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-B.1"></a>Note that the value
                            of the <code class="literal">fields_count</code> item of the <code class="literal">ClassFile</code>
                            structure does not include fields that are inherited from
                            superclasses or superinterfaces.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-C"></a>The number of methods
                            that may be declared by a class or interface is limited to 65535
                            by the size of the <code class="literal">methods_count</code> item of the
                            <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-C.1"></a>Note that the value
                            of the <code class="literal">methods_count</code> item of the <code class="literal">ClassFile</code>
                            structure does not include methods that are inherited from
                            superclasses or superinterfaces.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-D"></a>The number of direct
                            superinterfaces of a class or interface is limited to 65535 by the
                            size of the <code class="literal">interfaces_count</code> item of the
                            <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>).
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-E"></a>The greatest number of
                            local variables in the local variables array of a frame created
                            upon invocation of a method (<a class="xref" href="jvms-2.html#jvms-2.6" title="2.6.&nbsp;Frames">&sect;2.6</a>) is
                            limited to 65535 by the size of the
                            <code class="literal">max_locals</code> item of the <code class="literal">Code</code> attribute
                            (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>) giving the code of the method, and
                            by the 16-bit local variable indexing of the Java Virtual Machine instruction
                            set.
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-E.1"></a>Note that values of
                            type <code class="literal">long</code> and <code class="literal">double</code> are each considered to reserve two local
                            variables and contribute two units toward
                            the <code class="literal">max_locals</code> value, so use of local variables
                            of those types further reduces this limit.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-F"></a>The size of an operand
                            stack in a frame (<a class="xref" href="jvms-2.html#jvms-2.6" title="2.6.&nbsp;Frames">&sect;2.6</a>) is limited to 65535
                            values by the <code class="literal">max_stack</code> field of the <code class="literal">Code</code>
                            attribute (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-F.1"></a>Note that values of
                            type <code class="literal">long</code> and <code class="literal">double</code> are each considered to contribute two
                            units toward the <code class="literal">max_stack</code> value, so use of
                            values of these types on the operand stack further reduces this
                            limit.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-G"></a>The number of method
                            parameters is limited to 255 by the definition of a method
                            descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>), where the limit
                            includes one unit for <code class="literal">this</code> in the case of instance or interface
                            method invocations.
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-G.1"></a>Note that a method
                            descriptor is defined in terms of a notion of method parameter
                            length in which a parameter of type <code class="literal">long</code> or <code class="literal">double</code> contributes
                            two units to the length, so parameters of these types further
                            reduce the limit.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-H"></a>The length of field and
                            method names, field and method descriptors, and other constant
                            string values (including those referenced by <code class="literal">ConstantValue</code>
                            (<a class="xref" href="jvms-4.html#jvms-4.7.2" title="4.7.2.&nbsp;The ConstantValue Attribute">&sect;4.7.2</a>) attributes) is limited to 65535
                            characters by the 16-bit unsigned <code class="literal">length</code> item
                            of the <code class="literal">CONSTANT_Utf8_info</code> structure
                            (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-H.1"></a>Note that the limit
                            is on the number of bytes in the encoding and not on the number of
                            encoded characters. UTF-8 encodes some characters using two or
                            three bytes. Thus, strings incorporating multibyte characters are
                            further constrained.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-I"></a>The number of
                            dimensions in an array is limited to 255 by the size of
                            the <span class="emphasis"><em>dimensions</em></span> opcode of the <span class="emphasis"><em>multianewarray</em></span>
                            instruction and by the constraints imposed on the
                            <span class="emphasis"><em>multianewarray</em></span>, <span class="emphasis"><em>anewarray</em></span>, and <span class="emphasis"><em>newarray</em></span> instructions
                            (<a class="xref" href="jvms-4.html#jvms-4.9.1" title="4.9.1.&nbsp;Static Constraints">&sect;4.9.1</a>,
                            <a class="xref" href="jvms-4.html#jvms-4.9.2" title="4.9.2.&nbsp;Structural Constraints">&sect;4.9.2</a>).
                     </p>
                  </li>
               </ul>
            </div>
         </div>
      </div>
      <div class="navfooter">
         <hr>
         <table width="100%" summary="Navigation footer">
            <tr>
               <td width="40%" align="left"><a accesskey="p" href="jvms-3.html">Prev</a>&nbsp;
               </td>
               <td width="20%" align="center">&nbsp;</td>
               <td width="40%" align="right">&nbsp;<a accesskey="n" href="jvms-5.html">Next</a></td>
            </tr>
            <tr>
               <td width="40%" align="left" valign="top">Chapter&nbsp;3.&nbsp;Compiling for the Java Virtual Machine&nbsp;</td>
               <td width="20%" align="center"><a accesskey="h" href="index.html">Home</a></td>
               <td width="40%" align="right" valign="top">&nbsp;Chapter&nbsp;5.&nbsp;Loading, Linking, and Initializing</td>
            </tr>
         </table>
      </div>
      <div xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:rx="http://www.renderx.com/XSL/Extensions" class="navfooter">
         <hr><a href="jvms-0-front.html">
                Legal Notice
              </a></div>
   </body>
</html>