
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   
      <title>Chapter&nbsp;4.&nbsp;The class File Format</title>
      <link rel="stylesheet" type="text/css" href="../../../javaspec.css">
      <meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1">
      <link rel="home" href="index.html" title="The Java&reg; Virtual Machine Specification">
      <link rel="up" href="index.html" title="The Java&reg; Virtual Machine Specification">
      <link rel="prev" href="jvms-3.html" title="Chapter&nbsp;3.&nbsp;Compiling for the Java Virtual Machine">
      <link rel="next" href="jvms-5.html" title="Chapter&nbsp;5.&nbsp;Loading, Linking, and Initializing">
      <link rel="copyright" href="jvms-0-front.html" title="Legal Notice">
   </head>
   <body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
      <div xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:rx="http://www.renderx.com/XSL/Extensions" id="logo">
<img src="../../../../webdesign/other/im/oralogo_small.gif" alt="Oracle Logo"><br><p><a href="../../../../7/docs/">Java SE</a> &gt; <a href="../../../index.html">Java SE Specifications</a> &gt; <a href="index.html">Java Virtual Machine Specification</a></p>
      </div>
      <div class="navheader">
         <table width="100%" summary="Navigation header">
            <tr>
               <th colspan="3" align="center">Chapter&nbsp;4.&nbsp;The <code class="literal">class</code> File Format
               </th>
            </tr>
            <tr>
               <td width="20%" align="left"><a accesskey="p" href="jvms-3.html">Prev</a>&nbsp;
               </td>
               <th width="60%" align="center">&nbsp;</th>
               <td width="20%" align="right">&nbsp;<a accesskey="n" href="jvms-5.html">Next</a></td>
            </tr>
         </table>
         <hr>
      </div>
      <div lang="en" class="chapter" title="Chapter&nbsp;4.&nbsp;The class File Format">
         <div class="titlepage">
            <div>
               <div>
                  <h2 class="title"><a name="jvms-4"></a>Chapter&nbsp;4.&nbsp;The <code class="literal">class</code> File Format
                  </h2>
               </div>
            </div>
         </div>
         <div class="toc">
            <p><b>Table of Contents</b></p>
            <dl>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.1">4.1. The <code class="literal">ClassFile</code> Structure</a></span></dt>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.2">4.2. The Internal Form of Names</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.2.1">4.2.1. Binary Class and Interface Names</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.2.2">4.2.2. Unqualified Names</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.3">4.3. Descriptors and Signatures</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.3.1">4.3.1. Grammar Notation</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.3.2">4.3.2. Field Descriptors</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.3.3">4.3.3. Method Descriptors</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.3.4">4.3.4. Signatures</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.4">4.4. The Constant Pool</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.1">4.4.1. The <code class="literal">CONSTANT_Class_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.2">4.4.2. The <code class="literal">CONSTANT_Fieldref_info</code>, <code class="literal">CONSTANT_Methodref_info</code>, and <code class="literal">CONSTANT_InterfaceMethodref_info</code> Structures</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.3">4.4.3. The <code class="literal">CONSTANT_String_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.4">4.4.4. The <code class="literal">CONSTANT_Integer_info</code> and <code class="literal">CONSTANT_Float_info</code> Structures </a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.5">4.4.5. The <code class="literal">CONSTANT_Long_info</code> and <code class="literal">CONSTANT_Double_info</code> Structures</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.6">4.4.6. The <code class="literal">CONSTANT_NameAndType_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.7">4.4.7. The <code class="literal">CONSTANT_Utf8_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.8">4.4.8. The <code class="literal">CONSTANT_MethodHandle_info</code> Structure</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.9">4.4.9. The <code class="literal">CONSTANT_MethodType_info</code> Structure </a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.4.10">4.4.10. The <code class="literal">CONSTANT_InvokeDynamic_info</code> Structure </a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.5">4.5. Fields</a></span></dt>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.6">4.6. Methods</a></span></dt>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.7">4.7. Attributes</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.1">4.7.1. Defining and Naming New Attributes</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.2">4.7.2. The <code class="literal">ConstantValue</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.3">4.7.3. The <code class="literal">Code</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.4">4.7.4. The <code class="literal">StackMapTable</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.5">4.7.5. The <code class="literal">Exceptions</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.6">4.7.6. The <code class="literal">InnerClasses</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.7">4.7.7. The <code class="literal">EnclosingMethod</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.8">4.7.8. The <code class="literal">Synthetic</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.9">4.7.9. The <code class="literal">Signature</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.10">4.7.10. The <code class="literal">SourceFile</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.11">4.7.11. The <code class="literal">SourceDebugExtension</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.12">4.7.12. The <code class="literal">LineNumberTable</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.13">4.7.13. The <code class="literal">LocalVariableTable</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.14">4.7.14. The <code class="literal">LocalVariableTypeTable</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.15">4.7.15. The <code class="literal">Deprecated</code> Attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.16">4.7.16. The <code class="literal">RuntimeVisibleAnnotations</code> attribute</a></span></dt>
                     <dd>
                        <dl>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.7.16.1">4.7.16.1. The <code class="literal">element_value</code> structure</a></span></dt>
                        </dl>
                     </dd>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.17">4.7.17. The <code class="literal">RuntimeInvisibleAnnotations</code> attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.18">4.7.18. The <code class="literal">RuntimeVisibleParameterAnnotations</code> attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.19">4.7.19. The <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.20">4.7.20. The <code class="literal">AnnotationDefault</code> attribute</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.7.21">4.7.21. The <code class="literal">BootstrapMethods</code> attribute</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.8">4.8. Format Checking</a></span></dt>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.9">4.9. Constraints on Java Virtual Machine code</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.9.1">4.9.1. Static Constraints</a></span></dt>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.9.2">4.9.2. Structural Constraints</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.10">4.10. Verification of <code class="literal">class</code> Files</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1">4.10.1. Verification by Type Checking</a></span></dt>
                     <dd>
                        <dl>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.1">4.10.1.1. Accessors for Java Virtual Machine Artifacts</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.2">4.10.1.2. Verification Type System</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.3">4.10.1.3. Instruction Representation</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.4">4.10.1.4. Stack Map Frame Representation</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.5">4.10.1.5. Type Checking Abstract and Native Methods</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.6">4.10.1.6. Type Checking Methods with Code</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.7">4.10.1.7. Type Checking Load and Store Instructions</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.8">4.10.1.8. Type Checking for <code class="literal">protected</code> Members</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9">4.10.1.9. Type Checking Instructions</a></span></dt>
                           <dd>
                              <dl>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.aaload"><span class="emphasis"><em>aaload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.aastore"><span class="emphasis"><em>aastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.aconst_null"><span class="emphasis"><em>aconst_null</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.aload"><span class="emphasis"><em>aload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.aload_n"><span class="emphasis"><em>aload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.anewarray"><span class="emphasis"><em>anewarray</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.areturn"><span class="emphasis"><em>areturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.arraylength"><span class="emphasis"><em>arraylength</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.astore"><span class="emphasis"><em>astore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.astore_n"><span class="emphasis"><em>astore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.athrow"><span class="emphasis"><em>athrow</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.baload"><span class="emphasis"><em>baload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.bastore"><span class="emphasis"><em>bastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.bipush"><span class="emphasis"><em>bipush</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.caload"><span class="emphasis"><em>caload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.castore"><span class="emphasis"><em>castore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.checkcast"><span class="emphasis"><em>checkcast</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.d2f"><span class="emphasis"><em>d2f</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.d2i"><span class="emphasis"><em>d2i</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.d2l"><span class="emphasis"><em>d2l</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dadd"><span class="emphasis"><em>dadd</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.daload"><span class="emphasis"><em>daload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dastore"><span class="emphasis"><em>dastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dcmp_op"><span class="emphasis"><em>dcmp&lt;op&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dconst_d"><span class="emphasis"><em>dconst_&lt;d&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ddiv"><span class="emphasis"><em>ddiv</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dload"><span class="emphasis"><em>dload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dload_n"><span class="emphasis"><em>dload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dmul"><span class="emphasis"><em>dmul</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dneg"><span class="emphasis"><em>dneg</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.drem"><span class="emphasis"><em>drem</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dreturn"><span class="emphasis"><em>dreturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dstore"><span class="emphasis"><em>dstore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dstore_n"><span class="emphasis"><em>dstore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dsub"><span class="emphasis"><em>dsub</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup"><span class="emphasis"><em>dup</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup_x1"><span class="emphasis"><em>dup_x1</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup_x2"><span class="emphasis"><em>dup_x2</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup2"><span class="emphasis"><em>dup2</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup2_x1"><span class="emphasis"><em>dup2_x1</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.dup2_x2"><span class="emphasis"><em>dup2_x2</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.f2d"><span class="emphasis"><em>f2d</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.f2i"><span class="emphasis"><em>f2i</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.f2l"><span class="emphasis"><em>f2l</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fadd"><span class="emphasis"><em>fadd</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.faload"><span class="emphasis"><em>faload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fastore"><span class="emphasis"><em>fastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fcmp_op"><span class="emphasis"><em>fcmp&lt;op&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fconst_f"><span class="emphasis"><em>fconst_&lt;f&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fdiv"><span class="emphasis"><em>fdiv</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fload"><span class="emphasis"><em>fload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fload_n"><span class="emphasis"><em>fload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fmul"><span class="emphasis"><em>fmul</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fneg"><span class="emphasis"><em>fneg</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.frem"><span class="emphasis"><em>frem</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.freturn"><span class="emphasis"><em>freturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fstore"><span class="emphasis"><em>fstore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fstore_n"><span class="emphasis"><em>fstore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.fsub"><span class="emphasis"><em>fsub</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.getfield"><span class="emphasis"><em>getfield</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.getstatic"><span class="emphasis"><em>getstatic</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.goto"><span class="emphasis"><em>goto</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.goto_w"><span class="emphasis"><em>goto_w</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.i2b"><span class="emphasis"><em>i2b</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.i2c"><span class="emphasis"><em>i2c</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.i2d"><span class="emphasis"><em>i2d</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.i2f"><span class="emphasis"><em>i2f</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.i2l"><span class="emphasis"><em>i2l</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.i2s"><span class="emphasis"><em>i2s</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iadd"><span class="emphasis"><em>iadd</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iaload"><span class="emphasis"><em>iaload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iand"><span class="emphasis"><em>iand</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iastore"><span class="emphasis"><em>iastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.if_acmp_cond"><span class="emphasis"><em>if_acmp&lt;cond&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.if_icmp_cond"><span class="emphasis"><em>if_icmp&lt;cond&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.if_cond"><span class="emphasis"><em>if&lt;cond&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ifnonnull"><span class="emphasis"><em>ifnonnull</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ifnull"><span class="emphasis"><em>ifnull</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iinc"><span class="emphasis"><em>iinc</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iload"><span class="emphasis"><em>iload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iload_n"><span class="emphasis"><em>iload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.imul"><span class="emphasis"><em>imul</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ineg"><span class="emphasis"><em>ineg</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.instanceof"><span class="emphasis"><em>instanceof</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokedynamic"><span class="emphasis"><em>invokedynamic</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokeinterface"><span class="emphasis"><em>invokeinterface</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokespecial"><span class="emphasis"><em>invokespecial</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokestatic"><span class="emphasis"><em>invokestatic</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.invokevirtual"><span class="emphasis"><em>invokevirtual</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ior"><span class="emphasis"><em>ior</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.irem"><span class="emphasis"><em>irem</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ireturn"><span class="emphasis"><em>ireturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ishl"><span class="emphasis"><em>ishl</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ishr"><span class="emphasis"><em>ishr</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.istore"><span class="emphasis"><em>istore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.istore_n"><span class="emphasis"><em>istore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.isub"><span class="emphasis"><em>isub</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.iushr"><span class="emphasis"><em>iushr</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ixor"><span class="emphasis"><em>ixor</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.l2d"><span class="emphasis"><em>l2d</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.l2f"><span class="emphasis"><em>l2f</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.l2i"><span class="emphasis"><em>l2i</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ladd"><span class="emphasis"><em>ladd</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.laload"><span class="emphasis"><em>laload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.land"><span class="emphasis"><em>land</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lastore"><span class="emphasis"><em>lastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lcmp"><span class="emphasis"><em>lcmp</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lconst_l"><span class="emphasis"><em>lconst_&lt;l&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ldc"><span class="emphasis"><em>ldc</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ldc_w"><span class="emphasis"><em>ldc_w</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ldc2_w"><span class="emphasis"><em>ldc2_w</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.ldiv"><span class="emphasis"><em>ldiv</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lload"><span class="emphasis"><em>lload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lload_n"><span class="emphasis"><em>lload_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lmul"><span class="emphasis"><em>lmul</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lneg"><span class="emphasis"><em>lneg</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lookupswitch"><span class="emphasis"><em>lookupswitch</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lor"><span class="emphasis"><em>lor</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lrem"><span class="emphasis"><em>lrem</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lreturn"><span class="emphasis"><em>lreturn</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lshl"><span class="emphasis"><em>lshl</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lshr"><span class="emphasis"><em>lshr</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lstore"><span class="emphasis"><em>lstore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lstore_n"><span class="emphasis"><em>lstore_&lt;n&gt;</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lsub"><span class="emphasis"><em>lsub</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lushr"><span class="emphasis"><em>lushr</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.lxor"><span class="emphasis"><em>lxor</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.monitorenter"><span class="emphasis"><em>monitorenter</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.monitorexit"><span class="emphasis"><em>monitorexit</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.multianewarray"><span class="emphasis"><em>multianewarray</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.new"><span class="emphasis"><em>new</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.newarray"><span class="emphasis"><em>newarray</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.nop"><span class="emphasis"><em>nop</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.pop"><span class="emphasis"><em>pop</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.pop2"><span class="emphasis"><em>pop2</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.putfield"><span class="emphasis"><em>putfield</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.putstatic"><span class="emphasis"><em>putstatic</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.return"><span class="emphasis"><em>return</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.saload"><span class="emphasis"><em>saload</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.sastore"><span class="emphasis"><em>sastore</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.sipush"><span class="emphasis"><em>sipush</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.swap"><span class="emphasis"><em>swap</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.tableswitch"><span class="emphasis"><em>tableswitch</em></span></a></span></dt>
                                 <dt><span class="section"><a href="jvms-4.html#jvms-4.10.1.9.wide"><span class="emphasis"><em>wide</em></span></a></span></dt>
                              </dl>
                           </dd>
                        </dl>
                     </dd>
                     <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2">4.10.2. Verification by Type Inference</a></span></dt>
                     <dd>
                        <dl>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.1">4.10.2.1. The Process of Verification by Type Inference</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.2">4.10.2.2. The Bytecode Verifier</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.3">4.10.2.3. Values of Types <code class="literal">long</code> and <code class="literal">double</code></a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.4">4.10.2.4. Instance Initialization Methods and Newly Created Objects</a></span></dt>
                           <dt><span class="section"><a href="jvms-4.html#jvms-4.10.2.5">4.10.2.5. Exceptions and <code class="literal">finally</code></a></span></dt>
                        </dl>
                     </dd>
                  </dl>
               </dd>
               <dt><span class="section"><a href="jvms-4.html#jvms-4.11">4.11. Limitations of the Java Virtual Machine</a></span></dt>
            </dl>
         </div>
         <p class="norm"><a name="jvms-4-100"></a>This chapter describes the Java Virtual Machine
            <code class="literal">class</code> file format. Each <code class="literal">class</code> file contains the definition of a
            single class or interface. Although a class or interface need not have
            an external representation literally contained in a file (for
            instance, because the class is generated by a class loader), we will
            colloquially refer to any valid representation of a class or interface
            as being in the <code class="literal">class</code> file format.
         </p>
         <p class="norm"><a name="jvms-4-110"></a>A <code class="literal">class</code> file consists of a
            stream of 8-bit bytes. All 16-bit, 32-bit, and 64-bit quantities are
            constructed by reading in two, four, and eight consecutive 8-bit
            bytes, respectively. Multibyte data items are always stored in
            big-endian order, where the high bytes come first. In the Java SE platform,
            this format is supported by
            interfaces <code class="literal">java.io.DataInput</code>
            and <code class="literal">java.io.DataOutput</code> and classes such as
            <code class="literal">java.io.DataInputStream</code>
            and <code class="literal">java.io.DataOutputStream</code>.
         </p>
         <p class="norm"><a name="jvms-4-120"></a>This chapter defines its own set
            of data types representing <code class="literal">class</code> file data: The
            types <code class="literal">u1</code>, <code class="literal">u2</code>,
            and <code class="literal">u4</code> represent an unsigned one-, two-, or
            four-byte quantity, respectively. In the Java SE platform, these types may
            be read by methods such
            as <code class="literal">readUnsignedByte</code>, <code class="literal">readUnsignedShort</code>,
            and <code class="literal">readInt</code> of the
            interface <code class="literal">java.io.DataInput</code>.
         </p>
         <p class="norm"><a name="jvms-4-130"></a>This chapter presents the
            <code class="literal">class</code> file format using pseudostructures written in a C-like
            structure notation. To avoid confusion with the fields of classes and
            class instances, etc., the contents of the structures describing the
            <code class="literal">class</code> file format are referred to
            as <span class="emphasis"><em>items</em></span>. Successive items are stored in the
            <code class="literal">class</code> file sequentially, without padding or alignment.
         </p>
         <p class="norm"><a name="jvms-4-140"></a><span class="emphasis"><em>Tables</em></span>,
            consisting of zero or more variable-sized items, are used in several
            <code class="literal">class</code> file structures. Although we use C-like array syntax to refer
            to table items, the fact that tables are streams of varying-sized
            structures means that it is not possible to translate a table index
            directly to a byte offset into the table.
         </p>
         <p class="norm"><a name="jvms-4-150"></a>Where we refer to a data
            structure as an array, it consists of zero or more contiguous
            fixed-sized items and can be indexed like an array.
         </p>
         <p class="norm"><a name="jvms-4-160"></a>Reference to an ASCII character
            in this chapter should be interpreted to mean the Unicode code point
            corresponding to the ASCII character.
         </p>
         <div class="section" title="4.1.&nbsp;The ClassFile Structure">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.1"></a>4.1.&nbsp;The <code class="literal">ClassFile</code> Structure
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.1-100"></a>A <code class="literal">class</code> file consists of a
               single <code class="literal">ClassFile</code> structure:
            </p><a name="jvms-4.1-110"></a><pre class="screen">
ClassFile {
    u4             magic;
    u2             minor_version;
    u2             major_version;
    u2             constant_pool_count;
    cp_info        constant_pool[constant_pool_count-1];
    u2             access_flags;
    u2             this_class;
    u2             super_class;
    u2             interfaces_count;
    u2             interfaces[interfaces_count];
    u2             fields_count;
    field_info     fields[fields_count];
    u2             methods_count;
    method_info    methods[methods_count];
    u2             attributes_count;
    attribute_info attributes[attributes_count];
}
</pre><p class="norm"><a name="jvms-4.1-200"></a>The items in the <code class="literal">ClassFile</code>
               structure are as follows:
            </p>
            <div class="variablelist">
               <dl>
                  <dt><span class="term">magic</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-A"></a>The <code class="literal">magic</code> item
                              supplies the magic number identifying the <code class="literal">class</code> file format;
                              it has the value <code class="literal">0xCAFEBABE</code>.
                     </p>
                  </dd>
                  <dt><span class="term">minor_version, major_version</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-B"></a>The values of the
                              <code class="literal">minor_version</code>
                              and <code class="literal">major_version</code> items are the minor and
                              major version numbers of this <code class="literal">class</code> file. Together, a major
                              and a minor version number determine the version of the <code class="literal">class</code>
                              file format. If a <code class="literal">class</code> file has major version number M and
                              minor version number m, we denote the version of its <code class="literal">class</code>
                              file format as M.m. Thus, <code class="literal">class</code> file format versions may be
                              ordered lexicographically, for example, 1.5 &lt; 2.0 &lt;
                              2.1.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-B.1"></a>A Java Virtual Machine
                              implementation can support a <code class="literal">class</code> file format of version v if
                              and only if v lies in some contiguous range Mi.0 &#8804; v &#8804;
                              Mj.m. The release level of the Java SE platform to which a Java Virtual Machine
                              implementation conforms is responsible for determining the
                              range.
                     </p>
                     <p class="note">Oracle's Java Virtual Machine implementation in JDK release
                              1.0.2 supports <code class="literal">class</code> file format versions 45.0 through 45.3
                              inclusive. JDK releases 1.1.* support <code class="literal">class</code> file format
                              versions in the range 45.0 through 45.65535 inclusive. For k
                              &#8805; 2,  JDK release 1.k supports <code class="literal">class</code> file format
                              versions in the range 45.0 through 44+k.0 inclusive.
                     </p>
                  </dd>
                  <dt><span class="term">constant_pool_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-C"></a>The value of the
                              <code class="literal">constant_pool_count</code> item is equal to the
                              number of entries in the <code class="literal">constant_pool</code> table plus one. A
                              <code class="literal">constant_pool</code> index is considered valid if it is greater than
                              zero and less than <code class="literal">constant_pool_count</code>, with
                              the exception for constants of type <code class="literal">long</code> and <code class="literal">double</code> noted in
                              <a class="xref" href="jvms-4.html#jvms-4.4.5" title="4.4.5.&nbsp;The CONSTANT_Long_info and CONSTANT_Double_info Structures">&sect;4.4.5</a>.
                     </p>
                  </dd>
                  <dt><span class="term">constant_pool[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-D"></a>The <code class="literal">constant_pool</code> is
                              a table of structures (<a class="xref" href="jvms-4.html#jvms-4.4" title="4.4.&nbsp;The Constant Pool">&sect;4.4</a>) representing
                              various string constants, class and interface names, field
                              names, and other constants that are referred to within the
                              <code class="literal">ClassFile</code> structure and its substructures. The format of each
                              <code class="literal">constant_pool</code> table entry is indicated by its first "tag"
                              byte.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-D.1"></a>The <code class="literal">constant_pool</code>
                              table is indexed from 1
                              to <code class="literal">constant_pool_count</code>-1.
                     </p>
                  </dd>
                  <dt><span class="term">access_flags</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-E"></a>The value of the
                              <code class="literal">access_flags</code> item is a mask of flags used to denote access
                              permissions to and properties of this class or interface. The
                              interpretation of each flag, when set, is as shown in
                              <a class="xref" href="jvms-4.html#jvms-4.1-200-E.1" title="Table&nbsp;4.1.&nbsp;Class access and property modifiers">Table&nbsp;4.1</a>.
                     </p>
                     <div class="table"><a name="jvms-4.1-200-E.1"></a><p class="title"><b>Table&nbsp;4.1.&nbsp;Class access and property modifiers</b></p>
                        <div class="table-contents">
                           <table summary="Class access and property modifiers" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Flag Name</th>
                                    <th>Value</th>
                                    <th>Interpretation</th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">ACC_PUBLIC</code></td>
                                    <td>0x0001</td>
                                    <td>Declared <code class="literal">public</code>; may be accessed from outside its
                                       		package.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_FINAL</code></td>
                                    <td>0x0010</td>
                                    <td>Declared <code class="literal">final</code>; no subclasses allowed.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SUPER</code></td>
                                    <td>0x0020</td>
                                    <td>Treat superclass methods specially when invoked
                                       		by the <span class="emphasis"><em>invokespecial</em></span> instruction.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_INTERFACE</code></td>
                                    <td>0x0200</td>
                                    <td>Is an interface, not a class.</td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ABSTRACT</code></td>
                                    <td>0x0400</td>
                                    <td>Declared <code class="literal">abstract</code>; must not be
                                       		instantiated.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SYNTHETIC</code></td>
                                    <td>0x1000</td>
                                    <td>Declared synthetic; not present in the source
                                       		code.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ANNOTATION</code></td>
                                    <td>0x2000</td>
                                    <td>Declared as an annotation type.</td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ENUM</code></td>
                                    <td>0x4000</td>
                                    <td>Declared as an <code class="literal">enum</code> type.
                                    </td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><p class="norm"><a name="jvms-4.1-200-E.2"></a>A class may be
                              marked with the <code class="literal">ACC_SYNTHETIC</code> flag to indicate that it was
                              generated by a compiler and does not appear in source
                              code.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.3"></a>The <code class="literal">ACC_ENUM</code> flag
                              indicates that this class or its superclass is declared as an
                              enumerated type.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.4"></a>An interface is
                              distinguished by its <code class="literal">ACC_INTERFACE</code> flag being set. If its
                              <code class="literal">ACC_INTERFACE</code> flag is not set, this <code class="literal">class</code> file defines a
                              class, not an interface.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.5"></a>If the
                              <code class="literal">ACC_INTERFACE</code> flag of this <code class="literal">class</code> file is set, its
                              <code class="literal">ACC_ABSTRACT</code> flag must also be set (JLS &sect;9.1.1.1). Such a
                              <code class="literal">class</code> file must not have its <code class="literal">ACC_FINAL</code>, <code class="literal">ACC_SUPER</code> or
                              <code class="literal">ACC_ENUM</code> flags set.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.6"></a>An annotation type
                              must have its <code class="literal">ACC_ANNOTATION</code> flag set. If the <code class="literal">ACC_ANNOTATION</code>
                              flag is set, the <code class="literal">ACC_INTERFACE</code> flag must be set as well. If
                              the <code class="literal">ACC_INTERFACE</code> flag of this <code class="literal">class</code> file is not set, it may
                              have any of the other flags in
                              <a class="xref" href="jvms-4.html#jvms-4.1-200-E.1" title="Table&nbsp;4.1.&nbsp;Class access and property modifiers">Table&nbsp;4.1</a> set, except the
                              <code class="literal">ACC_ANNOTATION</code> flag. However, such a <code class="literal">class</code> file cannot have
                              both its <code class="literal">ACC_FINAL</code> and <code class="literal">ACC_ABSTRACT</code> flags set (JLS
                              &sect;8.1.1.2).
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.7"></a>The <code class="literal">ACC_SUPER</code> flag
                              indicates which of two alternative semantics is to be expressed
                              by the <span class="emphasis"><em>invokespecial</em></span> instruction
                              (<a class="xref" href="jvms-6.html#jvms-6.5.invokespecial" title="invokespecial">&sect;<span class="emphasis"><em>invokespecial</em></span></a>) if it appears in this
                              class. Compilers to the instruction set of the Java Virtual Machine should set
                              the <code class="literal">ACC_SUPER</code> flag.
                     </p>
                     <p class="note">The <code class="literal">ACC_SUPER</code> flag exists for backward
                              compatibility with code compiled by older compilers for the
                              Java programming language. In Oracle&#8217;s JDK prior to release 1.0.2, the compiler
                              generated <code class="literal">ClassFile</code> <code class="literal">access_flags</code> in which the flag now
                              representing <code class="literal">ACC_SUPER</code> had no assigned meaning, and Oracle's
                              Java Virtual Machine implementation ignored the flag if it was set.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-E.8"></a>All bits of the
                              <code class="literal">access_flags</code> item not assigned in
                              <a class="xref" href="jvms-4.html#jvms-4.1-200-E.1" title="Table&nbsp;4.1.&nbsp;Class access and property modifiers">Table&nbsp;4.1</a> are reserved for future
                              use. They should be set to zero in generated <code class="literal">class</code> files and
                              should be ignored by Java Virtual Machine implementations.
                     </p>
                  </dd>
                  <dt><span class="term">this_class</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-F"></a>The value of the
                              <code class="literal">this_class</code> item must be a valid index into
                              the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at that
                              index must be a <code class="literal">CONSTANT_Class_info</code> structure
                              (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) representing the class or
                              interface defined by this <code class="literal">class</code> file.
                     </p>
                  </dd>
                  <dt><span class="term">super_class</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-G"></a>For a class, the value
                              of the <code class="literal">super_class</code> item either must be zero
                              or must be a valid index into the <code class="literal">constant_pool</code> table. If the
                              value of the <code class="literal">super_class</code> item is nonzero, the
                              <code class="literal">constant_pool</code> entry at that index must be a
                              <code class="literal">CONSTANT_Class_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>)
                              representing the direct superclass of the class defined by this
                              <code class="literal">class</code> file. Neither the direct superclass nor any of its
                              superclasses may have the <code class="literal">ACC_FINAL</code> flag set in the
                              <code class="literal">access_flags</code> item of its <code class="literal">ClassFile</code> structure.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-G.1"></a>If the value of the
                              <code class="literal">super_class</code> item is zero, then this <code class="literal">class</code>
                              file must represent the class <code class="literal">Object</code>, the only class or
                              interface without a direct superclass.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-G.2"></a>For an interface,
                              the value of the <code class="literal">super_class</code> item must always
                              be a valid index into the <code class="literal">constant_pool</code> table. The
                              <code class="literal">constant_pool</code> entry at that index must be a
                              <code class="literal">CONSTANT_Class_info</code> structure representing the class
                              <code class="literal">Object</code>.
                     </p>
                  </dd>
                  <dt><span class="term">interfaces_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-H"></a>The value of
                              the <code class="literal">interfaces_count</code> item gives the number of
                              direct superinterfaces of this class or interface type.
                     </p>
                  </dd>
                  <dt><span class="term">interfaces[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-I"></a>Each value in the
                              <code class="literal">interfaces</code> array must be a valid index into
                              the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at each
                              value of <code class="literal">interfaces[<span class="emphasis"><em>i</em></span>]</code>, where 0 &#8804;
                              <span class="emphasis"><em>i</em></span> &lt; <code class="literal">interfaces_count</code>, must be a
                              <code class="literal">CONSTANT_Class_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>)
                              representing an interface that is a direct superinterface of
                              this class or interface type, in the left-to-right order given
                              in the source for the type.
                     </p>
                  </dd>
                  <dt><span class="term">fields_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-J"></a>The value of
                              the <code class="literal">fields_count</code> item gives the number of
                              <code class="literal">field_info</code> structures in the <code class="literal">fields</code>
                              table. The <code class="literal">field_info</code> structures (<a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>)
                              represent all fields, both class variables and instance
                              variables, declared by this class or interface type.
                     </p>
                  </dd>
                  <dt><span class="term">fields[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-K"></a>Each value in the
                              <code class="literal">fields</code> table must be a <code class="literal">field_info</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>) structure giving a complete
                              description of a field in this class or
                              interface. The <code class="literal">fields</code> table includes only
                              those fields that are declared by this class or interface. It
                              does not include items representing fields that are inherited
                              from superclasses or superinterfaces.
                     </p>
                  </dd>
                  <dt><span class="term">methods_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-L"></a>The value of the
                              <code class="literal">methods_count</code> item gives the number of
                              <code class="literal">method_info</code> structures in the <code class="literal">methods</code>
                              table.
                     </p>
                  </dd>
                  <dt><span class="term">methods[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-M"></a>Each value in the
                              <code class="literal">methods</code> table must be a <code class="literal">method_info</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>) structure giving a complete
                              description of a method in this class or interface. If neither
                              of the <code class="literal">ACC_NATIVE</code> and <code class="literal">ACC_ABSTRACT</code> flags are set in the
                              <code class="literal">access_flags</code> item of a <code class="literal">method_info</code> structure, the Java Virtual Machine
                              instructions implementing the method are also supplied.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-M.1"></a>The <code class="literal">method_info</code>
                              structures represent all methods declared by this class or
                              interface type, including instance methods, class methods,
                              instance initialization methods (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>),
                              and any class or interface initialization method
                              (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>). The <code class="literal">methods</code>
                              table does not include items representing methods that are
                              inherited from superclasses or superinterfaces.
                     </p>
                  </dd>
                  <dt><span class="term">attributes_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-N"></a>The value of the
                              <code class="literal">attributes_count</code> item gives the number of
                              attributes (<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>) in
                              the <code class="literal">attributes</code> table of this class.
                     </p>
                  </dd>
                  <dt><span class="term">attributes[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.1-200-O"></a>Each value of the
                              <code class="literal">attributes</code> table must be an <code class="literal">attribute_info</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>) structure.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-O.1"></a>The attributes
                              defined by this specification as appearing in
                              the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>
                              structure are the <code class="literal">InnerClasses</code> (<a class="xref" href="jvms-4.html#jvms-4.7.6" title="4.7.6.&nbsp;The InnerClasses Attribute">&sect;4.7.6</a>),
                              <code class="literal">EnclosingMethod</code> (<a class="xref" href="jvms-4.html#jvms-4.7.7" title="4.7.7.&nbsp;The EnclosingMethod Attribute">&sect;4.7.7</a>), <code class="literal">Synthetic</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.8" title="4.7.8.&nbsp;The Synthetic Attribute">&sect;4.7.8</a>), <code class="literal">Signature</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.9" title="4.7.9.&nbsp;The Signature Attribute">&sect;4.7.9</a>), <code class="literal">SourceFile</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.10" title="4.7.10.&nbsp;The SourceFile Attribute">&sect;4.7.10</a>), <code class="literal">SourceDebugExtension</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.11" title="4.7.11.&nbsp;The SourceDebugExtension Attribute">&sect;4.7.11</a>), <code class="literal">Deprecated</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.15" title="4.7.15.&nbsp;The Deprecated Attribute">&sect;4.7.15</a>), <code class="literal">RuntimeVisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations attribute">&sect;4.7.16</a>), <code class="literal">RuntimeInvisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.17" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations attribute">&sect;4.7.17</a>), and <code class="literal">BootstrapMethods</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.21" title="4.7.21.&nbsp;The BootstrapMethods attribute">&sect;4.7.21</a>) attributes.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-O.2"></a>If a Java Virtual Machine
                              implementation recognizes <code class="literal">class</code> files whose version number is
                              49.0 or above, it must recognize and correctly read <code class="literal">Signature</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.9" title="4.7.9.&nbsp;The Signature Attribute">&sect;4.7.9</a>), <code class="literal">RuntimeVisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations attribute">&sect;4.7.16</a>), and
                              <code class="literal">RuntimeInvisibleAnnotations</code> (<a class="xref" href="jvms-4.html#jvms-4.7.17" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations attribute">&sect;4.7.17</a>)
                              attributes found in the <code class="literal">attributes</code> table of a
                              <code class="literal">ClassFile</code> structure of a <code class="literal">class</code> file whose version number is
                              49.0 or above.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-O.3"></a>If a Java Virtual Machine
                              implementation recognizes <code class="literal">class</code> files whose version number is
                              51.0 or above, it must recognize and correctly read
                              <code class="literal">BootstrapMethods</code> (<a class="xref" href="jvms-4.html#jvms-4.7.21" title="4.7.21.&nbsp;The BootstrapMethods attribute">&sect;4.7.21</a>) attributes
                              found in the <code class="literal">attributes</code> table of a
                              <code class="literal">ClassFile</code> structure of a <code class="literal">class</code> file whose version number is
                              51.0 or above.
                     </p>
                     <p class="norm"><a name="jvms-4.1-200-O.4"></a>A Java Virtual Machine
                              implementation is required to silently ignore any or all
                              attributes in the <code class="literal">attributes</code> table of a
                              <code class="literal">ClassFile</code> structure that it does not recognize. Attributes not
                              defined in this specification are not allowed to affect the
                              semantics of the <code class="literal">class</code> file, but only to provide additional
                              descriptive information (<a class="xref" href="jvms-4.html#jvms-4.7.1" title="4.7.1.&nbsp;Defining and Naming New Attributes">&sect;4.7.1</a>).
                     </p>
                  </dd>
               </dl>
            </div>
         </div>
         <div class="section" title="4.2.&nbsp;The Internal Form of Names">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.2"></a>4.2.&nbsp;The Internal Form of Names
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section" title="4.2.1.&nbsp;Binary Class and Interface Names">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.2.1"></a>4.2.1.&nbsp;Binary Class and Interface Names
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.2.1-100"></a>Class and interface names
                  that appear in <code class="literal">class</code> file structures are always represented in a
                  fully qualified form known as <span class="emphasis"><em>binary names</em></span> (JLS
                  &sect;13.1). Such names are always represented as <code class="literal">CONSTANT_Utf8_info</code>
                  structures (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) and thus may be drawn, where
                  not further constrained, from the entire Unicode codespace. Class and
                  interface names are referenced from those <code class="literal">CONSTANT_NameAndType_info</code>
                  structures (<a class="xref" href="jvms-4.html#jvms-4.4.6" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">&sect;4.4.6</a>) which have such names as
                  part of their descriptor (<a class="xref" href="jvms-4.html#jvms-4.3" title="4.3.&nbsp;Descriptors and Signatures">&sect;4.3</a>), and from all
                  <code class="literal">CONSTANT_Class_info</code> structures
                  (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>).
               </p>
               <p class="norm"><a name="jvms-4.2.1-200"></a>For historical reasons, the
                  syntax of binary names that appear in <code class="literal">class</code> file structures differs
                  from the syntax of binary names documented in JLS &sect;13.1. In this
                  internal form, the ASCII periods (<code class="literal">.</code>) that normally separate the
                  identifiers which make up the binary name are replaced by ASCII
                  forward slashes (<code class="literal">/</code>). The identifiers themselves must be
                  unqualified names (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>).
               </p>
               <p class="note">For example, the normal binary name of class
                  <code class="literal">Thread</code> is <code class="literal">java.lang.Thread</code>. In the internal form
                  used in descriptors in the <code class="literal">class</code> file format, a reference to the
                  name of class <code class="literal">Thread</code> is implemented using a <code class="literal">CONSTANT_Utf8_info</code>
                  structure representing the
                  string <code class="literal">java/lang/Thread</code>.
               </p>
            </div>
            <div class="section" title="4.2.2.&nbsp;Unqualified Names">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.2.2"></a>4.2.2.&nbsp;Unqualified Names
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.2.2-100"></a>Names of methods, fields,
                  and local variables are stored as <span class="emphasis"><em>unqualified
                        names</em></span>. An unqualified name must not contain any of the
                  ASCII characters <code class="literal">.</code> <code class="literal">;</code> <code class="literal">[</code> <code class="literal">/</code> (that is, period or
                  semicolon or left square bracket or forward slash).
               </p>
               <p class="norm"><a name="jvms-4.2.2-200"></a>Method names are further
                  constrained so that, with the exception of the special method names
                  <code class="literal">&lt;init&gt;</code> and <code class="literal">&lt;clinit&gt;</code> (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), they must not
                  contain the ASCII characters <code class="literal">&lt;</code> or <code class="literal">&gt;</code> (that is, left angle
                  bracket or right angle bracket).
               </p>
               <p class="note">Note that a field name or interface method name may
                  be <code class="literal">&lt;init&gt;</code> or <code class="literal">&lt;clinit&gt;</code>, but no method invocation instruction may
                  reference <code class="literal">&lt;clinit&gt;</code> and only the <span class="emphasis"><em>invokespecial</em></span> instruction
                  (<a class="xref" href="jvms-6.html#jvms-6.5.invokespecial" title="invokespecial">&sect;<span class="emphasis"><em>invokespecial</em></span></a>) may reference <code class="literal">&lt;init&gt;</code>.
               </p>
            </div>
         </div>
         <div class="section" title="4.3.&nbsp;Descriptors and Signatures">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.3"></a>4.3.&nbsp;Descriptors and Signatures
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.3-100"></a>A <span class="emphasis"><em>descriptor</em></span> is a string
               representing the type of a field or method. Descriptors are
               represented in the <code class="literal">class</code> file format using modified UTF-8 strings
               (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) and thus may be drawn, where not
               further constrained, from the entire Unicode codespace.
            </p>
            <p class="norm"><a name="jvms-4.3-200"></a>A <span class="emphasis"><em>signature</em></span> is a string
               representing the generic type of a field or method, or generic type
               information for a class declaration.
            </p>
            <div class="section" title="4.3.1.&nbsp;Grammar Notation">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.3.1"></a>4.3.1.&nbsp;Grammar Notation
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.3.1-100"></a>Descriptors and signatures
                  are specified using a grammar. This grammar is a set of productions
                  that describe how sequences of characters can form syntactically
                  correct descriptors of various types. Terminal symbols of the grammar
                  are shown in <code class="literal">bold fixed-width</code> font. Nonterminal
                  symbols are shown in <span class="emphasis"><em>italic</em></span> type. The definition
                  of a nonterminal is introduced by the name of the nonterminal being
                  defined, followed by a colon. One or more alternative right-hand sides
                  for the nonterminal then follow on succeeding lines. For example, the
                  production:
               </p>
               <div class="literallayout">
                  <p><br>
                     FieldType:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;BaseType<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;ObjectType<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;ArrayType	<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.1-120"></a>states that
                  a <span class="emphasis"><em>FieldType</em></span> may represent either
                  a <span class="emphasis"><em>BaseType</em></span>, an <span class="emphasis"><em>ObjectType</em></span> or
                  an <span class="emphasis"><em>ArrayType</em></span>.
               </p>
               <p class="norm"><a name="jvms-4.3.1-130"></a>A nonterminal symbol on the
                  right-hand side of a production that is followed by an asterisk (*)
                  represents zero or more possibly different values produced from that
                  nonterminal, appended without any intervening space. Similarly, a
                  nonterminal symbol on the right-hand side of a production that is
                  followed by an plus sign (+) represents one or more possibly different
                  values produced from that nonterminal, appended without any
                  intervening space. The production:
               </p>
               <div class="literallayout">
                  <p><br>
                     MethodDescriptor:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">(</code>&nbsp;ParameterDescriptor*&nbsp;<code class="literal">)</code>&nbsp;ReturnDescriptor<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.1-150"></a>states that a
                  <span class="emphasis"><em>MethodDescriptor</em></span> represents a left parenthesis,
                  followed by zero or more <span class="emphasis"><em>ParameterDescriptor</em></span>
                  values, followed by a right parenthesis, followed by a
                  <span class="emphasis"><em>ReturnDescriptor</em></span>.
               </p>
            </div>
            <div class="section" title="4.3.2.&nbsp;Field Descriptors">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.3.2"></a>4.3.2.&nbsp;Field Descriptors
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.3.2-100"></a>A <span class="emphasis"><em>field
                        descriptor</em></span> represents the type of a class, instance, or
                  local variable. It is a series of characters generated by the
                  grammar:
               </p>
               <div class="literallayout">
                  <p><br>
                     FieldDescriptor:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;FieldType<br>
                     <br>
                     FieldType:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;BaseType<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;ObjectType<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;ArrayType	<br>
                     <br>
                     BaseType:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">B</code><br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">C</code><br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">D</code><br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">F</code><br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">I</code><br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">J</code><br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">S</code><br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">Z</code><br>
                     <br>
                     ObjectType:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">L</code>&nbsp;ClassName&nbsp;<code class="literal">;</code><br>
                     <br>
                     ArrayType:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">[</code>&nbsp;ComponentType<br>
                     <br>
                     ComponentType:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;FieldType<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.2-120"></a>The characters
                  of <span class="emphasis"><em>BaseType</em></span>, the <code class="literal">L</code> and <code class="literal">;</code>
                  of <span class="emphasis"><em>ObjectType</em></span>, and the <code class="literal">[</code>
                  of <span class="emphasis"><em>ArrayType</em></span> are all ASCII characters.
               </p>
               <p class="norm"><a name="jvms-4.3.2-130"></a>The <span class="emphasis"><em>ClassName</em></span> represents
                  a binary class or interface name encoded in internal form
                  (<a class="xref" href="jvms-4.html#jvms-4.2.1" title="4.2.1.&nbsp;Binary Class and Interface Names">&sect;4.2.1</a>).
               </p>
               <p class="norm"><a name="jvms-4.3.2-140"></a>The interpretation of field
                  descriptors as types is as shown in
                  <a class="xref" href="jvms-4.html#jvms-4.3.2-200" title="Table&nbsp;4.2.&nbsp;Interpretation of FieldType characters">Table&nbsp;4.2</a>.
               </p>
               <p class="norm"><a name="jvms-4.3.2-150"></a>A field descriptor
                  representing an array type is valid only if it represents a type with
                  255 or fewer dimensions.
               </p>
               <div class="table"><a name="jvms-4.3.2-200"></a><p class="title"><b>Table&nbsp;4.2.&nbsp;Interpretation of <span class="emphasis"><em>FieldType</em></span> characters</b></p>
                  <div class="table-contents">
                     <table summary="Interpretation of FieldType characters" border="1">
                        <colgroup>
                           <col>
                           <col>
                           <col>
                        </colgroup>
                        <thead>
                           <tr>
                              <th><span class="emphasis"><em>BaseType</em></span> Character
                              </th>
                              <th>Type</th>
                              <th>Interpretation</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td><code class="literal">B</code></td>
                              <td><code class="literal">byte</code></td>
                              <td>signed byte</td>
                           </tr>
                           <tr>
                              <td><code class="literal">C</code></td>
                              <td><code class="literal">char</code></td>
                              <td>Unicode character code point in the Basic Multilingual
                                 	Plane, encoded with UTF-16
                              </td>
                           </tr>
                           <tr>
                              <td><code class="literal">D</code></td>
                              <td><code class="literal">double</code></td>
                              <td>double-precision floating-point value</td>
                           </tr>
                           <tr>
                              <td><code class="literal">F</code></td>
                              <td><code class="literal">float</code></td>
                              <td>single-precision floating-point value</td>
                           </tr>
                           <tr>
                              <td><code class="literal">I</code></td>
                              <td><code class="literal">int</code></td>
                              <td>integer</td>
                           </tr>
                           <tr>
                              <td><code class="literal">J</code></td>
                              <td><code class="literal">long</code></td>
                              <td>long integer</td>
                           </tr>
                           <tr>
                              <td><code class="literal">L</code> <span class="emphasis"><em>ClassName</em></span> <code class="literal">;</code></td>
                              <td><code class="literal">reference</code></td>
                              <td>an instance of class <span class="emphasis"><em>ClassName</em></span></td>
                           </tr>
                           <tr>
                              <td><code class="literal">S</code></td>
                              <td><code class="literal">short</code></td>
                              <td>signed short</td>
                           </tr>
                           <tr>
                              <td><code class="literal">Z</code></td>
                              <td><code class="literal">boolean</code></td>
                              <td><code class="literal">true</code> or <code class="literal">false</code></td>
                           </tr>
                           <tr>
                              <td><code class="literal">[</code></td>
                              <td><code class="literal">reference</code></td>
                              <td>one array dimension</td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div><br class="table-break"><div class="informalexample">
                  <p class="note">The field descriptor of an instance variable of type
                     <code class="literal">int</code> is simply <code class="literal">I</code>.
                  </p>
                  <p class="note">The field descriptor of an instance variable of type
                     <code class="literal">Object</code> is <code class="literal">Ljava/lang/Object;</code>. Note that the
                     internal form of the binary name for class <code class="literal">Object</code> is used.
                  </p>
                  <p class="note">The field descriptor of an instance variable that is
                     a multidimensional <code class="literal">double</code> array, <code class="literal">double d[][][]</code>,
                     is <code class="literal">[[[D</code>.
                  </p>
               </div>
            </div>
            <div class="section" title="4.3.3.&nbsp;Method Descriptors">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.3.3"></a>4.3.3.&nbsp;Method Descriptors
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.3.3-100"></a>A <span class="emphasis"><em>method
                        descriptor</em></span> represents the parameters that the method takes
                  and the value that it returns:
               </p>
               <div class="literallayout">
                  <p><br>
                     MethodDescriptor:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">(</code>&nbsp;ParameterDescriptor*&nbsp;<code class="literal">)</code>&nbsp;ReturnDescriptor<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.3-200"></a>A <span class="emphasis"><em>parameter
                        descriptor</em></span> represents a parameter passed to a
                  method:
               </p>
               <div class="literallayout">
                  <p><br>
                     ParameterDescriptor:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;FieldType<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.3-300"></a>A <span class="emphasis"><em>return
                        descriptor</em></span> represents the type of the value returned from a
                  method. It is a series of characters generated by the grammar:
               </p>
               <div class="literallayout">
                  <p><br>
                     ReturnDescriptor:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;FieldType<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;VoidDescriptor<br>
                     <br>
                     VoidDescriptor:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">V</code><br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.3-320"></a>The
                  character <code class="literal">V</code> indicates that the method returns no
                  value (its return type is <code class="literal">void</code>).
               </p>
               <p class="norm"><a name="jvms-4.3.3-400"></a>A method descriptor is valid
                  only if it represents method parameters with a total length of 255 or
                  less, where that length includes the contribution for <code class="literal">this</code> in the
                  case of instance or interface method invocations. The total length is
                  calculated by summing the contributions of the individual parameters,
                  where a parameter of type <code class="literal">long</code> or <code class="literal">double</code> contributes two units to
                  the length and a parameter of any other type contributes one
                  unit.
               </p>
               <div class="informalexample">
                  <p class="note">The method descriptor for the method:</p><pre class="screen">
Object m(int i, double d, Thread t) {..}
</pre><p class="note">is <code class="literal">(IDLjava/lang/Thread;)Ljava/lang/Object;</code>. Note
                     that the internal forms of the binary names of <code class="literal">Thread</code> and <code class="literal">Object</code>
                     are used.
                  </p>
                  <p class="note">The method descriptor for <code class="literal">m</code> is
                     the same whether <code class="literal">m</code> is a class method or an instance
                     method. Although an instance method is passed <code class="literal">this</code>, a reference to
                     the current class instance, in addition to its intended parameters,
                     that fact is not reflected in the method descriptor. The reference to
                     <code class="literal">this</code> is passed implicitly by the method invocation instructions of
                     the Java Virtual Machine that invoke instance methods
                     (<a class="xref" href="jvms-2.html#jvms-2.6.1" title="2.6.1.&nbsp;Local Variables">&sect;2.6.1</a>). A reference to <code class="literal">this</code> is not passed to
                     a class method.
                  </p>
               </div>
            </div>
            <div class="section" title="4.3.4.&nbsp;Signatures">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.3.4"></a>4.3.4.&nbsp;Signatures
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.3.4-100"></a>Signatures are used to
                  encode Java programming language type information that is not part of the Java Virtual Machine type
                  system, such as generic type and method declarations and parameterized
                  types. See <em class="citetitle">The Java Language Specification, Java SE 7 Edition</em> for details about such types.
               </p>
               <p class="note">This kind of type information is needed to support
                  reflection and debugging, and by a Java compiler.
               </p>
               <p class="norm"><a name="jvms-4.3.4-110"></a>In the following, the
                  terminal symbol <span class="emphasis"><em>Identifier</em></span> is used to denote the name of a type,
                  field, local variable, parameter, method, or type variable, as
                  generated by a Java compiler. Such a name must not contain any of the
                  ASCII characters <code class="literal">.</code> <code class="literal">;</code> <code class="literal">[</code> <code class="literal">/</code> <code class="literal">&lt;</code> <code class="literal">&gt;</code>
                  <code class="literal">:</code> (that is, the characters forbidden in method names
                  (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>) and also colon) but may contain
                  characters that must not appear in an identifier in the Java programming language
                  (JLS &sect;3.8).
               </p>
               <p class="norm"><a name="jvms-4.3.4-200"></a>A class signature, defined
                  by the production <span class="emphasis"><em>ClassSignature</em></span>, is used to
                  encode type information about a class declaration. It describes any
                  formal type parameters the class might have, and lists its (possibly
                  parameterized) direct superclass and direct superinterfaces, if
                  any.
               </p>
               <div class="literallayout">
                  <p><br>
                     ClassSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;FormalTypeParameters<sub>opt</sub>&nbsp;SuperclassSignature&nbsp;SuperinterfaceSignature*<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.4-220"></a>A formal type parameter is
                  described by its name, followed by its class and interface bounds. If
                  the class bound does not specify a type, it is taken to be
                  <code class="literal">Object</code>.
               </p>
               <div class="literallayout">
                  <p><br>
                     FormalTypeParameters:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">&lt;</code>&nbsp;FormalTypeParameter+&nbsp;<code class="literal">&gt;</code><br>
                     <br>
                     FormalTypeParameter:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;Identifier&nbsp;ClassBound&nbsp;InterfaceBound*<br>
                     <br>
                     ClassBound:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;FieldTypeSignatureopt<br>
                     <br>
                     InterfaceBound:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;FieldTypeSignature<br>
                     <br>
                     SuperclassSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;ClassTypeSignature<br>
                     <br>
                     SuperinterfaceSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;ClassTypeSignature<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.4-300"></a>A field type signature,
                  defined by the production <span class="emphasis"><em>FieldTypeSignature</em></span>,
                  encodes the (possibly parameterized) type for a field, parameter or
                  local variable.
               </p>
               <div class="literallayout">
                  <p><br>
                     FieldTypeSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;ClassTypeSignature	<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;ArrayTypeSignature<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;TypeVariableSignature	<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.4-400"></a>A class type signature gives
                  complete type information for a class or interface type. The class
                  type signature must be formulated such that it can be reliably mapped
                  to the binary name of the class it denotes by erasing any type
                  arguments and converting each <code class="literal">.</code> character in the signature to a
                  <code class="literal">$</code> character.
               </p>
               <div class="literallayout">
                  <p><br>
                     ClassTypeSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">L</code>&nbsp;PackageSpecifier<sub>opt</sub>&nbsp;SimpleClassTypeSignature&nbsp;ClassTypeSignatureSuffix*&nbsp;<code class="literal">;</code><br>
                     <br>
                     PackageSpecifier:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;Identifier&nbsp;/&nbsp;PackageSpecifier*<br>
                     <br>
                     SimpleClassTypeSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;Identifier&nbsp;TypeArgumentsopt<br>
                     <br>
                     ClassTypeSignatureSuffix:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;SimpleClassTypeSignature<br>
                     <br>
                     TypeVariableSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">T</code>&nbsp;Identifier&nbsp;<code class="literal">;</code><br>
                     <br>
                     TypeArguments:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">&lt;</code>&nbsp;TypeArgument+&nbsp;<code class="literal">&gt;</code><br>
                     <br>
                     TypeArgument:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;WildcardIndicator<sub>opt</sub>&nbsp;FieldTypeSignature<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;*<br>
                     <br>
                     WildcardIndicator:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;+<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;-<br>
                     <br>
                     ArrayTypeSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;<code class="literal">[</code>&nbsp;TypeSignature<br>
                     <br>
                     TypeSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;FieldTypeSignature<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;BaseType<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.4-500"></a>A method signature, defined
                  by the production <span class="emphasis"><em>MethodTypeSignature</em></span>, encodes
                  the (possibly parameterized) types of the method's formal arguments
                  and of the exceptions it has declared in its <code class="literal">throws</code> clause, its
                  (possibly parameterized) return type, and any formal type parameters
                  in the method declaration.
               </p>
               <div class="literallayout">
                  <p><br>
                     MethodTypeSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;FormalTypeParameters<sub>opt</sub>&nbsp;<code class="literal">(</code>TypeSignature*<code class="literal">)</code>&nbsp;ReturnType&nbsp;ThrowsSignature*<br>
                     <br>
                     ReturnType:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;TypeSignature<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;VoidDescriptor<br>
                     <br>
                     ThrowsSignature:<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;ClassTypeSignature<br>
                     &nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;TypeVariableSignature<br>
                     
                  </p>
               </div>
               <p class="norm"><a name="jvms-4.3.4-520"></a>If the <code class="literal">throws</code> clause of a
                  method or constructor does not involve type variables, the
                  <span class="emphasis"><em>ThowsSignature</em></span> may be elided from
                  the <span class="emphasis"><em>MethodTypeSignature</em></span>.
               </p>
               <p class="norm"><a name="jvms-4.3.4-600"></a>A Java compiler must output
                  generic signature information for any class, interface, constructor or
                  member whose generic signature in the Java programming language would include
                  references to type variables or parameterized types.
               </p>
               <p class="note">The signature and descriptor
                  (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>) of a given method or constructor may
                  not correspond exactly, due to compiler-generated artifacts. In
                  particular, the number of <span class="emphasis"><em>TypeSignature</em></span>s that
                  encode formal arguments in <span class="emphasis"><em>MethodTypeSignature</em></span>
                  may be less than the number
                  of <span class="emphasis"><em>ParameterDescriptors</em></span> in
                  <span class="emphasis"><em>MethodDescriptor</em></span>.
               </p>
               <p class="note">Oracle's Java Virtual Machine implementation does not check the
                  well-formedness of the signatures described in this subsection during
                  loading or linking. Instead, these checks are deferred until the
                  signatures are used by reflective methods, as specified in the API of
                  <code class="literal">Class</code> and members of <code class="literal">java.lang.reflect</code>. Future
                  versions of a Java Virtual Machine implementation may be required to perform some or
                  all of these checks during loading or linking.
               </p>
            </div>
         </div>
         <div class="section" title="4.4.&nbsp;The Constant Pool">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.4"></a>4.4.&nbsp;The Constant Pool
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.4-100"></a>Java Virtual Machine instructions do not rely
               on the run-time layout of classes, interfaces, class instances, or
               arrays. Instead, instructions refer to symbolic information in the
               <code class="literal">constant_pool</code> table.
            </p>
            <p class="norm"><a name="jvms-4.4-110"></a>All <code class="literal">constant_pool</code> table
               entries have the following general format:
            </p><a name="jvms-4.4-120"></a><pre class="screen">
cp_info {
    u1 tag;
    u1 info[];
}
</pre><p class="norm"><a name="jvms-4.4-130"></a>Each item in the
               <code class="literal">constant_pool</code> table must begin with a 1-byte tag indicating the kind
               of <code class="literal">cp_info</code> entry. The contents of
               the <code class="literal">info</code> array vary with the value
               of <code class="literal">tag</code>. The valid tags and their values are listed
               in <a class="xref" href="jvms-4.html#jvms-4.4-140" title="Table&nbsp;4.3.&nbsp;Constant pool tags">Table&nbsp;4.3</a>. Each tag byte must be followed by
               two or more bytes giving information about the specific constant. The
               format of the additional information varies with the tag value.
            </p>
            <div class="table"><a name="jvms-4.4-140"></a><p class="title"><b>Table&nbsp;4.3.&nbsp;Constant pool tags</b></p>
               <div class="table-contents">
                  <table summary="Constant pool tags" border="1">
                     <colgroup>
                        <col>
                        <col>
                     </colgroup>
                     <thead>
                        <tr>
                           <th>Constant Type</th>
                           <th>Value</th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td><code class="literal">CONSTANT_Class</code></td>
                           <td>7</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Fieldref</code></td>
                           <td>9</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Methodref</code></td>
                           <td>10</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_InterfaceMethodref</code></td>
                           <td>11</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_String</code></td>
                           <td>8</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Integer</code></td>
                           <td>3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Float</code></td>
                           <td>4</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Long</code></td>
                           <td>5</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Double</code></td>
                           <td>6</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_NameAndType</code></td>
                           <td>12</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_Utf8</code></td>
                           <td>1</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_MethodHandle</code></td>
                           <td>15</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_MethodType</code></td>
                           <td>16</td>
                        </tr>
                        <tr>
                           <td><code class="literal">CONSTANT_InvokeDynamic</code></td>
                           <td>18</td>
                        </tr>
                     </tbody>
                  </table>
               </div>
            </div><br class="table-break"><div class="section" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.1"></a>4.4.1.&nbsp;The <code class="literal">CONSTANT_Class_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.1-100"></a>The <code class="literal">CONSTANT_Class_info</code>
                  structure is used to represent a class or an interface:
               </p><a name="jvms-4.4.1-110"></a><pre class="screen">
CONSTANT_Class_info {
    u1 tag;
    u2 name_index;
}
</pre><p class="norm"><a name="jvms-4.4.1-200"></a>The items of the
                  <code class="literal">CONSTANT_Class_info</code> structure are the following:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.1-200-A"></a>The <code class="literal">tag</code> item has
                                 the value <code class="literal">CONSTANT_Class</code> (7).
                        </p>
                     </dd>
                     <dt><span class="term">name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.1-200-B"></a>The value of the
                                 <code class="literal">name_index</code> item must be a valid index into
                                 the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at that
                                 index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing a valid
                                 binary class or interface name encoded in internal form
                                 (<a class="xref" href="jvms-4.html#jvms-4.2.1" title="4.2.1.&nbsp;Binary Class and Interface Names">&sect;4.2.1</a>).
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="norm"><a name="jvms-4.4.1-300"></a>Because arrays are objects,
                  the opcodes <span class="emphasis"><em>anewarray</em></span> and <span class="emphasis"><em>multianewarray</em></span> can reference array
                  "classes" via <code class="literal">CONSTANT_Class_info</code> structures in the <code class="literal">constant_pool</code>
                  table. For such array classes, the name of the class is the descriptor
                  of the array type.
               </p>
               <div class="informalexample">
                  <p class="note">For example, the class name representing a
                     two-dimensional int array type
                  </p><pre class="screen">
int[][]
</pre><p class="note">is</p><pre class="screen">
[[I
</pre><p class="note">The class name representing the type array of class
                     <code class="literal">Thread</code></p><pre class="screen">
Thread[]
</pre><p class="note">is</p><pre class="screen">
[Ljava/lang/Thread;
</pre></div>
               <p class="norm"><a name="jvms-4.4.1-310"></a>An array type descriptor is
                  valid only if it represents 255 or fewer dimensions.
               </p>
            </div>
            <div class="section" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.2"></a>4.4.2.&nbsp;The <code class="literal">CONSTANT_Fieldref_info</code>, <code class="literal">CONSTANT_Methodref_info</code>, and <code class="literal">CONSTANT_InterfaceMethodref_info</code> Structures
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.2-100"></a>Fields, methods, and
                  interface methods are represented by similar structures:
               </p><a name="jvms-4.4.2-110"></a><pre class="screen">
CONSTANT_Fieldref_info {
    u1 tag;
    u2 class_index;
    u2 name_and_type_index;
}

CONSTANT_Methodref_info {
    u1 tag;
    u2 class_index;
    u2 name_and_type_index;
}

CONSTANT_InterfaceMethodref_info {
    u1 tag;
    u2 class_index;
    u2 name_and_type_index;
}
</pre><p class="norm"><a name="jvms-4.4.2-200"></a>The items of these
                  structures are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.2-200-A"></a>The <code class="literal">tag</code> item of
                                 a <code class="literal">CONSTANT_Fieldref_info</code> structure has the
                                 value <code class="literal">CONSTANT_Fieldref</code> (9).
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-A.1"></a>The <code class="literal">tag</code> item of
                                 a <code class="literal">CONSTANT_Methodref_info</code> structure has the
                                 value <code class="literal">CONSTANT_Methodref</code> (10).
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-A.2"></a>The <code class="literal">tag</code> item of
                                 a <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure has the value
                                 <code class="literal">CONSTANT_InterfaceMethodref</code> (11).
                        </p>
                     </dd>
                     <dt><span class="term">class_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.2-200-B"></a>The value of the
                                 <code class="literal">class_index</code> item must be a valid index into
                                 the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at that
                                 index must be a <code class="literal">CONSTANT_Class_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) structure representing a class or
                                 interface type that has the field or method as a member.
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-B.1"></a>The <code class="literal">class_index</code>
                                 item of a <code class="literal">CONSTANT_Methodref_info</code> structure must be a class
                                 type, not an interface type.
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-B.2"></a>The <code class="literal">class_index</code>
                                 item of a <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure must be
                                 an interface type.
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-B.3"></a>The <code class="literal">class_index</code>
                                 item of a <code class="literal">CONSTANT_Fieldref_info</code> structure may be either a
                                 class type or an interface type.
                        </p>
                     </dd>
                     <dt><span class="term">name_and_type_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.2-200-C"></a>The value of the
                                 <code class="literal">name_and_type_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_NameAndType_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.6" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">&sect;4.4.6</a>) structure. This <code class="literal">constant_pool</code>
                                 entry indicates the name and descriptor of the field or
                                 method.
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-C.1"></a>In a
                                 <code class="literal">CONSTANT_Fieldref_info</code>, the indicated descriptor must be a
                                 field descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>). Otherwise, the
                                 indicated descriptor must be a method descriptor
                                 (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                        <p class="norm"><a name="jvms-4.4.2-200-C.2"></a>If the name of the
                                 method of a <code class="literal">CONSTANT_Methodref_info</code> structure begins with a
                                 '<code class="literal">&lt;</code>' ('<code class="literal">\u003c</code>'), then the name must be
                                 the special name <code class="literal">&lt;init&gt;</code>, representing an instance initialization
                                 method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>). The return type of such a
                                 method must be <code class="literal">void</code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.3.&nbsp;The CONSTANT_String_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.3"></a>4.4.3.&nbsp;The <code class="literal">CONSTANT_String_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.3-100"></a>The <code class="literal">CONSTANT_String_info</code>
                  structure is used to represent constant objects of the type
                  <code class="literal">String</code>:
               </p><a name="jvms-4.4.3-110"></a><pre class="screen">
CONSTANT_String_info {
    u1 tag;
    u2 string_index;
}
</pre><p class="norm"><a name="jvms-4.4.3-200"></a>The items of the
                  <code class="literal">CONSTANT_String_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.3-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_String_info</code> structure has the value
                                 <code class="literal">CONSTANT_String</code> (8).
                        </p>
                     </dd>
                     <dt><span class="term">string_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.3-200-B"></a>The value of
                                 the <code class="literal">string_index</code> item must be a valid index
                                 into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                                 that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the
                                 sequence of Unicode code points to which the <code class="literal">String</code> object is
                                 to be initialized.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.4.&nbsp;The CONSTANT_Integer_info and CONSTANT_Float_info Structures">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.4"></a>4.4.4.&nbsp;The <code class="literal">CONSTANT_Integer_info</code> and <code class="literal">CONSTANT_Float_info</code> Structures 
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.4-100"></a>The <code class="literal">CONSTANT_Integer_info</code>
                  and <code class="literal">CONSTANT_Float_info</code> structures represent 4-byte numeric (<code class="literal">int</code>
                  and <code class="literal">float</code>) constants:
               </p><a name="jvms-4.4.4-110"></a><pre class="screen">
CONSTANT_Integer_info {
    u1 tag;
    u4 bytes;
}

CONSTANT_Float_info {
    u1 tag;
    u4 bytes;
}
</pre><p class="norm"><a name="jvms-4.4.4-200"></a>The items of these
                  structures are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.4-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_Integer_info</code> structure has the value
                                 <code class="literal">CONSTANT_Integer</code> (3).
                        </p>
                        <p class="norm"><a name="jvms-4.4.4-200-A.1"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_Float_info</code> structure has the value
                                 <code class="literal">CONSTANT_Float</code> (4).
                        </p>
                     </dd>
                     <dt><span class="term">bytes</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.4-200-B"></a>The <code class="literal">bytes</code> item of
                                 the <code class="literal">CONSTANT_Integer_info</code> structure represents the value of
                                 the <code class="literal">int</code> constant. The bytes of the value are stored in
                                 big-endian (high byte first) order.
                        </p>
                        <p class="norm"><a name="jvms-4.4.4-200-B.1"></a>The <code class="literal">bytes</code> item of
                                 the <code class="literal">CONSTANT_Float_info</code> structure represents the value of the
                                 <code class="literal">float</code> constant in IEEE 754 floating-point single format
                                 (<a class="xref" href="jvms-2.html#jvms-2.3.2" title="2.3.2.&nbsp;Floating-Point Types, Value Sets, and Values">&sect;2.3.2</a>). The bytes of the single format
                                 representation are stored in big-endian (high byte first)
                                 order.
                        </p>
                        <p class="norm"><a name="jvms-4.4.4-200-B.2"></a>The value
                                 represented by the <code class="literal">CONSTANT_Float_info</code> structure is determined
                                 as follows. The bytes of the value are first converted into an
                                 <code class="literal">int</code> constant <span class="emphasis"><em>bits</em></span>. Then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="disc">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.4-200-B.2-1"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is <code class="literal">0x7f800000</code>, the <code class="literal">float</code> value will be
                                    	  positive infinity.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.4-200-B.2-2"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is <code class="literal">0xff800000</code>, the <code class="literal">float</code> value will be
                                    	  negative infinity.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.4-200-B.2-3"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is in the range <code class="literal">0x7f800001</code> through
                                    	  <code class="literal">0x7fffffff</code> or in the
                                    	  range <code class="literal">0xff800001</code>
                                    	  through <code class="literal">0xffffffff</code>, the <code class="literal">float</code> value
                                    	  will be NaN.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.4-200-B.2-4"></a>In all other
                                    	  cases, let <code class="literal">s</code>, <code class="literal">e</code>,
                                    	  and <code class="literal">m</code> be three values that might be
                                    	  computed from <span class="emphasis"><em>bits</em></span>:
                                 </p><a name="jvms-4.4.4-200-B.2-4.1"></a><pre class="screen">
int s = ((<span class="emphasis"><em>bits</em></span> &gt;&gt; 31) == 0) ? 1 : -1;
int e = ((<span class="emphasis"><em>bits</em></span> &gt;&gt; 23) &amp; 0xff);
int m = (e == 0) ?
          (<span class="emphasis"><em>bits</em></span> &amp; 0x7fffff) &lt;&lt; 1 :
          (<span class="emphasis"><em>bits</em></span> &amp; 0x7fffff) | 0x800000;
	  </pre></li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.4.4-200-B.3"></a>Then the <code class="literal">float</code>
                                 value equals the result of the mathematical
                                 expression <code class="literal">s &middot; m &middot;
                                    2<sup>e-150</sup></code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.5.&nbsp;The CONSTANT_Long_info and CONSTANT_Double_info Structures">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.5"></a>4.4.5.&nbsp;The <code class="literal">CONSTANT_Long_info</code> and <code class="literal">CONSTANT_Double_info</code> Structures
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.5-100"></a>The <code class="literal">CONSTANT_Long_info</code> and
                  <code class="literal">CONSTANT_Double_info</code> represent 8-byte numeric (<code class="literal">long</code> and <code class="literal">double</code>)
                  constants:
               </p><a name="jvms-4.4.5-110"></a><pre class="screen">
CONSTANT_Long_info {
    u1 tag;
    u4 high_bytes;
    u4 low_bytes;
}

CONSTANT_Double_info {
    u1 tag;
    u4 high_bytes;
    u4 low_bytes;
}
</pre><p class="norm"><a name="jvms-4.4.5-120"></a>All 8-byte constants take up
                  two entries in the <code class="literal">constant_pool</code> table of the <code class="literal">class</code> file. If a
                  <code class="literal">CONSTANT_Long_info</code> or <code class="literal">CONSTANT_Double_info</code> structure is the item
                  in the <code class="literal">constant_pool</code> table at index <span class="emphasis"><em>n</em></span>, then the next usable
                  item in the pool is located at index <span class="emphasis"><em>n</em></span>+2. The <code class="literal">constant_pool</code>
                  index <span class="emphasis"><em>n</em></span>+1 must be valid but is considered unusable.
               </p>
               <p class="note">In retrospect, making 8-byte constants take two
                  constant pool entries was a poor choice.
               </p>
               <p class="norm"><a name="jvms-4.4.5-200"></a>The items of these
                  structures are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.5-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_Long_info</code> structure has the value <code class="literal">CONSTANT_Long</code>
                                 (5).
                        </p>
                        <p class="norm"><a name="jvms-4.4.5-200-A.1"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_Double_info</code> structure has the value
                                 <code class="literal">CONSTANT_Double</code> (6).
                        </p>
                     </dd>
                     <dt><span class="term">high_bytes, low_bytes</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.5-200-B"></a>The
                                 unsigned <code class="literal">high_bytes</code>
                                 and <code class="literal">low_bytes</code> items of the
                                 <code class="literal">CONSTANT_Long_info</code> structure together represent the value of
                                 the <code class="literal">long</code> constant
                        </p><a name="jvms-4.4.5-200-B.1"></a><pre class="screen">
((long) high_bytes &lt;&lt; 32) + low_bytes
      </pre><p class="norm"><a name="jvms-4.4.5-200-B.2"></a>where the bytes of
                                 each of <code class="literal">high_bytes</code>
                                 and <code class="literal">low_bytes</code> are stored in big-endian (high
                                 byte first) order.
                        </p>
                        <p class="norm"><a name="jvms-4.4.5-200-B.3"></a>The <code class="literal">high_bytes</code>
                                 and <code class="literal">low_bytes</code> items of the
                                 <code class="literal">CONSTANT_Double_info</code> structure together represent the <code class="literal">double</code>
                                 value in IEEE 754 floating-point double format
                                 (<a class="xref" href="jvms-2.html#jvms-2.3.2" title="2.3.2.&nbsp;Floating-Point Types, Value Sets, and Values">&sect;2.3.2</a>). The bytes of each item are
                                 stored in big-endian (high byte first) order.
                        </p>
                        <p class="norm"><a name="jvms-4.4.5-200-B.4"></a>The value
                                 represented by the <code class="literal">CONSTANT_Double_info</code> structure is
                                 determined as follows. The <code class="literal">high_bytes</code>
                                 and <code class="literal">low_bytes</code> items are converted into the
                                 <code class="literal">long</code> constant <span class="emphasis"><em>bits</em></span>, which is equal
                                 to
                        </p><a name="jvms-4.4.5-200-B.5"></a><pre class="screen">
((long) high_bytes &lt;&lt; 32) + low_bytes
      </pre><p class="norm"><a name="jvms-4.4.5-200-B.6"></a>Then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="disc">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.5-200-B.6-1"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is <code class="literal">0x7ff0000000000000L</code>, the <code class="literal">double</code>
                                    	  value will be positive infinity.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.5-200-B.6-2"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is <code class="literal">0xfff0000000000000L</code>, the <code class="literal">double</code>
                                    	  value will be negative infinity.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.5-200-B.6-3"></a>If <span class="emphasis"><em>bits</em></span>
                                    	  is in the range <code class="literal">0x7ff0000000000001L</code> through
                                    	  <code class="literal">0x7fffffffffffffffL</code> or in the
                                    	  range <code class="literal">0xfff0000000000001L</code>
                                    	  through <code class="literal">0xffffffffffffffffL</code>, the double
                                    	  value will be NaN.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.4.5-200-B.6-4"></a>In all other
                                    	  cases, let <code class="literal">s</code>, <code class="literal">e</code>,
                                    	  and <code class="literal">m</code> be three values that might be
                                    	  computed from <span class="emphasis"><em>bits</em></span>:
                                 </p><a name="jvms-4.4.5-200-B.6-5"></a><pre class="screen">
int s = ((<span class="emphasis"><em>bits</em></span> &gt;&gt; 63) == 0) ? 1 : -1;
int e = (int)((<span class="emphasis"><em>bits</em></span> &gt;&gt; 52) &amp; 0x7ffL);
long m = (e == 0) ?
           (<span class="emphasis"><em>bits</em></span> &amp; 0xfffffffffffffL) &lt;&lt; 1 :
           (<span class="emphasis"><em>bits</em></span> &amp; 0xfffffffffffffL) | 0x10000000000000L;
	  </pre></li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.4.5-200-B.6-6"></a>Then the
                                 floating-point value equals the <code class="literal">double</code> value of the
                                 mathematical expression <code class="literal">s &middot; m &middot;
                                    2<sup>e-1075</sup></code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.6"></a>4.4.6.&nbsp;The <code class="literal">CONSTANT_NameAndType_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.6-100"></a>The
                  <code class="literal">CONSTANT_NameAndType_info</code> structure is used to represent a field or
                  method, without indicating which class or interface type it belongs
                  to:
               </p><a name="jvms-4.4.6-110"></a><pre class="screen">
CONSTANT_NameAndType_info {
    u1 tag;
    u2 name_index;
    u2 descriptor_index;
}
</pre><p class="norm"><a name="jvms-4.4.6-200"></a>The items of the
                  <code class="literal">CONSTANT_NameAndType_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.6-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_NameAndType_info</code> structure has the value
                                 <code class="literal">CONSTANT_NameAndType</code> (12).
                        </p>
                     </dd>
                     <dt><span class="term">name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.6-200-B"></a>The value of
                                 the <code class="literal">name_index</code> item must be a valid index
                                 into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                                 that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing either the
                                 special method name <code class="literal">&lt;init&gt;</code> (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) or a
                                 valid unqualified name (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>) denoting a
                                 field or method.
                        </p>
                     </dd>
                     <dt><span class="term">descriptor_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.6-200-C"></a>The value of
                                 the <code class="literal">descriptor_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing a valid
                                 field descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>) or method
                                 descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.7"></a>4.4.7.&nbsp;The <code class="literal">CONSTANT_Utf8_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.7-100"></a>The <code class="literal">CONSTANT_Utf8_info</code>
                  structure is used to represent constant string values:
               </p><a name="jvms-4.4.7-110"></a><pre class="screen">
CONSTANT_Utf8_info {
    u1 tag;
    u2 length;
    u1 bytes[length];
}
</pre><p class="norm"><a name="jvms-4.4.7-200"></a>The items of the
                  <code class="literal">CONSTANT_Utf8_info</code> structure are the following:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.7-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_Utf8_info</code> structure has the value <code class="literal">CONSTANT_Utf8</code>
                                 (1).
                        </p>
                     </dd>
                     <dt><span class="term">length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.7-200-B"></a>The value of
                                 the <code class="literal">length</code> item gives the number of bytes in
                                 the <code class="literal">bytes</code> array (not the length of the
                                 resulting string). The strings in the <code class="literal">CONSTANT_Utf8_info</code>
                                 structure are not null-terminated.
                        </p>
                     </dd>
                     <dt><span class="term">bytes[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.7-200-C"></a>The <code class="literal">bytes</code> array
                                 contains the bytes of the string. No byte may have the
                                 value <code class="literal">(byte)0</code> or lie in the
                                 range <code class="literal">(byte)0xf0</code>
                                 - <code class="literal">(byte)0xff</code>.
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="norm"><a name="jvms-4.4.7-300"></a>String content is encoded in
                  modified UTF-8. Modified UTF-8 strings are encoded so that code point
                  sequences that contain only non-null ASCII characters can be
                  represented using only 1 byte per code point, but all code points in
                  the Unicode codespace can be represented.
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.4.7-300-A"></a>Code points in the
                                 range '<code class="literal">\u0001</code>' to '<code class="literal">\u007F</code>'
                                 are represented by a single byte:
                        </p>
                        <div class="table"><a name="jvms-4.4.7-300-A.1"></a><p class="title"><b>Table&nbsp;4.4.&nbsp;</b></p>
                           <div class="table-contents">
                              <table border="1">
                                 <colgroup>
                                    <col align="center" class="c1">
                                    <col align="center" class="c2">
                                    <col align="center" class="c3">
                                    <col align="center" class="c4">
                                    <col align="center" class="c5">
                                    <col align="center" class="c6">
                                    <col align="center" class="c7">
                                    <col align="center" class="c8">
                                 </colgroup>
                                 <tbody>
                                    <tr>
                                       <td align="center"><span class="emphasis"><em>0</em></span></td>
                                       <td colspan="7" align="center"><span class="emphasis"><em>bits 6-0</em></span></td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"><p class="norm"><a name="jvms-4.4.7-300-A.2"></a>The 7 bits of data
                                 in the byte give the value of the code point represented.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.4.7-300-B"></a>The null code point
                                 ('<code class="literal">\u0000</code>') and code points in the range
                                 '<code class="literal">\u0080</code>' to '<code class="literal">\u07FF</code>' are
                                 represented by a pair of bytes <code class="literal">x</code>
                                 and <code class="literal">y</code> :
                        </p>
                        <div class="table"><a name="jvms-4.4.7-300-B.1"></a><p class="title"><b>Table&nbsp;4.5.&nbsp;</b></p>
                           <div class="table-contents">
                              <table border="0">
                                 <colgroup>
                                    <col>
                                    <col>
                                 </colgroup>
                                 <tbody>
                                    <tr>
                                       <td><code class="literal">x</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4217"></a><p class="title"><b>Table&nbsp;4.6.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="5" align="center"><span class="emphasis"><em>bits 10-6</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">y</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4241"></a><p class="title"><b>Table&nbsp;4.7.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 5-0</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"><p class="norm"><a name="jvms-4.4.7-300-B.2"></a>The bytes represent
                               the code point with the value:
                        </p><a name="jvms-4.4.7-300-B.3"></a><pre class="screen">
((x &amp; 0x1f) &lt;&lt; 6) + (y &amp; 0x3f)
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.4.7-300-C"></a>Code points in the
                               range '<code class="literal">\u0800</code>' to '<code class="literal">\uFFFF</code>'
                               are represented by 3
                               bytes <code class="literal">x</code>, <code class="literal">y</code>,
                               and <code class="literal">z</code> :
                        </p>
                        <div class="table"><a name="jvms-4.4.7-300-C.1"></a><p class="title"><b>Table&nbsp;4.8.&nbsp;</b></p>
                           <div class="table-contents">
                              <table border="0">
                                 <colgroup>
                                    <col>
                                    <col>
                                 </colgroup>
                                 <tbody>
                                    <tr>
                                       <td><code class="literal">x</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4277"></a><p class="title"><b>Table&nbsp;4.9.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="4" align="center"><span class="emphasis"><em>bits 15-12</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">y</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4303"></a><p class="title"><b>Table&nbsp;4.10.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 11-6</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">z</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4325"></a><p class="title"><b>Table&nbsp;4.11.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 5-0</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"><p class="norm"><a name="jvms-4.4.7-300-C.2"></a>The three bytes
                               represent the code point with the value:
                        </p><a name="jvms-4.4.7-300-C.3"></a><pre class="screen">
((x &amp; 0xf) &lt;&lt; 12) + ((y &amp; 0x3f) &lt;&lt; 6) + (z &amp; 0x3f)
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.4.7-300-D"></a>Characters with code
                               points above U+FFFF (so-called <span class="emphasis"><em>supplementary
                                     characters</em></span>) are represented by separately encoding the
                               two surrogate code units of their UTF-16 representation. Each of
                               the surrogate code units is represented by three bytes. This means
                               supplementary characters are represented by six
                               bytes, <code class="literal">u</code>, <code class="literal">v</code>, <code class="literal">w</code>, <code class="literal">x</code>,
                               <code class="literal">y</code>, and <code class="literal">z</code> :
                        </p>
                        <div class="table"><a name="jvms-4.4.7-300-D.1"></a><p class="title"><b>Table&nbsp;4.12.&nbsp;</b></p>
                           <div class="table-contents">
                              <table border="0">
                                 <colgroup>
                                    <col>
                                    <col>
                                 </colgroup>
                                 <tbody>
                                    <tr>
                                       <td><code class="literal">u</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4363"></a><p class="title"><b>Table&nbsp;4.13.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">v</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4395"></a><p class="title"><b>Table&nbsp;4.14.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="4" align="center"><span class="emphasis"><em>(bits 20-16)-1</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">w</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4421"></a><p class="title"><b>Table&nbsp;4.15.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 15-10</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">x</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4443"></a><p class="title"><b>Table&nbsp;4.16.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">y</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4475"></a><p class="title"><b>Table&nbsp;4.17.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td colspan="4" align="center"><span class="emphasis"><em>bits 9-6</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">z</code>:
                                       </td>
                                       <td>
                                          
                                          	      
                                          <div class="table"><a name="d5e4501"></a><p class="title"><b>Table&nbsp;4.18.&nbsp;</b></p>
                                             <div class="table-contents">
                                                <table border="1">
                                                   <colgroup>
                                                      <col align="center" class="c1">
                                                      <col align="center" class="c2">
                                                      <col align="center" class="c3">
                                                      <col align="center" class="c4">
                                                      <col align="center" class="c5">
                                                      <col align="center" class="c6">
                                                      <col align="center" class="c7">
                                                      <col align="center" class="c8">
                                                   </colgroup>
                                                   <tbody>
                                                      <tr>
                                                         <td align="center"><span class="emphasis"><em>1</em></span></td>
                                                         <td align="center"><span class="emphasis"><em>0</em></span></td>
                                                         <td colspan="6" align="center"><span class="emphasis"><em>bits 5-0</em></span></td>
                                                      </tr>
                                                   </tbody>
                                                </table>
                                             </div>
                                          </div><br class="table-break">
                                          
                                          	    
                                       </td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"><p class="norm"><a name="jvms-4.4.7-300-D.2"></a>The six bytes
                               represent the code point with the value:
                        </p><a name="jvms-4.4.7-300-D.3"></a><pre class="screen">
0x10000 + ((v &amp; 0x0f) &lt;&lt; 16) + ((w &amp; 0x3f) &lt;&lt; 10) +
((y &amp; 0x0f) &lt;&lt; 6) + (z &amp; 0x3f)
    </pre></li>
                  </ul>
               </div>
               <p class="norm"><a name="jvms-4.4.7-400"></a>The bytes of multibyte
                  characters are stored in the <code class="literal">class</code> file in big-endian (high byte
                  first) order.
               </p>
               <p class="norm"><a name="jvms-4.4.7-500"></a>There are two differences
                  between this format and the "standard" UTF-8 format. First, the null
                  character <code class="literal">(char)0</code> is encoded using the 2-byte
                  format rather than the 1-byte format, so that modified UTF-8 strings
                  never have embedded nulls. Second, only the 1-byte, 2-byte, and 3-byte
                  formats of standard UTF-8 are used. The Java Virtual Machine does not recognize the
                  four-byte format of standard UTF-8; it uses its own
                  two-times-three-byte format instead.
               </p>
               <p class="note">For more information regarding the standard UTF-8
                  format, see Section 3.9 <em class="citetitle">Unicode Encoding Forms</em>
                  of <em class="citetitle">The Unicode Standard, Version 6.0.0</em>.
               </p>
            </div>
            <div class="section" title="4.4.8.&nbsp;The CONSTANT_MethodHandle_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.8"></a>4.4.8.&nbsp;The <code class="literal">CONSTANT_MethodHandle_info</code> Structure
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.8-100"></a>The
                  <code class="literal">CONSTANT_MethodHandle_info</code> structure is used to represent a method
                  handle:
               </p><a name="jvms-4.4.8-110"></a><pre class="screen">
CONSTANT_MethodHandle_info {
    u1 tag;
    u1 reference_kind;
    u2 reference_index;
}
</pre><p class="norm"><a name="jvms-4.4.8-200"></a>The items of the
                  <code class="literal">CONSTANT_MethodHandle_info</code> structure are the following:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.8-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_MethodHandle_info</code> structure has the value
                                 <code class="literal">CONSTANT_MethodHandle</code> (15).
                        </p>
                     </dd>
                     <dt><span class="term">reference_kind</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.8-200-B"></a>The value of
                                 the <code class="literal">reference_kind</code> item must be in the range
                                 1 to 9. The value denotes the <span class="emphasis"><em>kind</em></span> of this
                                 method handle, which characterizes its bytecode behavior
                                 (<a class="xref" href="jvms-5.html#jvms-5.4.3.5" title="5.4.3.5.&nbsp;Method Type and Method Handle Resolution">&sect;5.4.3.5</a>).
                        </p>
                     </dd>
                     <dt><span class="term">reference_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.8-200-C"></a>The value of
                                 the <code class="literal">reference_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table.
                        </p>
                        <p class="norm"><a name="jvms-4.4.8-200-C.1"></a>If the value of
                                 the <code class="literal">reference_kind</code> item is 1
                                 (<code class="literal">REF_getField</code>), 2 (<code class="literal">REF_getStatic</code>), 3 (<code class="literal">REF_putField</code>), or 4
                                 (<code class="literal">REF_putStatic</code>), then the <code class="literal">constant_pool</code> entry at that index
                                 must be a <code class="literal">CONSTANT_Fieldref_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.2" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">&sect;4.4.2</a>) structure representing a field
                                 for which a method handle is to be created.
                        </p>
                        <p class="norm"><a name="jvms-4.4.8-200-C.2"></a>If the value of
                                 the <code class="literal">reference_kind</code> item is 5
                                 (<code class="literal">REF_invokeVirtual</code>), 6 (<code class="literal">REF_invokeStatic</code>), 7
                                 (<code class="literal">REF_invokeSpecial</code>), or 8 (<code class="literal">REF_newInvokeSpecial</code>), then the
                                 <code class="literal">constant_pool</code> entry at that index must be a
                                 <code class="literal">CONSTANT_Methodref_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.2" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">&sect;4.4.2</a>) representing a class's method or
                                 constructor (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) for which a method
                                 handle is to be created.
                        </p>
                        <p class="norm"><a name="jvms-4.4.8-200-C.3"></a>If the value of
                                 the <code class="literal">reference_kind</code> item is 9
                                 (<code class="literal">REF_invokeInterface</code>), then the <code class="literal">constant_pool</code> entry at that
                                 index must be a <code class="literal">CONSTANT_InterfaceMethodref_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.2" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">&sect;4.4.2</a>) structure representing an
                                 interface's method for which a method handle is to be
                                 created.
                        </p>
                        <p class="norm"><a name="jvms-4.4.8-200-C.4"></a>If the value of
                                 the <code class="literal">reference_kind</code> item is 5
                                 (<code class="literal">REF_invokeVirtual</code>), 6 (<code class="literal">REF_invokeStatic</code>), 7
                                 (<code class="literal">REF_invokeSpecial</code>), or 9 (<code class="literal">REF_invokeInterface</code>), the name of
                                 the method represented by a <code class="literal">CONSTANT_Methodref_info</code> structure
                                 must not be <code class="literal">&lt;init&gt;</code> or <code class="literal">&lt;clinit&gt;</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.4.8-200-C.5"></a>If the value is 8
                                 (<code class="literal">REF_newInvokeSpecial</code>), the name of the method represented by
                                 a <code class="literal">CONSTANT_Methodref_info</code> structure must be <code class="literal">&lt;init&gt;</code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.9.&nbsp;The CONSTANT_MethodType_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.9"></a>4.4.9.&nbsp;The <code class="literal">CONSTANT_MethodType_info</code> Structure 
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.9-100"></a>The
                  <code class="literal">CONSTANT_MethodType_info</code> structure is used to represent a method
                  type:
               </p><a name="jvms-4.4.9-110"></a><pre class="screen">
CONSTANT_MethodType_info {
    u1 tag;
    u2 descriptor_index;
}
</pre><p class="norm"><a name="jvms-4.4.9-200"></a>The items of the
                  <code class="literal">CONSTANT_MethodType_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.9-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_MethodType_info</code> structure has the value
                                 <code class="literal">CONSTANT_MethodType</code> (16).
                        </p>
                     </dd>
                     <dt><span class="term">descriptor_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.9-200-B"></a>The value of
                                 the <code class="literal">descriptor_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing a method
                                 descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.4.10.&nbsp;The CONSTANT_InvokeDynamic_info Structure">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.4.10"></a>4.4.10.&nbsp;The <code class="literal">CONSTANT_InvokeDynamic_info</code> Structure 
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.4.10-100"></a>The
                  <code class="literal">CONSTANT_InvokeDynamic_info</code> structure is used by an <span class="emphasis"><em>invokedynamic</em></span>
                  instruction (<a class="xref" href="jvms-6.html#jvms-6.5.invokedynamic" title="invokedynamic">&sect;<span class="emphasis"><em>invokedynamic</em></span></a>) to specify a
                  bootstrap method, the dynamic invocation name, the argument and return
                  types of the call, and optionally, a sequence of additional constants
                  called <span class="emphasis"><em>static arguments</em></span> to the bootstrap
                  method.
               </p><a name="jvms-4.4.10-110"></a><pre class="screen">
CONSTANT_InvokeDynamic_info {
    u1 tag;
    u2 bootstrap_method_attr_index;
    u2 name_and_type_index;
}
</pre><p class="norm"><a name="jvms-4.4.10-200"></a>The items of the
                  <code class="literal">CONSTANT_InvokeDynamic_info</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">tag</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.10-200-A"></a>The <code class="literal">tag</code> item of
                                 the <code class="literal">CONSTANT_InvokeDynamic_info</code> structure has the value
                                 <code class="literal">CONSTANT_InvokeDynamic</code> (18).
                        </p>
                     </dd>
                     <dt><span class="term">bootstrap_method_attr_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.10-200-B"></a>The value of the
                                 <code class="literal">bootstrap_method_attr_index</code> item must be a
                                 valid index into the <code class="literal">bootstrap_methods</code> array
                                 of the bootstrap method table (<a class="xref" href="jvms-4.html#jvms-4.7.21" title="4.7.21.&nbsp;The BootstrapMethods attribute">&sect;4.7.21</a>) of
                                 this <code class="literal">class</code> file.
                        </p>
                     </dd>
                     <dt><span class="term">name_and_type_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.4.10-200-C"></a>The value of the
                                 <code class="literal">name_and_type_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_NameAndType_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.6" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">&sect;4.4.6</a>) structure representing a method
                                 name and method descriptor
                                 (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
         </div>
         <div class="section" title="4.5.&nbsp;Fields">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.5"></a>4.5.&nbsp;Fields
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.5-100"></a>Each field is described by a
               <code class="literal">field_info</code> structure. No two fields in one <code class="literal">class</code> file may have the
               same name and descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>).
            </p>
            <p class="norm"><a name="jvms-4.5-110"></a>The structure has the
               following format:
            </p><a name="jvms-4.5-120"></a><pre class="screen">
field_info {
    u2             access_flags;
    u2             name_index;
    u2             descriptor_index;
    u2             attributes_count;
    attribute_info attributes[attributes_count];
}
</pre><p class="norm"><a name="jvms-4.5-200"></a>The items of the <code class="literal">field_info</code>
               structure are as follows:
            </p>
            <div class="variablelist">
               <dl>
                  <dt><span class="term">access_flags</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-A"></a>The value of the
                              <code class="literal">access_flags</code> item is a mask of flags used to denote access
                              permission to and properties of this field. The interpretation
                              of each flag, when set, is as shown in
                              <a class="xref" href="jvms-4.html#jvms-4.5-200-A.1" title="Table&nbsp;4.4.&nbsp;Field access and property flags">Table&nbsp;4.4</a>.
                     </p>
                     <div class="table"><a name="jvms-4.5-200-A.1"></a><p class="title"><b>Table&nbsp;4.4.&nbsp;Field access and property flags</b></p>
                        <div class="table-contents">
                           <table summary="Field access and property flags" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Flag Name</th>
                                    <th>Value</th>
                                    <th>Interpretation</th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">ACC_PUBLIC</code></td>
                                    <td>0x0001</td>
                                    <td>Declared <code class="literal">public</code>; may be accessed from outside its
                                       		package.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_PRIVATE</code></td>
                                    <td>0x0002</td>
                                    <td>Declared <code class="literal">private</code>; usable only within the defining
                                       		class.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_PROTECTED</code></td>
                                    <td>0x0004</td>
                                    <td>Declared <code class="literal">protected</code>; may be accessed within
                                       		subclasses.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_STATIC</code></td>
                                    <td>0x0008</td>
                                    <td>Declared <code class="literal">static</code>.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_FINAL</code></td>
                                    <td>0x0010</td>
                                    <td>Declared <code class="literal">final</code>; never directly assigned to
                                       		after object construction (JLS &sect;17.5).
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_VOLATILE</code></td>
                                    <td>0x0040</td>
                                    <td>Declared <code class="literal">volatile</code>; cannot be cached.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_TRANSIENT</code></td>
                                    <td>0x0080</td>
                                    <td>Declared <code class="literal">transient</code>; not written or read by a
                                       		persistent object manager.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SYNTHETIC</code></td>
                                    <td>0x1000</td>
                                    <td>Declared synthetic; not present in the source
                                       		code.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ENUM</code></td>
                                    <td>0x4000</td>
                                    <td>Declared as an element of an <code class="literal">enum</code>.
                                    </td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><p class="norm"><a name="jvms-4.5-200-A.2"></a>A field may be
                              marked with the <code class="literal">ACC_SYNTHETIC</code> flag to indicate that it was
                              generated by a compiler and does not appear in source
                              code.
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-A.3"></a>The <code class="literal">ACC_ENUM</code> flag
                              indicates that this field is used to hold an element of an
                              enumerated type.
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-A.4"></a>Fields of classes
                              may set any of the flags in
                              <a class="xref" href="jvms-4.html#jvms-4.5-200-A.1" title="Table&nbsp;4.4.&nbsp;Field access and property flags">Table&nbsp;4.4</a>. However, a specific field of
                              a class may have at most one of its <code class="literal">ACC_PRIVATE</code>,
                              <code class="literal">ACC_PROTECTED</code>, and <code class="literal">ACC_PUBLIC</code> flags set (JLS &sect;8.3.1) and
                              must not have both its <code class="literal">ACC_FINAL</code> and <code class="literal">ACC_VOLATILE</code> flags set
                              (JLS &sect;8.3.1.4).
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-A.5"></a>All fields of
                              interfaces must have their <code class="literal">ACC_PUBLIC</code>, <code class="literal">ACC_STATIC</code>, and
                              <code class="literal">ACC_FINAL</code> flags set; they may have their <code class="literal">ACC_SYNTHETIC</code> flag
                              set and must not have any of the other flags in
                              <a class="xref" href="jvms-4.html#jvms-4.5-200-A.1" title="Table&nbsp;4.4.&nbsp;Field access and property flags">Table&nbsp;4.4</a> set (JLS &sect;9.3).
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-A.6"></a>All bits of the
                              <code class="literal">access_flags</code> item not assigned in
                              <a class="xref" href="jvms-4.html#jvms-4.5-200-A.1" title="Table&nbsp;4.4.&nbsp;Field access and property flags">Table&nbsp;4.4</a> are reserved for future
                              use. They should be set to zero in generated <code class="literal">class</code> files and
                              should be ignored by Java Virtual Machine implementations.
                     </p>
                  </dd>
                  <dt><span class="term">name_index</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-B"></a>The value of the
                              <code class="literal">name_index</code> item must be a valid index into
                              the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at that
                              index must be a <code class="literal">CONSTANT_Utf8_info</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure which must represent a
                              valid unqualified name (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>) denoting a
                              field.
                     </p>
                  </dd>
                  <dt><span class="term">descriptor_index</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-C"></a>The value of the
                              <code class="literal">descriptor_index</code> item must be a valid index
                              into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                              that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure that must represent a
                              valid field descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>).
                     </p>
                  </dd>
                  <dt><span class="term">attributes_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-D"></a>The value of the
                              <code class="literal">attributes_count</code> item indicates the number of
                              additional attributes (<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>) of this
                              field.
                     </p>
                  </dd>
                  <dt><span class="term">attributes[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.5-200-E"></a>Each value of the
                              <code class="literal">attributes</code> table must be an attribute structure
                              (<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>). A field can have any number of
                              attributes associated with it.
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-E.1"></a>The attributes
                              defined by this specification as appearing in the <code class="literal">attributes</code>
                              table of a <code class="literal">field_info</code> structure are <code class="literal">ConstantValue</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.2" title="4.7.2.&nbsp;The ConstantValue Attribute">&sect;4.7.2</a>), <code class="literal">Synthetic</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.8" title="4.7.8.&nbsp;The Synthetic Attribute">&sect;4.7.8</a>), <code class="literal">Signature</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.9" title="4.7.9.&nbsp;The Signature Attribute">&sect;4.7.9</a>), <code class="literal">Deprecated</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.15" title="4.7.15.&nbsp;The Deprecated Attribute">&sect;4.7.15</a>), <code class="literal">RuntimeVisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations attribute">&sect;4.7.16</a>) and
                              <code class="literal">RuntimeInvisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.17" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations attribute">&sect;4.7.17</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-E.2"></a>A Java Virtual Machine
                              implementation must recognize and correctly read <code class="literal">ConstantValue</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.2" title="4.7.2.&nbsp;The ConstantValue Attribute">&sect;4.7.2</a>) attributes found in the
                              <code class="literal">attributes</code> table of a <code class="literal">field_info</code> structure. If a Java Virtual Machine
                              implementation recognizes <code class="literal">class</code> files whose version number is
                              49.0 or above, it must recognize and correctly read <code class="literal">Signature</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.9" title="4.7.9.&nbsp;The Signature Attribute">&sect;4.7.9</a>), <code class="literal">RuntimeVisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations attribute">&sect;4.7.16</a>) and
                              <code class="literal">RuntimeInvisibleAnnotations</code> (<a class="xref" href="jvms-4.html#jvms-4.7.17" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations attribute">&sect;4.7.17</a>)
                              attributes found in the <code class="literal">attributes</code> table of a <code class="literal">field_info</code>
                              structure of a <code class="literal">class</code> file whose version number is 49.0 or
                              above.
                     </p>
                     <p class="norm"><a name="jvms-4.5-200-E.3"></a>A Java Virtual Machine
                              implementation is required to silently ignore any or all
                              attributes that it does not recognize in the <code class="literal">attributes</code> table
                              of a <code class="literal">field_info</code> structure. Attributes not defined in this
                              specification are not allowed to affect the semantics of the
                              <code class="literal">class</code> file, but only to provide additional descriptive
                              information (<a class="xref" href="jvms-4.html#jvms-4.7.1" title="4.7.1.&nbsp;Defining and Naming New Attributes">&sect;4.7.1</a>).
                     </p>
                  </dd>
               </dl>
            </div>
         </div>
         <div class="section" title="4.6.&nbsp;Methods">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.6"></a>4.6.&nbsp;Methods
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.6-100"></a>Each method, including each
               instance initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) and the
               class or interface initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>),
               is described by a <code class="literal">method_info</code> structure. No two methods in one
               <code class="literal">class</code> file may have the same name and descriptor
               (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
            </p>
            <p class="norm"><a name="jvms-4.6-110"></a>The structure has the
               following format:
            </p><a name="jvms-4.6-120"></a><pre class="screen">
method_info {
    u2             access_flags;
    u2             name_index;
    u2             descriptor_index;
    u2             attributes_count;
    attribute_info attributes[attributes_count];
}
</pre><p class="norm"><a name="jvms-4.6-200"></a>The items of the <code class="literal">method_info</code>
               structure are as follows:
            </p>
            <div class="variablelist">
               <dl>
                  <dt><span class="term">access_flags</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-A"></a>The value of the
                              <code class="literal">access_flags</code> item is a mask of flags used to denote access
                              permission to and properties of this method. The interpretation
                              of each flag, when set, is as shown in
                              <a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.5.&nbsp;Method access and property flags">Table&nbsp;4.5</a>.
                     </p>
                     <div class="table"><a name="jvms-4.6-200-A.1"></a><p class="title"><b>Table&nbsp;4.5.&nbsp;Method access and property flags</b></p>
                        <div class="table-contents">
                           <table summary="Method access and property flags" border="1">
                              <colgroup>
                                 <col>
                                 <col>
                                 <col>
                              </colgroup>
                              <thead>
                                 <tr>
                                    <th>Flag Name</th>
                                    <th>Value</th>
                                    <th>Interpretation</th>
                                 </tr>
                              </thead>
                              <tbody>
                                 <tr>
                                    <td><code class="literal">ACC_PUBLIC</code></td>
                                    <td>0x0001</td>
                                    <td>Declared <code class="literal">public</code>; may be accessed from outside its
                                       		package.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_PRIVATE</code></td>
                                    <td>0x0002</td>
                                    <td>Declared <code class="literal">private</code>; accessible only within the
                                       		defining class.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_PROTECTED</code></td>
                                    <td>0x0004</td>
                                    <td>Declared <code class="literal">protected</code>; may be accessed within
                                       		subclasses.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_STATIC</code></td>
                                    <td>0x0008</td>
                                    <td>Declared <code class="literal">static</code>.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_FINAL</code></td>
                                    <td>0x0010</td>
                                    <td>Declared <code class="literal">final</code>; must not be overridden
                                       		(<a class="xref" href="jvms-5.html#jvms-5.4.5" title="5.4.5.&nbsp;Method overriding">&sect;5.4.5</a>).
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SYNCHRONIZED</code></td>
                                    <td>0x0020</td>
                                    <td>Declared <code class="literal">synchronized</code>; invocation is wrapped by a
                                       		monitor use.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_BRIDGE</code></td>
                                    <td>0x0040</td>
                                    <td>A bridge method, generated by the compiler.</td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_VARARGS</code></td>
                                    <td>0x0080</td>
                                    <td>Declared with variable number of arguments.</td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_NATIVE</code></td>
                                    <td>0x0100</td>
                                    <td>Declared <code class="literal">native</code>; implemented in a language other
                                       		than Java.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_ABSTRACT</code></td>
                                    <td>0x0400</td>
                                    <td>Declared <code class="literal">abstract</code>; no implementation is
                                       		provided.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_STRICT</code></td>
                                    <td>0x0800</td>
                                    <td>Declared <code class="literal">strictfp</code>; floating-point mode is
                                       		FP-strict.
                                    </td>
                                 </tr>
                                 <tr>
                                    <td><code class="literal">ACC_SYNTHETIC</code></td>
                                    <td>0x1000</td>
                                    <td>Declared synthetic; not present in the source
                                       		code.
                                    </td>
                                 </tr>
                              </tbody>
                           </table>
                        </div>
                     </div><br class="table-break"><p class="norm"><a name="jvms-4.6-200-A.2"></a>The <code class="literal">ACC_VARARGS</code>
                              flag indicates that this method takes a variable number of
                              arguments at the source code level. A method declared to take a
                              variable number of arguments must be compiled with the
                              <code class="literal">ACC_VARARGS</code> flag set to 1. All other methods must be compiled
                              with the <code class="literal">ACC_VARARGS</code> flag set to 0.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.3"></a>The <code class="literal">ACC_BRIDGE</code>
                              flag is used to indicate a bridge method generated by a Java
                              compiler.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.4"></a>A method may be
                              marked with the <code class="literal">ACC_SYNTHETIC</code> flag to indicate that it was
                              generated by a compiler and does not appear in source code,
                              unless it is one of the methods named in
                              <a class="xref" href="jvms-4.html#jvms-4.7.8" title="4.7.8.&nbsp;The Synthetic Attribute">&sect;4.7.8</a>.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.5"></a>Methods of classes
                              may set any of the flags in
                              <a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.5.&nbsp;Method access and property flags">Table&nbsp;4.5</a>. However, a specific method
                              of a class may have at most one of its <code class="literal">ACC_PRIVATE</code>,
                              <code class="literal">ACC_PROTECTED</code> and <code class="literal">ACC_PUBLIC</code> flags set (JLS &sect;8.4.3). If a
                              specific method has its <code class="literal">ACC_ABSTRACT</code> flag set, it must not
                              have any of its <code class="literal">ACC_FINAL</code>, <code class="literal">ACC_NATIVE</code>, <code class="literal">ACC_PRIVATE</code>,
                              <code class="literal">ACC_STATIC</code>, <code class="literal">ACC_STRICT</code> or <code class="literal">ACC_SYNCHRONIZED</code> flags set (JLS
                              &sect;8.4.3.1, JLS &sect;8.4.3.3, JLS &sect;8.4.3.4).
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.6"></a>All interface
                              methods must have their <code class="literal">ACC_ABSTRACT</code> and <code class="literal">ACC_PUBLIC</code> flags
                              set; they may have their <code class="literal">ACC_VARARGS</code>, <code class="literal">ACC_BRIDGE</code> and
                              <code class="literal">ACC_SYNTHETIC</code> flags set and must not have any of the other
                              flags in <a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.5.&nbsp;Method access and property flags">Table&nbsp;4.5</a> set (JLS
                              &sect;9.4).
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.7"></a>A specific instance
                              initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) may have at
                              most one of its <code class="literal">ACC_PRIVATE</code>, <code class="literal">ACC_PROTECTED</code>, and <code class="literal">ACC_PUBLIC</code>
                              flags set, and may also have its <code class="literal">ACC_STRICT</code>, <code class="literal">ACC_VARARGS</code> and
                              <code class="literal">ACC_SYNTHETIC</code> flags set, but must not have any of the other
                              flags in <a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.5.&nbsp;Method access and property flags">Table&nbsp;4.5</a> set.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.8"></a>Class and interface
                              initialization methods (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) are called
                              implicitly by the Java Virtual Machine. The value of their <code class="literal">access_flags</code> item
                              is ignored except for the setting of the <code class="literal">ACC_STRICT</code>
                              flag.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-A.9"></a>All bits of the
                              <code class="literal">access_flags</code> item not assigned in
                              <a class="xref" href="jvms-4.html#jvms-4.6-200-A.1" title="Table&nbsp;4.5.&nbsp;Method access and property flags">Table&nbsp;4.5</a> are reserved for future
                              use. They should be set to zero in generated <code class="literal">class</code> files and
                              should be ignored by Java Virtual Machine implementations.
                     </p>
                  </dd>
                  <dt><span class="term">name_index</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-B"></a>The value of the
                              <code class="literal">name_index</code> item must be a valid index into
                              the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at that
                              index must be a <code class="literal">CONSTANT_Utf8_info</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing either one
                              of the special method names (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) <code class="literal">&lt;init&gt;</code>
                              or <code class="literal">&lt;clinit&gt;</code>, or a valid unqualified name
                              (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>) denoting a method.
                     </p>
                  </dd>
                  <dt><span class="term">descriptor_index</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-C"></a>The value of the
                              <code class="literal">descriptor_index</code> item must be a valid index
                              into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                              that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing a valid
                              method descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                     </p>
                     <p class="note">A future edition of this specification may
                              require that the last parameter descriptor of the method
                              descriptor is an array type if the <code class="literal">ACC_VARARGS</code> flag is set in
                              the <code class="literal">access_flags</code> item.
                     </p>
                  </dd>
                  <dt><span class="term">attributes_count</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-D"></a>The value of the
                              <code class="literal">attributes_count</code> item indicates the number of
                              additional attributes (<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>) of this
                              method.
                     </p>
                  </dd>
                  <dt><span class="term">attributes[]</span></dt>
                  <dd>
                     <p class="norm"><a name="jvms-4.6-200-E"></a>Each value of the
                              <code class="literal">attributes</code> table must be an attribute structure
                              (<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>). A method can have any number of
                              optional attributes associated with it.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-E.2"></a>The attributes
                              defined by this specification as appearing in the <code class="literal">attributes</code>
                              table of a <code class="literal">method_info</code> structure are the <code class="literal">Code</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>), <code class="literal">Exceptions</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.5" title="4.7.5.&nbsp;The Exceptions Attribute">&sect;4.7.5</a>), <code class="literal">Synthetic</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.8" title="4.7.8.&nbsp;The Synthetic Attribute">&sect;4.7.8</a>), <code class="literal">Signature</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.9" title="4.7.9.&nbsp;The Signature Attribute">&sect;4.7.9</a>), <code class="literal">Deprecated</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.15" title="4.7.15.&nbsp;The Deprecated Attribute">&sect;4.7.15</a>), <code class="literal">RuntimeVisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations attribute">&sect;4.7.16</a>), <code class="literal">RuntimeInvisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.17" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations attribute">&sect;4.7.17</a>),
                              <code class="literal">RuntimeVisibleParameterAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.18" title="4.7.18.&nbsp;The RuntimeVisibleParameterAnnotations attribute">&sect;4.7.18</a>),
                              <code class="literal">RuntimeInvisibleParameterAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.19" title="4.7.19.&nbsp;The RuntimeInvisibleParameterAnnotations attribute">&sect;4.7.19</a>), and <code class="literal">AnnotationDefault</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.20" title="4.7.20.&nbsp;The AnnotationDefault attribute">&sect;4.7.20</a>) attributes.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-E.3"></a>A Java Virtual Machine
                              implementation must recognize and correctly read <code class="literal">Code</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>) and <code class="literal">Exceptions</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.5" title="4.7.5.&nbsp;The Exceptions Attribute">&sect;4.7.5</a>) attributes found in the
                              <code class="literal">attributes</code> table of a <code class="literal">method_info</code> structure. If a Java Virtual Machine
                              implementation recognizes <code class="literal">class</code> files whose version number is
                              49.0 or above, it must recognize and correctly read <code class="literal">Signature</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.9" title="4.7.9.&nbsp;The Signature Attribute">&sect;4.7.9</a>), <code class="literal">RuntimeVisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations attribute">&sect;4.7.16</a>), <code class="literal">RuntimeInvisibleAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.17" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations attribute">&sect;4.7.17</a>),
                              <code class="literal">RuntimeVisibleParameterAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.18" title="4.7.18.&nbsp;The RuntimeVisibleParameterAnnotations attribute">&sect;4.7.18</a>),
                              <code class="literal">RuntimeInvisibleParameterAnnotations</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.19" title="4.7.19.&nbsp;The RuntimeInvisibleParameterAnnotations attribute">&sect;4.7.19</a>) and <code class="literal">AnnotationDefault</code>
                              (<a class="xref" href="jvms-4.html#jvms-4.7.20" title="4.7.20.&nbsp;The AnnotationDefault attribute">&sect;4.7.20</a>) attributes found in the
                              <code class="literal">attributes</code> table of a <code class="literal">method_info</code> structure of a <code class="literal">class</code>
                              file whose version number is 49.0 or above.
                     </p>
                     <p class="norm"><a name="jvms-4.6-200-E.4"></a>A Java Virtual Machine
                              implementation is required to silently ignore any or all
                              attributes in the <code class="literal">attributes</code> table of a <code class="literal">method_info</code>
                              structure that it does not recognize. Attributes not defined in
                              this specification are not allowed to affect the semantics of
                              the <code class="literal">class</code> file, but only to provide additional descriptive
                              information (<a class="xref" href="jvms-4.html#jvms-4.7.1" title="4.7.1.&nbsp;Defining and Naming New Attributes">&sect;4.7.1</a>).
                     </p>
                  </dd>
               </dl>
            </div>
         </div>
         <div class="section" title="4.7.&nbsp;Attributes">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.7"></a>4.7.&nbsp;Attributes
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.7-100"></a>Attributes are used in the
               <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, <code class="literal">method_info</code>, and <code class="literal">Code_attribute</code>
               structures (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>, <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>,
               <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>, <a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>) of the
               <code class="literal">class</code> file format. All attributes have the following general
               format:
            </p><a name="jvms-4.7-110"></a><pre class="screen">
attribute_info {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 info[attribute_length];
}
</pre><p class="norm"><a name="jvms-4.7-120"></a>For all attributes, the
               <code class="literal">attribute_name_index</code> must be a valid unsigned
               16-bit index into the constant pool of the class. The <code class="literal">constant_pool</code>
               entry at <code class="literal">attribute_name_index</code> must be a
               <code class="literal">CONSTANT_Utf8_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>)
               representing the name of the attribute. The value of the
               <code class="literal">attribute_length</code> item indicates the length of the
               subsequent information in bytes. The length does not include the
               initial six bytes that contain
               the <code class="literal">attribute_name_index</code>
               and <code class="literal">attribute_length</code> items.
            </p>
            <p class="norm"><a name="jvms-4.7-200"></a>Certain attributes are
               predefined as part of the <code class="literal">class</code> file specification. They are listed
               in <a class="xref" href="jvms-4.html#jvms-4.7-300" title="Table&nbsp;4.6.&nbsp;Predefined class file attributes">Table&nbsp;4.6</a>, accompanied by the version of the
               Java SE platform and the version of the <code class="literal">class</code> file format in which each
               first appeared. Within the context of their use in this specification,
               that is, in the <code class="literal">attributes</code> tables of the <code class="literal">class</code> file structures in
               which they appear, the names of these predefined attributes are
               reserved. Of the predefined attributes:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-200-A"></a>The <code class="literal">ConstantValue</code>,
                            <code class="literal">Code</code> and <code class="literal">Exceptions</code> attributes must be recognized and
                            correctly read by a <code class="literal">class</code> file reader for correct interpretation
                            of the <code class="literal">class</code> file by a Java Virtual Machine implementation.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-200-B"></a>The <code class="literal">InnerClasses</code>,
                            <code class="literal">EnclosingMethod</code> and <code class="literal">Synthetic</code> attributes must be recognized
                            and correctly read by a <code class="literal">class</code> file reader in order to properly
                            implement the Java SE platform class libraries
                            (<a class="xref" href="jvms-2.html#jvms-2.12" title="2.12.&nbsp;Class Libraries">&sect;2.12</a>).
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-200-C"></a>The
                            <code class="literal">RuntimeVisibleAnnotations</code>, <code class="literal">RuntimeInvisibleAnnotations</code>,
                            <code class="literal">RuntimeVisibleParameterAnnotations</code>,
                            <code class="literal">RuntimeInvisibleParameterAnnotations</code> and <code class="literal">AnnotationDefault</code>
                            attributes must be recognized and correctly read by a <code class="literal">class</code> file
                            reader in order to properly implement the Java SE platform class
                            libraries (<a class="xref" href="jvms-2.html#jvms-2.12" title="2.12.&nbsp;Class Libraries">&sect;2.12</a>), if the <code class="literal">class</code> file's
                            version number is 49.0 or above and the Java Virtual Machine implementation
                            recognizes <code class="literal">class</code> files whose version number is 49.0 or
                            above.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-200-D"></a>The <code class="literal">Signature</code>
                            attribute must be recognized and correctly read by a <code class="literal">class</code> file
                            reader if the <code class="literal">class</code> file's version number is 49.0 or above and
                            the Java Virtual Machine implementation recognizes <code class="literal">class</code> files whose version
                            number is 49.0 or above.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-200-E"></a>The <code class="literal">StackMapTable</code>
                            attribute must be recognized and correctly read by a <code class="literal">class</code> file
                            reader if the <code class="literal">class</code> file's version number is 50.0 or above and
                            the Java Virtual Machine implementation recognizes <code class="literal">class</code> files whose version
                            number is 50.0 or above.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.7-200-F"></a>The <code class="literal">BootstrapMethods</code>
                            attribute must be recognized and correctly read by a <code class="literal">class</code> file
                            reader if the <code class="literal">class</code> file's version number is 51.0 or above and
                            the Java Virtual Machine implementation recognizes <code class="literal">class</code> files whose version
                            number is 51.0 or above.
                     </p>
                  </li>
               </ul>
            </div>
            <p class="norm"><a name="jvms-4.7-210"></a>Use of the remaining
               predefined attributes is optional; a <code class="literal">class</code> file reader may use the
               information they contain, or otherwise must silently ignore those
               attributes.
            </p>
            <div class="table"><a name="jvms-4.7-300"></a><p class="title"><b>Table&nbsp;4.6.&nbsp;Predefined <code class="literal">class</code> file attributes</b></p>
               <div class="table-contents">
                  <table summary="Predefined class file attributes" border="1">
                     <colgroup>
                        <col>
                        <col>
                        <col>
                        <col>
                     </colgroup>
                     <thead>
                        <tr>
                           <th>Attribute</th>
                           <th>Section</th>
                           <th>Java SE</th>
                           <th><code class="literal">class</code> file
                           </th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td><code class="literal">ConstantValue</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.2" title="4.7.2.&nbsp;The ConstantValue Attribute">&sect;4.7.2</a></td>
                           <td>1.0.2</td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Code</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a></td>
                           <td>1.0.2</td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">StackMapTable</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.4" title="4.7.4.&nbsp;The StackMapTable Attribute">&sect;4.7.4</a></td>
                           <td>6</td>
                           <td>50.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Exceptions</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.5" title="4.7.5.&nbsp;The Exceptions Attribute">&sect;4.7.5</a></td>
                           <td>1.0.2</td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">InnerClasses</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.6" title="4.7.6.&nbsp;The InnerClasses Attribute">&sect;4.7.6</a></td>
                           <td>1.1</td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">EnclosingMethod</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.7" title="4.7.7.&nbsp;The EnclosingMethod Attribute">&sect;4.7.7</a></td>
                           <td>5.0</td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Synthetic</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.8" title="4.7.8.&nbsp;The Synthetic Attribute">&sect;4.7.8</a></td>
                           <td>1.1</td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Signature</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.9" title="4.7.9.&nbsp;The Signature Attribute">&sect;4.7.9</a></td>
                           <td>5.0</td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">SourceFile</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.10" title="4.7.10.&nbsp;The SourceFile Attribute">&sect;4.7.10</a></td>
                           <td>1.0.2</td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">SourceDebugExtension</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.11" title="4.7.11.&nbsp;The SourceDebugExtension Attribute">&sect;4.7.11</a></td>
                           <td>5.0</td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">LineNumberTable</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.12" title="4.7.12.&nbsp;The LineNumberTable Attribute">&sect;4.7.12</a></td>
                           <td>1.0.2</td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">LocalVariableTable</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.13" title="4.7.13.&nbsp;The LocalVariableTable Attribute">&sect;4.7.13</a></td>
                           <td>1.0.2</td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">LocalVariableTypeTable</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.14" title="4.7.14.&nbsp;The LocalVariableTypeTable Attribute">&sect;4.7.14</a></td>
                           <td>5.0</td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">Deprecated</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.15" title="4.7.15.&nbsp;The Deprecated Attribute">&sect;4.7.15</a></td>
                           <td>1.1</td>
                           <td>45.3</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.16" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations attribute">&sect;4.7.16</a></td>
                           <td>5.0</td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeInvisibleAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.17" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations attribute">&sect;4.7.17</a></td>
                           <td>5.0</td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeVisibleParameterAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.18" title="4.7.18.&nbsp;The RuntimeVisibleParameterAnnotations attribute">&sect;4.7.18</a></td>
                           <td>5.0</td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">RuntimeInvisibleParameterAnnotations</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.19" title="4.7.19.&nbsp;The RuntimeInvisibleParameterAnnotations attribute">&sect;4.7.19</a></td>
                           <td>5.0</td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">AnnotationDefault</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.20" title="4.7.20.&nbsp;The AnnotationDefault attribute">&sect;4.7.20</a></td>
                           <td>5.0</td>
                           <td>49.0</td>
                        </tr>
                        <tr>
                           <td><code class="literal">BootstrapMethods</code></td>
                           <td><a class="xref" href="jvms-4.html#jvms-4.7.21" title="4.7.21.&nbsp;The BootstrapMethods attribute">&sect;4.7.21</a></td>
                           <td>7</td>
                           <td>51.0</td>
                        </tr>
                     </tbody>
                  </table>
               </div>
            </div><br class="table-break"><div class="section" title="4.7.1.&nbsp;Defining and Naming New Attributes">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.1"></a>4.7.1.&nbsp;Defining and Naming New Attributes
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.1-100"></a>Compilers are permitted to
                  define and emit <code class="literal">class</code> files containing new attributes in the
                  <code class="literal">attributes</code> tables of <code class="literal">class</code> file structures. Java Virtual Machine implementations
                  are permitted to recognize and use new attributes found in the
                  <code class="literal">attributes</code> tables of <code class="literal">class</code> file structures. However, any attribute
                  not defined as part of this Java Virtual Machine specification must not affect the
                  semantics of class or interface types. Java Virtual Machine implementations are
                  required to silently ignore attributes they do not recognize.
               </p>
               <p class="norm"><a name="jvms-4.7.1-110"></a>For instance, defining a new
                  attribute to support vendor-specific debugging is permitted. Because
                  Java Virtual Machine implementations are required to ignore attributes they do not
                  recognize, <code class="literal">class</code> files intended for that particular Java Virtual Machine
                  implementation will be usable by other implementations even if those
                  implementations cannot make use of the additional debugging
                  information that the <code class="literal">class</code> files contain.
               </p>
               <p class="norm"><a name="jvms-4.7.1-120"></a>Java Virtual Machine implementations are
                  specifically prohibited from throwing an exception or otherwise
                  refusing to use <code class="literal">class</code> files simply because of the presence of some
                  new attribute. Of course, tools operating on <code class="literal">class</code> files may not run
                  correctly if given <code class="literal">class</code> files that do not contain all the
                  attributes they require.
               </p>
               <p class="norm"><a name="jvms-4.7.1-130"></a>Two attributes that are
                  intended to be distinct, but that happen to use the same attribute
                  name and are of the same length, will conflict on implementations that
                  recognize either attribute. Attributes defined other than in this
                  specification must have names chosen according to the package naming
                  convention described in <em class="citetitle">The Java Language Specification, Java SE 7 Edition</em> (JLS &sect;6.1).
               </p>
               <p class="norm"><a name="jvms-4.7.1-140"></a>Future versions of this
                  specification may define additional attributes.
               </p>
            </div>
            <div class="section" title="4.7.2.&nbsp;The ConstantValue Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.2"></a>4.7.2.&nbsp;The <code class="literal">ConstantValue</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.2-100"></a>The <code class="literal">ConstantValue</code>
                  attribute is a fixed-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">field_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>). A <code class="literal">ConstantValue</code>
                  attribute represents the value of a constant field. There can be no
                  more than one <code class="literal">ConstantValue</code> attribute in the <code class="literal">attributes</code> table of a
                  given <code class="literal">field_info</code> structure. If the field is static (that is, the
                  <code class="literal">ACC_STATIC</code> flag (<a class="xref" href="jvms-4.html#jvms-4.5-200-A.1" title="Table&nbsp;4.4.&nbsp;Field access and property flags">Table&nbsp;4.4</a>) in the
                  <code class="literal">access_flags</code> item of the <code class="literal">field_info</code> structure is set) then the
                  constant field represented by the <code class="literal">field_info</code> structure is assigned
                  the value referenced by its <code class="literal">ConstantValue</code> attribute as part of the
                  initialization of the class or interface declaring the constant field
                  (<a class="xref" href="jvms-5.html#jvms-5.5" title="5.5.&nbsp;Initialization">&sect;5.5</a>). This occurs prior to the invocation of
                  the class or interface initialization method
                  (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) of that class or interface.
               </p>
               <p class="norm"><a name="jvms-4.7.2-110"></a>If a <code class="literal">field_info</code> structure
                  representing a non-static field has a <code class="literal">ConstantValue</code> attribute, then
                  that attribute must silently be ignored. Every Java Virtual Machine implementation
                  must recognize <code class="literal">ConstantValue</code> attributes.
               </p>
               <p class="norm"><a name="jvms-4.7.2-200"></a>The <code class="literal">ConstantValue</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.2-210"></a><pre class="screen">
ConstantValue_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 constantvalue_index;
}
</pre><p class="norm"><a name="jvms-4.7.2-300"></a>The items of
                  the <code class="literal">ConstantValue_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.2-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">ConstantValue</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.2-300-B"></a>The value of
                                 the <code class="literal">attribute_length</code> item of a
                                 <code class="literal">ConstantValue_attribute</code> structure must be
                                 2.
                        </p>
                     </dd>
                     <dt><span class="term">constantvalue_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.2-300-C"></a>The value of the
                                 <code class="literal">constantvalue_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index gives the constant value represented by this
                                 attribute. The <code class="literal">constant_pool</code> entry must be of a type
                                 appropriate to the field, as shown by
                                 <a class="xref" href="jvms-4.html#jvms-4.7.2-300-C.1" title="Table&nbsp;4.7.&nbsp;Constant value attribute types">Table&nbsp;4.7</a>.
                        </p>
                        <div class="table"><a name="jvms-4.7.2-300-C.1"></a><p class="title"><b>Table&nbsp;4.7.&nbsp;Constant value attribute types</b></p>
                           <div class="table-contents">
                              <table summary="Constant value attribute types" border="1">
                                 <colgroup>
                                    <col>
                                    <col>
                                 </colgroup>
                                 <thead>
                                    <tr>
                                       <th>Field Type</th>
                                       <th>Entry Type</th>
                                    </tr>
                                 </thead>
                                 <tbody>
                                    <tr>
                                       <td><code class="literal">long</code></td>
                                       <td><code class="literal">CONSTANT_Long</code></td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">float</code></td>
                                       <td><code class="literal">CONSTANT_Float</code></td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">double</code></td>
                                       <td><code class="literal">CONSTANT_Double</code></td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">int</code>, <code class="literal">short</code>, <code class="literal">char</code>, <code class="literal">byte</code>, <code class="literal">boolean</code></td>
                                       <td><code class="literal">CONSTANT_Integer</code></td>
                                    </tr>
                                    <tr>
                                       <td><code class="literal">String</code></td>
                                       <td><code class="literal">CONSTANT_String</code></td>
                                    </tr>
                                 </tbody>
                              </table>
                           </div>
                        </div><br class="table-break"></dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.3.&nbsp;The Code Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.3"></a>4.7.3.&nbsp;The <code class="literal">Code</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.3-100"></a>The <code class="literal">Code</code> attribute is a
                  variable-length attribute in the <code class="literal">attributes</code> table of a <code class="literal">method_info</code>
                  (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>) structure. A <code class="literal">Code</code> attribute contains
                  the Java Virtual Machine instructions and auxiliary information for a single method,
                  instance initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), or class
                  or interface initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>). Every
                  Java Virtual Machine implementation must recognize <code class="literal">Code</code> attributes. If the method
                  is either <code class="literal">native</code> or <code class="literal">abstract</code>, its <code class="literal">method_info</code> structure must not
                  have a <code class="literal">Code</code> attribute. Otherwise, its <code class="literal">method_info</code> structure must
                  have exactly one <code class="literal">Code</code> attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.3-200"></a>The <code class="literal">Code</code> attribute has the
                  following format:
               </p><a name="jvms-4.7.3-210"></a><pre class="screen">
Code_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 max_stack;
    u2 max_locals;
    u4 code_length;
    u1 code[code_length];
    u2 exception_table_length;
    {   u2 start_pc;
        u2 end_pc;
        u2 handler_pc;
        u2 catch_type;
    } exception_table[exception_table_length];
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
</pre><p class="norm"><a name="jvms-4.7.3-300"></a>The items of the
                  <code class="literal">Code_attribute</code> structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">Code</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">max_stack</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-C"></a>The value of the
                                 <code class="literal">max_stack</code> item gives the maximum depth of the
                                  operand stack of this method (<a class="xref" href="jvms-2.html#jvms-2.6.2" title="2.6.2.&nbsp;Operand Stacks">&sect;2.6.2</a>) at
                                  any point during execution of the method.
                        </p>
                     </dd>
                     <dt><span class="term">max_locals</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-D"></a>The value of the
                                 <code class="literal">max_locals</code> item gives the number of local
                                 variables in the local variable array allocated upon invocation
                                 of this method (<a class="xref" href="jvms-2.html#jvms-2.6.1" title="2.6.1.&nbsp;Local Variables">&sect;2.6.1</a>), including the
                                 local variables used to pass parameters to the method on its
                                 invocation.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-D.1"></a>The greatest local
                                 variable index for a value of type <code class="literal">long</code> or <code class="literal">double</code> is
                                 <code class="literal">max_locals - 2</code>. The greatest local variable
                                 index for a value of any other type is <code class="literal">max_locals -
                                    1</code>.
                        </p>
                     </dd>
                     <dt><span class="term">code_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-E"></a>The value of the
                                 <code class="literal">code_length</code> item gives the number of bytes in
                                 the <code class="literal">code</code> array for this method. The value of
                                 <code class="literal">code_length</code> must be greater than zero; the
                                 <code class="literal">code</code> array must not be empty.
                        </p>
                     </dd>
                     <dt><span class="term">code[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-F"></a>The <code class="literal">code</code> array
                                 gives the actual bytes of Java Virtual Machine code that implement the
                                 method.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-F.1"></a>When
                                 the <code class="literal">code</code> array is read into memory on a
                                 byte-addressable machine, if the first byte of the array is
                                 aligned on a 4-byte boundary, the <span class="emphasis"><em>tableswitch</em></span> and
                                 <span class="emphasis"><em>lookupswitch</em></span> 32-bit offsets will be 4-byte aligned. (Refer to
                                 the descriptions of those instructions for more information on
                                 the consequences of <code class="literal">code</code> array
                                 alignment.)
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-F.2"></a>The detailed
                                 constraints on the contents of the <code class="literal">code</code> array
                                 are extensive and are given in a separate section
                                 (<a class="xref" href="jvms-4.html#jvms-4.9" title="4.9.&nbsp;Constraints on Java Virtual Machine code">&sect;4.9</a>).
                        </p>
                     </dd>
                     <dt><span class="term">exception_table_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-G"></a>The value of the
                                 <code class="literal">exception_table_length</code> item gives the number
                                 of entries in the <code class="literal">exception_table</code>
                                 table.
                        </p>
                     </dd>
                     <dt><span class="term">exception_table[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-H"></a>Each entry in the
                                 <code class="literal">exception_table</code> array describes one exception
                                 handler in the <code class="literal">code</code> array. The order of the handlers in
                                 the <code class="literal">exception_table</code> array is significant
                                 (<a class="xref" href="jvms-2.html#jvms-2.10" title="2.10.&nbsp;Exceptions">&sect;2.10</a>).
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-H.1"></a>Each
                                 <code class="literal">exception_table</code> entry contains the following
                                 four items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">start_pc, end_pc</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-1"></a>The values
                                    	    of the two items <code class="literal">start_pc</code>
                                    	    and <code class="literal">end_pc</code> indicate the ranges in the
                                    	    <code class="literal">code</code> array at which the exception handler is active. The
                                    	    value of <code class="literal">start_pc</code> must be a valid index
                                    	    into the <code class="literal">code</code> array of the opcode of an instruction. The
                                    	    value of <code class="literal">end_pc</code> either must be a valid
                                    	    index into the <code class="literal">code</code> array of the opcode of an
                                    	    instruction or must be equal
                                    	    to <code class="literal">code_length</code>, the length of the
                                    	    <code class="literal">code</code> array. The value of <code class="literal">start_pc</code>
                                    	    must be less than the value
                                    	    of <code class="literal">end_pc</code>.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-1.1"></a>The
                                    	    <code class="literal">start_pc</code> is inclusive
                                    	    and <code class="literal">end_pc</code> is exclusive; that is, the
                                    	    exception handler must be active while the program counter
                                    	    is within the interval
                                    	    [<code class="literal">start_pc</code>, <code class="literal">end_pc</code>).
                                 </p>
                                 <p class="note">The fact that <code class="literal">end_pc</code>
                                    	    is exclusive is a historical mistake in the design of the
                                    	    Java Virtual Machine: if the Java Virtual Machine code for a method is exactly 65535
                                    	    bytes long and ends with an instruction that is 1 byte
                                    	    long, then that instruction cannot be protected by an
                                    	    exception handler. A compiler writer can work around this
                                    	    bug by limiting the maximum size of the generated Java Virtual Machine
                                    	    code for any method, instance initialization method, or
                                    	    static initializer (the size of any code array) to 65534
                                    	    bytes.
                                 </p>
                              </dd>
                              <dt><span class="term">handler_pc</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-2"></a>The value
                                    	    of the <code class="literal">handler_pc</code> item indicates the
                                    	    start of the exception handler. The value of the item must
                                    	    be a valid index into the <code class="literal">code</code> array and must be the
                                    	    index of the opcode of an instruction.
                                 </p>
                              </dd>
                              <dt><span class="term">catch_type</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-3"></a>If the
                                    	    value of the <code class="literal">catch_type</code> item is
                                    	    nonzero, it must be a valid index into the <code class="literal">constant_pool</code>
                                    	    table. The <code class="literal">constant_pool</code> entry at that index must be a
                                    	    <code class="literal">CONSTANT_Class_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) representing a class of
                                    	    exceptions that this exception handler is designated to
                                    	    catch. The exception handler will be called only if the
                                    	    thrown exception is an instance of the given class or one
                                    	    of its subclasses.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.3-300-H.1-3.1"></a>If the
                                    	    value of the <code class="literal">catch_type</code> item is zero,
                                    	    this exception handler is called for all exceptions. This
                                    	    is used to implement <code class="literal">finally</code>
                                    	    (<a class="xref" href="jvms-3.html#jvms-3.13" title="3.13.&nbsp;Compiling finally">&sect;3.13</a>).
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                     <dt><span class="term">attributes_count</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-I"></a>The value of the
                                 <code class="literal">attributes_count</code> item indicates the number of
                                 attributes of the <code class="literal">Code</code> attribute.
                        </p>
                     </dd>
                     <dt><span class="term">attributes[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.3-300-J"></a>Each value of the
                                 <code class="literal">attributes</code> table must be an attribute structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.7" title="4.7.&nbsp;Attributes">&sect;4.7</a>). A <code class="literal">Code</code> attribute can have any
                                 number of optional attributes associated with it.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-J.1"></a>The only
                                 attributes defined by this specification as appearing in the
                                 <code class="literal">attributes</code> table of a <code class="literal">Code</code> attribute are the
                                 <code class="literal">LineNumberTable</code> (<a class="xref" href="jvms-4.html#jvms-4.7.12" title="4.7.12.&nbsp;The LineNumberTable Attribute">&sect;4.7.12</a>),
                                 <code class="literal">LocalVariableTable</code> (<a class="xref" href="jvms-4.html#jvms-4.7.13" title="4.7.13.&nbsp;The LocalVariableTable Attribute">&sect;4.7.13</a>),
                                 <code class="literal">LocalVariableTypeTable</code> (<a class="xref" href="jvms-4.html#jvms-4.7.14" title="4.7.14.&nbsp;The LocalVariableTypeTable Attribute">&sect;4.7.14</a>), and
                                 <code class="literal">StackMapTable</code> (<a class="xref" href="jvms-4.html#jvms-4.7.4" title="4.7.4.&nbsp;The StackMapTable Attribute">&sect;4.7.4</a>)
                                 attributes.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-J.2"></a>If a Java Virtual Machine
                                 implementation recognizes <code class="literal">class</code> files whose version number is
                                 50.0 or above, it must recognize and correctly read
                                 <code class="literal">StackMapTable</code> (<a class="xref" href="jvms-4.html#jvms-4.7.4" title="4.7.4.&nbsp;The StackMapTable Attribute">&sect;4.7.4</a>) attributes found
                                 in the <code class="literal">attributes</code> table of a <code class="literal">Code</code> attribute of a <code class="literal">class</code>
                                 file whose version number is 50.0 or above.
                        </p>
                        <p class="norm"><a name="jvms-4.7.3-300-J.3"></a>A Java Virtual Machine
                                 implementation is required to silently ignore any or all
                                 attributes in the <code class="literal">attributes</code> table of a <code class="literal">Code</code> attribute that
                                 it does not recognize. Attributes not defined in this
                                 specification are not allowed to affect the semantics of the
                                 <code class="literal">class</code> file, but only to provide additional descriptive
                                 information (<a class="xref" href="jvms-4.html#jvms-4.7.1" title="4.7.1.&nbsp;Defining and Naming New Attributes">&sect;4.7.1</a>).
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.4.&nbsp;The StackMapTable Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.4"></a>4.7.4.&nbsp;The <code class="literal">StackMapTable</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.4-100"></a>The <code class="literal">StackMapTable</code>
                  attribute is a variable-length attribute in the <code class="literal">attributes</code> table of
                  a <code class="literal">Code</code> (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>) attribute. This attribute is
                  used during the process of verification by type checking
                  (<a class="xref" href="jvms-4.html#jvms-4.10.1" title="4.10.1.&nbsp;Verification by Type Checking">&sect;4.10.1</a>). A method's <code class="literal">Code</code> attribute may have
                  at most one <code class="literal">StackMapTable</code> attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.4-110"></a>A <code class="literal">StackMapTable</code> attribute
                  consists of zero or more <span class="emphasis"><em>stack map frames</em></span>. Each
                  stack map frame specifies (either explicitly or implicitly) a bytecode
                  offset, the verification types (<a class="xref" href="jvms-4.html#jvms-4.10.1.2" title="4.10.1.2.&nbsp;Verification Type System">&sect;4.10.1.2</a>) for
                  the local variables, and the verification types for the operand
                  stack.
               </p>
               <p class="norm"><a name="jvms-4.7.4-120"></a>The type checker deals with
                  and manipulates the expected types of a method's local variables and
                  operand stack. Throughout this section,
                  a <span class="emphasis"><em>location</em></span> refers to either a single local
                  variable or to a single operand stack entry.
               </p>
               <p class="norm"><a name="jvms-4.7.4-130"></a>We will use the
                  terms <span class="emphasis"><em>stack map frame</em></span> and <span class="emphasis"><em>type
                        state</em></span> interchangeably to describe a mapping from locations
                  in the operand stack and local variables of a method to verification
                  types. We will usually use the term <span class="emphasis"><em>stack map
                        frame</em></span> when such a mapping is provided in the <code class="literal">class</code> file,
                  and the term <span class="emphasis"><em>type state</em></span> when the mapping is used
                  by the type checker.
               </p>
               <p class="norm"><a name="jvms-4.7.4-140"></a>In a <code class="literal">class</code> file whose
                  version number is greater than or equal to 50.0, if a method's <code class="literal">Code</code>
                  attribute does not have a <code class="literal">StackMapTable</code> attribute, it has an
                  <span class="emphasis"><em>implicit stack map attribute</em></span>. This implicit stack
                  map attribute is equivalent to a <code class="literal">StackMapTable</code> attribute with
                  <code class="literal">number_of_entries</code> equal to zero.
               </p>
               <p class="norm"><a name="jvms-4.7.4-200"></a>The <code class="literal">StackMapTable</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.4-210"></a><pre class="screen">
StackMapTable_attribute {
    u2              attribute_name_index;
    u4              attribute_length;
    u2              number_of_entries;
    stack_map_frame entries[number_of_entries];
}
</pre><p class="norm"><a name="jvms-4.7.4-300"></a>The items of the
                  <code class="literal">StackMapTable_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.4-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">StackMapTable</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.4-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">number_of_entries</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.4-300-C"></a>The value of the
                                 <code class="literal">number_of_entries</code> item gives the number of
                                 <code class="literal">stack_map_frame</code> entries in
                                 the <code class="literal">entries</code> table.
                        </p>
                     </dd>
                     <dt><span class="term">entries</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.4-300-D"></a>The <code class="literal">entries</code> array
                                 gives the method's <code class="literal">stack_map_frame</code>
                                 structures.
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="norm"><a name="jvms-4.7.4-310"></a>Each <code class="literal">stack_map_frame</code>
                  structure specifies the type state at a particular bytecode
                  offset. Each frame type specifies (explicitly or implicitly) a value,
                  <code class="literal">offset_delta</code>, that is used to calculate the actual
                  bytecode offset at which a frame applies. The bytecode offset at which
                  a frame applies is calculated by adding <code class="literal">offset_delta +
                     1</code> to the bytecode offset of the previous frame, unless the
                  previous frame is the initial frame of the method, in which case the
                  bytecode offset is <code class="literal">offset_delta</code>.
               </p>
               <p class="note">By using an offset delta rather than the actual
                  bytecode offset we ensure, by definition, that stack map frames are in
                  the correctly sorted order. Furthermore, by consistently using the
                  formula <code class="literal">offset_delta + 1</code> for all explicit frames,
                  we guarantee the absence of duplicates.
               </p>
               <p class="norm"><a name="jvms-4.7.4-320"></a>We say that an instruction
                  in the bytecode has a corresponding stack map frame if the instruction
                  starts at offset <span class="emphasis"><em>i</em></span> in the <code class="literal">code</code> array of a <code class="literal">Code</code> attribute, and
                  the <code class="literal">Code</code> attribute has a <code class="literal">StackMapTable</code> attribute whose entries
                  array has a <code class="literal">stack_map_frame</code> structure that applies
                  at bytecode offset <span class="emphasis"><em>i</em></span>.
               </p>
               <p class="norm"><a name="jvms-4.7.4-400"></a>The <code class="literal">stack_map_frame</code>
                  structure consists of a one-byte tag followed by zero or more bytes,
                  giving more information, depending upon the tag.
               </p>
               <p class="norm"><a name="jvms-4.7.4-410"></a>A stack map frame may belong
                  to one of several <span class="emphasis"><em>frame types</em></span>:
               </p><a name="jvms-4.7.4-420"></a><pre class="screen">
union stack_map_frame {
    same_frame;
    same_locals_1_stack_item_frame;
    same_locals_1_stack_item_frame_extended;
    chop_frame;
    same_frame_extended;
    append_frame;
    full_frame;
}
</pre><p class="norm"><a name="jvms-4.7.4-430"></a>All frame types, even
                  <code class="literal">full_frame</code>, rely on the previous frame for some of
                  their semantics. This raises the question of what is the very first
                  frame? The initial frame is implicit, and computed from the method
                  descriptor. (See the Prolog
                  predicate <code class="literal">methodInitialStackFrame</code>
                  (<a class="xref" href="jvms-4.html#jvms-4.10.1.6" title="4.10.1.6.&nbsp;Type Checking Methods with Code">&sect;4.10.1.6</a>).)
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-420-A"></a>The frame type
                               <code class="literal">same_frame</code> is represented by tags in the range
                               [0-63]. If the frame type is <code class="literal">same_frame</code>, it
                               means the frame has exactly the same locals as the previous stack
                               map frame and that the number of stack items is zero. The
                               <code class="literal">offset_delta</code> value for the frame is the value
                               of the tag item, <code class="literal">frame_type</code>.
                        </p><a name="jvms-4.7.4-420-A.1"></a><pre class="screen">
same_frame {
    u1 frame_type = SAME; /* 0-63 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-420-B"></a>The frame type
                               <code class="literal">same_locals_1_stack_item_frame</code> is represented
                               by tags in the range [64, 127]. If the frame_type is
                               <code class="literal">same_locals_1_stack_item_frame</code>, it means the
                               frame has exactly the same locals as the previous stack map frame
                               and that the number of stack items is
                               1. The <code class="literal">offset_delta</code> value for the frame is the
                               value <code class="literal">(frame_type - 64)</code>. There is a
                               <code class="literal">verification_type_info</code> following
                               the <code class="literal">frame_type</code> for the one stack item.
                        </p><a name="jvms-4.7.4-420-B.1"></a><pre class="screen">
same_locals_1_stack_item_frame {
    u1 frame_type = SAME_LOCALS_1_STACK_ITEM; /* 64-127 */
    verification_type_info stack[1];
}
</pre><p class="norm"><a name="jvms-4.7.4-420-B.2"></a>Tags in the range
                               [128-246] are reserved for future use.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-420-C"></a>The frame type
                               <code class="literal">same_locals_1_stack_item_frame_extended</code> is
                               represented by the tag 247. The frame type
                               <code class="literal">same_locals_1_stack_item_frame_extended</code>
                               indicates that the frame has exactly the same locals as the
                               previous stack map frame and that the number of stack items is
                               1. The <code class="literal">offset_delta</code> value for the frame is
                               given explicitly. There is
                               a <code class="literal">verification_type_info</code> following the
                               <code class="literal">frame_type</code> for the one stack item.
                        </p><a name="jvms-4.7.4-420-C.1"></a><pre class="screen">
same_locals_1_stack_item_frame_extended {
    u1 frame_type = SAME_LOCALS_1_STACK_ITEM_EXTENDED; /* 247 */
    u2 offset_delta;
    verification_type_info stack[1];
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-420-D"></a>The frame type
                               <code class="literal">chop_frame</code> is represented by tags in the range
                               [248-250]. If the <code class="literal">frame_type</code>
                               is <code class="literal">chop_frame</code>, it means that the operand stack
                               is empty and the current locals are the same as the locals in the
                               previous frame, except that the <span class="emphasis"><em>k</em></span> last locals are absent. The
                               value of <span class="emphasis"><em>k</em></span> is given by the formula <code class="literal">251 -
                                  frame_type</code>.
                        </p><a name="jvms-4.7.4-420-D.1"></a><pre class="screen">
chop_frame {
    u1 frame_type = CHOP; /* 248-250 */
    u2 offset_delta;
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-420-E"></a>The frame type
                               <code class="literal">same_frame_extended</code> is represented by the tag
                               value 251. If the frame type
                               is <code class="literal">same_frame_extended</code>, it means the frame has
                               exactly the same locals as the previous stack map frame and that
                               the number of stack items is zero.
                        </p><a name="jvms-4.7.4-420-E.1"></a><pre class="screen">
same_frame_extended {
    u1 frame_type = SAME_FRAME_EXTENDED; /* 251 */
    u2 offset_delta;
}
   </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-420-F"></a>The frame type
                               <code class="literal">append_frame</code> is represented by tags in the
                               range [252-254]. If the <code class="literal">frame_type</code>
                               is <code class="literal">append_frame</code>, it means that the operand
                               stack is empty and the current locals are the same as the locals
                               in the previous frame, except that <span class="emphasis"><em>k</em></span> additional locals are
                               defined. The value of <span class="emphasis"><em>k</em></span> is given by the
                               formula <code class="literal">frame_type - 251</code>.
                        </p><a name="jvms-4.7.4-420-F.1"></a><pre class="screen">
append_frame {
    u1 frame_type = APPEND; /* 252-254 */
    u2 offset_delta;
    verification_type_info locals[frame_type - 251];
}
    </pre><p class="norm"><a name="jvms-4.7.4-420-F.2"></a>The 0th entry in
                               <code class="literal">locals</code> represents the type of the first
                               additional local variable. If <code class="literal">locals[M]</code>
                               represents local variable <code class="literal">N</code>,
                               then <code class="literal">locals[M+1]</code> represents local
                               variable <code class="literal">N+1</code> if <code class="literal">locals[M]</code> is one of:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-F.2-1"></a><code class="literal">Top_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-F.2-2"></a><code class="literal">Integer_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-F.2-3"></a><code class="literal">Float_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-F.2-4"></a><code class="literal">Null_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-F.2-5"></a><code class="literal">UninitializedThis_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-F.2-6"></a><code class="literal">Object_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-F.2-7"></a><code class="literal">Uninitialized_variable_info</code></p>
                              </li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.7.4-420-F.3"></a>Otherwise
                               <code class="literal">locals[M+1]</code> represents local
                               variable <code class="literal">N+2</code>.
                        </p>
                        <p class="norm-error"><a name="jvms-4.7.4-420-F.4"></a>It
                               is an error if, for any index
                               <span class="emphasis"><em>i</em></span>, <code class="literal">locals[<span class="emphasis"><em>i</em></span>]</code> represents a local
                               variable whose index is greater than the maximum number of local
                               variables for the method.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-420-G"></a>The frame type
                               <code class="literal">full_frame</code> is represented by the tag value
                               255.
                        </p><a name="jvms-4.7.4-420-G.1"></a><pre class="screen">
full_frame {
    u1 frame_type = FULL_FRAME; /* 255 */
    u2 offset_delta;
    u2 number_of_locals;
    verification_type_info locals[number_of_locals];
    u2 number_of_stack_items;
    verification_type_info stack[number_of_stack_items];
}
    </pre><p class="norm"><a name="jvms-4.7.4-420-G.2"></a>The 0th entry in
                               <code class="literal">locals</code> represents the type of local variable
                               0. If <code class="literal">locals[M]</code> represents local
                               variable <code class="literal">N</code>, then <code class="literal">locals[M+1]</code>
                               represents local variable <code class="literal">N+1</code>
                               if <code class="literal">locals[M]</code> is one of:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.2-1"></a><code class="literal">Top_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.2-2"></a><code class="literal">Integer_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.2-3"></a><code class="literal">Float_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.2-4"></a><code class="literal">Null_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.2-5"></a><code class="literal">UninitializedThis_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.2-6"></a><code class="literal">Object_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.2-7"></a><code class="literal">Uninitialized_variable_info</code></p>
                              </li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.7.4-420-G.3"></a>Otherwise
                               <code class="literal">locals[M+1]</code> represents local
                               variable <code class="literal">N+2</code>.
                        </p>
                        <p class="norm-error"><a name="jvms-4.7.4-420-G.4"></a>It
                               is an error if, for any index
                               <span class="emphasis"><em>i</em></span>, <code class="literal">locals[<span class="emphasis"><em>i</em></span>]</code> represents a local
                               variable whose index is greater than the maximum number of local
                               variables for the method.
                        </p>
                        <p class="norm"><a name="jvms-4.7.4-420-G.5"></a>The 0th entry in
                               <code class="literal">stack</code> represents the type of the bottom of the
                               stack, and subsequent entries represent types of stack elements
                               closer to the top of the operand stack. We shall refer to the
                               bottom element of the stack as stack element 0, and to subsequent
                               elements as stack element 1, 2 etc. If <code class="literal">stack[M]</code>
                               represents stack element <code class="literal">N</code>,
                               then <code class="literal">stack[M+1]</code> represents stack
                               element <code class="literal">N+1</code> if
                               <code class="literal">stack[M]</code> is one of:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.5-1"></a><code class="literal">Top_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.5-2"></a><code class="literal">Integer_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.5-3"></a><code class="literal">Float_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.5-4"></a><code class="literal">Null_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.5-5"></a><code class="literal">UninitializedThis_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.5-6"></a><code class="literal">Object_variable_info</code></p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-420-G.5-7"></a><code class="literal">Uninitialized_variable_info</code></p>
                              </li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.7.4-420-G.6"></a>Otherwise,
                               <code class="literal">stack[M+1]</code> represents stack
                               element <code class="literal">N+2</code>.
                        </p>
                        <p class="norm-error"><a name="jvms-4.7.4-420-G.7"></a>It
                               is an error if, for any index
                               <span class="emphasis"><em>i</em></span>, <code class="literal">stack[<span class="emphasis"><em>i</em></span>]</code> represents a stack entry
                               whose index is greater than the maximum operand stack size for the
                               method.
                        </p>
                     </li>
                  </ul>
               </div>
               <p class="norm"><a name="jvms-4.7.4-500"></a>The <code class="literal">verification_type_info</code>
                  structure consists of a one-byte tag followed by zero or more bytes,
                  giving more information about the
                  tag. Each <code class="literal">verification_type_info</code> structure
                  specifies the verification type of one or two locations.
               </p><a name="jvms-4.7.4-510"></a><pre class="screen">
union verification_type_info {
    Top_variable_info;
    Integer_variable_info;
    Float_variable_info;
    Long_variable_info;
    Double_variable_info;
    Null_variable_info;
    UninitializedThis_variable_info;
    Object_variable_info;
    Uninitialized_variable_info;
}
</pre><div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-510-A"></a>The
                               <code class="literal">Top_variable_info</code> type indicates that the local variable has the
                               verification type <code class="literal">top</code>.
                        </p><a name="jvms-4.7.4-510-A.1"></a><pre class="screen">
Top_variable_info {
    u1 tag = ITEM_Top; /* 0 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-510-B"></a>The
                               <code class="literal">Integer_variable_info</code> type indicates that the location contains
                               the verification type <code class="literal">int</code>.
                        </p><a name="jvms-4.7.4-510-B.1"></a><pre class="screen">
Integer_variable_info {
    u1 tag = ITEM_Integer; /* 1 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-510-C"></a>The
                               <code class="literal">Float_variable_info</code> type indicates that the location contains
                               the verification type <code class="literal">float</code>.
                        </p><a name="jvms-4.7.4-510-C.1"></a><pre class="screen">
Float_variable_info {
    u1 tag = ITEM_Float; /* 2 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-510-D"></a>The
                               <code class="literal">Long_variable_info</code> type indicates that the location contains the
                               verification type <code class="literal">long</code>.
                        </p><a name="jvms-4.7.4-510-D.1"></a><pre class="screen">
Long_variable_info {
    u1 tag = ITEM_Long; /* 4 */
}
    </pre><p class="norm"><a name="jvms-4.7.4-510-D.2"></a>This structure gives
                               the contents of two locations in the operand stack or in the local
                               variable array.
                        </p>
                        <p class="norm"><a name="jvms-4.7.4-510-D.3"></a>If the location is a
                               local variable, then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-510-D.3-1"></a>It must not be
                                    	the local variable with the highest index.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-510-D.3-2"></a>The next
                                    	higher numbered local variable contains the verification type
                                    	<code class="literal">top</code>.
                                 </p>
                              </li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.7.4-510-D.4"></a>If the location is
                               an operand stack entry, then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-510-D.4-1"></a>The current
                                    	location must not be the topmost location of the operand
                                    	stack.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-510-D.4-2"></a>The next
                                    	location closer to the top of the operand stack contains the
                                    	verification type <code class="literal">top</code>.
                                 </p>
                              </li>
                           </ul>
                        </div>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-510-E"></a>The
                               <code class="literal">Double_variable_info</code> type indicates that the location contains
                               the verification type <code class="literal">double</code>.
                        </p><a name="jvms-4.7.4-510-E.1"></a><pre class="screen">
Double_variable_info {
    u1 tag = ITEM_Double; /* 3 */
}
    </pre><p class="norm"><a name="jvms-4.7.4-510-E.2"></a>This structure gives
                               the contents of two locations in the operand stack or in the local
                               variable array.
                        </p>
                        <p class="norm"><a name="jvms-4.7.4-510-E.3"></a>If the location is a
                               local variable, then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-510-E.3-1"></a>It must not be
                                    	the local variable with the highest index.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-510-E.3-2"></a>The next
                                    	higher numbered local variable contains the verification type
                                    	<code class="literal">top</code>.
                                 </p>
                              </li>
                           </ul>
                        </div>
                        <p class="norm"><a name="jvms-4.7.4-510-E.4"></a>If the location is
                               an operand stack entry, then:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-510-E.4-1"></a>The current
                                    	location must not be the topmost location of the operand
                                    	stack.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.7.4-510-E.4-2"></a>The next
                                    	location closer to the top of the operand stack contains the
                                    	verification type <code class="literal">top</code>.
                                 </p>
                              </li>
                           </ul>
                        </div>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-510-F"></a>The
                               <code class="literal">Null_variable_info</code> type indicates that location contains the
                               verification type <code class="literal">null</code>.
                        </p><a name="jvms-4.7.4-510-F.1"></a><pre class="screen">
Null_variable_info {
    u1 tag = ITEM_Null; /* 5 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-510-G"></a>The
                               <code class="literal">UninitializedThis_variable_info</code> type indicates that the location
                               contains the verification type <code class="literal">uninitializedThis</code>.
                        </p><a name="jvms-4.7.4-510-G.1"></a><pre class="screen">
UninitializedThis_variable_info {
    u1 tag = ITEM_UninitializedThis; /* 6 */
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-510-H"></a>The
                               <code class="literal">Object_variable_info</code> type indicates that the location contains
                               an instance of the class represented by the <code class="literal">CONSTANT_Class_info</code>
                               (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) structure found in the
                               <code class="literal">constant_pool</code> table at the index given by
                               <code class="literal">cpool_index</code>.
                        </p><a name="jvms-4.7.4-510-H.1"></a><pre class="screen">
Object_variable_info {
    u1 tag = ITEM_Object; /* 7 */
    u2 cpool_index;
}
    </pre></li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.7.4-510-I"></a>The
                               <code class="literal">Uninitialized_variable_info</code> type indicates that the location
                               contains the verification
                               type <code class="literal">uninitialized(offset)</code>.
                               The <code class="literal">offset</code> item indicates the offset, in the
                               <code class="literal">code</code> array of the <code class="literal">Code</code> attribute
                               (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>) that contains this <code class="literal">StackMapTable</code>
                               attribute, of the <span class="emphasis"><em>new</em></span> instruction
                               (<a class="xref" href="jvms-6.html#jvms-6.5.new" title="new">&sect;<span class="emphasis"><em>new</em></span></a>) that created the object being
                               stored in the location.
                        </p><a name="jvms-4.7.4-510-I.1"></a><pre class="screen">
Uninitialized_variable_info {
    u1 tag = ITEM_Uninitialized /* 8 */
    u2 offset;
}
    </pre></li>
                  </ul>
               </div>
            </div>
            <div class="section" title="4.7.5.&nbsp;The Exceptions Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.5"></a>4.7.5.&nbsp;The <code class="literal">Exceptions</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.5-100"></a>The <code class="literal">Exceptions</code> attribute
                  is a variable-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The <code class="literal">Exceptions</code>
                  attribute indicates which checked exceptions a method may throw. There
                  may be at most one <code class="literal">Exceptions</code> attribute in each <code class="literal">method_info</code>
                  structure.
               </p>
               <p class="norm"><a name="jvms-4.7.5-200"></a>The <code class="literal">Exceptions</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.5-210"></a><pre class="screen">
Exceptions_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 number_of_exceptions;
    u2 exception_index_table[number_of_exceptions];
}
</pre><p class="norm"><a name="jvms-4.7.5-300"></a>The items of
                  the <code class="literal">Exceptions_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.5-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be the <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">Exceptions</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.5-300-B"></a>The value of
                                 the <code class="literal">attribute_length</code> item indicates the
                                 attribute length, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">number_of_exceptions</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.5-300-C"></a>The value of the
                                 <code class="literal">number_of_exceptions</code> item indicates the
                                 number of entries in
                                 the <code class="literal">exception_index_table</code>.
                        </p>
                     </dd>
                     <dt><span class="term">exception_index_table[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.5-300-D"></a>Each value in
                                 the <code class="literal">exception_index_table</code> array must be a
                                 valid index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                                 entry referenced by each table item must be a
                                 <code class="literal">CONSTANT_Class_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>)
                                 representing a class type that this method is declared to
                                 throw.
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="note">A method should throw an exception only if at least
                  one of the following three criteria is met:
               </p>
               <div class="note">
                  <ul class="note" type="disc">
                     <li class="listitem">
                        <p class="note">The exception is an instance of <code class="literal">RuntimeException</code>
                               or one of its subclasses.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="note">The exception is an instance of <code class="literal">Error</code> or one
                               of its subclasses.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="note">The exception is an instance of one of the
                               exception classes specified in
                               the <code class="literal">exception_index_table</code> just described, or
                               one of their subclasses.
                        </p>
                     </li>
                  </ul>
               </div>
               <p class="note">These requirements are not enforced in the Java Virtual Machine;
                  they are enforced only at compile-time.
               </p>
            </div>
            <div class="section" title="4.7.6.&nbsp;The InnerClasses Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.6"></a>4.7.6.&nbsp;The <code class="literal">InnerClasses</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.6-100"></a>The <code class="literal">InnerClasses</code> attribute
                  is a variable-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). If the constant
                  pool of a class or interface <span class="type">C</span> contains a <code class="literal">CONSTANT_Class_info</code>
                  entry which represents a class or interface that is not a member of a
                  package, then <span class="type">C</span>'s <code class="literal">ClassFile</code> structure must have exactly one
                  <code class="literal">InnerClasses</code> attribute in its <code class="literal">attributes</code> table.
               </p>
               <p class="norm"><a name="jvms-4.7.6-200"></a>The <code class="literal">InnerClasses</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.6-210"></a><pre class="screen">
InnerClasses_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 number_of_classes;
    {   u2 inner_class_info_index;
        u2 outer_class_info_index;
        u2 inner_name_index;
        u2 inner_class_access_flags;
    } classes[number_of_classes];
}
</pre><p class="norm"><a name="jvms-4.7.6-300"></a>The items of
                  the <code class="literal">InnerClasses_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.6-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">InnerClasses</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.6-300-B"></a>The value of
                                 the <code class="literal">attribute_length</code> item indicates the
                                 length of the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">number_of_classes</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.6-300-C"></a>The value of the
                                 <code class="literal">number_of_classes</code> item indicates the number
                                 of entries in the <code class="literal">classes</code> array.
                        </p>
                     </dd>
                     <dt><span class="term">classes[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.6-300-D"></a>Every
                                 <code class="literal">CONSTANT_Class_info</code> entry in the <code class="literal">constant_pool</code> table which
                                 represents a class or interface <span class="type">C</span> that is not a package member
                                 must have exactly one corresponding entry in
                                 the <code class="literal">classes</code> array.
                        </p>
                        <p class="norm"><a name="jvms-4.7.6-300-D.1"></a>If a class has
                                 members that are classes or interfaces, its <code class="literal">constant_pool</code>
                                 table (and hence its <code class="literal">InnerClasses</code> attribute) must refer to
                                 each such member, even if that member is not otherwise mentioned
                                 by the class. These rules imply that a nested class or interface
                                 member will have <code class="literal">InnerClasses</code> information for each enclosing
                                 class and for each immediate member.
                        </p>
                        <p class="norm"><a name="jvms-4.7.6-300-D.2"></a>Each <code class="literal">classes</code>
                                 array entry contains the following four items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">inner_class_info_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.2-1"></a>The value
                                    	    of the <code class="literal">inner_class_info_index</code> item must
                                    	    be a valid index into the <code class="literal">constant_pool</code> table. The
                                    	    <code class="literal">constant_pool</code> entry at that index must be a
                                    	    <code class="literal">CONSTANT_Class_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) representing <span class="type">C</span>. The
                                    	    remaining items in the <code class="literal">classes</code> array
                                    	    entry give information about <span class="type">C</span>.
                                 </p>
                              </dd>
                              <dt><span class="term">outer_class_info_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.2-2"></a>If <span class="type">C</span> is
                                    	    not a member of a class or an interface (that is, if <span class="type">C</span>
                                    	    is a top-level class or interface (JLS &sect;7.6) or a local
                                    	    class (JLS &sect;14.3) or an anonymous class (JLS &sect;15.9.5)),
                                    	    the value of the <code class="literal">outer_class_info_index</code>
                                    	    item must be zero.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.2-2.1"></a>Otherwise, the value of
                                    	    the <code class="literal">outer_class_info_index</code> item must be
                                    	    a valid index into the <code class="literal">constant_pool</code> table, and the
                                    	    entry at that index must be a <code class="literal">CONSTANT_Class_info</code>
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) structure representing the
                                    	    class or interface of which <span class="type">C</span> is a member.
                                 </p>
                              </dd>
                              <dt><span class="term">inner_name_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.2-3"></a>If <span class="type">C</span> is
                                    	    anonymous (JLS &sect;15.9.5), the value of
                                    	    the <code class="literal">inner_name_index</code> item must be
                                    	    zero.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.2-3.1"></a>Otherwise, the value of
                                    	    the <code class="literal">inner_name_index</code> item must be a
                                    	    valid index into the <code class="literal">constant_pool</code> table, and the entry
                                    	    at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure that represents
                                    	    the original simple name of <span class="type">C</span>, as given in the source
                                    	    code from which this <code class="literal">class</code> file was compiled.
                                 </p>
                              </dd>
                              <dt><span class="term">inner_class_access_flags</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.6-300-D.2-4"></a>The value
                                    	    of the <code class="literal">inner_class_access_flags</code> item is
                                    	    a mask of flags used to denote access permissions to and
                                    	    properties of class or interface <span class="type">C</span> as declared in the
                                    	    source code from which this <code class="literal">class</code> file was compiled. It
                                    	    is used by a compiler to recover the original information
                                    	    when source code is not available. The flags are shown in
                                    	    <a class="xref" href="jvms-4.html#jvms-4.7.6-300-D.2-5" title="Table&nbsp;4.8.&nbsp;Nested class access and property flags">Table&nbsp;4.8</a>.
                                 </p>
                                 <div class="table"><a name="jvms-4.7.6-300-D.2-5"></a><p class="title"><b>Table&nbsp;4.8.&nbsp;Nested class access and property flags</b></p>
                                    <div class="table-contents">
                                       <table summary="Nested class access and property flags" border="1">
                                          <colgroup>
                                             <col>
                                             <col>
                                             <col>
                                          </colgroup>
                                          <thead>
                                             <tr>
                                                <th>Flag Name</th>
                                                <th>Value</th>
                                                <th>Interpretation</th>
                                             </tr>
                                          </thead>
                                          <tbody>
                                             <tr>
                                                <td><code class="literal">ACC_PUBLIC</code></td>
                                                <td>0x0001</td>
                                                <td>Marked or implicitly <code class="literal">public</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_PRIVATE</code></td>
                                                <td>0x0002</td>
                                                <td>Marked <code class="literal">private</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_PROTECTED</code></td>
                                                <td>0x0004</td>
                                                <td>Marked <code class="literal">protected</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_STATIC</code></td>
                                                <td>0x0008</td>
                                                <td>Marked or implicitly <code class="literal">static</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_FINAL</code></td>
                                                <td>0x0010</td>
                                                <td>Marked <code class="literal">final</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_INTERFACE</code></td>
                                                <td>0x0200</td>
                                                <td>Was an <code class="literal">interface</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_ABSTRACT</code></td>
                                                <td>0x0400</td>
                                                <td>Marked or implicitly <code class="literal">abstract</code> in source.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_SYNTHETIC</code></td>
                                                <td>0x1000</td>
                                                <td>Declared synthetic; not present in the source
                                                   		      code.
                                                </td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_ANNOTATION</code></td>
                                                <td>0x2000</td>
                                                <td>Declared as an annotation type.</td>
                                             </tr>
                                             <tr>
                                                <td><code class="literal">ACC_ENUM</code></td>
                                                <td>0x4000</td>
                                                <td>Declared as an <code class="literal">enum</code> type.
                                                </td>
                                             </tr>
                                          </tbody>
                                       </table>
                                    </div>
                                 </div><br class="table-break"><p class="norm"><a name="jvms-4.7.6-300-D.2-6"></a>All bits
                                    	    of the <code class="literal">inner_class_access_flags</code> item
                                    	    not assigned in <a class="xref" href="jvms-4.html#jvms-4.7.6-300-D.2-5" title="Table&nbsp;4.8.&nbsp;Nested class access and property flags">Table&nbsp;4.8</a> are
                                    	    reserved for future use. They should be set to zero in
                                    	    generated <code class="literal">class</code> files and should be ignored by Java Virtual Machine
                                    	    implementations.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                        <p class="norm"><a name="jvms-4.7.6-300-D.3"></a>If a <code class="literal">class</code> file
                           	has a version number that is greater than or equal to 51.0,
                           	and has an <code class="literal">InnerClasses</code> attribute in its <code class="literal">attributes</code> table,
                           	then for all entries in the <code class="literal">classes</code> array
                           	of the <code class="literal">InnerClasses</code> attribute, the value of the
                           	<code class="literal">outer_class_info_index</code> item must be zero if
                           	the value of the <code class="literal">inner_name_index</code> item is
                           	zero.
                        </p>
                     </dd>
                  </dl>
               </div>
               <p class="note">Oracle's Java Virtual Machine implementation does not check the
                  consistency of an <code class="literal">InnerClasses</code> attribute against a <code class="literal">class</code> file
                  representing a class or interface referenced by the attribute.
               </p>
            </div>
            <div class="section" title="4.7.7.&nbsp;The EnclosingMethod Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.7"></a>4.7.7.&nbsp;The <code class="literal">EnclosingMethod</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.7-100"></a>The <code class="literal">EnclosingMethod</code>
                  attribute is an optional fixed-length attribute in the <code class="literal">attributes</code>
                  table of a <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). A class
                  must have an <code class="literal">EnclosingMethod</code> attribute if and only if it is a local
                  class or an anonymous class. A class may have no more than one
                  <code class="literal">EnclosingMethod</code> attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.7-200"></a>The <code class="literal">EnclosingMethod</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.7-210"></a><pre class="screen">
EnclosingMethod_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 class_index;
    u2 method_index;
}
</pre><p class="norm"><a name="jvms-4.7.7-300"></a>The items of
                  the <code class="literal">EnclosingMethod_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.7-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">EnclosingMethod</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.7-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item is four.
                        </p>
                     </dd>
                     <dt><span class="term">class_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.7-300-C"></a>The value of
                                 the <code class="literal">class_index</code> item must be a valid index
                                 into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry at
                                 that index must be a <code class="literal">CONSTANT_Class_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>) structure representing the
                                 innermost class that encloses the declaration of the current
                                 class.
                        </p>
                     </dd>
                     <dt><span class="term">method_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.7-300-D"></a>If the current class
                                 is not immediately enclosed by a method or constructor, then the
                                 value of the <code class="literal">method_index</code> item must be
                                 zero.
                        </p>
                        <p class="norm"><a name="jvms-4.7.7-300-D.1"></a>Otherwise, the
                           	value of the <code class="literal">method_index</code> item must be a
                           	valid index into the <code class="literal">constant_pool</code> table. The
                           	<code class="literal">constant_pool</code> entry at that index must be a
                           	<code class="literal">CONSTANT_NameAndType_info</code> structure
                           	(<a class="xref" href="jvms-4.html#jvms-4.4.6" title="4.4.6.&nbsp;The CONSTANT_NameAndType_info Structure">&sect;4.4.6</a>) representing the name and type
                           	of a method in the class referenced by
                           	the <code class="literal">class_index</code> attribute above.
                        </p>
                        <p class="note">It is the responsibility of a Java compiler to
                           	ensure that the method identified via
                           	the <code class="literal">method_index</code> is indeed the closest
                           	lexically enclosing method of the class that contains this
                           	<code class="literal">EnclosingMethod</code> attribute.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.8.&nbsp;The Synthetic Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.8"></a>4.7.8.&nbsp;The <code class="literal">Synthetic</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.8-100"></a>The <code class="literal">Synthetic</code> attribute is
                  a fixed-length attribute in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>,
                  <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>, <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). A class
                  member that does not appear in the source code must be marked using a
                  <code class="literal">Synthetic</code> attribute, or else it must have its <code class="literal">ACC_SYNTHETIC</code> flag
                  set. The only exceptions to this requirement are compiler-generated
                  methods which are not considered implementation artifacts, namely the
                  instance initialization method representing a default constructor of
                  the Java programming language (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), the class initialization
                  method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), and
                  the <code class="literal">Enum.values()</code>
                  and <code class="literal">Enum.valueOf()</code> methods.
               </p>
               <p class="note">The <code class="literal">Synthetic</code> attribute was introduced in JDK
                  release 1.1 to support nested classes and interfaces.
               </p>
               <p class="norm"><a name="jvms-4.7.8-200"></a>The <code class="literal">Synthetic</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.8-210"></a><pre class="screen">
Synthetic_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
}
</pre><p class="norm"><a name="jvms-4.7.8-300"></a>The items of
                  the <code class="literal">Synthetic_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.8-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">Synthetic</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="noqrm"><a name="jvms-4.7.8-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item is zero.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.9.&nbsp;The Signature Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.9"></a>4.7.9.&nbsp;The <code class="literal">Signature</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.9-100"></a>The <code class="literal">Signature</code> attribute is
                  an optional fixed-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure
                  (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>, <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The <code class="literal">Signature</code> attribute records generic
                  signature information for any class, interface, constructor or member
                  whose generic signature in the Java programming language would include references to
                  type variables or parameterized types.
               </p>
               <p class="norm"><a name="jvms-4.7.9-200"></a>The <code class="literal">Signature</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.9-210"></a><pre class="screen">
Signature_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 signature_index;
}
</pre><p class="norm"><a name="jvms-4.7.9-300"></a>The items of
                  the <code class="literal">Signature_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.9-300-A"></a>The value of
                                 the <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">Signature</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.9-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item of a
                                 <code class="literal">Signature_attribute</code> structure must be
                                 2.
                        </p>
                     </dd>
                     <dt><span class="term">signature_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.9-300-C"></a>The value of the
                                 <code class="literal">signature_index</code> item must be a valid index
                                 into the <code class="literal">constant_pool</code> table. The constant pool entry at that
                                 index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing a class
                                 signature (<a class="xref" href="jvms-4.html#jvms-4.3.4" title="4.3.4.&nbsp;Signatures">&sect;4.3.4</a>) if this <code class="literal">Signature</code>
                                 attribute is an attribute of a <code class="literal">ClassFile</code> structure; a method
                                 signature if this <code class="literal">Signature</code> attribute is an attribute of a
                                 <code class="literal">method_info</code> structure; or a field type signature
                                 otherwise.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.10.&nbsp;The SourceFile Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.10"></a>4.7.10.&nbsp;The <code class="literal">SourceFile</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.10-100"></a>The <code class="literal">SourceFile</code> attribute
                  is an optional fixed-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). There can be no
                  more than one <code class="literal">SourceFile</code> attribute in the <code class="literal">attributes</code> table of a
                  given <code class="literal">ClassFile</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.10-200"></a>The <code class="literal">SourceFile</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.10-210"></a><pre class="screen">
SourceFile_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 sourcefile_index;
}
</pre><p class="norm"><a name="jvms-4.7.10-300"></a>The items of
                  the <code class="literal">SourceFile_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.10-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">SourceFile</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.10-300-B"></a>The value of
                                 the <code class="literal">attribute_length</code> item of
                                 a <code class="literal">SourceFile_attribute</code> structure must be
                                 2.
                        </p>
                     </dd>
                     <dt><span class="term">sourcefile_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.10-300-C"></a>The value of the
                                 <code class="literal">sourcefile_index</code> item must be a valid index
                                 into the <code class="literal">constant_pool</code> table. The constant pool entry at that
                                 index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing a
                                 string.
                        </p>
                        <p class="norm"><a name="jvms-4.7.10-300-C.1"></a>The string
                                 referenced by the <code class="literal">sourcefile_index</code> item will
                                 be interpreted as indicating the name of the source file from
                                 which this <code class="literal">class</code> file was compiled. It will not be interpreted
                                 as indicating the name of a directory containing the file or an
                                 absolute path name for the file; such platform-specific
                                 additional information must be supplied by the run-time
                                 interpreter or development tool at the time the file name is
                                 actually used.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.11.&nbsp;The SourceDebugExtension Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.11"></a>4.7.11.&nbsp;The <code class="literal">SourceDebugExtension</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.11-100"></a>The <code class="literal">SourceDebugExtension</code>
                  attribute is an optional attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). There can be no
                  more than one <code class="literal">SourceDebugExtension</code> attribute in the <code class="literal">attributes</code>
                  table of a given <code class="literal">ClassFile</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.11-200"></a>The <code class="literal">SourceDebugExtension</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.11-210"></a><pre class="screen">
SourceDebugExtension_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 debug_extension[attribute_length];
}
</pre><p class="norm"><a name="jvms-4.7.11-300"></a>The items of
                  the <code class="literal">SourceDebugExtension_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.11-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">SourceDebugExtension</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.11-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                        <p class="norm"><a name="jvms-4.7.11-300-B.1"></a>The value of the
                                 <code class="literal">attribute_length</code> item is thus the number of
                                 bytes in the <code class="literal">debug_extension[]</code> item.
                        </p>
                     </dd>
                     <dt><span class="term">debug_extension[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.11-300-C"></a>The <code class="literal">debug_extension</code>
                                 array holds extended debugging information which has no semantic
                                 effect on the Java Virtual Machine. The information is represented using a
                                 modified UTF-8 string (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) with no
                                 terminating zero byte.
                        </p>
                        <p class="note">Note that
                                 the <code class="literal">debug_extension</code> array may denote a string
                                 longer than that which can be represented with an instance of
                                 class <code class="literal">String</code>.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.12.&nbsp;The LineNumberTable Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.12"></a>4.7.12.&nbsp;The <code class="literal">LineNumberTable</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.12-100"></a>The <code class="literal">LineNumberTable</code>
                  attribute is an optional variable-length attribute in the <code class="literal">attributes</code>
                  table of a <code class="literal">Code</code> (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>) attribute. It may be
                  used by debuggers to determine which part of the Java Virtual Machine <code class="literal">code</code> array
                  corresponds to a given line number in the original source file.
               </p>
               <p class="norm"><a name="jvms-4.7.12-110"></a>If <code class="literal">LineNumberTable</code>
                  attributes are present in the <code class="literal">attributes</code> table of a given <code class="literal">Code</code>
                  attribute, then they may appear in any order. Furthermore, multiple
                  <code class="literal">LineNumberTable</code> attributes may together represent a given line of a
                  source file; that is, <code class="literal">LineNumberTable</code> attributes need not be
                  one-to-one with source lines.
               </p>
               <p class="norm"><a name="jvms-4.7.12-200"></a>The <code class="literal">LineNumberTable</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.12-210"></a><pre class="screen">
LineNumberTable_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 line_number_table_length;
    {   u2 start_pc;
        u2 line_number;	
    } line_number_table[line_number_table_length];
}
</pre><p class="norm"><a name="jvms-4.7.12-300"></a>The items of
                  the <code class="literal">LineNumberTable_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.12-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">LineNumberTable</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.12-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">line_number_table_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.12-300-C"></a>The value of the
                                 <code class="literal">line_number_table_length</code> item indicates the
                                 number of entries in the <code class="literal">line_number_table</code>
                                 array.
                        </p>
                     </dd>
                     <dt><span class="term">line_number_table[]</span></dt>
                     <dd>
                        <p class="nom"><a name="jvms-4.7.12-300-D"></a>Each entry in the
                                 <code class="literal">line_number_table</code> array indicates that the
                                 line number in the original source file changes at a given point
                                 in the <code class="literal">code</code> array. Each <code class="literal">line_number_table</code>
                                 entry must contain the following two items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">start_pc</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.12-300-D-1"></a>The value
                                    	    of the <code class="literal">start_pc</code> item must indicate the
                                    	    index into the <code class="literal">code</code> array at which the code for a new
                                    	    line in the original source file begins.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.12-300-D-1.1"></a>The value
                                    	    of <code class="literal">start_pc</code> must be less than the value
                                    	    of the <code class="literal">code_length</code> item of the <code class="literal">Code</code>
                                    	    attribute of which this <code class="literal">LineNumberTable</code> is an
                                    	    attribute.
                                 </p>
                              </dd>
                              <dt><span class="term">line_number</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.12-300-D-2"></a>The value
                                    	    of the <code class="literal">line_number</code> item must give the
                                    	    corresponding line number in the original source
                                    	    file.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.13.&nbsp;The LocalVariableTable Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.13"></a>4.7.13.&nbsp;The <code class="literal">LocalVariableTable</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.13-100"></a>The <code class="literal">LocalVariableTable</code>
                  attribute is an optional variable-length attribute in the <code class="literal">attributes</code>
                  table of a <code class="literal">Code</code> (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>) attribute. It may be
                  used by debuggers to determine the value of a given local variable
                  during the execution of a method.
               </p>
               <p class="norm"><a name="jvms-4.7.13-110"></a>If <code class="literal">LocalVariableTable</code>
                  attributes are present in the <code class="literal">attributes</code> table of a given <code class="literal">Code</code>
                  attribute, then they may appear in any order. There may be no more
                  than one <code class="literal">LocalVariableTable</code> attribute per local variable in the
                  <code class="literal">Code</code> attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.13-200"></a>The <code class="literal">LocalVariableTable</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.13-210"></a><pre class="screen">
LocalVariableTable_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 local_variable_table_length;
    {   u2 start_pc;
        u2 length;
        u2 name_index;
        u2 descriptor_index;
        u2 index;
    } local_variable_table[local_variable_table_length];
}
</pre><p class="norm"><a name="jvms-4.7.13-300"></a>The items of
                  the <code class="literal">LocalVariableTable_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.13-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">LocalVariableTable</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.13-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">local_variable_table_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.13-300-C"></a>The value of the
                                 <code class="literal">local_variable_table_length</code> item indicates
                                 the number of entries in
                                 the <code class="literal">local_variable_table</code> array.
                        </p>
                     </dd>
                     <dt><span class="term">local_variable_table[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.13-300-D"></a>Each entry in the
                                 <code class="literal">local_variable_table</code> array indicates a range
                                 of <code class="literal">code</code> array offsets within which a local variable has a
                                 value. It also indicates the index into the local variable array
                                 of the current frame at which that local variable can be
                                 found. Each entry must contain the following five items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">start_pc, length</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-1"></a>The given
                                    	    local variable must have a value at indices into the
                                    	    <code class="literal">code</code> array in the interval
                                    	    [<code class="literal">start_pc</code>, <code class="literal">start_pc +
                                       	    length</code>), that is,
                                    	    between <code class="literal">start_pc</code> inclusive
                                    	    and <code class="literal">start_pc + length</code> exclusive.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-1.1"></a>The value
                                    	    of <code class="literal">start_pc</code> must be a valid index into
                                    	    the <code class="literal">code</code> array of this <code class="literal">Code</code> attribute and must be the
                                    	    index of the opcode of an instruction.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-1.2"></a>The value of
                                    	    <code class="literal">start_pc + length</code> must either be a
                                    	    valid index into the <code class="literal">code</code> array of this <code class="literal">Code</code> attribute
                                    	    and be the index of the opcode of an instruction, or it
                                    	    must be the first index beyond the end of that <code class="literal">code</code>
                                    	    array.
                                 </p>
                              </dd>
                              <dt><span class="term">name_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-2"></a>The value
                                    	    of the <code class="literal">name_index</code> item must be a valid
                                    	    index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                                    	    entry at that index must contain a <code class="literal">CONSTANT_Utf8_info</code>
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing a
                                    	    valid unqualified name (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>)
                                    	    denoting a local variable.
                                 </p>
                              </dd>
                              <dt><span class="term">descriptor_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-3"></a>The value
                                    	    of the <code class="literal">descriptor_index</code> item must be a
                                    	    valid index into the <code class="literal">constant_pool</code> table. The
                                    	    <code class="literal">constant_pool</code> entry at that index must contain a
                                    	    <code class="literal">CONSTANT_Utf8_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a field
                                    	    descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>) encoding the
                                    	    type of a local variable in the source program.
                                 </p>
                              </dd>
                              <dt><span class="term">index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-4"></a>The given
                                    	    local variable must be at <code class="literal">index</code> in the
                                    	    local variable array of the current frame.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.13-300-D-4.1"></a>If the
                                    	    local variable at <code class="literal">index</code> is of type
                                    	    <code class="literal">double</code> or <code class="literal">long</code>, it occupies
                                    	    both <code class="literal">index</code> and <code class="literal">index +
                                       	    1</code>.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.14.&nbsp;The LocalVariableTypeTable Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.14"></a>4.7.14.&nbsp;The <code class="literal">LocalVariableTypeTable</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.14-100"></a>The
                  <code class="literal">LocalVariableTypeTable</code> attribute is an optional variable-length
                  attribute in the <code class="literal">attributes</code> table of a <code class="literal">Code</code>
                  (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>) attribute. It may be used by debuggers
                  to determine the value of a given local variable during the execution
                  of a method.
               </p>
               <p class="norm"><a name="jvms-4.7.14-110"></a>If <code class="literal">LocalVariableTypeTable</code>
                  attributes are present in the <code class="literal">attributes</code> table of a given <code class="literal">Code</code>
                  attribute, then they may appear in any order. There may be no more
                  than one <code class="literal">LocalVariableTypeTable</code> attribute per local variable in the
                  <code class="literal">Code</code> attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.14-120"></a>The
                  <code class="literal">LocalVariableTypeTable</code> attribute differs from the
                  <code class="literal">LocalVariableTable</code> attribute in that it provides signature
                  information rather than descriptor information. This difference is
                  only significant for variables whose type is a generic reference
                  type. Such variables will appear in both tables, while variables of
                  other types will appear only in <code class="literal">LocalVariableTable</code>.
               </p>
               <p class="norm"><a name="jvms-4.7.14-200"></a>The
                  <code class="literal">LocalVariableTypeTable</code> attribute has the following format:
               </p><a name="jvms-4.7.14-210"></a><pre class="screen">
LocalVariableTypeTable_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 local_variable_type_table_length;
    {   u2 start_pc;
        u2 length;
        u2 name_index;
        u2 signature_index;
        u2 index;
    } local_variable_type_table[local_variable_type_table_length];
}
</pre><p class="norm"><a name="jvms-4.7.14-300"></a>The items of
                  the <code class="literal">LocalVariableTypeTable_attribute</code> structure are
                  as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.14-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">LocalVariableTypeTable</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.14-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                     </dd>
                     <dt><span class="term">local_variable_type_table_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.14-300-C"></a>The value of the
                                 <code class="literal">local_variable_type_table_length</code> item
                                 indicates the number of entries in
                                 the <code class="literal">local_variable_type_table</code> array.
                        </p>
                     </dd>
                     <dt><span class="term">local_variable_type_table[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.14-300-D"></a>Each entry in the
                                 <code class="literal">local_variable_type_table</code> array indicates a
                                 range of <code class="literal">code</code> array offsets within which a local variable has
                                 a value. It also indicates the index into the local variable
                                 array of the current frame at which that local variable can be
                                 found. Each entry must contain the following five items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">start_pc, length</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-1"></a>The given
                                    	    local variable must have a value at indices into the code
                                    	    array in the interval
                                    	    [<code class="literal">start_pc</code>, <code class="literal">start_pc +
                                       	    length</code>), that is,
                                    	    between <code class="literal">start_pc</code> inclusive
                                    	    and <code class="literal">start_pc + length</code> exclusive.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-1.1"></a>The value
                                    	    of <code class="literal">start_pc</code> must be a valid index into
                                    	    the <code class="literal">code</code> array of this <code class="literal">Code</code> attribute and must be the
                                    	    index of the opcode of an instruction.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-1.2"></a>The value
                                    	    of <code class="literal">start_pc + length</code> must either be a
                                    	    valid index into the <code class="literal">code</code> array of this <code class="literal">Code</code> attribute
                                    	    and be the index of the opcode of an instruction, or it
                                    	    must be the first index beyond the end of that <code class="literal">code</code>
                                    	    array.
                                 </p>
                              </dd>
                              <dt><span class="term">name_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-2"></a>The value
                                    	    of the <code class="literal">name_index</code> item must be a valid
                                    	    index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                                    	    entry at that index must contain a <code class="literal">CONSTANT_Utf8_info</code>
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing a
                                    	    valid unqualified name (<a class="xref" href="jvms-4.html#jvms-4.2.2" title="4.2.2.&nbsp;Unqualified Names">&sect;4.2.2</a>)
                                    	    denoting a local variable.
                                 </p>
                              </dd>
                              <dt><span class="term">signature_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-3"></a>The value
                                    	    of the <code class="literal">signature_index</code> item must be a
                                    	    valid index into the <code class="literal">constant_pool</code> table. The
                                    	    <code class="literal">constant_pool</code> entry at that index must contain a
                                    	    <code class="literal">CONSTANT_Utf8_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a field type
                                    	    signature (<a class="xref" href="jvms-4.html#jvms-4.3.4" title="4.3.4.&nbsp;Signatures">&sect;4.3.4</a>) encoding the type
                                    	    of a local variable in the source program.
                                 </p>
                              </dd>
                              <dt><span class="term">index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-4"></a>The given
                                    	    local variable must be at <code class="literal">index</code> in the
                                    	    local variable array of the current frame.
                                 </p>
                                 <p class="norm"><a name="jvms-4.7.14-300-D-4.1"></a>If the
                                    	    local variable at <code class="literal">index</code> is of type
                                    	    <code class="literal">double</code> or <code class="literal">long</code>, it occupies
                                    	    both <code class="literal">index</code> and <code class="literal">index +
                                       	    1</code>.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.15.&nbsp;The Deprecated Attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.15"></a>4.7.15.&nbsp;The <code class="literal">Deprecated</code> Attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.15-100"></a>The <code class="literal">Deprecated</code> attribute
                  is an optional fixed-length attribute in the <code class="literal">attributes</code> table of a
                  <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or <code class="literal">method_info</code> structure
                  (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>, <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). A class, interface, method, or field may
                  be marked using a <code class="literal">Deprecated</code> attribute to indicate that the class,
                  interface, method, or field has been superseded.
               </p>
               <p class="norm"><a name="jvms-4.7.15-110"></a>A run-time interpreter or
                  tool that reads the <code class="literal">class</code> file format, such as a compiler, can use
                  this marking to advise the user that a superceded class, interface,
                  method, or field is being referred to. The presence of a <code class="literal">Deprecated</code>
                  attribute does not alter the semantics of a class or interface.
               </p>
               <p class="norm"><a name="jvms-4.7.15-200"></a>The <code class="literal">Deprecated</code> attribute
                  has the following format:
               </p><a name="jvms-4.7.15-210"></a><pre class="screen">
Deprecated_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
}
</pre><p class="norm"><a name="jvms-4.7.15-300"></a>The items of
                  the <code class="literal">Deprecated_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.15-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">Deprecated</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.15-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item is zero.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.16.&nbsp;The RuntimeVisibleAnnotations attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.16"></a>4.7.16.&nbsp;The <code class="literal">RuntimeVisibleAnnotations</code> attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.16-100"></a>The
                  <code class="literal">RuntimeVisibleAnnotations</code> attribute is a variable-length attribute
                  in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or
                  <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>, <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The
                  <code class="literal">RuntimeVisibleAnnotations</code> attribute records run-time-visible
                  Java programming language annotations on the corresponding class, field, or
                  method.
               </p>
               <p class="norm"><a name="jvms-4.7.16-110"></a>Each <code class="literal">ClassFile</code>,
                  <code class="literal">field_info</code>, and <code class="literal">method_info</code> structure may contain at most one
                  <code class="literal">RuntimeVisibleAnnotations</code> attribute, which records all the
                  run-time-visible Java programming language annotations on the corresponding program
                  element. The Java Virtual Machine must make these annotations available so they can
                  be returned by the appropriate reflective APIs.
               </p>
               <p class="norm"><a name="jvms-4.7.16-200"></a>The
                  <code class="literal">RuntimeVisibleAnnotations</code> attribute has the following format:
               </p><a name="jvms-4.7.16-210"></a><pre class="screen">
RuntimeVisibleAnnotations_attribute {
    u2         attribute_name_index;
    u4         attribute_length;
    u2         num_annotations;
    annotation annotations[num_annotations];
}
</pre><p class="norm"><a name="jvms-4.7.16-300"></a>The items of
                  the <code class="literal">RuntimeVisibleAnnotations_attribute</code> structure
                  are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.16-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">RuntimeVisibleAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.16-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                        <p class="norm"><a name="jvms-4.7.16-300-B.1"></a>The value of the
                                 <code class="literal">attribute_length</code> item is thus dependent on
                                 the number of run-time-visible annotations represented by the
                                 structure, and their values.
                        </p>
                     </dd>
                     <dt><span class="term">num_annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.16-300-C"></a>The value of the
                                 <code class="literal">num_annotations</code> item gives the number of
                                 run-time-visible annotations represented by the
                                 structure.
                        </p>
                        <p class="note">Note that a maximum of 65535 run-time-visible
                                 Java programming language annotations may be directly attached to a program
                                 element.
                        </p>
                     </dd>
                     <dt><span class="term">annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.16-300-D"></a>Each value of the
                                 <code class="literal">annotations</code> table represents a single
                                 run-time-visible annotation on a program element. The annotation
                                 structure has the following format:
                        </p><a name="jvms-4.7.16-300-D.1"></a><pre class="screen">
annotation {
    u2 type_index;
    u2 num_element_value_pairs;
    {   u2            element_name_index;
        element_value value;
    } element_value_pairs[num_element_value_pairs];
}
      </pre><p class="norm"><a name="jvms-4.7.16-300-D.2"></a>The items of the
                                 <code class="literal">annotation</code> structure are as follows:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">type_index</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.16-300-D.2-1"></a>The value
                                    	    of the <code class="literal">type_index</code> item must be a valid
                                    	    index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                                    	    entry at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing a
                                    	    field descriptor representing the annotation type
                                    	    corresponding to the annotation represented by this
                                    	    <code class="literal">annotation</code> structure.
                                 </p>
                              </dd>
                              <dt><span class="term">num_element_value_pairs</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.16-300-D.2-2"></a>The value
                                    	    of the <code class="literal">num_element_value_pairs</code> item
                                    	    gives the number of element-value pairs of the annotation
                                    	    represented by this <code class="literal">annotation</code>
                                    	    structure.
                                 </p>
                                 <p class="note">Note that a maximum of 65535
                                    	    element-value pairs may be contained in a single
                                    	    annotation.
                                 </p>
                              </dd>
                              <dt><span class="term">element_value_pairs</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.16-300-D.2-3"></a>Each
                                    	    value of the <code class="literal">element_value_pairs</code> table
                                    	    represents a single element-value pair in the annotation
                                    	    represented by this <code class="literal">annotation</code>
                                    	    structure. Each <code class="literal">element_value_pairs</code>
                                    	    entry contains the following two items:
                                 </p>
                                 <div class="variablelist">
                                    <dl>
                                       <dt><span class="term">element_name_index</span></dt>
                                       <dd>
                                          <p class="norm"><a name="jvms-4.7.16-300-D.2-3-1"></a>The value of
                                             		  the <code class="literal">element_name_index</code> item must
                                             		  be a valid index into the <code class="literal">constant_pool</code> table. The
                                             		  <code class="literal">constant_pool</code> entry at that index must be a
                                             		  <code class="literal">CONSTANT_Utf8_info</code> structure
                                             		  (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a valid
                                             		  field descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>) that
                                             		  denotes the name of the annotation type element
                                             		  represented by this
                                             		  <code class="literal">element_value_pairs</code> entry.
                                          </p>
                                       </dd>
                                       <dt><span class="term">value</span></dt>
                                       <dd>
                                          <p class="norm"><a name="jvms-4.7.16-300-D.2-3-2"></a>The value of
                                             		  the <code class="literal">value</code> item represents the
                                             		  value of the element-value pair represented by this
                                             		  <code class="literal">element_value_pairs</code> entry.
                                          </p>
                                       </dd>
                                    </dl>
                                 </div>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
               <div class="section" title="4.7.16.1.&nbsp;The element_value structure">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.7.16.1"></a>4.7.16.1.&nbsp;The <code class="literal">element_value</code> structure
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.7.16.1-100"></a>The <code class="literal">element_value</code>
                     structure is a discriminated union representing the value of an
                     element-value pair. It is used to represent element values in all
                     attributes that describe annotations (<code class="literal">RuntimeVisibleAnnotations</code>,
                     <code class="literal">RuntimeInvisibleAnnotations</code>, <code class="literal">RuntimeVisibleParameterAnnotations</code>,
                     and <code class="literal">RuntimeInvisibleParameterAnnotations</code>).
                  </p>
                  <p class="norm"><a name="jvms-4.7.16.1-200"></a>The <code class="literal">element_value</code>
                     structure has the following format:
                  </p><a name="jvms-4.7.16.1-210"></a><pre class="screen">
element_value {
    u1 tag;
    union {
        u2 const_value_index;

        {   u2 type_name_index;
            u2 const_name_index;
        } enum_const_value;

        u2 class_info_index;

        annotation annotation_value;

        {   u2            num_values;
            element_value values[num_values];
        } array_value;
    } value;
}
</pre><p class="norm"><a name="jvms-4.7.16.1-300"></a>The items of the
                     <code class="literal">element_value</code> structure are as follows:
                  </p>
                  <div class="variablelist">
                     <dl>
                        <dt><span class="term">tag</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.7.16.1-300-A"></a>The <code class="literal">tag</code> item
                                    indicates the type of this annotation element-value pair.
                           </p>
                           <p class="norm"><a name="jvms-4.7.16.1-300-A.1"></a>The letters
                                    <code class="literal">B</code>, <code class="literal">C</code>, <code class="literal">D</code>, <code class="literal">F</code>,
                                    <code class="literal">I</code>, <code class="literal">J</code>, <code class="literal">S</code>, and <code class="literal">Z</code>
                                    indicate a primitive type. These letters are interpreted
                                    as if they were field
                                    descriptors (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>).
                           </p>
                           <p class="norm"><a name="jvms-4.7.16.1-300-A.2"></a>The other legal
                                    values for <code class="literal">tag</code> are listed with their interpretations in
                                    <a class="xref" href="jvms-4.html#jvms-4.7.16.1-300-A.3" title="Table&nbsp;4.9.&nbsp;Interpretation of additional tag values">Table&nbsp;4.9</a>.
                           </p>
                           <div class="table"><a name="jvms-4.7.16.1-300-A.3"></a><p class="title"><b>Table&nbsp;4.9.&nbsp;Interpretation of additional tag values</b></p>
                              <div class="table-contents">
                                 <table summary="Interpretation of additional tag values" border="1">
                                    <colgroup>
                                       <col>
                                       <col>
                                    </colgroup>
                                    <thead>
                                       <tr>
                                          <th><code class="literal">tag</code> Value
                                          </th>
                                          <th>Element Type</th>
                                       </tr>
                                    </thead>
                                    <tbody>
                                       <tr>
                                          <td><code class="literal">s</code></td>
                                          <td><code class="literal">String</code></td>
                                       </tr>
                                       <tr>
                                          <td><code class="literal">e</code></td>
                                          <td>enum constant</td>
                                       </tr>
                                       <tr>
                                          <td><code class="literal">c</code></td>
                                          <td>class</td>
                                       </tr>
                                       <tr>
                                          <td><code class="literal">@</code></td>
                                          <td>annotation type</td>
                                       </tr>
                                       <tr>
                                          <td><code class="literal">[</code></td>
                                          <td>array</td>
                                       </tr>
                                    </tbody>
                                 </table>
                              </div>
                           </div><br class="table-break"></dd>
                        <dt><span class="term">value</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.7.16.1-300-B"></a>The <code class="literal">value</code> item
                                    represents the value of this annotation element. This item is a
                                    union. The <code class="literal">tag</code> item, above, determines which item of the union
                                    is to be used:
                           </p>
                           <div class="variablelist">
                              <dl>
                                 <dt><span class="term">const_value_index</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.16.1-300-B-1"></a>The
                                       	    <code class="literal">const_value_index</code> item is used if the
                                       	    <code class="literal">tag</code> item is one of <code class="literal">B</code>, <code class="literal">C</code>,
                                       	    <code class="literal">D</code>, <code class="literal">F</code>, <code class="literal">I</code>, <code class="literal">J</code>,
                                       	    <code class="literal">S</code>, <code class="literal">Z</code>, or <code class="literal">s</code>.
                                    </p>
                                    <p class="norm"><a name="jvms-4.7.16.1-300-B-1.1"></a>The
                                       	    value of the <code class="literal">const_value_index</code> item
                                       	    must be a valid index into the <code class="literal">constant_pool</code> table. The
                                       	    <code class="literal">constant_pool</code> entry at that index must be of the correct
                                       	    entry type for the field type designated by the <code class="literal">tag</code>
                                       	    item, as specified in
                                       	    <a class="xref" href="jvms-4.html#jvms-4.7.16.1-300-A.3" title="Table&nbsp;4.9.&nbsp;Interpretation of additional tag values">Table&nbsp;4.9</a>.
                                    </p>
                                 </dd>
                                 <dt><span class="term">enum_const_value</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.16.1-300-B-2"></a>The
                                       	    <code class="literal">enum_const_value</code> item is used if the
                                       	    <code class="literal">tag</code> item is <code class="literal">e</code>.
                                    </p>
                                    <p class="norm">The
                                       	    <code class="literal">enum_const_value</code> item consists of the
                                       	    following two items:
                                    </p>
                                    <div class="variablelist">
                                       <dl>
                                          <dt><span class="term">type_name_index</span></dt>
                                          <dd>
                                             <p class="norm"><a name="jvms-4.7.16.1-300-B-2-1"></a>The value of the
                                                		  <code class="literal">type_name_index</code> item must be a
                                                		  valid index into the <code class="literal">constant_pool</code> table. The
                                                		  <code class="literal">constant_pool</code> entry at that index must be a
                                                		  <code class="literal">CONSTANT_Utf8_info</code> structure
                                                		  (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing a valid
                                                		  field descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>) that
                                                		  denotes the internal form of the binary name
                                                		  (<a class="xref" href="jvms-4.html#jvms-4.2.1" title="4.2.1.&nbsp;Binary Class and Interface Names">&sect;4.2.1</a>) of the type of the
                                                		  enum constant represented by
                                                		  this <code class="literal">element_value</code>
                                                		  structure.
                                             </p>
                                          </dd>
                                          <dt><span class="term">const_name_index</span></dt>
                                          <dd>
                                             <p class="norm"><a name="jvms-4.7.16.1-300-B-2-2"></a>The value of the
                                                		  <code class="literal">const_name_index</code> item must be a
                                                		  valid index into the <code class="literal">constant_pool</code> table. The
                                                		  <code class="literal">constant_pool</code> entry at that index must be a
                                                		  <code class="literal">CONSTANT_Utf8_info</code> structure
                                                		  (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the
                                                		  simple name of the enum constant represented by
                                                		  this <code class="literal">element_value</code>
                                                		  structure.
                                             </p>
                                          </dd>
                                       </dl>
                                    </div>
                                 </dd>
                                 <dt><span class="term">class_info_index</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.16.1-300-B-3"></a>The
                                       	    <code class="literal">class_info_index</code> item is used if the
                                       	    <code class="literal">tag</code> item is <code class="literal">c</code>.
                                    </p>
                                    <p class="norm"><a name="jvms-4.7.16.1-300-B-3.1"></a>The
                                       	    <code class="literal">class_info_index</code> item must be a valid
                                       	    index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code>
                                       	    entry at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                       	    (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the
                                       	    return descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>) of the
                                       	    type that is reified by the class represented by
                                       	    this <code class="literal">element_value</code> structure.
                                    </p>
                                    <p class="note">For example, <code class="literal">V</code>
                                       	    for <code class="literal">Void.class</code>,
                                       	    <code class="literal">Ljava/lang/Object;</code> for <code class="literal">Object</code>,
                                       	    etc.
                                    </p>
                                 </dd>
                                 <dt><span class="term">annotation_value</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.16.1-300-B-4"></a>The
                                       	    <code class="literal">annotation_value</code> item is used if the
                                       	    <code class="literal">tag</code> item is <code class="literal">@</code>.
                                    </p>
                                    <p class="norm">The
                                       	    <code class="literal">element_value</code> structure represents a
                                       	    "nested" annotation.
                                    </p>
                                 </dd>
                                 <dt><span class="term">array_value</span></dt>
                                 <dd>
                                    <p class="norm"><a name="jvms-4.7.16.1-300-B-5"></a>The
                                       	     <code class="literal">array_value</code> item is used if the <code class="literal">tag</code>
                                       	     item is <code class="literal">[</code>.
                                    </p>
                                    <p class="norm">The
                                       	     <code class="literal">array_value</code> item consists of the
                                       	     following two items:
                                    </p>
                                    <div class="variablelist">
                                       <dl>
                                          <dt><span class="term">num_values</span></dt>
                                          <dd>
                                             <p class="norm"><a name="jvms-4.7.16.1-300-B-5-1"></a>The value of the
                                                		   <code class="literal">num_values</code> item gives the number
                                                		   of elements in the array-typed value represented by
                                                		   this <code class="literal">element_value</code>
                                                		   structure.
                                             </p>
                                             <p class="note">Note that a maximum of 65535
                                                		   elements are permitted in an array-typed element
                                                		   value.
                                             </p>
                                          </dd>
                                          <dt><span class="term">values</span></dt>
                                          <dd>
                                             <p class="norm"><a name="jvms-4.7.16.1-300-B-5-2"></a>Each value of the
                                                		   <code class="literal">values</code> table gives the value of
                                                		   an element of the array-typed value represented by
                                                		   this <code class="literal">element_value</code>
                                                		   structure.
                                             </p>
                                          </dd>
                                       </dl>
                                    </div>
                                 </dd>
                              </dl>
                           </div>
                        </dd>
                     </dl>
                  </div>
               </div>
            </div>
            <div class="section" title="4.7.17.&nbsp;The RuntimeInvisibleAnnotations attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.17"></a>4.7.17.&nbsp;The <code class="literal">RuntimeInvisibleAnnotations</code> attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.17-100"></a>The
                  <code class="literal">RuntimeInvisibleAnnotations</code> attribute is similar to the
                  <code class="literal">RuntimeVisibleAnnotations</code> attribute, except that the annotations
                  represented by a <code class="literal">RuntimeInvisibleAnnotations</code> attribute must not be
                  made available for return by reflective APIs, unless the Java Virtual Machine has
                  been instructed to retain these annotations via some
                  implementation-specific mechanism such as a command line flag. In the
                  absence of such instructions, the Java Virtual Machine ignores this attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.17-110"></a>The
                  <code class="literal">RuntimeInvisibleAnnotations</code> attribute is a variable-length attribute
                  in the <code class="literal">attributes</code> table of a <code class="literal">ClassFile</code>, <code class="literal">field_info</code>, or
                  <code class="literal">method_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>,
                  <a class="xref" href="jvms-4.html#jvms-4.5" title="4.5.&nbsp;Fields">&sect;4.5</a>, <a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The
                  <code class="literal">RuntimeInvisibleAnnotations</code> attribute records run-time-invisible
                  Java programming language annotations on the corresponding class, method, or
                  field.
               </p>
               <p class="norm"><a name="jvms-4.7.17-120"></a>Each <code class="literal">ClassFile</code>,
                  <code class="literal">field_info</code>, and <code class="literal">method_info</code> structure may contain at most one
                  <code class="literal">RuntimeInvisibleAnnotations</code> attribute, which records all the
                  run-time-invisible Java programming language annotations on the corresponding program
                  element.
               </p>
               <p class="norm"><a name="jvms-4.7.17-200"></a>The
                  <code class="literal">RuntimeInvisibleAnnotations</code> attribute has the following
                  format:
               </p><a name="jvms-4.7.17-210"></a><pre class="screen">
RuntimeInvisibleAnnotations_attribute {
    u2         attribute_name_index;
    u4         attribute_length;
    u2         num_annotations;
    annotation annotations[num_annotations];
}
</pre><p class="norm"><a name="jvms-4.7.17-300"></a>The items of
                  the <code class="literal">RuntimeInvisibleAnnotations_attribute</code> structure
                  are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.17-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code>
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) structure representing the string
                                 "<code class="literal">RuntimeInvisibleAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.17-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                        <p class="norm"><a name="jvms-4.7.17-300-B.1"></a>The value of the
                                 <code class="literal">attribute_length</code> item is thus dependent on
                                 the number of run-time-invisible annotations represented by the
                                 structure, and their values.
                        </p>
                     </dd>
                     <dt><span class="term">num_annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.17-300-C"></a>The value of the
                                 <code class="literal">num_annotations</code> item gives the number of
                                 run-time-invisible annotations represented by the
                                 structure.
                        </p>
                        <p class="note">Note that a maximum of 65535
                                 run-time-invisible Java programming language annotations may be directly
                                 attached to a program element.
                        </p>
                     </dd>
                     <dt><span class="term">annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.17-300-D"></a>Each value of the
                                 <code class="literal">annotations</code> table represents a single
                                 run-time-invisible annotation on a program element.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.18.&nbsp;The RuntimeVisibleParameterAnnotations attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.18"></a>4.7.18.&nbsp;The <code class="literal">RuntimeVisibleParameterAnnotations</code> attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.18-100"></a>The
                  <code class="literal">RuntimeVisibleParameterAnnotations</code> attribute is a variable-length
                  attribute in the <code class="literal">attributes</code> table of the <code class="literal">method_info</code> structure
                  (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The <code class="literal">RuntimeVisibleParameterAnnotations</code>
                  attribute records run-time-visible Java programming language annotations on the
                  parameters of the corresponding method.
               </p>
               <p class="norm"><a name="jvms-4.7.18-110"></a>Each <code class="literal">method_info</code>
                  structure may contain at most one <code class="literal">RuntimeVisibleParameterAnnotations</code>
                  attribute, which records all the run-time-visible Java programming language
                  annotations on the parameters of the corresponding method. The Java Virtual Machine
                  must make these annotations available so they can be returned by the
                  appropriate reflective APIs.
               </p>
               <p class="norm"><a name="jvms-4.7.18-200"></a>The
                  <code class="literal">RuntimeVisibleParameterAnnotations</code> attribute has the following
                  format:
               </p><a name="jvms-4.7.18-210"></a><pre class="screen">
RuntimeVisibleParameterAnnotations_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 num_parameters;
    {   u2         num_annotations;
        annotation annotations[num_annotations];
    } parameter_annotations[num_parameters];
}
</pre><p class="norm"><a name="jvms-4.7.18-300"></a>The items of
                  the <code class="literal">RuntimeVisibleParameterAnnotations_attribute</code>
                  structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.18-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">RuntimeVisibleParameterAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.18-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                        <p class="norm"><a name="jvms-4.7.18-300-B.1"></a>The value of the
                                 <code class="literal">attribute_length</code> item is thus dependent on
                                 the number of parameters, the number of run-time-visible
                                 annotations on each parameter, and their values.
                        </p>
                     </dd>
                     <dt><span class="term">num_parameters</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.18-300-C"></a>The value of the
                                 <code class="literal">num_parameters</code> item gives the number of
                                 parameters of the method represented by the <code class="literal">method_info</code>
                                 structure on which the annotation occurs. (This duplicates
                                 information that could be extracted from the method descriptor
                                 (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).)
                        </p>
                     </dd>
                     <dt><span class="term">parameter_annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.18-300-D"></a>Each value of the
                                 <code class="literal">parameter_annotations</code> table represents all of
                                 the run-time-visible annotations on a single parameter. The
                                 sequence of values in the table corresponds to the sequence of
                                 parameters in the method
                                 descriptor. Each <code class="literal">parameter_annotations</code> entry
                                 contains the following two items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">num_annotations</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.18-300-D-1"></a>The value
                                    	    of the <code class="literal">num_annotations</code> item indicates
                                    	    the number of run-time-visible annotations on the
                                    	    parameter corresponding to the sequence number of this
                                    	    <code class="literal">parameter_annotations</code> element.
                                 </p>
                              </dd>
                              <dt><span class="term">annotations</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.18-300-D-2"></a>Each value
                                                of the <code class="literal">annotations</code> table represents a
                                                single run-time-visible annotation on the parameter
                                                corresponding to the sequence number of
                                                this <code class="literal">parameter_annotations</code>
                                                element.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.19.&nbsp;The RuntimeInvisibleParameterAnnotations attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.19"></a>4.7.19.&nbsp;The <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.19-100"></a>The
                  <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute is similar to the
                  <code class="literal">RuntimeVisibleParameterAnnotations</code> attribute, except that the
                  annotations represented by a <code class="literal">RuntimeInvisibleParameterAnnotations</code>
                  attribute must not be made available for return by reflective APIs,
                  unless the Java Virtual Machine has specifically been instructed to retain these
                  annotations via some implementation-specific mechanism such as a
                  command line flag. In the absence of such instructions, the Java Virtual Machine
                  ignores this attribute.
               </p>
               <p class="norm"><a name="jvms-4.7.19-110"></a>The
                  <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute is a variable-length
                  attribute in the <code class="literal">attributes</code> table of a <code class="literal">method_info</code> structure
                  (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>). The
                  <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute records
                  run-time-invisible Java programming language annotations on the parameters of the
                  corresponding method.
               </p>
               <p class="norm"><a name="jvms-4.7.19-120"></a>Each <code class="literal">method_info</code>
                  structure may contain at most one
                  <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute, which records all
                  the run-time-invisible Java programming language annotations on the parameters of the
                  corresponding method.
               </p>
               <p class="norm"><a name="jvms-4.7.19-200"></a>The
                  <code class="literal">RuntimeInvisibleParameterAnnotations</code> attribute has the following
                  format:
               </p><a name="jvms-4.7.19-210"></a><pre class="screen">
RuntimeInvisibleParameterAnnotations_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u1 num_parameters;
    {   u2         num_annotations;
        annotation annotations[num_annotations];
    } parameter_annotations[num_parameters];
}
</pre><p class="norm"><a name="jvms-4.7.19-300"></a>The items of
                  the <code class="literal">RuntimeInvisibleParameterAnnotations_attribute</code>
                  structure are as follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.19-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">RuntimeInvisibleParameterAnnotations</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.19-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                        <p class="norm"><a name="jvms-4.7.19-300-B.1"></a>The value of the
                                 <code class="literal">attribute_length</code> item is thus dependent on
                                 the number of parameters, the number of run-time-invisible
                                 annotations on each parameter, and their values.
                        </p>
                     </dd>
                     <dt><span class="term">num_parameters</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.19-300-C"></a>The value of the
                                 <code class="literal">num_parameters</code> item gives the number of
                                 parameters of the method represented by the <code class="literal">method_info</code>
                                 structure on which the annotation occurs. (This duplicates
                                 information that could be extracted from the method descriptor
                                 (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).)
                        </p>
                     </dd>
                     <dt><span class="term">parameter_annotations</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.19-300-D"></a>Each value of the
                                 <code class="literal">parameter_annotations</code> table represents all of
                                 the run-time-invisible annotations on a single parameter. The
                                 sequence of values in the table corresponds to the sequence of
                                 parameters in the method
                                 descriptor. Each <code class="literal">parameter_annotations</code> entry
                                 contains the following two items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">num_annotations</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.19-300-D-1"></a>The value
                                    	    of the <code class="literal">num_annotations</code> item indicates
                                    	    the number of run-time-invisible annotations on the
                                    	    parameter corresponding to the sequence number of this
                                    	    <code class="literal">parameter_annotations</code> element.
                                 </p>
                              </dd>
                              <dt><span class="term">annotations</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.19-300-D-2"></a>Each value
                                    	    of the <code class="literal">annotations</code> table represents a
                                    	    single run-time-invisible annotation on the parameter
                                    	    corresponding to the sequence number of this
                                    	    <code class="literal">parameter_annotations</code> element.
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.20.&nbsp;The AnnotationDefault attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.20"></a>4.7.20.&nbsp;The <code class="literal">AnnotationDefault</code> attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.20-100"></a>The <code class="literal">AnnotationDefault</code>
                  attribute is a variable-length attribute in the <code class="literal">attributes</code> table of
                  certain <code class="literal">method_info</code> structures (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>), namely
                  those representing elements of annotation types. The
                  <code class="literal">AnnotationDefault</code> attribute records the default value for the
                  element represented by the <code class="literal">method_info</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.20-110"></a>Each <code class="literal">method_info</code>
                  structure representing an element of an annotation type may contain at
                  most one <code class="literal">AnnotationDefault</code> attribute. The Java Virtual Machine must make this
                  default value available so it can be applied by appropriate reflective
                  APIs.
               </p>
               <p class="norm"><a name="jvms-4.7.20-200"></a>The <code class="literal">AnnotationDefault</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.20-210"></a><pre class="screen">
AnnotationDefault_attribute {
    u2            attribute_name_index;
    u4            attribute_length;
    element_value default_value;
}
</pre><p class="norm"><a name="jvms-4.7.20-300"></a>The items of
                  the <code class="literal">AnnotationDefault_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.20-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">AnnotationDefault</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.20-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                        <p class="norm"><a name="jvms-4.7.20-300-B.1"></a>The value of the
                                 <code class="literal">attribute_length</code> item is thus dependent on
                                 the default value.
                        </p>
                     </dd>
                     <dt><span class="term">default_value</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.20-300-C"></a>The <code class="literal">default_value</code>
                                 item represents the default value of the annotation type element
                                 whose default value is represented by this <code class="literal">AnnotationDefault</code>
                                 attribute.
                        </p>
                     </dd>
                  </dl>
               </div>
            </div>
            <div class="section" title="4.7.21.&nbsp;The BootstrapMethods attribute">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.7.21"></a>4.7.21.&nbsp;The <code class="literal">BootstrapMethods</code> attribute
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.7.21-100"></a>The <code class="literal">BootstrapMethods</code>
                  attribute is a variable-length attribute in the <code class="literal">attributes</code> table of
                  a <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). The
                  <code class="literal">BootstrapMethods</code> attribute records bootstrap method specifiers
                  referenced by <span class="emphasis"><em>invokedynamic</em></span> instructions
                  (<a class="xref" href="jvms-6.html#jvms-6.5.invokedynamic" title="invokedynamic">&sect;<span class="emphasis"><em>invokedynamic</em></span></a>).
               </p>
               <p class="norm"><a name="jvms-4.7.21-110"></a>There must be exactly one
                  <code class="literal">BootstrapMethods</code> attribute in the <code class="literal">attributes</code> table of a given
                  <code class="literal">ClassFile</code> structure if the <code class="literal">constant_pool</code> table of the <code class="literal">ClassFile</code>
                  structure has at least one <code class="literal">CONSTANT_InvokeDynamic_info</code> entry
                  (<a class="xref" href="jvms-4.html#jvms-4.4.10" title="4.4.10.&nbsp;The CONSTANT_InvokeDynamic_info Structure">&sect;4.4.10</a>). There can be no more than one
                  <code class="literal">BootstrapMethods</code> attribute in the <code class="literal">attributes</code> table of a given
                  <code class="literal">ClassFile</code> structure.
               </p>
               <p class="norm"><a name="jvms-4.7.21-200"></a>The <code class="literal">BootstrapMethods</code>
                  attribute has the following format:
               </p><a name="jvms-4.7.21-210"></a><pre class="screen">
BootstrapMethods_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 num_bootstrap_methods;
    {   u2 bootstrap_method_ref;
        u2 num_bootstrap_arguments;
        u2 bootstrap_arguments[num_bootstrap_arguments];
    } bootstrap_methods[num_bootstrap_methods];
}
</pre><p class="norm"><a name="jvms-4.7.21-300"></a>The items of
                  the <code class="literal">BootstrapMethods_attribute</code> structure are as
                  follows:
               </p>
               <div class="variablelist">
                  <dl>
                     <dt><span class="term">attribute_name_index</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.21-300-A"></a>The value of the
                                 <code class="literal">attribute_name_index</code> item must be a valid
                                 index into the <code class="literal">constant_pool</code> table. The <code class="literal">constant_pool</code> entry
                                 at that index must be a <code class="literal">CONSTANT_Utf8_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>) representing the string
                                 "<code class="literal">BootstrapMethods</code>".
                        </p>
                     </dd>
                     <dt><span class="term">attribute_length</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.21-300-B"></a>The value of the
                                 <code class="literal">attribute_length</code> item indicates the length of
                                 the attribute, excluding the initial six bytes.
                        </p>
                        <p class="norm"><a name="jvms-4.7.21-300-B.1"></a>The value of the
                                 <code class="literal">attribute_length</code> item is thus dependent on
                                 the number of <span class="emphasis"><em>invokedynamic</em></span> instructions in this <code class="literal">ClassFile</code>
                                 structure.
                        </p>
                     </dd>
                     <dt><span class="term">num_bootstrap_methods</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.21-300-C"></a>The value of the
                                 <code class="literal">num_bootstrap_methods</code> item determines the
                                 number of bootstrap method specifiers in
                                 the <code class="literal">bootstrap_methods</code> array.
                        </p>
                     </dd>
                     <dt><span class="term">bootstrap_methods[]</span></dt>
                     <dd>
                        <p class="norm"><a name="jvms-4.7.21-300-D"></a>Each entry in the
                                 <code class="literal">bootstrap_methods</code> array contains an index to
                                 a <code class="literal">CONSTANT_MethodHandle_info</code> structure
                                 (<a class="xref" href="jvms-4.html#jvms-4.4.8" title="4.4.8.&nbsp;The CONSTANT_MethodHandle_info Structure">&sect;4.4.8</a>) which specifies a bootstrap
                                 method, and a sequence (perhaps empty) of indexes
                                 to <span class="emphasis"><em>static arguments</em></span> for the bootstrap
                                 method.
                        </p>
                        <p class="norm"><a name="jvms-4.7.21-300-D.1"></a>Each
                                 <code class="literal">bootstrap_methods</code> entry must contain the
                                 following three items:
                        </p>
                        <div class="variablelist">
                           <dl>
                              <dt><span class="term">bootstrap_method_ref</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.21-300-D.1-1"></a>The value
                                    	    of the <code class="literal">bootstrap_method_ref</code> item must
                                    	    be a valid index into the <code class="literal">constant_pool</code> table. The
                                    	    <code class="literal">constant_pool</code> entry at that index must be a
                                    	    <code class="literal">CONSTANT_MethodHandle_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.8" title="4.4.8.&nbsp;The CONSTANT_MethodHandle_info Structure">&sect;4.4.8</a>).
                                 </p>
                                 <p class="note">The <code class="literal">reference_kind</code>
                                    	    item of the <code class="literal">CONSTANT_MethodHandle_info</code> structure should
                                    	    have the value 6 (<code class="literal">REF_invokeStatic</code>) or 8
                                    	    (<code class="literal">REF_newInvokeSpecial</code>) (<a class="xref" href="jvms-5.html#jvms-5.4.3.5" title="5.4.3.5.&nbsp;Method Type and Method Handle Resolution">&sect;5.4.3.5</a>)
                                    	    or else invocation of the bootstrap method handle during
                                    	    call site specifier resolution for an <span class="emphasis"><em>invokedynamic</em></span>
                                    	    instruction will complete abruptly.
                                 </p>
                              </dd>
                              <dt><span class="term">num_bootstrap_arguments</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.21-300-D.1-2"></a>The value
                                    	    of the <code class="literal">num_bootstrap_arguments</code> item
                                    	    gives the number of items in
                                    	    the <code class="literal">bootstrap_arguments</code> array.
                                 </p>
                              </dd>
                              <dt><span class="term">bootstrap_arguments</span></dt>
                              <dd>
                                 <p class="norm"><a name="jvms-4.7.21-300-D.1-3"></a>Each
                                    	    entry in the <code class="literal">bootstrap_arguments</code> array
                                    	    must be a valid index into the <code class="literal">constant_pool</code> table. The
                                    	    <code class="literal">constant_pool</code> entry at that index must be a
                                    	    <code class="literal">CONSTANT_String_info</code>, <code class="literal">CONSTANT_Class_info</code>,
                                    	    <code class="literal">CONSTANT_Integer_info</code>, <code class="literal">CONSTANT_Long_info</code>,
                                    	    <code class="literal">CONSTANT_Float_info</code>, <code class="literal">CONSTANT_Double_info</code>,
                                    	    <code class="literal">CONSTANT_MethodHandle_info</code>, or <code class="literal">CONSTANT_MethodType_info</code> structure
                                    	    (<a class="xref" href="jvms-4.html#jvms-4.4.3" title="4.4.3.&nbsp;The CONSTANT_String_info Structure">&sect;4.4.3</a>, <a class="xref" href="jvms-4.html#jvms-4.4.1" title="4.4.1.&nbsp;The CONSTANT_Class_info Structure">&sect;4.4.1</a>,
                                    	     <a class="xref" href="jvms-4.html#jvms-4.4.4" title="4.4.4.&nbsp;The CONSTANT_Integer_info and CONSTANT_Float_info Structures">&sect;4.4.4</a>, <a class="xref" href="jvms-4.html#jvms-4.4.5" title="4.4.5.&nbsp;The CONSTANT_Long_info and CONSTANT_Double_info Structures">&sect;4.4.5</a>),
                                    	     <a class="xref" href="jvms-4.html#jvms-4.4.8" title="4.4.8.&nbsp;The CONSTANT_MethodHandle_info Structure">&sect;4.4.8</a>, <a class="xref" href="jvms-4.html#jvms-4.4.9" title="4.4.9.&nbsp;The CONSTANT_MethodType_info Structure">&sect;4.4.9</a>).
                                 </p>
                              </dd>
                           </dl>
                        </div>
                     </dd>
                  </dl>
               </div>
            </div>
         </div>
         <div class="section" title="4.8.&nbsp;Format Checking">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.8"></a>4.8.&nbsp;Format Checking
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.8-100"></a>When a prospective <code class="literal">class</code>
               file is loaded (<a class="xref" href="jvms-5.html#jvms-5.3" title="5.3.&nbsp;Creation and Loading">&sect;5.3</a>) by the Java Virtual Machine, the Java Virtual Machine
               first ensures that the file has the basic format of a <code class="literal">class</code> file
               (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). This process is known
               as <span class="emphasis"><em>format checking</em></span>. The first four bytes must
               contain the right magic number. All recognized attributes must be of
               the proper length. The <code class="literal">class</code> file must not be truncated or have
               extra bytes at the end. The constant pool must not contain any
               superficially unrecognizable information.
            </p>
            <p class="norm"><a name="jvms-4.8-110"></a>This check for basic <code class="literal">class</code>
               file integrity is necessary for any interpretation of the <code class="literal">class</code> file
               contents.
            </p>
            <p class="norm"><a name="jvms-4.8-120"></a>Format checking is distinct
               from bytecode verification. Both are part of the verification
               process. Historically, format checking has been confused with bytecode
               verification, because both are a form of integrity check.
            </p>
         </div>
         <div class="section" title="4.9.&nbsp;Constraints on Java Virtual Machine code">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.9"></a>4.9.&nbsp;Constraints on Java Virtual Machine code
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.9-100"></a>The Java Virtual Machine code for a method,
               instance initialization method, or class or interface initialization
               method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) is stored in the <code class="literal">code</code> array of
               the <code class="literal">Code</code> attribute of a <code class="literal">method_info</code> structure of a <code class="literal">class</code> file
               (<a class="xref" href="jvms-4.html#jvms-4.6" title="4.6.&nbsp;Methods">&sect;4.6</a>, <a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). This
               section describes the constraints associated with the contents of the
               <code class="literal">Code_attribute</code> structure.
            </p>
            <div class="section" title="4.9.1.&nbsp;Static Constraints">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.9.1"></a>4.9.1.&nbsp;Static Constraints
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.9.1-100"></a>The <span class="emphasis"><em>static
                        constraints</em></span> on a <code class="literal">class</code> file are those defining the
                  well-formedness of the file. With the exception of the static
                  constraints on the Java Virtual Machine code of the <code class="literal">class</code> file, these constraints
                  have been given in the previous sections. The static constraints on
                  the Java Virtual Machine code in a <code class="literal">class</code> file specify how Java Virtual Machine instructions must
                  be laid out in the <code class="literal">code</code> array and what the operands of individual
                  instructions must be.
               </p>
               <p class="norm"><a name="jvms-4.9.1-110"></a>The static constraints on
                  the instructions in the <code class="literal">code</code> array are as follows:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-A"></a>The <code class="literal">code</code> array must
                                 not be empty, so the <code class="literal">code_length</code> item cannot
                                 have the value 0.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-B"></a>The value of the
                                 <code class="literal">code_length</code> item must be less than
                                 65536.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-C"></a>The opcode of the
                                 first instruction in the <code class="literal">code</code> array begins at index 0.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-D"></a>Only instances of the
                                 instructions documented in <a class="xref" href="jvms-6.html#jvms-6.5" title="6.5.&nbsp;Instructions">&sect;6.5</a> may appear
                                 in the <code class="literal">code</code> array. Instances of instructions using the
                                 reserved opcodes (<a class="xref" href="jvms-6.html#jvms-6.2" title="6.2.&nbsp;Reserved Opcodes">&sect;6.2</a>) or any opcodes not
                                 documented in this specification must not appear in the <code class="literal">code</code>
                                 array.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-E"></a>If the <code class="literal">class</code> file
                                 version number is 51.0 or above, then neither the <span class="emphasis"><em>jsr</em></span> opcode
                                 or the <span class="emphasis"><em>jsr_w</em></span> opcode may appear in the <code class="literal">code</code> array.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-F"></a>For each instruction
                                 in the <code class="literal">code</code> array except the last, the index of the opcode of
                                 the next instruction equals the index of the opcode of the
                                 current instruction plus the length of that instruction,
                                 including all its operands.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-110-F.1"></a>The <span class="emphasis"><em>wide</em></span>
                                 instruction is treated like any other instruction for these
                                 purposes; the opcode specifying the operation that a <span class="emphasis"><em>wide</em></span>
                                 instruction is to modify is treated as one of the operands of
                                 that <span class="emphasis"><em>wide</em></span> instruction. That opcode must never be directly
                                 reachable by the computation.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-110-G"></a>The last byte of the
                                 last instruction in the <code class="literal">code</code> array must be the byte at index
                                 <code class="literal">code_length - 1</code>.
                        </p>
                     </li>
                  </ul>
               </div>
               <p class="norm"><a name="jvms-4.9.1-120"></a>The static constraints on
                  the operands of instructions in the <code class="literal">code</code> array are as
                  follows:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-A"></a>The target of each
                               jump and branch instruction (<span class="emphasis"><em>jsr</em></span>, <span class="emphasis"><em>jsr_w</em></span>, <span class="emphasis"><em>goto</em></span>, <span class="emphasis"><em>goto_w</em></span>,
                               <span class="emphasis"><em>ifeq</em></span>, <span class="emphasis"><em>ifne</em></span>, <span class="emphasis"><em>ifle</em></span>, <span class="emphasis"><em>iflt</em></span>, <span class="emphasis"><em>ifge</em></span>, <span class="emphasis"><em>ifgt</em></span>, <span class="emphasis"><em>ifnull</em></span>,
                               <span class="emphasis"><em>ifnonnull</em></span>, <span class="emphasis"><em>if_icmpeq</em></span>, <span class="emphasis"><em>if_icmpne</em></span>, <span class="emphasis"><em>if_icmple</em></span>, <span class="emphasis"><em>if_icmplt</em></span>,
                               <span class="emphasis"><em>if_icmpge</em></span>, <span class="emphasis"><em>if_icmpgt</em></span>, <span class="emphasis"><em>if_acmpeq</em></span>, <span class="emphasis"><em>if_acmpne</em></span>) must be the
                               opcode of an instruction within this method.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-A.1"></a>The target of a jump
                               or branch instruction must never be the opcode used to specify the
                               operation to be modified by a <span class="emphasis"><em>wide</em></span> instruction; a jump or branch
                               target may be the <span class="emphasis"><em>wide</em></span> instruction itself.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-B"></a>Each target, including
                               the default, of each <span class="emphasis"><em>tableswitch</em></span> instruction must be the opcode
                               of an instruction within this method.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-B.1"></a>Each <span class="emphasis"><em>tableswitch</em></span>
                               instruction must have a number of entries in its jump table that
                               is consistent with the value of its <span class="emphasis"><em>low</em></span> and
                               <span class="emphasis"><em>high</em></span> jump table operands, and
                               its <span class="emphasis"><em>low</em></span> value must be less than or equal to
                               its <span class="emphasis"><em>high</em></span> value.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-B.2"></a>No target of a
                               <span class="emphasis"><em>tableswitch</em></span> instruction may be the opcode used to specify the
                               operation to be modified by a <span class="emphasis"><em>wide</em></span> instruction; a <span class="emphasis"><em>tableswitch</em></span>
                               target may be a <span class="emphasis"><em>wide</em></span> instruction itself.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-C"></a>Each target, including
                               the default, of each <span class="emphasis"><em>lookupswitch</em></span> instruction must be the opcode
                               of an instruction within this method.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-C.1"></a>Each <span class="emphasis"><em>lookupswitch</em></span>
                               instruction must have a number
                               of <span class="emphasis"><em>match-offset</em></span> pairs that is consistent with
                               the value of its <span class="emphasis"><em>npairs</em></span> operand. The
                               <span class="emphasis"><em>match-offset</em></span> pairs must be sorted in
                               increasing numerical order by signed match value.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-C.2"></a>No target of a
                               <span class="emphasis"><em>lookupswitch</em></span> instruction may be the opcode used to specify the
                               operation to be modified by a <span class="emphasis"><em>wide</em></span> instruction; a <span class="emphasis"><em>lookupswitch</em></span>
                               target may be a <span class="emphasis"><em>wide</em></span> instruction itself.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-D"></a>The operand of each
                               <span class="emphasis"><em>ldc</em></span> instruction and each <span class="emphasis"><em>ldc_w</em></span> instruction must be a valid
                               index into the <code class="literal">constant_pool</code> table.  The
                               constant pool entry referenced by that index must be of
                               type:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.1-120-D-1"></a>
                                    	  <code class="literal">CONSTANT_Integer</code>, <code class="literal">CONSTANT_Float</code>, or <code class="literal">CONSTANT_String</code>
                                    	  if the <code class="literal">class</code> file version number is less than 49.0.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.1-120-D-2"></a>
                                    	  <code class="literal">CONSTANT_Integer</code>, <code class="literal">CONSTANT_Float</code>, <code class="literal">CONSTANT_String</code>, or
                                    	  <code class="literal">CONSTANT_Class</code> if the <code class="literal">class</code> file version number is 49.0
                                    	  or 50.0.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.1-120-D-3"></a>
                                    	  <code class="literal">CONSTANT_Integer</code>, <code class="literal">CONSTANT_Float</code>, <code class="literal">CONSTANT_String</code>,
                                    	  <code class="literal">CONSTANT_Class</code>, <code class="literal">CONSTANT_MethodType</code>, or
                                    	  <code class="literal">CONSTANT_MethodHandle</code> if the <code class="literal">class</code> file version number
                                    	  is 51.0.
                                 </p>
                              </li>
                           </ul>
                        </div>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-E"></a>The operands of each
                               <span class="emphasis"><em>ldc2_w</em></span> instruction must represent a valid index into the
                               <code class="literal">constant_pool</code> table. The constant pool entry referenced by that
                               index must be of type <code class="literal">CONSTANT_Long</code> or <code class="literal">CONSTANT_Double</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-E.1"></a>In addition, the
                               subsequent constant pool index must also be a valid index into the
                               constant pool, and the constant pool entry at that index must not
                               be used.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-F"></a>The operands of each
                               <span class="emphasis"><em>getfield</em></span>, <span class="emphasis"><em>putfield</em></span>, <span class="emphasis"><em>getstatic</em></span>, and <span class="emphasis"><em>putstatic</em></span> instruction
                               must represent a valid index into the <code class="literal">constant_pool</code> table. The
                               constant pool entry referenced by that index must be of type
                               <code class="literal">CONSTANT_Fieldref</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-G"></a>The <span class="emphasis"><em>indexbyte</em></span>
                               operands of each <span class="emphasis"><em>invokevirtual</em></span>, <span class="emphasis"><em>invokespecial</em></span>, and
                               <span class="emphasis"><em>invokestatic</em></span> instruction must represent a valid index into the
                               <code class="literal">constant_pool</code> table. The constant pool entry referenced by that
                               index must be of type <code class="literal">CONSTANT_Methodref</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-H"></a>The <span class="emphasis"><em>indexbyte</em></span>
                               operands of each <span class="emphasis"><em>invokedynamic</em></span> instruction must represent a
                               valid index into the <code class="literal">constant_pool</code> table. The constant pool
                               entry referenced by that index must be of type
                               <code class="literal">CONSTANT_InvokeDynamic</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-H.1"></a>The third and fourth
                               operand bytes of each <span class="emphasis"><em>invokedynamic</em></span> instruction must have the
                               value zero.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-I"></a>Only the
                               <span class="emphasis"><em>invokespecial</em></span> instruction is allowed to invoke an instance
                               initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>).
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-I.1"></a>No other method
                               whose name begins with the character '<code class="literal">&lt;</code>'
                               ('<code class="literal">\u003c</code>') may be called by the method
                               invocation instructions. In particular, the class or interface
                               initialization method specially named <code class="literal">&lt;clinit&gt;</code> is never called
                               explicitly from Java Virtual Machine instructions, but only implicitly by the
                               Java Virtual Machine itself.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-J"></a>The 
                               <span class="emphasis"><em>indexbyte</em></span> operands of each <span class="emphasis"><em>invokeinterface</em></span>
                               instruction must represent a valid index into the <code class="literal">constant_pool</code>
                               table. The constant pool entry referenced by that index must be of
                               type <code class="literal">CONSTANT_InterfaceMethodref</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-J.1"></a>The value of the
                               <span class="emphasis"><em>count</em></span> operand of each <span class="emphasis"><em>invokeinterface</em></span>
                               instruction must reflect the number of local variables necessary
                               to store the arguments to be passed to the interface method, as
                               implied by the descriptor of the <code class="literal">CONSTANT_NameAndType_info</code>
                               structure referenced by the <code class="literal">CONSTANT_InterfaceMethodref</code> constant
                               pool entry.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-J.2"></a>The fourth operand
                               byte of each <span class="emphasis"><em>invokeinterface</em></span> instruction must have the value
                               zero.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-K"></a>The operands of each
                               <span class="emphasis"><em>instanceof</em></span>, <span class="emphasis"><em>checkcast</em></span>, <span class="emphasis"><em>new</em></span>, and <span class="emphasis"><em>anewarray</em></span> instruction and
                               the <span class="emphasis"><em>indexbyte</em></span> operands of each
                               <span class="emphasis"><em>multianewarray</em></span> instruction must represent a valid index into the
                               <code class="literal">constant_pool</code> table. The constant pool entry referenced by that
                               index must be of type <code class="literal">CONSTANT_Class</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-L"></a>No <span class="emphasis"><em>anewarray</em></span>
                               instruction may be used to create an array of more than 255
                               dimensions.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-M"></a>No <span class="emphasis"><em>new</em></span> instruction
                               may reference a <code class="literal">CONSTANT_Class</code> <code class="literal">constant_pool</code> table entry
                               representing an array class. The <span class="emphasis"><em>new</em></span> instruction cannot be used
                               to create an array.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-N"></a>A <span class="emphasis"><em>multianewarray</em></span>
                               instruction must be used only to create an array of a type that
                               has at least as many dimensions as the value of
                               its <span class="emphasis"><em>dimensions</em></span> operand. That is, while a
                               <span class="emphasis"><em>multianewarray</em></span> instruction is not required to create all of the
                               dimensions of the array type referenced by
                               its <span class="emphasis"><em>indexbyte</em></span> operands, it must not attempt
                               to create more dimensions than are in the array type.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-N.1"></a>The 
                               <span class="emphasis"><em>dimensions</em></span> operand of each <span class="emphasis"><em>multianewarray</em></span>
                               instruction must not be zero.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-O"></a>The 
                               <span class="emphasis"><em>atype</em></span> operand of each <span class="emphasis"><em>newarray</em></span> instruction
                               must take one of the values <code class="literal">T_BOOLEAN</code> (4), <code class="literal">T_CHAR</code> (5),
                               <code class="literal">T_FLOAT</code> (6), <code class="literal">T_DOUBLE</code> (7), <code class="literal">T_BYTE</code> (8), <code class="literal">T_SHORT</code> (9),
                               <code class="literal">T_INT</code> (10), or <code class="literal">T_LONG</code> (11).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-P"></a>The 
                               <span class="emphasis"><em>index</em></span> operand of each <span class="emphasis"><em>iload</em></span>, <span class="emphasis"><em>fload</em></span>,
                               <span class="emphasis"><em>aload</em></span>, <span class="emphasis"><em>istore</em></span>, <span class="emphasis"><em>fstore</em></span>, <span class="emphasis"><em>astore</em></span>, <span class="emphasis"><em>iinc</em></span>, and <span class="emphasis"><em>ret</em></span>
                               instruction must be a non-negative integer no greater
                               than <code class="literal">max_locals - 1</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-Q"></a>The implicit index of
                               each <span class="emphasis"><em>iload_&lt;n&gt;</em></span>, <span class="emphasis"><em>fload_&lt;n&gt;</em></span>, <span class="emphasis"><em>aload_&lt;n&gt;</em></span>, <span class="emphasis"><em>istore_&lt;n&gt;</em></span>, <span class="emphasis"><em>fstore_&lt;n&gt;</em></span>, and
                               <span class="emphasis"><em>astore_&lt;n&gt;</em></span> instruction must be no greater than the value of
                               <code class="literal">max_locals - 1</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-R"></a>The <span class="emphasis"><em>index</em></span> operand
                               of each <span class="emphasis"><em>lload</em></span>, <span class="emphasis"><em>dload</em></span>, <span class="emphasis"><em>lstore</em></span>, and <span class="emphasis"><em>dstore</em></span> instruction must
                               be no greater than the value of <code class="literal">max_locals -
                                  2</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-S"></a>The implicit index of
                               each <span class="emphasis"><em>lload_&lt;n&gt;</em></span>, <span class="emphasis"><em>dload_&lt;n&gt;</em></span>, <span class="emphasis"><em>lstore_&lt;n&gt;</em></span>, and <span class="emphasis"><em>dstore_&lt;n&gt;</em></span> instruction
                               must be no greater than the value of <code class="literal">max_locals -
                                  2</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.1-120-T"></a>The 
                               <span class="emphasis"><em>indexbyte</em></span> operands of each <span class="emphasis"><em>wide</em></span> instruction
                               modifying an <span class="emphasis"><em>iload</em></span>, <span class="emphasis"><em>fload</em></span>, <span class="emphasis"><em>aload</em></span>, <span class="emphasis"><em>istore</em></span>, <span class="emphasis"><em>fstore</em></span>,
                               <span class="emphasis"><em>astore</em></span>, <span class="emphasis"><em>ret</em></span>, or <span class="emphasis"><em>iinc</em></span> instruction must represent a
                               non-negative integer no greater than
                               <code class="literal">max_locals - 1</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.1-120-T.1"></a>The <span class="emphasis"><em>indexbyte</em></span>
                               operands of each <span class="emphasis"><em>wide</em></span> instruction modifying an <span class="emphasis"><em>lload</em></span>, <span class="emphasis"><em>dload</em></span>,
                               <span class="emphasis"><em>lstore</em></span>, or <span class="emphasis"><em>dstore</em></span> instruction must represent a non-negative
                               integer no greater than <code class="literal">max_locals - 2</code>.
                        </p>
                     </li>
                  </ul>
               </div>
            </div>
            <div class="section" title="4.9.2.&nbsp;Structural Constraints">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.9.2"></a>4.9.2.&nbsp;Structural Constraints
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.9.2-100"></a>The structural constraints
                  on the <code class="literal">code</code> array specify constraints on relationships between Java Virtual Machine
                  instructions. The structural constraints are as follows:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-100-A"></a>Each instruction must
                               only be executed with the appropriate type and number of arguments
                               in the operand stack and local variable array, regardless of the
                               execution path that leads to its invocation.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-100-A.1"></a>An instruction
                               operating on values of type <code class="literal">int</code> is also permitted to operate on
                               values of type <code class="literal">boolean</code>, <code class="literal">byte</code>, <code class="literal">char</code>, and <code class="literal">short</code>. (As noted
                               in <a class="xref" href="jvms-2.html#jvms-2.3.4" title="2.3.4.&nbsp;The boolean Type">&sect;2.3.4</a> and <a class="xref" href="jvms-2.html#jvms-2.11.1" title="2.11.1.&nbsp;Types and the Java Virtual Machine">&sect;2.11.1</a>,
                               the Java Virtual Machine internally converts values of types <code class="literal">boolean</code>, <code class="literal">byte</code>,
                               <code class="literal">char</code>, and <code class="literal">short</code> to type <code class="literal">int</code>.)
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-B"></a>If an instruction can
                               be executed along several different execution paths, the operand
                               stack must have the same depth (<a class="xref" href="jvms-2.html#jvms-2.6.2" title="2.6.2.&nbsp;Operand Stacks">&sect;2.6.2</a>)
                               prior to the execution of the instruction, regardless of the path
                               taken.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-C"></a>At no point during
                               execution can the order of the local variable pair holding a value
                               of type <code class="literal">long</code> or <code class="literal">double</code> be reversed or the pair split up.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-C.1"></a>At no point can the
                               local variables of such a pair be operated on individually.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-D"></a>No local variable (or
                               local variable pair, in the case of a value of type <code class="literal">long</code> or
                               <code class="literal">double</code>) can be accessed before it is assigned a value.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-E"></a>At no point during
                               execution can the operand stack grow to a depth
                               (<a class="xref" href="jvms-2.html#jvms-2.6.2" title="2.6.2.&nbsp;Operand Stacks">&sect;2.6.2</a>) greater than that implied by the
                               <code class="literal">max_stack</code> item.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-F"></a>At no point during
                               execution can more values be popped from the operand stack than it
                               contains.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-G"></a>Each <span class="emphasis"><em>invokespecial</em></span>
                               instruction must name an instance initialization method
                               (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), a method in the current class, or a
                               method in a superclass of the current class.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-G.1"></a>If an
                               <span class="emphasis"><em>invokespecial</em></span> instruction names an instance initialization
                               method from a class that is not the current class or a superclass,
                               and the target reference on the operand stack is a class instance
                               created by an earlier <span class="emphasis"><em>new</em></span> instruction, then <span class="emphasis"><em>invokespecial</em></span> must
                               name an instance initialization method from the class of that
                               class instance.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-H"></a>When the instance
                               initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) is invoked, an
                               uninitialized class instance must be in an appropriate position on
                               the operand stack.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-H.1"></a>An instance
                               initialization method must never be invoked on an initialized
                               class instance.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-I"></a>When any instance
                               method is invoked or when any instance variable is accessed, the
                               class instance that contains the instance method or instance
                               variable must already be initialized.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-J"></a>There must never be an
                               uninitialized class instance on the operand stack or in a local
                               variable at the target of a backwards branch unless the special
                               type of the uninitialized class instance at the branch instruction
                               is merged with itself at the target of the branch
                               (<a class="xref" href="jvms-4.html#jvms-4.10.2.4" title="4.10.2.4.&nbsp;Instance Initialization Methods and Newly Created Objects">&sect;4.10.2.4</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-K"></a>There must never be an
                               uninitialized class instance in a local variable in code protected
                               by an exception handler (<a class="xref" href="jvms-4.html#jvms-4.10.2.4" title="4.10.2.4.&nbsp;Instance Initialization Methods and Newly Created Objects">&sect;4.10.2.4</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-L"></a>There must never be an
                               uninitialized class instance on the operand stack or in a local
                               variable when a <span class="emphasis"><em>jsr</em></span> or <span class="emphasis"><em>jsr_w</em></span> instruction is executed.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-M"></a>Each instance
                               initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>), except for the
                               instance initialization method derived from the constructor of
                               class <code class="literal">Object</code>, must call either another instance initialization
                               method of <code class="literal">this</code> or an instance initialization method of its
                               direct superclass <code class="literal">super</code> before its instance members are
                               accessed.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-M.1"></a>However, instance
                               fields of <code class="literal">this</code> that are declared in the current class may be
                               assigned before calling any instance initialization
                               method.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-N"></a>The arguments to each
                               method invocation must be method invocation compatible (JLS &sect;5.3)
                               with the method descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-O"></a>The type of every
                               class instance that is the target of a method invocation
                               instruction must be assignment compatible (JLS &sect;5.2) with the
                               class or interface type specified in the instruction.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-O.1"></a>In addition, the
                               type of the target of an <span class="emphasis"><em>invokespecial</em></span> instruction must be
                               assignment compatible with the current class, unless an instance
                               initialization method is being invoked.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-P"></a>Each return
                               instruction must match its method's return type:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-P-1"></a>If the method
                                    	    returns a <code class="literal">boolean</code>, <code class="literal">byte</code>, <code class="literal">char</code>, <code class="literal">short</code>, or <code class="literal">int</code>,
                                    	    only the <span class="emphasis"><em>ireturn</em></span> instruction may be used.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-P-2"></a>If the method
                                    	    returns a <code class="literal">float</code>, <code class="literal">long</code>, or <code class="literal">double</code>, only an <span class="emphasis"><em>freturn</em></span>,
                                    	    <span class="emphasis"><em>lreturn</em></span>, or <span class="emphasis"><em>dreturn</em></span> instruction, respectively, may be
                                    	    used.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-P-3"></a>If the method
                                    	    returns a <code class="literal">reference</code> type, it must do so using an <span class="emphasis"><em>areturn</em></span>
                                    	    instruction, and the type of the returned value must be
                                    	    assignment compatible (JLS &sect;5.2) with the return
                                    	    descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>) of the
                                    	    method.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-P-4"></a>All instance
                                    	    initialization methods, class or interface initialization
                                    	    methods, and methods declared to return <code class="literal">void</code> must use
                                    	    only the <span class="emphasis"><em>return</em></span> instruction.
                                 </p>
                              </li>
                           </ul>
                        </div>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-Q"></a>If <span class="emphasis"><em>getfield</em></span> or
                                 <span class="emphasis"><em>putfield</em></span> is used to access a <code class="literal">protected</code> field declared in a
                                 superclass that is a member of a different run-time package than
                                 the current class, then the type of the class instance being
                                 accessed must be the same as or a subclass of the current
                                 class.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-Q.1"></a>If <span class="emphasis"><em>invokevirtual</em></span>
                                 or <span class="emphasis"><em>invokespecial</em></span> is used to access a <code class="literal">protected</code> method
                                 declared in a superclass that is a member of a different
                                 run-time package than the current class, then the type of the
                                 class instance being accessed must be the same as or a subclass
                                 of the current class.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-R"></a>The type of every
                                 class instance accessed by a <span class="emphasis"><em>getfield</em></span> instruction or modified
                                 by a <span class="emphasis"><em>putfield</em></span> instruction must be assignment compatible (JLS
                                 &sect;5.2) with the class type specified in the instruction.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-S"></a>The type of every
                                 value stored by a <span class="emphasis"><em>putfield</em></span> or <span class="emphasis"><em>putstatic</em></span> instruction must be
                                 compatible with the descriptor of the field
                                 (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>) of the class instance or class
                                 being stored into:
                        </p>
                        <div class="norm">
                           <ul class="norm" type="circle">
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-S-1"></a>If the
                                    	    descriptor type is <code class="literal">boolean</code>, <code class="literal">byte</code>, <code class="literal">char</code>, <code class="literal">short</code>, or
                                    	    <code class="literal">int</code>, then the value must be an <code class="literal">int</code>.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-S-2"></a>If the
                                    	    descriptor type is <code class="literal">float</code>, <code class="literal">long</code>, or <code class="literal">double</code>, then the
                                    	    value must be a <code class="literal">float</code>, <code class="literal">long</code>, or <code class="literal">double</code>,
                                    	    respectively.
                                 </p>
                              </li>
                              <li class="listitem">
                                 <p class="norm"><a name="jvms-4.9.2-120-S-3"></a>If the
                                    	    descriptor type is a <code class="literal">reference</code> type, then the value must be of
                                    	    a type that is assignment compatible (JLS &sect;5.2) with the
                                    	    descriptor type.
                                 </p>
                              </li>
                           </ul>
                        </div>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-T"></a>The type of every
                                 value stored into an array by an <span class="emphasis"><em>aastore</em></span> instruction must be a
                                 <code class="literal">reference</code> type.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-T.1"></a>The component type
                                 of the array being stored into by the <span class="emphasis"><em>aastore</em></span> instruction must
                                 also be a <code class="literal">reference</code> type.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-U"></a>Each <span class="emphasis"><em>athrow</em></span>
                                 instruction must throw only values that are instances of class
                                 <code class="literal">Throwable</code> or of subclasses of <code class="literal">Throwable</code>.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-U.1"></a>Each class
                                 mentioned in a <code class="literal">catch_type</code> item of a method's
                                 exception table must be <code class="literal">Throwable</code> or a subclass of
                                 <code class="literal">Throwable</code>.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-V"></a>Execution never
                                 falls off the bottom of the <code class="literal">code</code> array.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-W"></a>No return address (a
                                 value of type <code class="literal">returnAddress</code>) may be loaded from a local
                                 variable.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-X"></a>The instruction
                                 following each <span class="emphasis"><em>jsr</em></span> or <span class="emphasis"><em>jsr_w</em></span> instruction may be returned to
                                 only by a single <span class="emphasis"><em>ret</em></span> instruction.
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-Y"></a>No <span class="emphasis"><em>jsr</em></span> or <span class="emphasis"><em>jsr_w</em></span>
                                 instruction that is returned to may be used to recursively call
                                 a subroutine if that subroutine is already present in the
                                 subroutine call chain. (Subroutines can be nested when using
                                 <code class="literal">try</code>-<code class="literal">finally</code> constructs from within a <code class="literal">finally</code>
                                 clause.)
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.9.2-120-Z"></a>Each instance of
                                 type <code class="literal">returnAddress</code> can be returned to at most once.
                        </p>
                        <p class="norm"><a name="jvms-4.9.2-120-Z.1"></a>If a <span class="emphasis"><em>ret</em></span>
                                 instruction returns to a point in the subroutine call chain
                                 above the <span class="emphasis"><em>ret</em></span> instruction corresponding to a given instance of
                                 type <code class="literal">returnAddress</code>, then that instance can never be used as a
                                 return address.
                        </p>
                     </li>
                  </ul>
               </div>
            </div>
         </div>
         <div class="section" title="4.10.&nbsp;Verification of class Files">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.10"></a>4.10.&nbsp;Verification of <code class="literal">class</code> Files
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.10-100"></a>Even though a compiler for
               the Java programming language must only produce <code class="literal">class</code> files that satisfy all the
               static and structural constraints in the previous sections, the Java Virtual Machine
               has no guarantee that any file it is asked to load was generated by
               that compiler or is properly formed. Applications such as web browsers
               do not download source code, which they then compile; these
               applications download already-compiled <code class="literal">class</code> files. The browser
               needs to determine whether the <code class="literal">class</code> file was produced by a
               trustworthy compiler or by an adversary attempting to exploit the
               Java Virtual Machine.
            </p>
            <p class="note">An additional problem with compile-time checking is
               version skew. A user may have successfully compiled a class,
               say <code class="literal">PurchaseStockOptions</code>, to be a subclass
               of <code class="literal">TradingClass</code>. But the definition of
               <code class="literal">TradingClass</code> might have changed since the time the
               class was compiled in a way that is not compatible with pre-existing
               binaries. Methods might have been deleted or had their return types or
               modifiers changed. Fields might have changed types or changed from
               instance variables to class variables. The access modifiers of a
               method or variable may have changed from <code class="literal">public</code> to <code class="literal">private</code>. For a
               discussion of these issues, see Chapter 13, "Binary Compatibility," in
               <em class="citetitle">The Java Language Specification, Java SE 7 Edition</em>.
            </p>
            <p class="norm"><a name="jvms-4.10-110"></a>Because of these potential
               problems, the Java Virtual Machine needs to verify for itself that the desired
               constraints are satisfied by the <code class="literal">class</code> files it attempts to
               incorporate. A Java Virtual Machine implementation verifies that each <code class="literal">class</code> file
               satisfies the necessary constraints at linking time
               (<a class="xref" href="jvms-5.html#jvms-5.4" title="5.4.&nbsp;Linking">&sect;5.4</a>). 
            </p>
            <p class="norm"><a name="jvms-4.10-120"></a>Linking-time verification
               enhances the performance of the interpreter. Expensive checks that
               would otherwise have to be performed to verify constraints at run time
               for each interpreted instruction can be eliminated. The Java Virtual Machine can
               assume that these checks have already been performed. For example, the
               Java Virtual Machine will already know the following:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-120-A"></a>There are no operand
                            stack overflows or underflows.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-120-B"></a>All local variable uses
                            and stores are valid.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-120-C"></a>The arguments to all
                            the Java Virtual Machine instructions are of valid types.
                     </p>
                  </li>
               </ul>
            </div>
            <p class="norm"><a name="jvms-4.10-130"></a>The verifier also performs
               verification that can be done without looking at the <code class="literal">code</code> array of
               the <code class="literal">Code</code> attribute (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). The checks
               performed include the following:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-130-A"></a>Ensuring that <code class="literal">final</code>
                            classes are not subclassed and that <code class="literal">final</code> methods are not
                            overridden (<a class="xref" href="jvms-5.html#jvms-5.4.5" title="5.4.5.&nbsp;Method overriding">&sect;5.4.5</a>).
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-130-B"></a>Checking that every
                            class (except <code class="literal">Object</code>) has a direct superclass.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-130-C"></a>Ensuring that the
                            constant pool satisfies the documented static constraints; for
                            example, that each <code class="literal">CONSTANT_Class_info</code> structure in the constant
                            pool contains in its <code class="literal">name_index</code> item a valid
                            constant pool index for a <code class="literal">CONSTANT_Utf8_info</code> structure.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-130-D"></a>Checking that all field
                            references and method references in the constant pool have valid
                            names, valid classes, and a valid type descriptor.
                     </p>
                  </li>
               </ul>
            </div>
            <p class="norm"><a name="jvms-4.10-140"></a>Note that these checks do not
               ensure that the given field or method actually exists in the given
               class, nor do they check that the type descriptors given refer to real
               classes. They ensure only that these items are well formed. More
               detailed checking is performed when the bytecodes themselves are
               verified, and during resolution.
            </p>
            <p class="norm"><a name="jvms-4.10-200"></a>There are two strategies that
               Java Virtual Machine implementations may use for verification:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-200-A"></a>Verification by type
                              checking must be used to verify <code class="literal">class</code> files whose version
                              number is greater than or equal to 50.0.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.10-200-B"></a>Verification by type
                              inference must be supported by all Java Virtual Machine implementations, except those conforming to the
                              Java ME CLDC and Java Card profiles, in order to verify <code class="literal">class</code>
                              files whose version number is less than 50.0.
                     </p>
                     <p class="norm"><a name="jvms-4.10-200-B.1"></a>Verification
                              on Java Virtual Machine implementations supporting the
                              Java ME CLDC and Java Card profiles is governed by their
                              respective specifications.
                     </p>
                  </li>
               </ul>
            </div>
            <div class="section" title="4.10.1.&nbsp;Verification by Type Checking">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.10.1"></a>4.10.1.&nbsp;Verification by Type Checking
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.10.1-100"></a>A <code class="literal">class</code> file whose
                  version number is greater than or equal to 50.0
                  (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>) must be verified using the type checking
                  rules given in this section.
               </p>
               <p class="norm"><a name="jvms-4.10.1-110"></a>If, and only if, a <code class="literal">class</code>
                  file's version number equals 50.0, then if the type checking fails, a
                  Java Virtual Machine implementation may choose to attempt to perform verification by
                  type inference (<a class="xref" href="jvms-4.html#jvms-4.10.2" title="4.10.2.&nbsp;Verification by Type Inference">&sect;4.10.2</a>).
               </p>
               <p class="note">This is a pragmatic adjustment, designed to ease the
                  transition to the new verification discipline. Many tools that
                  manipulate <code class="literal">class</code> files may alter the bytecodes of a method in a
                  manner that requires adjustment of the method's stack map frames. If a
                  tool does not make the necessary adjustments to the stack map frames,
                  type checking may fail even though the bytecode is in principle valid
                  (and would consequently verify under the old type inference
                  scheme). To allow implementors time to adapt their
                  tools, Java Virtual Machine implementations may fall back to
                  the older verification discipline, but only for a limited time.
               </p>
               <p class="note">In cases where type checking fails but type inference
                  is invoked and succeeds, a certain performance penalty is
                  expected. Such a penalty is unavoidable. It also should serve as a
                  signal to tool vendors that their output needs to be adjusted, and
                  provides vendors with additional incentive to make these
                  adjustments.
               </p>
               <p class="note">In summary, failover to verification by type
                  inference supports both the gradual addition of stack map frames to
                  the Java SE platform (if they are not present in a version 50.0 <code class="literal">class</code>
                  file, failover is allowed) and the gradual removal of the <span class="emphasis"><em>jsr</em></span> and
                  <span class="emphasis"><em>jsr_w</em></span> instructions from the Java SE platform (if they are present in a
                  version 50.0 <code class="literal">class</code> file, failover is allowed).
               </p>
               <p class="norm"><a name="jvms-4.10.1-120"></a>If a Java Virtual Machine implementation
                  ever attempts to perform verification by type inference on version
                  50.0 class files, it must do so in all cases where verification by
                  type checking fails.
               </p>
               <p class="note">This means that a Java Virtual Machine implementation cannot choose
                  to resort to type inference in once case and not in another. It must
                  either reject <code class="literal">class</code> files that do not verify via type checking, or
                  else consistently failover to the type inferencing verifier whenever
                  type checking fails.
               </p>
               <p class="norm"><a name="jvms-4.10.1-200"></a>The type checker enforces
                  type rules that are specified by means of Prolog clauses. English
                  language text is used to describe the type rules in an informal way,
                  while the Prolog clauses provide a formal specification.
               </p>
               <p class="norm"><a name="jvms-4.10.1-210"></a>The type checker requires a
                  list of stack map frames for each method with a <code class="literal">Code</code> attribute
                  (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>). A list of stack map frames is given by
                  the <code class="literal">StackMapTable</code> attribute (<a class="xref" href="jvms-4.html#jvms-4.7.4" title="4.7.4.&nbsp;The StackMapTable Attribute">&sect;4.7.4</a>) of a
                  <code class="literal">Code</code> attribute. The intent is that a stack map frame must appear at
                  the beginning of each basic block in a method. The stack map frame
                  specifies the verification type of each operand stack entry and of
                  each local variable at the start of each basic block. The type checker
                  reads the stack map frames for each method with a <code class="literal">Code</code> attribute and
                  uses these maps to generate a proof of the type safety of the
                  instructions in the <code class="literal">Code</code> attribute.
               </p>
               <p class="norm">A class is type safe if all its methods are type
                  safe, and it does not subclass a <code class="literal">final</code> class.
               </p><pre class="programlisting">
classIsTypeSafe(Class) :-
    classClassName(Class, Name), 
    classDefiningLoader(Class, L),
    superclassChain(Name, L, Chain),
    Chain \= [],
    classSuperClassName(Class, SuperclassName),
    loadedClass(SuperclassName, L, Superclass),
    classIsNotFinal(Superclass),	 
    classMethods(Class, Methods), 
    checklist(methodIsTypeSafe(Class), Methods).
</pre><pre class="programlisting">
classIsTypeSafe(Class) :-
    classClassName(Class, 'java/lang/Object'),
    classDefiningLoader(Class, L),
    isBootstrapLoader(L),
    classMethods(Class, Methods), 
    checklist(methodIsTypeSafe(Class), Methods).
</pre><p class="norm">The Prolog
                  predicate <code class="literal">classIsTypeSafe</code> assumes
                  that <code class="literal">Class</code> is a Prolog term representing a binary
                  class that has been successfully parsed and loaded. This specification
                  does not mandate the precise structure of this term, but does require
                  that certain predicates be defined upon it.
               </p>
               <p class="note">For example, we assume a predicate
                  <code class="literal">classMethods(Class, Methods)</code> that, given a term
                  representing a class as described above as its first argument, binds
                  its second argument to a list comprising all the methods of the class,
                  represented in a convenient form described later.
               </p>
               <p class="norm-error"><a name="jvms-4.10.1-300"></a>Iff the
                  predicate <code class="literal">classIsTypeSafe</code> is not true, the type
                  checker must throw the exception <code class="literal">VerifyError</code> to indicate that the <code class="literal">class</code>
                  file is malformed. Otherwise, the <code class="literal">class</code> file has type checked
                  successfully and bytecode verification has completed
                  successfully.
               </p>
               <p class="norm"><a name="jvms-4.10.1-400"></a>The rest of this section
                  explains the process of type checking in detail:
               </p>
               <div class="norm">
                  <ul class="norm" type="disc">
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-A"></a>First, we give Prolog
                                 predicates for core Java Virtual Machine artifacts like classes and methods
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.1" title="4.10.1.1.&nbsp;Accessors for Java Virtual Machine Artifacts">&sect;4.10.1.1</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-B"></a>Second, we specify
                                 the type system known to the type checker
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.2" title="4.10.1.2.&nbsp;Verification Type System">&sect;4.10.1.2</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-C"></a>Third, we specify the
                                 Prolog representation of instructions and stack map frames
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.3" title="4.10.1.3.&nbsp;Instruction Representation">&sect;4.10.1.3</a>,
                                 <a class="xref" href="jvms-4.html#jvms-4.10.1.4" title="4.10.1.4.&nbsp;Stack Map Frame Representation">&sect;4.10.1.4</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-D"></a>Fourth, we specify
                                 how a method is type checked, for methods without code
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.5" title="4.10.1.5.&nbsp;Type Checking Abstract and Native Methods">&sect;4.10.1.5</a>) and methods with code
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.6" title="4.10.1.6.&nbsp;Type Checking Methods with Code">&sect;4.10.1.6</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-E"></a>Fifth, we discuss
                                 type checking issues common to all load and store instructions
                                 (<a class="xref" href="jvms-4.html#jvms-4.10.1.7" title="4.10.1.7.&nbsp;Type Checking Load and Store Instructions">&sect;4.10.1.7</a>), and also issues of access to
                                 <code class="literal">protected</code> members (<a class="xref" href="jvms-4.html#jvms-4.10.1.8" title="4.10.1.8.&nbsp;Type Checking for protected Members">&sect;4.10.1.8</a>).
                        </p>
                     </li>
                     <li class="listitem">
                        <p class="norm"><a name="jvms-4.10.1-400-F"></a>Finally, we specify
                                  the rules to type check each instruction
                                  (<a class="xref" href="jvms-4.html#jvms-4.10.1.9" title="4.10.1.9.&nbsp;Type Checking Instructions">&sect;4.10.1.9</a>).
                        </p>
                     </li>
                  </ul>
               </div>
               <div class="section" title="4.10.1.1.&nbsp;Accessors for Java Virtual Machine Artifacts">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.1"></a>4.10.1.1.&nbsp;Accessors for Java Virtual Machine Artifacts
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.1-100"></a>We stipulate the
                     existence of 22 Prolog predicates ("accessors") that have certain
                     expected behavior but whose formal definitions are not given in this
                     specification.
                  </p>
                  <div class="variablelist">
                     <dl>
                        <dt><span class="term">classClassName(Class, ClassName)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-A"></a>Extracts the
                              	name, <code class="literal">ClassName</code>, of the
                              	class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">classIsInterface(Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-B"></a>True iff the
                              	class, <code class="literal">Class</code>, is an interface.
                           </p>
                        </dd>
                        <dt><span class="term">classIsNotFinal(Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-C"></a>True iff the
                              	class, <code class="literal">Class</code>, is not a <code class="literal">final</code>
                              	class.
                           </p>
                        </dd>
                        <dt><span class="term">classSuperClassName(Class, SuperClassName)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-D"></a>Extracts the
                              	name, <code class="literal">SuperClassName</code>, of the superclass of
                              	class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">classInterfaces(Class, Interfaces)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-E"></a>Extracts a
                              	list, <code class="literal">Interfaces</code>, of the direct
                              	superinterfaces of the class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">classMethods(Class, Methods)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-F"></a>Extracts a
                              	list, <code class="literal">Methods</code>, of the methods declared in
                              	the class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">classAttributes(Class, Attributes)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-G"></a>Extracts a
                              	list, <code class="literal">Attributes</code>, of the attributes of the
                              	class <code class="literal">Class</code>.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.1-100-G.1"></a>Each attribute
                              	is represented as a functor application of the form
                              	<code class="literal">attribute(AttributeName, AttributeContents)</code>,
                                      where <code class="literal">AttributeName</code> is the name of the
                              	attribute. The format of the attribute's contents is
                              	unspecified.
                           </p>
                        </dd>
                        <dt><span class="term">classDefiningLoader(Class, Loader)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-H"></a>Extracts the
                              	defining class loader, <code class="literal">Loader</code>, of the
                              	class <code class="literal">Class</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isBootstrapLoader(Loader)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-I"></a>True iff the
                              	class loader <code class="literal">Loader</code> is the bootstrap class
                              	loader.
                           </p>
                        </dd>
                        <dt><span class="term">loadedClass(Name, InitiatingLoader, ClassDefinition)</span></dt>
                        <dd>
                           <p class="norm">True iff there exists a class
                              	named <code class="literal">Name</code> whose representation (in
                              	accordance with this specification) when loaded by the class
                              	loader <code class="literal">InitiatingLoader</code> is
                              	<code class="literal">ClassDefinition</code>.
                           </p>
                        </dd>
                        <dt><span class="term">methodName(Method, Name)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-J"></a>Extracts the
                              	name, <code class="literal">Name</code>, of the
                              	method <code class="literal">Method</code>.
                           </p>
                        </dd>
                        <dt><span class="term">methodAccessFlags(Method, AccessFlags)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-K"></a>Extracts the
                              	access flags, <code class="literal">AccessFlags</code>, of the
                              	method <code class="literal">Method</code>.
                           </p>
                        </dd>
                        <dt><span class="term">methodDescriptor(Method, Descriptor)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-L"></a>Extracts the
                              	descriptor, <code class="literal">Descriptor</code>, of the
                              	method <code class="literal">Method</code>.
                           </p>
                        </dd>
                        <dt><span class="term">methodAttributes(Method, Attributes)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-M"></a>Extracts a
                              	list, <code class="literal">Attributes</code>, of the attributes of the
                              	method <code class="literal">Method</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isNotFinal(Method, Class)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-N"></a>True
                              	iff <code class="literal">Method</code> in
                              	class <code class="literal">Class</code> is not <code class="literal">final</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isProtected(MemberClass, MemberName, MemberDescriptor)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-O"></a>True iff there
                              	is a member named <code class="literal">MemberName</code> with
                              	descriptor <code class="literal">MemberDescriptor</code> in the
                              	class <code class="literal">MemberClass</code> and it is
                              	<code class="literal">protected</code>.
                           </p>
                        </dd>
                        <dt><span class="term">isNotProtected(MemberClass, MemberName, MemberDescriptor)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-P"></a>True iff there
                              	is a member named <code class="literal">MemberName</code> with
                              	descriptor <code class="literal">MemberDescriptor</code> in the
                              	class <code class="literal">MemberClass</code> and it is not
                              	<code class="literal">protected</code>.
                           </p>
                        </dd>
                        <dt><span class="term">parseFieldDescriptor(Descriptor, Type)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-Q"></a>Converts a field
                              	descriptor, <code class="literal">Descriptor</code>, into the
                              	corresponding verification type <code class="literal">Type</code>
                              	(<a class="xref" href="jvms-4.html#jvms-4.10.1.2" title="4.10.1.2.&nbsp;Verification Type System">&sect;4.10.1.2</a>).
                           </p>
                        </dd>
                        <dt><span class="term">parseMethodDescriptor(Descriptor, ArgTypeList, ReturnType)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-R"></a>Converts a
                              	method descriptor, <code class="literal">Descriptor</code>, into a list
                              	of verification types, <code class="literal">ArgTypeList</code>,
                              	corresponding to the method argument types, and a verification
                              	type, <code class="literal">ReturnType</code>, corresponding to the
                              	return type.
                           </p>
                        </dd>
                        <dt><span class="term">parseCodeAttribute(Class, Method, FrameSize, MaxStack, ParsedCode, Handlers, StackMap)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-S"></a>Extracts the
                              	instruction stream, <code class="literal">ParsedCode</code>, of the method
                              	<code class="literal">Method</code> in <code class="literal">Class</code>, as well
                              	as the maximum operand stack
                              	size, <code class="literal">MaxStack</code>, the maximal number of local
                              	variables, <code class="literal">FrameSize</code>, the exception
                              	handlers, <code class="literal">Handlers</code>, and the stack
                              	map <code class="literal">StackMap</code>.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.1-100-S.1"></a>The
                              	representation of the instruction stream and stack map
                              	attribute must be as specified in
                              	<a class="xref" href="jvms-4.html#jvms-4.10.1.3" title="4.10.1.3.&nbsp;Instruction Representation">&sect;4.10.1.3</a> and
                              	<a class="xref" href="jvms-4.html#jvms-4.10.1.4" title="4.10.1.4.&nbsp;Stack Map Frame Representation">&sect;4.10.1.4</a>.
                           </p>
                        </dd>
                        <dt><span class="term">samePackageName(Class1, Class2)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-T"></a>True iff the
                              	package names of <code class="literal">Class1</code>
                              	and <code class="literal">Class2</code> are the same.
                           </p>
                        </dd>
                        <dt><span class="term">differentPackageName(Class1, Class2)</span></dt>
                        <dd>
                           <p class="norm"><a name="jvms-4.10.1.1-100-U"></a>True iff the
                              	package names of <code class="literal">Class1</code>
                              	and <code class="literal">Class2</code> are different.
                           </p>
                        </dd>
                     </dl>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.1-200"></a>When type checking a
                     method's body, it is convenient to access information about the
                     method. For this purpose, we define
                     an <span class="emphasis"><em>environment</em></span>, a six-tuple consisting of:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm">a class</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">a method</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">the declared return type of the method</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">the instructions in a method</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">the maximal size of the operand stack</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">a list of exception handlers</p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.1-300"></a>We specify accessors to
                     extract information from the environment.
                  </p><pre class="programlisting">
allInstructions(Environment, Instructions) :-
    Environment = environment(_Class, _Method, _ReturnType,
                              Instructions, _, _).

exceptionHandlers(Environment, Handlers) :-
    Environment = environment(_Class, _Method, _ReturnType,
                              _Instructions, _, Handlers).

maxOperandStackLength(Environment, MaxStack) :-
    Environment = environment(_Class, _Method, _ReturnType,
                              _Instructions, MaxStack, _Handlers).

thisClass(Environment, class(ClassName, L)) :-
    Environment = environment(Class, _Method, _ReturnType,
                              _Instructions, _, _),
    classDefiningLoader(Class, L),
    classClassName(Class, ClassName).

thisMethodReturnType(Environment, ReturnType) :-
    Environment = environment(_Class, _Method, ReturnType,
                              _Instructions, _, _).
</pre><p class="norm">We specify additional predicates to extract
                     higher-level information from the environment.
                  </p><pre class="programlisting">
offsetStackFrame(Environment, Offset, StackFrame) :-
    allInstructions(Environment, Instructions),
    member(stackMap(Offset, StackFrame), Instructions).

currentClassLoader(Environment, Loader) :-
    thisClass(Environment, class(_, Loader)).
</pre><p class="norm"><a name="jvms-4.10.1.1-400"></a>Finally, we specify a
                     general predicate used throughout the type rules:
                  </p><pre class="programlisting">
notMember(_, []).
notMember(X, [A | More]) :- X \= A, notMember(X, More).
</pre><p class="note">The principle guiding the determination as to which
                     accessors are stipulated and which are fully specified is that we do
                     not want to over-specify the representation of the <code class="literal">class</code>
                     file. Providing specific accessors to the <code class="literal">Class</code>
                     or <code class="literal">Method</code> term would force us to completely specify
                     the format for a Prolog term
                     representing the <code class="literal">class</code> file.
                  </p>
               </div>
               <div class="section" title="4.10.1.2.&nbsp;Verification Type System">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.2"></a>4.10.1.2.&nbsp;Verification Type System
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.2-100"></a>The type checker enforces
                     a type system based upon a hierarchy of <span class="emphasis"><em>verification
                           types</em></span>, illustrated below.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.2-110"></a>Most verification types
                     have a direct correspondence with the types represented by field
                     descriptors (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>) in
                     <a class="xref" href="jvms-4.html#jvms-4.3.2-200" title="Table&nbsp;4.2.&nbsp;Interpretation of FieldType characters">Table&nbsp;4.2</a>. The only exceptions are the field
                     descriptors <code class="literal">B</code>, <code class="literal">C</code>, <code class="literal">S</code>, and
                     <code class="literal">Z</code>, all of which correspond to the verification type
                     <code class="literal">int</code>.
                  </p><pre class="programlisting">
Verification type hierarchy:

                             top
                 ____________/\____________
                /                          \
               /                            \
            oneWord                       twoWord
           /   |   \                     /       \
          /    |    \                   /         \
        int  float  reference        long        double
                     /     \
                    /       \____________
                   /                     \
                  /                       \
           uninitialized                Object
            /         \                     \
           /           \                     \
uninitializedThis  uninitialized(offset)     +------------------+
                                             |  Java reference  |
                                             |  type hierarchy  |
                                             +------------------+
                                                      |
                                                      |
                                                     null
</pre><p class="norm">Subtyping is reflexive.</p><pre class="programlisting">
isAssignable(X, X).
</pre><p class="norm">The verification types which are not
                     reference types in the Java programming language have subtype rules of the
                     form:
                  </p><pre class="programlisting">
isAssignable(v, X) :- isAssignable(the_direct_supertype_of_v, X).
</pre><p class="norm">That is, <code class="literal">v</code> is a subtype
                     of <code class="literal">X</code> if the direct supertype
                     of <code class="literal">v</code> is a subtype of <code class="literal">X</code>. The
                     rules are:
                  </p><pre class="programlisting">
isAssignable(oneWord, top).
isAssignable(twoWord, top).

isAssignable(int, X)    :- isAssignable(oneWord, X).
isAssignable(float, X)  :- isAssignable(oneWord, X).
isAssignable(long, X)   :- isAssignable(twoWord, X).
isAssignable(double, X) :- isAssignable(twoWord, X).

isAssignable(reference, X)   :- isAssignable(oneWord, X).
isAssignable(class(_, _), X) :- isAssignable(reference, X).
isAssignable(arrayOf(_), X)  :- isAssignable(reference, X).

isAssignable(uninitialized, X)     :- isAssignable(reference, X).
isAssignable(uninitializedThis, X) :- isAssignable(uninitialized, X).
isAssignable(uninitialized(_), X)  :- isAssignable(uninitialized, X).

isAssignable(null, class(_, _)).
isAssignable(null, arrayOf(_)).
isAssignable(null, X) :- isAssignable(class('java/lang/Object', BL), X),
                         isBootstrapLoader(BL).
</pre><p class="note">These subtype rules are not necessarily the most
                     obvious formulation of subtyping. There is a clear split between
                     subtyping rules for reference types in the Java programming language, and rules for
                     the remaining verification types. The split allows us to state general
                     subtyping relations between Java programming language reference types and other
                     verification types. These relations hold independently of a Java
                     reference type's position in the type hierarchy, and help to prevent
                     excessive class loading by a Java Virtual Machine implementation. For example, we do
                     not want to start climbing the Java superclass hierarchy in response
                     to a query of the form <code class="literal">class(foo, L) &lt;:
                        twoWord</code>.
                  </p>
                  <p class="note">We also have a rule that says subtyping is
                     reflexive, so together these rules cover most verification types that
                     are not reference types in the Java programming language.
                  </p>
                  <p class="norm">Subtype rules for the reference types in the
                     Java programming language are specified recursively  with
                     <code class="literal">isJavaAssignable</code>.
                  </p><pre class="programlisting">
isAssignable(class(X, Lx), class(Y, Ly)) :-
    isJavaAssignable(class(X, Lx), class(Y, Ly)).

isAssignable(arrayOf(X), class(Y, L)) :-
    isJavaAssignable(arrayOf(X), class(Y, L)).

isAssignable(arrayOf(X), arrayOf(Y)) :-
    isJavaAssignable(arrayOf(X), arrayOf(Y)).
</pre><p class="norm">For assignments, interfaces are treated like
                     <code class="literal">Object</code>.
                  </p><pre class="programlisting">
isJavaAssignable(class(_, _), class(To, L)) :-
    loadedClass(To, L, ToClass),
    classIsInterface(ToClass).

isJavaAssignable(From, To) :-
    isJavaSubclassOf(From, To).
</pre><p class="norm">Array types are subtypes of <code class="literal">Object</code>. The intent is
                     also that array types are subtypes of <code class="literal">Cloneable</code> and
                     <code class="literal">java.io.Serializable</code>.
                  </p><pre class="programlisting">
isJavaAssignable(arrayOf(_), class('java/lang/Object', BL)) :-
    isBootstrapLoader(BL).

isJavaAssignable(arrayOf(_), X) :-
    isArrayInterface(X).

isArrayInterface(class('java/lang/Cloneable', BL)) :-
    isBootstrapLoader(BL).

isArrayInterface(class('java/io/Serializable', BL)) :-
    isBootstrapLoader(BL).
</pre><p class="norm">Subtyping between arrays of primitive type is the
                     identity relation.
                  </p><pre class="programlisting">
isJavaAssignable(arrayOf(X), arrayOf(Y)) :-
    atom(X),
    atom(Y),
    X = Y.
</pre><p class="norm">Subtyping between arrays of reference type is
                     covariant.
                  </p><pre class="programlisting">
isJavaAssignable(arrayOf(X), arrayOf(Y)) :-
    compound(X), compound(Y), isJavaAssignable(X, Y).
</pre><p class="norm">Subclassing is reflexive.</p><pre class="programlisting">
isJavaSubclassOf(class(SubclassName, L), class(SubclassName, L)).
</pre><pre class="programlisting">
isJavaSubclassOf(class(SubclassName, LSub), class(SuperclassName, LSuper)) :-
    superclassChain(SubclassName, LSub, Chain),
    member(class(SuperclassName, L), Chain),
    loadedClass(SuperclassName, L, Sup),
    loadedClass(SuperclassName, LSuper, Sup).

superclassChain(ClassName, L, [class(SuperclassName, Ls) | Rest]) :-
    loadedClass(ClassName, L, Class),
    classSuperClassName(Class, SuperclassName),
    classDefiningLoader(Class, Ls),
    superclassChain(SuperclassName, Ls, Rest).

superclassChain('java/lang/Object', L, []) :-
    loadedClass('java/lang/Object', L, Class),
    classDefiningLoader(Class, BL),
    isBootstrapLoader(BL).
</pre></div>
               <div class="section" title="4.10.1.3.&nbsp;Instruction Representation">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.3"></a>4.10.1.3.&nbsp;Instruction Representation
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.3-100"></a>Individual bytecode
                     instructions are represented in Prolog as terms whose functor is the
                     name of the instruction and whose arguments are its parsed
                     operands.
                  </p>
                  <p class="note">For example, an <span class="emphasis"><em>aload</em></span> instruction is represented
                     as the term <code class="literal">aload(N)</code>, which includes the
                     index <code class="literal">N</code> that is the operand of the
                     instruction.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.3-110"></a>The instructions as a
                     whole are represented as a list of terms of the form:
                  </p><pre class="screen">
instruction(Offset, AnInstruction)
</pre><p class="note">For example, <code class="literal">instruction(21,
                        aload(1))</code>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.3-120"></a>The order of instructions
                     in this list must be the same as in the <code class="literal">class</code> file.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.3-130"></a>A few instructions have
                     operands that are constant pool entries representing fields, methods,
                     and dynamic call sites. In the constant pool, a field is represented
                     by a <code class="literal">CONSTANT_Fieldref_info</code> structure, a method is represented by a
                     <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure (for an interface's
                     method) or a <code class="literal">CONSTANT_Methodref_info</code> structure (for a class's
                     method), and a dynamic call site is represented by a
                     <code class="literal">CONSTANT_InvokeDynamic_info</code> structure (<a class="xref" href="jvms-4.html#jvms-4.4.2" title="4.4.2.&nbsp;The CONSTANT_Fieldref_info, CONSTANT_Methodref_info, and CONSTANT_InterfaceMethodref_info Structures">&sect;4.4.2</a>,
                     <a class="xref" href="jvms-4.html#jvms-4.4.10" title="4.4.10.&nbsp;The CONSTANT_InvokeDynamic_info Structure">&sect;4.4.10</a>). Such structures are represented as
                     functor applications of the form:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.3-130-A"></a><code class="literal">field(FieldClassName,
                                       FieldName, FieldDescriptor)</code> for a field, where
                                    <code class="literal">FieldClassName</code> is the name of the class
                                    referenced by the <code class="literal">class_index</code> item in the
                                    <code class="literal">CONSTANT_Fieldref_info</code> structure,
                                    and <code class="literal">FieldName</code>
                                    and <code class="literal">FieldDescriptor</code> correspond to the name
                                    and field descriptor referenced by
                                    the <code class="literal">name_and_type_index</code> item of the
                                    <code class="literal">CONSTANT_Fieldref_info</code> structure.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.3-130-B"></a><code class="literal">imethod(MethodIntfName,
                                       MethodName, MethodDescriptor)</code> for an interface's
                                    method, where <code class="literal">MethodIntfName</code> is the name of
                                    the interface referenced by the <code class="literal">class_index</code>
                                    item of the <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure,
                                    and <code class="literal">MethodName</code>
                                    and <code class="literal">MethodDescriptor</code> correspond to the name
                                    and method descriptor referenced by
                                    the <code class="literal">name_and_type_index</code> item of the
                                    <code class="literal">CONSTANT_InterfaceMethodref_info</code> structure;
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.3-130-C"></a><code class="literal">method(MethodClassName,
                                       MethodName, MethodDescriptor)</code> for a class's method,
                                    where <code class="literal">MethodClassName</code> is the name of the
                                    class referenced by the <code class="literal">class_index</code> item of
                                    the <code class="literal">CONSTANT_Methodref_info</code> structure,
                                    and <code class="literal">MethodName</code> and
                                    <code class="literal">MethodDescriptor</code> correspond to the name and
                                    method descriptor referenced by
                                    the <code class="literal">name_and_type_index</code> item of the
                                    <code class="literal">CONSTANT_Methodref_info</code> structure; and
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.3-130-D"></a><code class="literal">dmethod(CallSiteName,
                                       MethodDescriptor)</code> for a dynamic call site, where
                                    <code class="literal">CallSiteName</code>
                                    and <code class="literal">MethodDescriptor</code> correspond to the name
                                    and method descriptor referenced by
                                    the <code class="literal">name_and_type_index</code> item of the
                                    <code class="literal">CONSTANT_InvokeDynamic_info</code> structure.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.3-140"></a>For clarity, we assume
                     that
                     field and method descriptors (<a class="xref" href="jvms-4.html#jvms-4.3.2" title="4.3.2.&nbsp;Field Descriptors">&sect;4.3.2</a>)
                     are mapped into more readable names: the leading <code class="literal">L</code> and
                     trailing <code class="literal">;</code> are dropped from class names, and
                     the <span class="emphasis"><em>BaseType</em></span> characters used for primitive types
                     are mapped to the names of those types.
                  </p>
                  <p class="note">For example, a <span class="emphasis"><em>getfield</em></span> instruction whose operand
                     was an index into the constant pool that refers to a
                     field <code class="literal">foo</code> of type <code class="literal">F</code> in
                     class <code class="literal">Bar</code> would be represented
                     as <code class="literal">getfield(field('Bar', 'foo', 'F'))</code>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.3-150"></a>Constant pool entries
                     that refer to constant values, such as <code class="literal">CONSTANT_String</code>,
                     <code class="literal">CONSTANT_Integer</code>, <code class="literal">CONSTANT_Float</code>, <code class="literal">CONSTANT_Long</code>,
                     <code class="literal">CONSTANT_Double</code>, and <code class="literal">CONSTANT_Class</code>, are encoded via the functors
                     whose names are <code class="literal">string</code>, <code class="literal">int</code>, <code class="literal">float</code>, <code class="literal">long</code>,
                     <code class="literal">double</code>, and <code class="literal">classConstant</code> respectively.
                  </p>
                  <p class="note">For example, an <span class="emphasis"><em>ldc</em></span> instruction for loading the
                     integer 91 would be encoded as <code class="literal">ldc(int(91))</code>.
                  </p>
               </div>
               <div class="section" title="4.10.1.4.&nbsp;Stack Map Frame Representation">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.4"></a>4.10.1.4.&nbsp;Stack Map Frame Representation
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.4-100"></a>Stack map frames are
                     represented in Prolog as a list of terms of the form:
                  </p><a name="jvms-4.10.1.4-110"></a><pre class="screen">
stackMap(Offset, TypeState)
</pre><p class="norm"><a name="jvms-4.10.1.4-120"></a>where <code class="literal">Offset</code> is an
                     integer indicating the offset of the instruction the frame map applies
                     to, and <code class="literal">TypeState</code> is the expected incoming type
                     state (<a class="xref" href="jvms-4.html#jvms-4.7.4" title="4.7.4.&nbsp;The StackMapTable Attribute">&sect;4.7.4</a>) for that instruction.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.4-130"></a>The order
                     of stack map frames in this list must be the same
                     as in the <code class="literal">class</code> file.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.4-200"></a><code class="literal">TypeState</code> has the
                     form:
                  </p><a name="jvms-4.10.1.4-210"></a><pre class="screen">
frame(Locals, OperandStack, Flags)
</pre><p class="norm"><a name="jvms-4.10.1.4-220"></a>where:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.4-220-A"></a><code class="literal">Locals</code> is a list
                                    of verification types, such that the Nth element of the list
                                    (with 0-based indexing) represents the type of local variable
                                    N.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-220-A.1"></a>If any local
                                    variable in <code class="literal">Locals</code> has the type
                                    <code class="literal">uninitializedThis</code>, then <code class="literal">Flags</code> has the
                                    single element <code class="literal">flagThisUninit</code>, otherwise it is an empty
                                    list.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.4-220-B"></a><code class="literal">OperandStack</code> is
                                    a list of types, such that the first element represents the type
                                    of the top of the operand stack, and the elements below the top
                                    follow in the appropriate order.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-220-B.1"></a>Types of size 2 (<code class="literal">long</code>
                                    and <code class="literal">double</code>) are represented by two entries, with the first
                                    entry being <code class="literal">top</code> and the second one being the type
                                    itself.
                           </p>
                           <p class="note">For example, a stack with a <code class="literal">double</code>, an <code class="literal">int</code>,
                                    and a <code class="literal">long</code> would be represented as <code class="literal">[top, double, int,
                                       top, long]</code>.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-220-B.2"></a>Reference types
                                    other than array types are represented using the
                                    functor <code class="literal">class</code>.
                                    <code class="literal">class(N, L)</code> represents the class whose binary
                                    name is <code class="literal">N</code> as loaded by the
                                    loader <code class="literal">L</code>. Note that <code class="literal">L</code> is
                                    an initiating loader (<a class="xref" href="jvms-5.html#jvms-5.3" title="5.3.&nbsp;Creation and Loading">&sect;5.3</a>) of the class
                                    represented by <code class="literal">class(N, L)</code> and may, or may
                                    not, be the class's defining loader.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-220-B.3"></a>Array types are
                                    represented by applying the functor <code class="literal">arrayOf</code>
                                    to an argument denoting the component type of the array.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-220-B.4"></a>The verification type
                                    <code class="literal">uninitialized(offset)</code> is represented by
                                    applying the functor <code class="literal">uninitialized</code> to an
                                    argument representing the numerical value of the
                                    <code class="literal">offset</code>.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-220-B.5"></a>Other verification
                                    types are represented in prolog as atoms whose name denotes the
                                    verification type in question.
                           </p>
                           <p class="note">The class <code class="literal">Object</code> would be represented as
                                    <code class="literal">class('java/lang/Object', BL)</code>,
                                    where <code class="literal">BL</code> is the bootstrap loader.
                           </p>
                           <p class="note">The types <code class="literal">int[]</code>
                                    and <code class="literal">Object[]</code> would be represented
                                    by <code class="literal">arrayOf(int)</code> and
                                    <code class="literal">arrayOf(class('java/lang/Object', BL))</code>
                                    respectively.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.1.4-220-C"></a><code class="literal">Flags</code> is a list
                                    which may either be empty or have the single element
                                    <code class="literal">flagThisUninit</code>.
                           </p>
                           <p class="norm"><a name="jvms-4.10.1.4-220-C.1"></a>This flag is used
                                    in constructors, to mark type states where initialization of
                                    this has not yet been completed. In such type states, it is
                                    illegal to return from the method.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.4-300"></a>Subtyping
                     (<a class="xref" href="jvms-4.html#jvms-4.10.1.2" title="4.10.1.2.&nbsp;Verification Type System">&sect;4.10.1.2</a>) is extended pointwise to type
                     states.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.4-310"></a>The local variable array
                     of a method has a fixed length by construction
                     (see <code class="literal">methodInitialStackFrame</code> in
                     <a class="xref" href="jvms-4.html#jvms-4.10.1.6" title="4.10.1.6.&nbsp;Type Checking Methods with Code">&sect;4.10.1.6</a>) while the operand stack grows and
                     shrinks. Therefore, we require an explicit check on the length of the
                     operand stacks whose assignability is desired.
                  </p><pre class="programlisting">
frameIsAssignable(frame(Locals1, StackMap1, Flags1),
                  frame(Locals2, StackMap2, Flags2)) :-
    length(StackMap1, StackMapLength),
    length(StackMap2, StackMapLength),
    maplist(isAssignable, Locals1, Locals2),
    maplist(isAssignable, StackMap1, StackMap2),
    subset(Flags1, Flags2).
</pre><p class="norm"><a name="jvms-4.10.1.4-320"></a>The length of the operand
                     stack must not exceed the declared maximum stack length.
                  </p><pre class="programlisting">
operandStackHasLegalLength(Environment, OperandStack) :-
    length(OperandStack, Length),
    maxOperandStackLength(Environment, MaxStack),
    Length =&lt; MaxStack.
</pre><p class="norm"><a name="jvms-4.10.1.4-330"></a>Certain array
                     instructions (<a class="xref" href="jvms-4.html#jvms-4.10.1.9.aaload" title="aaload">&sect;<span class="emphasis"><em>aaload</em></span></a>,
                     <a class="xref" href="jvms-4.html#jvms-4.10.1.9.arraylength" title="arraylength">&sect;<span class="emphasis"><em>arraylength</em></span></a>,
                     <a class="xref" href="jvms-4.html#jvms-4.10.1.9.baload" title="baload">&sect;<span class="emphasis"><em>baload</em></span></a>,
                     <a class="xref" href="jvms-4.html#jvms-4.10.1.9.bastore" title="bastore">&sect;<span class="emphasis"><em>bastore</em></span></a>) peek at the types of values
                     on the operand stack in order to check they are array types. The
                     following clause accesses the I'th element of the operand stack from a
                     type state.
                  </p><pre class="programlisting">
nth1OperandStackIs(I, frame(_Locals, OperandStack, _Flags), Element) :-
    nth1(I, OperandStack, Element).
</pre><p class="norm"><a name="jvms-4.10.1.4-400"></a>
                     Manipulation of the operand stack by load and store instructions
                     (<a class="xref" href="jvms-4.html#jvms-4.10.1.7" title="4.10.1.7.&nbsp;Type Checking Load and Store Instructions">&sect;4.10.1.7</a>) is complicated by the fact that some
                     types occupy two entries on the stack. The predicates given below take
                     this into account, allowing the rest of the specification to abstract
                     from this issue.
                  </p>
                  <p class="norm">Pop a list of types off the stack.</p><pre class="programlisting">
canPop(frame(Locals, OperandStack, Flags), Types,
       frame(Locals, PoppedOperandStack, Flags)) :-
    popMatchingList(OperandStack, Types, PoppedOperandStack).

popMatchingList(OperandStack, [], OperandStack).
popMatchingList(OperandStack, [P | Rest], NewOperandStack) :-
    popMatchingType(OperandStack, P, TempOperandStack, _ActualType),
    popMatchingList(TempOperandStack, Rest, NewOperandStack).
</pre><p class="norm">Pop an individual type off the stack. More
                     precisely, if the logical top of the stack is some subtype of the
                     specified type, <code class="literal">Type</code>, then pop it. If a type occupies two stack
                     slots, the logical top of stack type is really the type just below the
                     top, and the top of stack is the unusable type <code class="literal">top</code>.
                  </p><pre class="programlisting">
popMatchingType([ActualType | OperandStack],
                Type, OperandStack, ActualType) :-
    sizeOf(Type, 1),
    isAssignable(ActualType, Type).

popMatchingType([top, ActualType | OperandStack],
                Type, OperandStack, ActualType) :-
    sizeOf(Type, 2),
    isAssignable(ActualType, Type).

sizeOf(X, 2) :- isAssignable(X, twoWord).
sizeOf(X, 1) :- isAssignable(X, oneWord).
sizeOf(top, 1).
</pre><p class="norm">Push a logical type onto the stack. The exact
                     behavior varies with the size of the type. If the pushed type is of
                     size 1, we just push it onto the stack. If the pushed type is of size
                     2, we push it, and then push <code class="literal">top</code>.
                  </p><pre class="programlisting">
pushOperandStack(OperandStack, 'void', OperandStack).
pushOperandStack(OperandStack, Type, [Type | OperandStack]) :-
    sizeOf(Type, 1).
pushOperandStack(OperandStack, Type, [top, Type | OperandStack]) :-
    sizeOf(Type, 2).
</pre><p class="norm">Push a list of types onto the stack if there is
                     space.
                  </p><pre class="programlisting">
canSafelyPush(Environment, InputOperandStack, Type, OutputOperandStack) :-
    pushOperandStack(InputOperandStack, Type, OutputOperandStack),
    operandStackHasLegalLength(Environment, OutputOperandStack).

canSafelyPushList(Environment, InputOperandStack, Types,
                  OutputOperandStack) :-
    canPushList(InputOperandStack, Types, OutputOperandStack),
    operandStackHasLegalLength(Environment, OutputOperandStack).

canPushList(InputOperandStack, [], InputOperandStack).
canPushList(InputOperandStack, [Type | Rest], OutputOperandStack) :-
    pushOperandStack(InputOperandStack, Type, InterimOperandStack),
    canPushList(InterimOperandStack, Rest, OutputOperandStack).
</pre><p class="norm"><a name="jvms-4.10.1.4-500"></a>Manipulation of the
                     operand stack by the <span class="emphasis"><em>dup</em></span> instructions is specified entirely in terms
                     of the <span class="emphasis"><em>category</em></span> of types for values on the stack
                     (<a class="xref" href="jvms-2.html#jvms-2.11.1" title="2.11.1.&nbsp;Types and the Java Virtual Machine">&sect;2.11.1</a>).
                  </p>
                  <p class="norm">Category 1 types occupy a single stack slot. Popping
                     a logical type of category 1, <code class="literal">Type</code>, off the stack is possible if the
                     top of the stack is <code class="literal">Type</code> and <code class="literal">Type</code> is not <code class="literal">top</code> (otherwise it could
                     denote the upper half of a category 2 type). The result is the
                     incoming stack, with the top slot popped off.
                  </p><pre class="programlisting">
popCategory1([Type | Rest], Type, Rest) :-
    Type \= top,
    sizeOf(Type, 1).
</pre><p class="norm">Category 2 types occupy two stack slots. Popping a
                     logical type of category 2, <code class="literal">Type</code>, off the stack is possible if the
                     top of the stack is type <code class="literal">top</code>, and the slot directly below it is
                     <code class="literal">Type</code>. The result is the incoming stack, with the top 2 slots popped
                     off.
                  </p><pre class="programlisting">
popCategory2([top, Type | Rest], Type, Rest) :-
    sizeOf(Type, 2).
</pre><p class="norm"><a name="jvms-4.10.1.4-600"></a>Most of the type rules
                     for individual instructions (<a class="xref" href="jvms-4.html#jvms-4.10.1.9" title="4.10.1.9.&nbsp;Type Checking Instructions">&sect;4.10.1.9</a>) depend
                     on the notion of a valid <span class="emphasis"><em>type transition</em></span>. A type
                     transition is <span class="emphasis"><em>valid</em></span> if one can pop a list of
                     expected types off the incoming type state's operand stack and replace
                     them with an expected result type, resulting in a new valid type
                     state. In particular, the size of the operand stack in the new type
                     state must not exceed its maximum declared size.
                  </p><pre class="programlisting">
validTypeTransition(Environment, ExpectedTypesOnStack, ResultType,
                    frame(Locals, InputOperandStack, Flags),
                    frame(Locals, NextOperandStack, Flags)) :-
    popMatchingList(InputOperandStack, ExpectedTypesOnStack,
                    InterimOperandStack),
    pushOperandStack(InterimOperandStack, ResultType, NextOperandStack),
    operandStackHasLegalLength(Environment, NextOperandStack).
</pre></div>
               <div class="section" title="4.10.1.5.&nbsp;Type Checking Abstract and Native Methods">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.5"></a>4.10.1.5.&nbsp;Type Checking Abstract and Native Methods
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm">Abstract methods and native methods are considered
                     to be type safe if they do not override a final method.
                  </p><pre class="programlisting">
methodIsTypeSafe(Class, Method) :-
    doesNotOverrideFinalMethod(Class, Method),
    methodAccessFlags(Method, AccessFlags),
    member(abstract, AccessFlags).

methodIsTypeSafe(Class, Method) :-
    doesNotOverrideFinalMethod(Class, Method),
    methodAccessFlags(Method, AccessFlags),
    member(native, AccessFlags).

doesNotOverrideFinalMethod(class('java/lang/Object', L), Method) :-
    isBootstrapLoader(L).

doesNotOverrideFinalMethod(Class, Method) :-
    classSuperClassName(Class, SuperclassName),
    classDefiningLoader(Class, L),
    loadedClass(SuperclassName, L, Superclass),
    classMethods(Superclass, MethodList),
    finalMethodNotOverridden(Method, Superclass, MethodList).

finalMethodNotOverridden(Method, Superclass, MethodList) :-
    methodName(Method, Name),
    methodDescriptor(Method, Descriptor),
    member(method(_, Name, Descriptor), MethodList),
    isNotFinal(Method, Superclass).

finalMethodNotOverridden(Method, Superclass, MethodList) :-
    methodName(Method, Name),
    methodDescriptor(Method, Descriptor),
    notMember(method(_, Name, Descriptor), MethodList),
    doesNotOverrideFinalMethod(Superclass, Method).
</pre></div>
               <div class="section" title="4.10.1.6.&nbsp;Type Checking Methods with Code">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.6"></a>4.10.1.6.&nbsp;Type Checking Methods with Code
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm">Non-abstract, non-native methods are type correct if
                     they have code and the code is type correct.
                  </p><pre class="programlisting">
methodIsTypeSafe(Class, Method) :-
    doesNotOverrideFinalMethod(Class, Method),
    methodAccessFlags(Method, AccessFlags),
    methodAttributes(Method, Attributes),
    notMember(native, AccessFlags),
    notMember(abstract, AccessFlags),
    member(attribute('Code', _), Attributes),
    methodWithCodeIsTypeSafe(Class, Method).
</pre><p class="norm">A method with code is type safe if it is possible to
                     merge the code and the stack map frames into a single stream such that
                     each stack map frame precedes the instruction it corresponds to, and
                     the merged stream is type correct. The method's exception
                     handlers, if any, must also be legal.
                  </p><pre class="programlisting">
methodWithCodeIsTypeSafe(Class, Method) :-
    parseCodeAttribute(Class, Method, FrameSize, MaxStack,
                       ParsedCode, Handlers, StackMap),
    mergeStackMapAndCode(StackMap, ParsedCode, MergedCode),
    methodInitialStackFrame(Class, Method, FrameSize, StackFrame, ReturnType),
    Environment = environment(Class, Method, ReturnType, MergedCode,
                              MaxStack, Handlers),
    handlersAreLegal(Environment),
    mergedCodeIsTypeSafe(Environment, MergedCode, StackFrame).
</pre><p class="norm">Let us consider exception handlers first.</p>
                  <p class="norm">An exception handler is represented by a functor
                     application of the form:
                  </p><pre class="screen">
handler(Start, End, Target, ClassName)
</pre><p class="norm">whose arguments are, respectively, the start and end
                     of the range of instructions covered by the handler, the first
                     instruction of the handler code, and the name of the exception class
                     that this handler is designed to handle.
                  </p>
                  <p class="norm">An exception handler is <span class="emphasis"><em>legal</em></span>
                     if its start (<code class="literal">Start</code>) is less than its end
                     (<code class="literal">End</code>), there exists an instruction whose offset is
                     equal to <code class="literal">Start</code>, there exists an instruction whose
                     offset equals <code class="literal">End</code>, and the handler's exception
                     class is assignable to the class <code class="literal">Throwable</code>. The exception class of a
                     handler is <code class="literal">Throwable</code> if the handler's class entry is 0, otherwise it
                     is the class named in the handler.
                  </p><pre class="programlisting">
handlersAreLegal(Environment) :-
    exceptionHandlers(Environment, Handlers),
    checklist(handlerIsLegal(Environment), Handlers).

handlerIsLegal(Environment, Handler) :-
    Handler = handler(Start, End, Target, _),
    Start &lt; End,
    allInstructions(Environment, Instructions),
    member(instruction(Start, _), Instructions),
    offsetStackFrame(Environment, Target, _),
    instructionsIncludeEnd(Instructions, End),
    currentClassLoader(Environment, CurrentLoader),
    handlerExceptionClass(Handler, ExceptionClass, CurrentLoader), 
    isBootstrapLoader(BL),
    isAssignable(ExceptionClass, class('java/lang/Throwable', BL)).

instructionsIncludeEnd(Instructions, End) :-
    member(instruction(End, _), Instructions).
instructionsIncludeEnd(Instructions, End) :-
    member(endOfCode(End), Instructions).

handlerExceptionClass(handler(_, _, _, 0),
                      class('java/lang/Throwable', BL), _) :-
    isBootstrapLoader(BL).

handlerExceptionClass(handler(_, _, _, Name),
                      class(Name, L), L) :-
    Name \= 0.
</pre><p class="norm">Let us now turn to the stream of instructions and
                     stack map frames.
                  </p>
                  <p class="norm">Merging instructions and stack map frames into a
                     single stream involves four cases:
                  </p>
                  <div class="">
                     <ul class="" type="disc">
                        <li class="listitem">
                           <p class="norm">Merging an empty <code class="literal">StackMap</code> and
                                    a list of instructions yields the original list of
                                    instructions.
                           </p><pre class="programlisting">
mergeStackMapAndCode([], CodeList, CodeList).
</pre></li>
                        <li class="listitem">
                           <p class="norm">Given a list of stack map frames beginning with
                                    the type state for the instruction at <code class="literal">Offset</code>,
                                    and a list of instructions beginning
                                    at <code class="literal">Offset</code>, the merged list is the head of the
                                    stack frame list, followed by the head of the instruction list,
                                    followed by the merge of the tails of the two lists.
                           </p><pre class="programlisting">
mergeStackMapAndCode([stackMap(Offset, Map) | RestMap],
                     [instruction(Offset, Parse) | RestCode],
                     [stackMap(Offset, Map),
                       instruction(Offset, Parse) | RestMerge]) :-
    mergeStackMapAndCode(RestMap, RestCode, RestMerge).
</pre></li>
                        <li class="listitem">
                           <p class="norm">Otherwise, given a list of stack frames
                                    beginning with the type state for the instruction
                                    at <code class="literal">OffsetM</code>, and a list of instructions
                                    beginning at <code class="literal">OffsetP</code>, then,
                                    if <code class="literal">OffsetP &lt; OffsetM</code>, the merged list
                                    consists of the head of the instruction list, followed by the
                                    merge of the stack frame list and the tail of the instruction
                                    list.
                           </p><pre class="programlisting">
mergeStackMapAndCode([stackMap(OffsetM, Map) | RestMap],
                     [instruction(OffsetP, Parse) | RestCode],
                     [instruction(OffsetP, Parse) | RestMerge]) :-
    OffsetP &lt; OffsetM,
    mergeStackMapAndCode([stackMap(OffsetM, Map) | RestMap],
                         RestCode, RestMerge).
</pre></li>
                        <li class="listitem">
                           <p class="norm">Otherwise, the merge of the two lists is
                                    undefined. Since the instruction list has monotonically
                                    increasing offsets, the merge of the two lists is not defined
                                    unless every stack map frame offset has a corresponding
                                    instruction offset and the stack map frames are in monotonically
                                    increasing order.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm">To determine if the merged stream for a method is
                     type correct, we first infer the method's initial type state.
                  </p>
                  <p class="norm">The initial type state of a method consists of an
                     empty operand stack and local variable types derived from the type of
                     <code class="literal">this</code> and the arguments, as well as the appropriate flag, depending
                     on whether this is an <code class="literal">&lt;init&gt;</code> method.
                  </p><pre class="programlisting">
methodInitialStackFrame(Class, Method, FrameSize, frame(Locals, [], Flags),
                        ReturnType):-
    methodDescriptor(Method, Descriptor),
    parseMethodDescriptor(Descriptor, RawArgs, ReturnType),
    expandTypeList(RawArgs, Args),
    methodInitialThisType(Class, Method, ThisList),
    flags(ThisList, Flags),
    append(ThisList, Args, ThisArgs),
    expandToLength(ThisArgs, FrameSize, top, Locals).
</pre><p class="norm">Given a list of types, the following clause produces
                     a list where every type of size 2 has been substituted by two entries:
                     one for itself, and one <code class="literal">top</code>
                     entry.  The result then
                     corresponds to the representation of the list as 32-bit words in the
                     Java Virtual Machine.
                  </p><pre class="programlisting">
expandTypeList([], []).
expandTypeList([Item | List], [Item | Result]) :-
    sizeOf(Item, 1),
    expandTypeList(List, Result).
expandTypeList([Item | List], [Item, top | Result]) :-
    sizeOf(Item, 2),
    expandTypeList(List, Result).
</pre><pre class="programlisting">
flags([uninitializedThis], [flagThisUninit]).
flags(X, []) :- X \= [uninitializedThis].

expandToLength(List, Size, _Filler, List) :-
    length(List, Size).
expandToLength(List, Size, Filler, Result) :-
    length(List, ListLength),
    ListLength &lt; Size,
    Delta is Size - ListLength,
    length(Extra, Delta),
    checklist(=(Filler), Extra),
    append(List, Extra, Result).
</pre><p class="norm">For the initial type state of an instance method, we
                     compute the type of <code class="literal">this</code> and put it in a list. The type of <code class="literal">this</code> in
                     the <code class="literal">&lt;init&gt;</code> method of <code class="literal">Object</code> is <code class="literal">Object</code>; in other <code class="literal">&lt;init&gt;</code> methods,
                     the type of <code class="literal">this</code> is <code class="literal">uninitializedThis</code>; otherwise, the type of
                     <code class="literal">this</code> in an instance method is <code class="literal">class(N, L)</code>
                     where <code class="literal">N</code> is the name of the class containing the
                     method and <code class="literal">L</code> is its defining class loader.
                  </p>
                  <p class="norm">For the initial type state of a static method,
                     <code class="literal">this</code> is irrelevant, so the list is empty.
                  </p><pre class="programlisting">
methodInitialThisType(_Class, Method, []) :-
    methodAccessFlags(Method, AccessFlags),
    member(static, AccessFlags),
    methodName(Method, MethodName),
    MethodName \= '<code class="literal">&lt;init&gt;</code>'.

methodInitialThisType(Class, Method, [This]) :-
    methodAccessFlags(Method, AccessFlags),\
    notMember(static, AccessFlags),\
    instanceMethodInitialThisType(Class, Method, This).

instanceMethodInitialThisType(Class, Method, class('java/lang/Object', L)) :-
    methodName(Method, '<code class="literal">&lt;init&gt;</code>'), 
    classDefiningLoader(Class, L),
    isBootstrapLoader(L),
    classClassName(Class, 'java/lang/Object').

instanceMethodInitialThisType(Class, Method, uninitializedThis) :-
    methodName(Method, '<code class="literal">&lt;init&gt;</code>'), 
    classClassName(Class, ClassName),
    classDefiningLoader(Class, CurrentLoader),
    superclassChain(ClassName, CurrentLoader, Chain),
    Chain \= [].

instanceMethodInitialThisType(Class, Method, class(ClassName, L)) :-
    methodName(Method, MethodName),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    classDefiningLoader(Class, L),
    classClassName(Class, ClassName).
</pre><p class="norm">We now compute whether the merged stream for a
                     method is type correct, using the method's initial type state:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm">If we have a stack map frame and an incoming
                                    type state, the type state must be assignable
                                     to the one in the
                                    stack map. We may then proceed to type check the rest of the
                                    stream with the type state given in the stack map.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(Environment, [stackMap(Offset, MapFrame) | MoreCode],
                     frame(Locals, OperandStack, Flags)) :-
    frameIsAssignable(frame(Locals, OperandStack, Flags), MapFrame),
    mergedCodeIsTypeSafe(Environment, MoreCode, MapFrame).
</pre></li>
                        <li class="listitem">
                           <p class="norm">A merged code stream is type safe relative to an
                                    incoming type state <code class="literal">T</code> if it begins with an
                                    instruction <code class="literal">I</code> that is type safe relative
                                    to <code class="literal">T</code>,  and <code class="literal">I</code>
                                    <span class="emphasis"><em>satisfies its exception handlers</em></span> (see
                                    below), and the tail of the stream is type safe given the type
                                    state following that execution of <code class="literal">I</code>.
                           </p>
                           <p class="norm"><code class="literal">NextStackFrame</code> indicates what
                                    falls through to the following instruction. For an unconditional
                                    branch instruction, it will have the special value
                                    <code class="literal">afterGoto</code>. <code class="literal">ExceptionStackFrame</code> indicates
                                    what is passed to exception handlers.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(Environment, [instruction(Offset, Parse) | MoreCode],
                     frame(Locals, OperandStack, Flags)) :-
    instructionIsTypeSafe(Parse, Environment, Offset,
                          frame(Locals, OperandStack, Flags),
                          NextStackFrame, ExceptionStackFrame),
    instructionSatisfiesHandlers(Environment, Offset, ExceptionStackFrame),
    mergedCodeIsTypeSafe(Environment, MoreCode, NextStackFrame).
</pre></li>
                        <li class="listitem">
                           <p class="norm">After an unconditional branch (indicated by an
                                    incoming type state of <code class="literal">afterGoto</code>), if we have a stack map
                                    giving the type state for the following instructions, we can
                                    proceed and type check them using the type state provided by the
                                    stack map.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(Environment, [stackMap(Offset, MapFrame) | MoreCode],
                     afterGoto) :-
    mergedCodeIsTypeSafe(Environment, MoreCode, MapFrame).
</pre></li>
                        <li class="listitem">
                           <p class="norm">It is illegal to have code after an
                                    unconditional branch without a stack map frame being provided
                                    for it.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(_Environment, [instruction(_, _) | _MoreCode],
                     afterGoto) :-
    write_ln('No stack frame after unconditional branch'),
    fail.
</pre></li>
                        <li class="listitem">
                           <p class="norm">If we have an unconditional branch at the end of
                                    the code, stop.
                           </p><pre class="programlisting">
mergedCodeIsTypeSafe(_Environment, [endOfCode(Offset)],
                     afterGoto).
</pre></li>
                     </ul>
                  </div>
                  <p class="norm">Branching to a target is type safe if the target has
                     an associated stack frame, <code class="literal">Frame</code>, and the current
                     stack frame, <code class="literal">StackFrame</code>, is assignable
                     to <code class="literal">Frame</code>.
                  </p><pre class="programlisting">
targetIsTypeSafe(Environment, StackFrame, Target) :-
    offsetStackFrame(Environment, Target, Frame),
    frameIsAssignable(StackFrame, Frame).
</pre><p class="norm">An instruction <span class="emphasis"><em>satisfies its exception
                           handlers</em></span> if it satisfies every exception handler that is
                     applicable to the instruction.
                  </p><pre class="programlisting">
instructionSatisfiesHandlers(Environment, Offset, ExceptionStackFrame) :-
    exceptionHandlers(Environment, Handlers),
    sublist(isApplicableHandler(Offset), Handlers, ApplicableHandlers),
    checklist(instructionSatisfiesHandler(Environment, ExceptionStackFrame),
              ApplicableHandlers).
</pre><p class="norm">An exception handler
                     is <span class="emphasis"><em>applicable</em></span> to an instruction if the offset of
                     the instruction is greater or equal to the start of the handler's
                     range and less than the end of the handler's range.
                  </p><pre class="programlisting">
isApplicableHandler(Offset, handler(Start, End, _Target, _ClassName)) :-
    Offset &gt;= Start,
    Offset &lt; End.
</pre><p class="norm">An instruction <span class="emphasis"><em>satisfies</em></span> an
                     exception handler if its incoming type state
                     is <code class="literal">StackFrame</code>, and the handler's target (the
                     initial instruction of the handler code) is type safe assuming an
                     incoming type state <code class="literal">T</code>. The type
                     state <code class="literal">T</code> is derived
                     from <code class="literal">StackFrame</code> by replacing the operand stack with
                     a stack whose sole element is the handler's exception class.
                  </p><pre class="programlisting">
instructionSatisfiesHandler(Environment, StackFrame, Handler) :-
    Handler = handler(_, _, Target, _),
    currentClassLoader(Environment, CurrentLoader),
    handlerExceptionClass(Handler, ExceptionClass, CurrentLoader), 
    /* The stack consists of just the exception. */
    StackFrame = frame(Locals, _, Flags),
    ExcStackFrame = frame(Locals, [ ExceptionClass ], Flags),
    operandStackHasLegalLength(Environment, ExcStackFrame),
    targetIsTypeSafe(Environment, ExcStackFrame, Target).
</pre></div>
               <div class="section" title="4.10.1.7.&nbsp;Type Checking Load and Store Instructions">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.7"></a>4.10.1.7.&nbsp;Type Checking Load and Store Instructions
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.7-100"></a>All load instructions are
                     variations on a common pattern, varying the type of the value that the
                     instruction loads.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.7-110"></a>Loading a value of type
                     <code class="literal">Type</code> from local variable <code class="literal">Index</code> is type safe, if
                     the type of that local variable
                     is <code class="literal">ActualType</code>, <code class="literal">ActualType</code> is
                     assignable to <code class="literal">Type</code>, and pushing <code class="literal">ActualType</code> onto
                     the incoming operand stack is a valid type transition
                     (<a class="xref" href="jvms-4.html#jvms-4.10.1.4" title="4.10.1.4.&nbsp;Stack Map Frame Representation">&sect;4.10.1.4</a>) that yields a new type
                     state <code class="literal">NextStackFrame</code>. After execution of the load
                     instruction, the type state will
                     be <code class="literal">NextStackFrame</code>.
                  </p><pre class="programlisting">
loadIsTypeSafe(Environment, Index, Type, StackFrame, NextStackFrame) :-
    StackFrame = frame(Locals, _OperandStack, _Flags),
    nth0(Index, Locals, ActualType),
    isAssignable(ActualType, Type),
    validTypeTransition(Environment, [], ActualType, StackFrame,
                        NextStackFrame).
</pre><p class="norm"><a name="jvms-4.10.1.7-200"></a>All store instructions
                     are variations on a common pattern, varying the type of the value that
                     the instruction stores.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.7-210"></a>In general, a store
                     instruction is type safe if the local variable it references is of a
                     type that is a supertype of <code class="literal">Type</code>, and the top of the operand stack
                     is of a subtype of <code class="literal">Type</code>, where <code class="literal">Type</code> is the type the instruction is
                     designed to store.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.7-220"></a>More precisely, the store
                     is type safe if one can pop a type <code class="literal">ActualType</code> that
                     "matches" <code class="literal">Type</code> (that is, is a subtype of <code class="literal">Type</code>) off the operand
                     stack (<a class="xref" href="jvms-4.html#jvms-4.10.1.4" title="4.10.1.4.&nbsp;Stack Map Frame Representation">&sect;4.10.1.4</a>), and then legally assign that
                     type the local
                     variable <code class="literal">L<sub>Index</sub></code>.
                  </p><pre class="programlisting">
storeIsTypeSafe(_Environment, Index, Type,
                frame(Locals, OperandStack, Flags),
                frame(NextLocals, NextOperandStack, Flags)) :-
    popMatchingType(OperandStack, Type, NextOperandStack, ActualType),
    modifyLocalVariable(Index, ActualType, Locals, NextLocals).
</pre><p class="norm">Given local variables <code class="literal">Locals</code>,
                     modifying <code class="literal">Index</code> to have type <code class="literal">Type</code> results in the
                     local variable list <code class="literal">NewLocals</code>. The modifications
                     are somewhat involved, because some values (and their corresponding
                     types) occupy two local variables. Hence,
                     modifying <code class="literal">L<sub>N</sub></code> may require
                     modifying <code class="literal">L<sub>N+1</sub></code> (because the
                     type will occupy both the <code class="literal">N</code>
                     and <code class="literal">N+1</code> slots)
                     or <code class="literal">L<sub>N-1</sub></code> (because
                     local <code class="literal">N</code> used to be the upper half of the two word
                     value/type starting at local <code class="literal">N-1</code>, and so
                     local <code class="literal">N-1</code> must be invalidated), or both. This is
                     described further below. We start
                     at <code class="literal">L<sub>0</sub></code> and count up.
                  </p><pre class="programlisting">
modifyLocalVariable(Index, Type, Locals, NewLocals) :-
    modifyLocalVariable(0, Index, Type, Locals, NewLocals).
</pre><p class="norm">Given <code class="literal">LocalsRest</code>, the suffix of
                     the local variable list starting at index <code class="literal">I</code>,
                     modifying local variable <code class="literal">Index</code> to have type <code class="literal">Type</code>
                     results in the local variable list
                     suffix <code class="literal">NextLocalsRest</code>.
                  </p>
                  <p class="norm">If <code class="literal">I &lt; Index-1</code>, just copy the
                     input to the output and recurse forward. If <code class="literal">I =
                        Index-1</code>, the type of local <code class="literal">I</code> may
                     change. This can occur if <code class="literal">L<sub>I</sub></code>
                     has a type of size 2. Once we
                     set <code class="literal">L<sub>I+1</sub></code> to the new type
                     (and the corresponding value), the type/value
                     of <code class="literal">L<sub>I</sub></code> will be invalidated,
                     as its upper half will be trashed. Then we recurse forward.
                  </p><pre class="programlisting">
modifyLocalVariable(I, Index, Type,
                    [Locals1 | LocalsRest],
                    [Locals1 | NextLocalsRest] ) :-
    I &lt; Index - 1, 
    I1 is I + 1,
    modifyLocalVariable(I1, Index, Type, LocalsRest, NextLocalsRest).

modifyLocalVariable(I, Index, Type,
                    [Locals1 | LocalsRest],
                    [NextLocals1 | NextLocalsRest] ) :-
    I =:= Index - 1,
    modifyPreIndexVariable(Locals1, NextLocals1),
    modifyLocalVariable(Index, Index, Type, LocalsRest, NextLocalsRest).
</pre><p class="norm">When we find the variable, and it only occupies one
                     word, we change it to <code class="literal">Type</code> and we're done. When we find the
                     variable, and it occupies two words, we change its type to <code class="literal">Type</code> and
                     the next word to <code class="literal">top</code>.
                  </p><pre class="programlisting">
modifyLocalVariable(Index, Index, Type,
                    [_ | LocalsRest], [Type | LocalsRest]) :-
    sizeOf(Type, 1).

modifyLocalVariable(Index, Index, Type,
                    [_, _ | LocalsRest], [Type, top | LocalsRest]) :-
    sizeOf(Type, 2).
</pre><p class="norm">We refer to a local whose index immediately precedes
                     a local whose type will be modified as a <span class="emphasis"><em>pre-index
                           variable</em></span>. The future type of a pre-index variable of type
                     <code class="literal">InputType</code> is <code class="literal">Result</code>. If the
                     type, <code class="literal">Type</code>, of the pre-index local is of size 1, it
                     doesn't change. If the type of the pre-index
                     local, <code class="literal">Type</code>, is 2, we need to mark the lower half
                     of its two word value as unusable, by setting its type
                     to <code class="literal">top</code>.
                  </p><pre class="programlisting">
modifyPreIndexVariable(Type, Type) :- sizeOf(Type, 1).
modifyPreIndexVariable(Type, top) :- sizeOf(Type, 2).
</pre></div>
               <div class="section" title="4.10.1.8.&nbsp;Type Checking for protected Members">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.8"></a>4.10.1.8.&nbsp;Type Checking for <code class="literal">protected</code> Members
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.8-100"></a>All instructions that
                     access members must contend with the rules concerning <code class="literal">protected</code>
                     members. This section describes the <code class="literal">protected</code> check that corresponds
                     to JLS &sect;6.6.2.1.
                  </p>
                  <p class="norm"><a name="jvms-4.10.1.8-110"></a>The <code class="literal">protected</code> check
                     applies only to <code class="literal">protected</code> members of
                     superclasses of the current class.  <code class="literal">protected</code>
                     members in other classes will be caught by the access checking done at
                     resolution (<a class="xref" href="jvms-5.html#jvms-5.4.4" title="5.4.4.&nbsp;Access Control">&sect;5.4.4</a>). There are four
                     cases:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm">If the name of a class is not the name of any
                                    superclass, it cannot be a superclass, and so it can safely be
                                    ignored.
                           </p><pre class="programlisting">
passesProtectedCheck(Environment, MemberClassName, MemberName,
                     MemberDescriptor, StackFrame) :-
    thisClass(Environment, class(CurrentClassName, CurrentLoader)),
    superclassChain(CurrentClassName, CurrentLoader, Chain),
    notMember(class(MemberClassName, _), Chain).
</pre></li>
                        <li class="listitem">
                           <p class="norm">If the <code class="literal">MemberClassName</code> is the
                                    same as the name of a superclass, the class being resolved may
                                    indeed be a superclass. In this case, if no superclass
                                    named <code class="literal">MemberClassName</code> in a different run-time
                                    package has a <code class="literal">protected</code> member
                                    named <code class="literal">MemberName</code> with
                                    descriptor <code class="literal">MemberDescriptor</code>, the <code class="literal">protected</code>
                                    check does not apply.
                           </p>
                           <p class="note">This is because the actual class being resolved
                                    will either be one of these superclasses, in which case we know
                                    that it is either in the same run-time package, and the access
                                    is legal; or the member in question is not <code class="literal">protected</code> and the
                                    check does not apply; or it will be a subclass, in which case
                                    the check would succeed anyway; or it will be some other class
                                    in the same run-time package, in which case the access is legal
                                    and the check need not take place; or the verifier need not flag
                                    this as a problem, since it will be caught anyway because
                                    resolution will per force fail.
                           </p><pre class="programlisting">
passesProtectedCheck(Environment, MemberClassName, MemberName,
                     MemberDescriptor, StackFrame) :-
    thisClass(Environment, class(CurrentClassName, CurrentLoader)),
    superclassChain(CurrentClassName, CurrentLoader, Chain),
    member(class(MemberClassName, _), Chain),
    classesInOtherPkgWithProtectedMember(
      class(CurrentClassName, CurrentLoader),
      MemberName, MemberDescriptor, MemberClassName, Chain, []).
</pre></li>
                        <li class="listitem">
                           <p class="norm">If there does exist a <code class="literal">protected</code> superclass
                                    member in a different run-time package, then
                                    load <code class="literal">MemberClassName</code>; if the member in
                                    question is not <code class="literal">protected</code>, the check does not apply. (Using a
                                    superclass member that is not <code class="literal">protected</code> is trivially
                                    correct.)
                           </p><pre class="programlisting">
passesProtectedCheck(Environment, MemberClassName, MemberName,
                     MemberDescriptor,
                     frame(_Locals, [Target | Rest], _Flags)) :-
    thisClass(Environment, class(CurrentClassName, CurrentLoader)),
    superclassChain(CurrentClassName, CurrentLoader, Chain),
    member(class(MemberClassName, _), Chain),
    classesInOtherPkgWithProtectedMember(
      class(CurrentClassName, CurrentLoader),
      MemberName, MemberDescriptor, MemberClassName, Chain, List),
    List /= [],
    loadedClass(MemberClassName, CurrentLoader, ReferencedClass),
    isNotProtected(ReferencedClass, MemberName, MemberDescriptor).
</pre></li>
                        <li class="listitem">
                           <p class="norm">Otherwise, use of a member of an object of
                                    type <code class="literal">Target</code> requires
                                    that <code class="literal">Target</code> be assignable to the type of the
                                    current class.
                           </p><pre class="programlisting">
passesProtectedCheck(Environment, MemberClassName, MemberName,
                     MemberDescriptor,
                     frame(_Locals, [Target | Rest], _Flags)) :-
    thisClass(Environment, class(CurrentClassName, CurrentLoader)),
    superclassChain(CurrentClassName, CurrentLoader, Chain),
    member(class(MemberClassName, _), Chain),
    classesInOtherPkgWithProtectedMember(
      class(CurrentClassName, CurrentLoader),
      MemberName, MemberDescriptor, MemberClassName, Chain, List),
    List /= [],
    loadedClass(MemberClassName, CurrentLoader, ReferencedClass),
    isProtected(ReferencedClass, MemberName, MemberDescriptor),
    isAssignable(Target, class(CurrentClassName, CurrentLoader)).
</pre></li>
                     </ul>
                  </div>
                  <p class="norm">The
                     predicate <code class="literal">classesInOtherPkgWithProtectedMember(Class,
                        MemberName, MemberDescriptor, MemberClassName, Chain, List)</code>
                     is true if <code class="literal">List</code> is the set of classes
                     in <code class="literal">Chain</code> with name
                     <code class="literal">MemberClassName</code> that are in a different run-time
                     package than <code class="literal">Class</code> which have a <code class="literal">protected</code> member
                     named <code class="literal">MemberName</code> with descriptor
                     <code class="literal">MemberDescriptor</code>.
                  </p><pre class="programlisting">
classesInOtherPkgWithProtectedMember(_, _, _, _, [], []).

classesInOtherPkgWithProtectedMember(Class, MemberName,
                                     MemberDescriptor, MemberClassName,
                                     [class(MemberClassName, L) | Tail],
                                     [class(MemberClassName, L) | T]) :-
    differentRuntimePackage(Class, class(MemberClassName, L)),
    loadedClass(MemberClassName, L, Super),
    isProtected(Super, MemberName, MemberDescriptor),
    classesInOtherPkgWithProtectedMember(
      Class, MemberName, MemberDescriptor, MemberClassName, Tail, T).

classesInOtherPkgWithProtectedMember(Class, MemberName,
                                     MemberDescriptor, MemberClassName,
                                     [class(MemberClassName, L) | Tail],
                                     T) :-
    differentRuntimePackage(Class, class(MemberClassName, L)),
    loadedClass(MemberClassName, L, Super),
    isNotProtected(Super, MemberName, MemberDescriptor),
    classesInOtherPkgWithProtectedMember(
      Class, MemberName, MemberDescriptor, MemberClassName, Tail, T).

classesInOtherPkgWithProtectedMember(Class, MemberName,
                                     MemberDescriptor, MemberClassName,
                                     [class(MemberClassName, L) | Tail],
                                     T] :-
    sameRuntimePackage(Class, class(MemberClassName, L)),
    classesInOtherPkgWithProtectedMember(
      Class, MemberName, MemberDescriptor, MemberClassName, Tail, T).
</pre><pre class="programlisting">
sameRuntimePackage(Class1, Class2) :-
    classDefiningLoader(Class1, L),
    classDefiningLoader(Class2, L),
    samePackageName(Class1, Class2).

differentRuntimePackage(Class1, Class2) :-
    classDefiningLoader(Class1, L1),
    classDefiningLoader(Class2, L2),
    L1 \= L2.

differentRuntimePackage(Class1, Class2) :-
    differentPackageName(Class1, Class2).
</pre></div>
               <div class="section" title="4.10.1.9.&nbsp;Type Checking Instructions">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.1.9"></a>4.10.1.9.&nbsp;Type Checking Instructions
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.1.9-100"></a>In general, the type rule
                     for an instruction is given relative to an
                     environment <code class="literal">Environment</code> that defines the class and
                     method in which the instruction occurs
                     (<a class="xref" href="jvms-4.html#jvms-4.10.1.1" title="4.10.1.1.&nbsp;Accessors for Java Virtual Machine Artifacts">&sect;4.10.1.1</a>), and the
                     offset <code class="literal">Offset</code> within the method at which the
                     instruction occurs. The rule states that if the incoming type
                     state <code class="literal">StackFrame</code> fulfills certain requirements,
                     then:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm">The instruction is type safe.</p>
                        </li>
                        <li class="listitem">
                           <p class="norm">It is provable that the type state after the
                                  instruction completes normally has a particular form given
                                  by <code class="literal">NextStackFrame</code>, and that the type state
                                  after the instruction completes abruptly is given
                                  by <code class="literal">ExceptionStackFrame</code>.
                           </p>
                           <p class="norm">The type state after an instruction completes
                                    abruptly is the same as the incoming type state, except that the
                                    operand stack is empty.
                           </p><pre class="programlisting">
exceptionStackFrame(StackFrame, ExceptionStackFrame) :-
    StackFrame = frame(Locals, _OperandStack, Flags),
    ExceptionStackFrame = frame(Locals, [], Flags).
    </pre></li>
                     </ul>
                  </div>
                  <p class="norm">Many instructions have type rules that are
                     completely isomorphic to the rules for other instructions. If an
                     instruction <code class="literal">b1</code> is isomorphic to another
                     instruction <code class="literal">b2</code>, then the type rule
                     for <code class="literal">b1</code> is the same as the type rule
                     for <code class="literal">b2</code>.
                  </p><pre class="programlisting">
instructionIsTypeSafe(Instruction, Environment, Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    instructionHasEquivalentTypeRule(Instruction, IsomorphicInstruction),
    instructionIsTypeSafe(IsomorphicInstruction, Environment, Offset,
                          StackFrame, NextStackFrame,
                          ExceptionStackFrame).
</pre><p class="norm">The English language description of each rule is
                     intended to be readable, intuitive, and concise. As such, the
                     description avoids repeating all the contextual assumptions given
                     above. In particular:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm">The description does not explicitly mention the
                                    environment.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm">When the description speaks of the operand stack
                                    or local variables in the following, it is referring to the
                                    operand stack and local variable components of a type state:
                                    either the incoming type state or the outgoing one.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm">The type state after the instruction completes
                                    abruptly is almost always identical to the incoming type
                                    state. The description only discusses the type state after the
                                    instruction completes abruptly when that is not the case.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm">The description speaks of popping and pushing
                                    types onto the operand stack, and does not explicitly discuss
                                    issues of stack underflow or overflow. The description assumes
                                    these operations can be completed successfully, but the Prolog
                                    clauses for operand stack manipulation ensure that the necessary
                                    checks are made.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm">The description discusses only the manipulation
                                    of logical types. In practice, some types take more than one
                                    word. The description abstracts from these representation
                                    details, but the Prolog clauses that manipulate data do
                                    not.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm">Any ambiguities can be resolved by referring to the
                     formal Prolog clauses.
                  </p>
                  <div class="section-verification" title="aaload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.aaload"></a><span class="emphasis"><em>aaload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>aaload</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">int</code> and an array type with component
                        type <code class="literal">ComponentType</code>
                        where <code class="literal">ComponentType</code> is a subtype of <code class="literal">Object</code>,
                        with <code class="literal">ComponentType</code> yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(aaload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    nth1OperandStackIs(2, StackFrame, ArrayType),
    arrayComponentType(ArrayType, ComponentType),
    isBootstrapLoader(BL),
    validTypeTransition(Environment,
                        [int, arrayOf(class('java/lang/Object', BL))],
                        ComponentType, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">The component type of an array
                        of <code class="literal">X</code> is <code class="literal">X</code>. We define the
                        component type of <code class="literal">null</code> to be <code class="literal">null</code>.
                     </p><pre class="programlisting">
arrayComponentType(arrayOf(X), X).
arrayComponentType(null, null).
</pre></div>
                  <div class="section-verification" title="aastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.aastore"></a><span class="emphasis"><em>aastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>aastore</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">Object</code>, <code class="literal">int</code>, and an array of <code class="literal">Object</code>
                        off the incoming operand stack yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(aastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    isBootstrapLoader(BL),
    canPop(StackFrame,
           [class('java/lang/Object', BL),
            int,
            arrayOf(class('java/lang/Object', BL))],
           NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="aconst_null">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.aconst_null"></a><span class="emphasis"><em>aconst_null</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>aconst_null</em></span> instruction is type safe if one can
                        validly push the type <code class="literal">null</code> onto the incoming operand stack yielding
                        the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(aconst_null, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], null, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="aload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.aload"></a><span class="emphasis"><em>aload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>aload</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a load instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">reference</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(aload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, reference, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="aload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.aload_n"></a><span class="emphasis"><em>aload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>aload_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span> &#8804;
                        3, are type safe iff the equivalent <span class="emphasis"><em>aload</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(aload_0, aload(0)).
instructionHasEquivalentTypeRule(aload_1, aload(1)).
instructionHasEquivalentTypeRule(aload_2, aload(2)).
instructionHasEquivalentTypeRule(aload_3, aload(3)).
</pre></div>
                  <div class="section-verification" title="anewarray">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.anewarray"></a><span class="emphasis"><em>anewarray</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>anewarray</em></span> instruction with
                        operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting either a class type or an
                        array type, and one can legally replace a type matching <code class="literal">int</code> on the
                        incoming operand stack with an array with component
                        type <code class="literal">CP</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(anewarray(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    (CP = class(_, _) ; CP = arrayOf(_)),
    validTypeTransition(Environment, [int], arrayOf(CP),
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="areturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.areturn"></a><span class="emphasis"><em>areturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>areturn</em></span> instruction is type safe iff the
                        enclosing method has a declared return type, 
                        <code class="literal">ReturnType</code>, that is a <code class="literal">reference</code> type, and one can
                        validly pop a type matching <code class="literal">ReturnType</code> off the
                        incoming operand stack.
                     </p><pre class="programlisting">
instructionIsTypeSafe(areturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, ReturnType),
    isAssignable(ReturnType, reference),
    canPop(StackFrame, [ReturnType], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="arraylength">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.arraylength"></a><span class="emphasis"><em>arraylength</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>arraylength</em></span> instruction is type safe iff one
                        can validly replace an array type on the incoming operand stack with
                        the type <code class="literal">int</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(arraylength, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    nth1OperandStackIs(1, StackFrame, ArrayType),
    arrayComponentType(ArrayType, _),
    validTypeTransition(Environment, [top], int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="astore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.astore"></a><span class="emphasis"><em>astore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>astore</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a store instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">reference</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(astore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, reference, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="astore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.astore_n"></a><span class="emphasis"><em>astore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>astore_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span>
                        &#8804; 3, are type safe iff the equivalent <span class="emphasis"><em>astore</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(astore_0, astore(0)).
instructionHasEquivalentTypeRule(astore_1, astore(1)).
instructionHasEquivalentTypeRule(astore_2, astore(2)).
instructionHasEquivalentTypeRule(astore_3, astore(3)).
</pre></div>
                  <div class="section-verification" title="athrow">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.athrow"></a><span class="emphasis"><em>athrow</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>athrow</em></span> instruction is type safe iff the top of
                        the operand stack matches <code class="literal">Throwable</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(athrow, _Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    isBootstrapLoader(BL),
    canPop(StackFrame, [class('java/lang/Throwable', BL)], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="baload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.baload"></a><span class="emphasis"><em>baload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>baload</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">int</code> and a small array type on the
                        incoming operand stack with <code class="literal">int</code> yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(baload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :
    nth1OperandStackIs(2, StackFrame, ArrayType),
    isSmallArray(ArrayType),
    validTypeTransition(Environment, [int, top], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">An array type is a <span class="emphasis"><em>small array
                              type</em></span> if it is an array of <code class="literal">byte</code>, an array of <code class="literal">boolean</code>, or
                        a subtype thereof (<code class="literal">null</code>).
                     </p><pre class="programlisting">
isSmallArray(arrayOf(byte)).
isSmallArray(arrayOf(boolean)).
isSmallArray(null).
</pre></div>
                  <div class="section-verification" title="bastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.bastore"></a><span class="emphasis"><em>bastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>bastore</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">int</code>, <code class="literal">int</code> and a small array type off the
                        incoming operand stack yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(bastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    nth1OperandStackIs(3, StackFrame, ArrayType),
    isSmallArray(ArrayType),
    canPop(StackFrame, [int, int, top], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="bipush">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.bipush"></a><span class="emphasis"><em>bipush</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>bipush</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>sipush</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(bipush(Value), sipush(Value)).
</pre></div>
                  <div class="section-verification" title="caload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.caload"></a><span class="emphasis"><em>caload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>caload</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">int</code> and array of <code class="literal">char</code> on the
                        incoming operand stack with <code class="literal">int</code> yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(caload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(char)], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="castore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.castore"></a><span class="emphasis"><em>castore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>castore</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">int</code>, <code class="literal">int</code> and array of <code class="literal">char</code> off the
                        incoming operand stack yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(castore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [int, int, arrayOf(char)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="checkcast">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.checkcast"></a><span class="emphasis"><em>checkcast</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>checkcast</em></span> instruction with
                        operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting either a class or an array,
                        and one can validly replace the type <code class="literal">Object</code> on top of the incoming
                        operand stack with the type denoted by <code class="literal">CP</code> yielding
                        the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(checkcast(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    (CP = class(_, _) ; CP = arrayOf(_)),
    isBootstrapLoader(BL),
    validTypeTransition(Environment, [class('java/lang/Object', BL)], CP,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="d2f">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.d2f"></a><span class="emphasis"><em>d2f</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>d2f</em></span> instruction is type safe if one can validly
                        pop <code class="literal">double</code> off the incoming operand stack and replace it with
                        <code class="literal">float</code>, yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(d2f, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="d2i">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.d2i"></a><span class="emphasis"><em>d2i</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>d2i</em></span> instruction is type safe if one can validly
                        pop <code class="literal">double</code> off the incoming operand stack and replace it with <code class="literal">int</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(d2i, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="d2l">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.d2l"></a><span class="emphasis"><em>d2l</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>d2l</em></span> instruction is type safe if one can validly
                        pop <code class="literal">double</code> off the incoming operand stack and replace it with
                        <code class="literal">long</code>, yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(d2l, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dadd">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dadd"></a><span class="emphasis"><em>dadd</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dadd</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">double</code> and <code class="literal">double</code> on the incoming
                        operand stack with <code class="literal">double</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dadd, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    validTypeTransition(Environment, [double, double], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="daload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.daload"></a><span class="emphasis"><em>daload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>daload</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">int</code> and array of <code class="literal">double</code> on the
                        incoming operand stack with <code class="literal">double</code> yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(daload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(double)], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dastore"></a><span class="emphasis"><em>dastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dastore</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">double</code>, <code class="literal">int</code> and array of <code class="literal">double</code> off
                        the incoming operand stack yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [double, int, arrayOf(double)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dcmp<op&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dcmp_op"></a><span class="emphasis"><em>dcmp&lt;op&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dcmpg</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">double</code> and <code class="literal">double</code> on the incoming
                        operand stack with <code class="literal">int</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dcmpg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double, double], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">A <span class="emphasis"><em>dcmpl</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>dcmpg</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(dcmpl, dcmpg).
</pre></div>
                  <div class="section-verification" title="dconst_<d&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dconst_d"></a><span class="emphasis"><em>dconst_&lt;d&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dconst_0</em></span> instruction is type safe if one can
                        validly push the type <code class="literal">double</code> onto the incoming operand stack
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dconst_0, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], double, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">A <span class="emphasis"><em>dconst_1</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>dconst_0</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(dconst_1, dconst_0).
</pre></div>
                  <div class="section-verification" title="ddiv">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ddiv"></a><span class="emphasis"><em>ddiv</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>ddiv</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>dadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(ddiv, dadd).
</pre></div>
                  <div class="section-verification" title="dload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dload"></a><span class="emphasis"><em>dload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dload</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a load instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">double</code> is type safe
                        and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, double, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dload_n"></a><span class="emphasis"><em>dload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>dload_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span> &#8804;
                        3, are typesafe iff the equivalent <span class="emphasis"><em>dload</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(dload_0, dload(0)).
instructionHasEquivalentTypeRule(dload_1, dload(1)).
instructionHasEquivalentTypeRule(dload_2, dload(2)).
instructionHasEquivalentTypeRule(dload_3, dload(3)).
</pre></div>
                  <div class="section-verification" title="dmul">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dmul"></a><span class="emphasis"><em>dmul</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dmul</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>dadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(dmul, dadd).
</pre></div>
                  <div class="section-verification" title="dneg">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dneg"></a><span class="emphasis"><em>dneg</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dneg</em></span> instruction is type safe iff there is a
                        type matching <code class="literal">double</code> on the incoming operand stack. The <span class="emphasis"><em>dneg</em></span>
                        instruction does not alter the type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dneg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [double], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="drem">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.drem"></a><span class="emphasis"><em>drem</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>drem</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>dadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(drem, dadd).
</pre></div>
                  <div class="section-verification" title="dreturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dreturn"></a><span class="emphasis"><em>dreturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dreturn</em></span> instruction is type safe if the
                        enclosing method has a declared return type of <code class="literal">double</code>, and one can
                        validly pop a type matching <code class="literal">double</code> off the incoming operand
                        stack.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dreturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, double),
    canPop(StackFrame, [double], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dstore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dstore"></a><span class="emphasis"><em>dstore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dstore</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a store instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">double</code> is type safe
                        and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dstore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, double, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dstore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dstore_n"></a><span class="emphasis"><em>dstore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>dstore_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span>
                        &#8804; 3, are type safe iff the equivalent <span class="emphasis"><em>dstore</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(dstore_0, dstore(0)).
instructionHasEquivalentTypeRule(dstore_1, dstore(1)).
instructionHasEquivalentTypeRule(dstore_2, dstore(2)).
instructionHasEquivalentTypeRule(dstore_3, dstore(3)).
</pre></div>
                  <div class="section-verification" title="dsub">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dsub"></a><span class="emphasis"><em>dsub</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dsub</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>dadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(dsub, dadd).
</pre></div>
                  <div class="section-verification" title="dup">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup"></a><span class="emphasis"><em>dup</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dup</em></span> instruction is type safe iff one can validly
                        replace a category 1 type, <code class="literal">Type</code>, with the types <code class="literal">Type</code>, <code class="literal">Type</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dup, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    StackFrame = frame(Locals, InputOperandStack, Flags),
    popCategory1(InputOperandStack, Type, _),
    canSafelyPush(Environment, InputOperandStack, Type, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dup_x1">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup_x1"></a><span class="emphasis"><em>dup_x1</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dup_x1</em></span> instruction is type safe iff one can
                        validly replace two category 1 types, <code class="literal">Type1</code>, and <code class="literal">Type2</code>, on the
                        incoming operand stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type1</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dup_x1, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type2, Type1],
                      OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="dup_x2">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup_x2"></a><span class="emphasis"><em>dup_x2</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dup_x2</em></span> instruction is type safe iff it is
                        a <span class="emphasis"><em>type safe form</em></span> of the <span class="emphasis"><em>dup_x2</em></span>
                        instruction.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dup_x2, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    dup_x2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">A <span class="emphasis"><em>dup_x2</em></span> instruction is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>dup_x2</em></span> instruction iff it is a <span class="emphasis"><em>type
                              safe form 1</em></span> <span class="emphasis"><em>dup_x2</em></span> instruction or a <span class="emphasis"><em>type safe
                              form 2</em></span> <span class="emphasis"><em>dup_x2</em></span> instruction.
                     </p><pre class="programlisting">
dup_x2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup_x2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup_x2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup_x2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup_x2</em></span> instruction is a <span class="emphasis"><em>type safe form
                              1</em></span> <span class="emphasis"><em>dup_x2</em></span> instruction iff one can validly replace three
                        category 1 types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code> on the incoming operand
                        stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, <code class="literal">Type1</code>, yielding the
                        outgoing type state.
                     </p><pre class="programlisting">
dup_x2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory1(Stack2, Type3, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup_x2</em></span> instruction is a <span class="emphasis"><em>type safe form
                              2</em></span> <span class="emphasis"><em>dup_x2</em></span> instruction iff one can validly replace a
                        category 1 type, <code class="literal">Type1</code>, and a category 2 type, <code class="literal">Type2</code>, on the
                        incoming operand stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type1</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
dup_x2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory2(Stack1, Type2, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type2, Type1],
                      OutputOperandStack).
</pre></div>
                  <div class="section-verification" title="dup2">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup2"></a><span class="emphasis"><em>dup2</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dup2</em></span> instruction is type safe iff it is
                        a <span class="emphasis"><em>type safe form</em></span> of the <span class="emphasis"><em>dup2</em></span>
                        instruction.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dup2, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    StackFrame = frame(Locals, InputOperandStack, Flags),
    dup2SomeFormIsTypeSafe(Environment,InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">A <span class="emphasis"><em>dup2</em></span> instruction is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>dup2</em></span> instruction iff it is a <span class="emphasis"><em>type
                              safe form 1</em></span> <span class="emphasis"><em>dup2</em></span> instruction or a <span class="emphasis"><em>type safe
                              form 2</em></span> <span class="emphasis"><em>dup2</em></span> instruction.
                     </p><pre class="programlisting">
dup2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2Form1IsTypeSafe(Environment,InputOperandStack, OutputOperandStack).

dup2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2Form2IsTypeSafe(Environment,InputOperandStack, OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup2</em></span> instruction is a <span class="emphasis"><em>type safe form
                              1</em></span> <span class="emphasis"><em>dup2</em></span> instruction iff one can validly replace two
                        category 1 types, <code class="literal">Type1</code> and <code class="literal">Type2</code> on the incoming operand stack
                        with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type1</code>, <code class="literal">Type2</code>, yielding the
                        outgoing type state.
                     </p><pre class="programlisting">
dup2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack):-
    popCategory1(InputOperandStack, Type1, TempStack),
    popCategory1(TempStack, Type2, _),
    canSafelyPushList(Environment, InputOperandStack, [Type1, Type2],
                      OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup2</em></span> instruction is a <span class="emphasis"><em>type safe form
                              2</em></span> <span class="emphasis"><em>dup2</em></span> instruction iff one can validly replace a category
                        2 type, <code class="literal">Type</code> on the incoming operand stack with the types <code class="literal">Type</code>,
                        <code class="literal">Type</code>, yielding the outgoing type state.
                     </p><pre class="programlisting">
dup2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack):-
    popCategory2(InputOperandStack, Type, _),
    canSafelyPush(Environment, InputOperandStack, Type, OutputOperandStack).
</pre></div>
                  <div class="section-verification" title="dup2_x1">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup2_x1"></a><span class="emphasis"><em>dup2_x1</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dup2_x1</em></span> instruction is type safe iff it is a
                        <span class="emphasis"><em>type safe form</em></span> of the <span class="emphasis"><em>dup2_x1</em></span>
                        instruction.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dup2_x1, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    dup2_x1SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">A <span class="emphasis"><em>dup2_x1</em></span> instruction is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>dup2_x1</em></span> instruction iff it is
                        a <span class="emphasis"><em>type safe form 1</em></span> <span class="emphasis"><em>dup2_x1</em></span> instruction or a
                        <span class="emphasis"><em>type safe form 2</em></span> <span class="emphasis"><em>dup_x2</em></span> instruction.
                     </p><pre class="programlisting">
dup2_x1SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x1Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup2_x1SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x1Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup2_x1</em></span> instruction is a <span class="emphasis"><em>type safe
                              form 1</em></span> <span class="emphasis"><em>dup2_x1</em></span> instruction iff one can validly replace
                        three category 1 types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, on the incoming
                        operand stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, <code class="literal">Type1</code>,
                        <code class="literal">Type2</code>, yielding the outgoing type state.
                     </p><pre class="programlisting">
dup2_x1Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory1(Stack2, Type3, Rest),
    canSafelyPushList(Environment, Rest, [Type2, Type1, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup2_x1</em></span> instruction is a <span class="emphasis"><em>type safe
                              form 2</em></span> <span class="emphasis"><em>dup2_x1</em></span> instruction iff one can validly replace a
                        category 2 type, <code class="literal">Type1</code>, and a category 1 type, <code class="literal">Type2</code>, on the
                        incoming operand stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type1</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
dup2_x1Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory2(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type2, Type1],
                      OutputOperandStack).
</pre></div>
                  <div class="section-verification" title="dup2_x2">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.dup2_x2"></a><span class="emphasis"><em>dup2_x2</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>dup2_x2</em></span> instruction is type safe iff it is a
                        <span class="emphasis"><em>type safe form</em></span> of the <span class="emphasis"><em>dup2_x2</em></span>
                        instruction.
                     </p><pre class="programlisting">
instructionIsTypeSafe(dup2_x2, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    dup2_x2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>dup2_x2</em></span> instruction iff one of the following
                        holds:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm">it is a <span class="emphasis"><em>type safe form 1</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm">it is a <span class="emphasis"><em>type safe form 2</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm">it is a <span class="emphasis"><em>type safe form 3</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm">it is a <span class="emphasis"><em>type safe form 4</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction.
                              </p>
                           </li>
                        </ul>
                     </div><pre class="programlisting">
dup2_x2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup2_x2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup2_x2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x2Form3IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).

dup2_x2SomeFormIsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    dup2_x2Form4IsTypeSafe(Environment, InputOperandStack, OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe
                              form 1</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction iff one can validly replace
                        four category 1 types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>, <code class="literal">Type4</code>, on the
                        incoming operand stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type3</code>,
                        <code class="literal">Type4</code>, <code class="literal">Type1</code>, <code class="literal">Type2</code>, yielding the outgoing type state.
                     </p><pre class="programlisting">
dup2_x2Form1IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory1(Stack2, Type3, Stack3),
    popCategory1(Stack3, Type4, Rest),
    canSafelyPushList(Environment, Rest,
                      [Type2, Type1, Type4, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe
                              form 2</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction iff one can validly replace a
                        category 2 type, <code class="literal">Type1</code>, and two category 1 types, <code class="literal">Type2</code>, <code class="literal">Type3</code>,
                        on the incoming operand stack with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>,
                        <code class="literal">Type3</code>, <code class="literal">Type1</code>, yielding the outgoing type state.
                     </p><pre class="programlisting">
dup2_x2Form2IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory2(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory1(Stack2, Type3, Rest),
    canSafelyPushList(Environment, Rest,
                      [Type1, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe
                              form 3</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction iff one can validly replace
                        two category 1 types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, and a category 2 type,
                        <code class="literal">Type3</code>, on the incoming operand stack with the types <code class="literal">Type1</code>,
                        <code class="literal">Type2</code>, <code class="literal">Type3</code>, <code class="literal">Type1</code>, <code class="literal">Type2</code>, yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
dup2_x2Form3IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory1(InputOperandStack, Type1, Stack1),
    popCategory1(Stack1, Type2, Stack2),
    popCategory2(Stack2, Type3, Rest),
    canSafelyPushList(Environment, Rest,
                      [Type2, Type1, Type3, Type2, Type1],
                      OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>dup2_x2</em></span> instruction is a <span class="emphasis"><em>type safe
                              form 4</em></span> <span class="emphasis"><em>dup2_x2</em></span> instruction iff one can validly replace
                        two category 2 types, <code class="literal">Type1</code>, <code class="literal">Type2</code>, on the incoming operand stack
                        with the types <code class="literal">Type1</code>, <code class="literal">Type2</code>, <code class="literal">Type1</code>, yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
dup2_x2Form4IsTypeSafe(Environment, InputOperandStack, OutputOperandStack) :-
    popCategory2(InputOperandStack, Type1, Stack1),
    popCategory2(Stack1, Type2, Rest),
    canSafelyPushList(Environment, Rest, [Type1, Type2, Type1],
                      OutputOperandStack).
</pre></div>
                  <div class="section-verification" title="f2d">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.f2d"></a><span class="emphasis"><em>f2d</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>f2d</em></span> instruction is type safe if one can validly
                        pop <code class="literal">float</code> off the incoming operand stack and replace it with
                        <code class="literal">double</code>, yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(f2d, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="f2i">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.f2i"></a><span class="emphasis"><em>f2i</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>f2i</em></span> instruction is type safe if one can validly
                        pop <code class="literal">float</code> off the incoming operand stack and replace it with <code class="literal">int</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(f2i, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="f2l">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.f2l"></a><span class="emphasis"><em>f2l</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>f2l</em></span> instruction is type safe if one can validly
                        pop <code class="literal">float</code> off the incoming operand stack and replace it with <code class="literal">long</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(f2l, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fadd">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fadd"></a><span class="emphasis"><em>fadd</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fadd</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">float</code> and <code class="literal">float</code> on the incoming
                        operand stack with <code class="literal">float</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(fadd, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float, float], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="faload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.faload"></a><span class="emphasis"><em>faload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>faload</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">int</code> and array of <code class="literal">float</code> on the
                        incoming operand stack with <code class="literal">float</code> yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(faload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(float)], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fastore"></a><span class="emphasis"><em>fastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fastore</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">float</code>, <code class="literal">int</code> and array of <code class="literal">float</code> off the
                        incoming operand stack yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(fastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [float, int, arrayOf(float)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fcmp<op&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fcmp_op"></a><span class="emphasis"><em>fcmp&lt;op&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fcmpg</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">float</code> and <code class="literal">float</code> on the incoming
                        operand stack with <code class="literal">int</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(fcmpg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float, float], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">An <span class="emphasis"><em>fcmpl</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>fcmpg</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(fcmpl, fcmpg).
</pre></div>
                  <div class="section-verification" title="fconst_<f&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fconst_f"></a><span class="emphasis"><em>fconst_&lt;f&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fconst_0</em></span> instruction is type safe if one can
                        validly push the type <code class="literal">float</code> onto the incoming operand stack yielding
                        the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(fconst_0, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], float, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">The rules for the other variants of <span class="emphasis"><em>fconst</em></span> are
                        equivalent.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(fconst_1, fconst_0).
instructionHasEquivalentTypeRule(fconst_2, fconst_0).
</pre></div>
                  <div class="section-verification" title="fdiv">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fdiv"></a><span class="emphasis"><em>fdiv</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fdiv</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>fadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(fdiv, fadd).
</pre></div>
                  <div class="section-verification" title="fload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fload"></a><span class="emphasis"><em>fload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fload</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a load instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">float</code> is type safe
                        and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(fload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, float, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fload_n"></a><span class="emphasis"><em>fload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>fload_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span> &#8804;
                        3, are typesafe iff the equivalent <span class="emphasis"><em>fload</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(fload_0, fload(0)).
instructionHasEquivalentTypeRule(fload_1, fload(1)).
instructionHasEquivalentTypeRule(fload_2, fload(2)).
instructionHasEquivalentTypeRule(fload_3, fload(3)).
</pre></div>
                  <div class="section-verification" title="fmul">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fmul"></a><span class="emphasis"><em>fmul</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fmul</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>fadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(fmul, fadd).
</pre></div>
                  <div class="section-verification" title="fneg">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fneg"></a><span class="emphasis"><em>fneg</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fneg</em></span> instruction is type safe iff there is a
                        type matching <code class="literal">float</code> on the incoming operand stack. The <span class="emphasis"><em>fneg</em></span>
                        instruction does not alter the type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(fneg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [float], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="frem">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.frem"></a><span class="emphasis"><em>frem</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>frem</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>fadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(frem, fadd).
</pre></div>
                  <div class="section-verification" title="freturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.freturn"></a><span class="emphasis"><em>freturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>freturn</em></span> instruction is type safe if the
                        enclosing method has a declared return type of <code class="literal">float</code>, and one can
                        validly pop a type matching <code class="literal">float</code> off the incoming operand
                        stack.
                     </p><pre class="programlisting">
instructionIsTypeSafe(freturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, float),
    canPop(StackFrame, [float], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fstore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fstore"></a><span class="emphasis"><em>fstore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fstore</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a store instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">float</code> is type safe
                        and yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(fstore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, float, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="fstore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fstore_n"></a><span class="emphasis"><em>fstore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>fstore_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span>
                        &#8804; 3, are typesafe iff the equivalent <span class="emphasis"><em>fstore</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(fstore_0, fstore(0)).
instructionHasEquivalentTypeRule(fstore_1, fstore(1)).
instructionHasEquivalentTypeRule(fstore_2, fstore(2)).
instructionHasEquivalentTypeRule(fstore_3, fstore(3)).
</pre></div>
                  <div class="section-verification" title="fsub">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.fsub"></a><span class="emphasis"><em>fsub</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>fsub</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>fadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(fsub, fadd).
</pre></div>
                  <div class="section-verification" title="getfield">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.getfield"></a><span class="emphasis"><em>getfield</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm"><a name="jvms-4.10.1.9.getfield-100"></a>A <span class="emphasis"><em>getfield</em></span>
                        instruction with operand <code class="literal">CP</code> is type safe
                        iff <code class="literal">CP</code> refers to a constant pool entry denoting a
                        field whose declared type is <code class="literal">FieldType</code>, declared in
                        a class <code class="literal">FieldClass</code>, and one can validly replace a
                        type matching <code class="literal">FieldClass</code> with
                        type <code class="literal">FieldType</code> on the incoming operand stack
                        yielding the outgoing type state. <code class="literal">FieldClass</code> must
                        not be an array type. <code class="literal">protected</code> fields are subject to additional
                        checks (<a class="xref" href="jvms-4.html#jvms-4.10.1.8" title="4.10.1.8.&nbsp;Type Checking for protected Members">&sect;4.10.1.8</a>).
                     </p><pre class="programlisting">
instructionIsTypeSafe(getfield(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = field(FieldClass, FieldName, FieldDescriptor),
    parseFieldDescriptor(FieldDescriptor, FieldType),
    passesProtectedCheck(Environment, FieldClass, FieldName,
                         FieldDescriptor, StackFrame),
    validTypeTransition(Environment, [class(FieldClass)], FieldType,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="getstatic">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.getstatic"></a><span class="emphasis"><em>getstatic</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>getstatic</em></span> instruction with
                        operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting a field whose declared type
                        is <code class="literal">FieldType</code>, and one can validly
                        push <code class="literal">FieldType</code> on the incoming operand stack
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(getstatic(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = field(_FieldClass, _FieldName, FieldDescriptor),
    parseFieldDescriptor(FieldDescriptor, FieldType),
    validTypeTransition(Environment, [], FieldType,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="goto">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.goto"></a><span class="emphasis"><em>goto</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>goto</em></span> instruction is type safe iff its target
                        operand is a valid branch target.
                     </p><pre class="programlisting">
instructionIsTypeSafe(goto(Target), Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :-
    targetIsTypeSafe(Environment, StackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="goto_w">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.goto_w"></a><span class="emphasis"><em>goto_w</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>goto_w</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>goto</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(goto_w(Target), goto(Target)).
</pre></div>
                  <div class="section-verification" title="i2b">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.i2b"></a><span class="emphasis"><em>i2b</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>i2b</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>ineg</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(i2b, ineg).
</pre></div>
                  <div class="section-verification" title="i2c">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.i2c"></a><span class="emphasis"><em>i2c</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>i2c</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>ineg</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(i2c, ineg).
</pre></div>
                  <div class="section-verification" title="i2d">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.i2d"></a><span class="emphasis"><em>i2d</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>i2d</em></span> instruction is type safe if one can validly
                        pop <code class="literal">int</code> off the incoming operand stack and replace it with <code class="literal">double</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(i2d, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="i2f">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.i2f"></a><span class="emphasis"><em>i2f</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>i2f</em></span> instruction is type safe if one can validly
                        pop <code class="literal">int</code> off the incoming operand stack and replace it with <code class="literal">float</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(i2f, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="i2l">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.i2l"></a><span class="emphasis"><em>i2l</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>i2l</em></span> instruction is type safe if one can validly
                        pop <code class="literal">int</code> off the incoming operand stack and replace it with <code class="literal">long</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(i2l, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="i2s">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.i2s"></a><span class="emphasis"><em>i2s</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>i2s</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>ineg</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(i2s, ineg).
</pre></div>
                  <div class="section-verification" title="iadd">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iadd"></a><span class="emphasis"><em>iadd</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>iadd</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">int</code> and <code class="literal">int</code> on the incoming operand
                        stack with <code class="literal">int</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(iadd, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, int], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="iaload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iaload"></a><span class="emphasis"><em>iaload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>iaload</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">int</code> and array of <code class="literal">int</code> on the
                        incoming operand stack with <code class="literal">int</code> yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(iaload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(int)], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="iand">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iand"></a><span class="emphasis"><em>iand</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>iand</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>iadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(iand, iadd).
</pre></div>
                  <div class="section-verification" title="iastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iastore"></a><span class="emphasis"><em>iastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>iastore</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">int</code>, <code class="literal">int</code> and array of <code class="literal">int</code> off the
                        incoming operand stack yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(iastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [int, int, arrayOf(int)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="if_acmp<cond&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.if_acmp_cond"></a><span class="emphasis"><em>if_acmp&lt;cond&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>if_acmpeq</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">reference</code> and <code class="literal">reference</code> on the incoming operand
                        stack yielding the outgoing type
                        state <code class="literal">NextStackFrame</code>, and the operand of the
                        instruction, <code class="literal">Target</code>, is a valid branch target
                        assuming an incoming type state
                        of <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(if_acmpeq(Target), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [reference, reference], NextStackFrame),
    targetIsTypeSafe(Environment, NextStackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">The rule for <span class="emphasis"><em>if_acmpne</em></span> is identical.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(if_acmpne(Target), if_acmpeq(Target)).
</pre></div>
                  <div class="section-verification" title="if_icmp<cond&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.if_icmp_cond"></a><span class="emphasis"><em>if_icmp&lt;cond&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>if_icmpeq</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">int</code> and <code class="literal">int</code> on the incoming operand
                        stack yielding the outgoing type
                        state <code class="literal">NextStackFrame</code>, and the operand of the
                        instruction, <code class="literal">Target</code>, is a valid branch target
                        assuming an incoming type state
                        of <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(if_icmpeq(Target), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [int, int], NextStackFrame),
    targetIsTypeSafe(Environment, NextStackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">The rules for all other variants of the
                        <span class="emphasis"><em>if_icmp&lt;cond&gt;</em></span> instruction are identical.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(if_icmpge(Target), if_icmpeq(Target)).
instructionHasEquivalentTypeRule(if_icmpgt(Target), if_icmpeq(Target)).
instructionHasEquivalentTypeRule(if_icmple(Target), if_icmpeq(Target)).
instructionHasEquivalentTypeRule(if_icmplt(Target), if_icmpeq(Target)).
instructionHasEquivalentTypeRule(if_icmpne(Target), if_icmpeq(Target)).
</pre></div>
                  <div class="section-verification" title="if<cond&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.if_cond"></a><span class="emphasis"><em>if&lt;cond&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ifeq</em></span> instruction is type safe iff one can
                        validly pop a type matching <code class="literal">int</code> off the incoming operand stack
                        yielding the outgoing type state <code class="literal">NextStackFrame</code>,
                        and the operand of the instruction, <code class="literal">Target</code>, is a
                        valid branch target assuming an incoming type state
                        of <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(ifeq(Target), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    canPop(StackFrame, [int], NextStackFrame), 
    targetIsTypeSafe(Environment, NextStackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">The rules for all other variations of the <span class="emphasis"><em>if&lt;cond&gt;</em></span>
                        instruction are identical.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(ifge(Target), ifeq(Target)).
instructionHasEquivalentTypeRule(ifgt(Target), ifeq(Target)).
instructionHasEquivalentTypeRule(ifle(Target), ifeq(Target)).
instructionHasEquivalentTypeRule(iflt(Target), ifeq(Target)).
instructionHasEquivalentTypeRule(ifne(Target), ifeq(Target)).
</pre></div>
                  <div class="section-verification" title="ifnonnull">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ifnonnull"></a><span class="emphasis"><em>ifnonnull</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ifnonnull</em></span> instruction is type safe iff one can
                        validly pop a type matching <code class="literal">reference</code> off the incoming operand stack
                        yielding the outgoing type state <code class="literal">NextStackFrame</code>,
                        and the operand of the instruction, <code class="literal">Target</code>, is a
                        valid branch target assuming an incoming type state of
                        <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(ifnonnull(Target), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [reference], NextStackFrame),
    targetIsTypeSafe(Environment, NextStackFrame, Target),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ifnull">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ifnull"></a><span class="emphasis"><em>ifnull</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ifnull</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>ifnonnull</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(ifnull(Target), ifnonnull(Target)).
</pre></div>
                  <div class="section-verification" title="iinc">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iinc"></a><span class="emphasis"><em>iinc</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>iinc</em></span> instruction with first
                        operand <code class="literal">Index</code> is type safe
                        iff <code class="literal">L<sub>Index</sub></code> has type
                        <code class="literal">int</code>. The <span class="emphasis"><em>iinc</em></span> instruction does not change the type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(iinc(Index, _Value), _Environment, _Offset,
                      StackFrame, StackFrame, ExceptionStackFrame) :-
    StackFrame = frame(Locals, _OperandStack, _Flags),
    nth0(Index, Locals, int),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="iload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iload"></a><span class="emphasis"><em>iload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>iload</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a load instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">int</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(iload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="iload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iload_n"></a><span class="emphasis"><em>iload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>iload_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span> &#8804;
                        3, are typesafe iff the equivalent <span class="emphasis"><em>iload</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(iload_0, iload(0)).
instructionHasEquivalentTypeRule(iload_1, iload(1)).
instructionHasEquivalentTypeRule(iload_2, iload(2)).
instructionHasEquivalentTypeRule(iload_3, iload(3)).
</pre></div>
                  <div class="section-verification" title="imul">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.imul"></a><span class="emphasis"><em>imul</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>imul</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>iadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(imul, iadd).
</pre></div>
                  <div class="section-verification" title="ineg">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ineg"></a><span class="emphasis"><em>ineg</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ineg</em></span> instruction is type safe iff there is a
                        type matching <code class="literal">int</code> on the incoming operand stack. The <span class="emphasis"><em>ineg</em></span>
                        instruction does not alter the type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(ineg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int], int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="instanceof">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.instanceof"></a><span class="emphasis"><em>instanceof</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>instanceof</em></span> instruction with
                        operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting either a class or an array,
                        and one can validly replace the type <code class="literal">Object</code> on top of the incoming
                        operand stack with type <code class="literal">int</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(instanceof(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    (CP = class(_, _) ; CP = arrayOf(_)),
    isBootstrapLoader(BL),
    validTypeTransition(Environment, [class('java/lang/Object'), BL], int,
                        StackFrame,NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="invokedynamic">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokedynamic"></a><span class="emphasis"><em>invokedynamic</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>invokedynamic</em></span> instruction is type safe iff all
                        of the following conditions hold:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm">Its first operand, <code class="literal">CP</code>, refers
                                     to a constant pool entry denoting an dynamic call site with
                                     name <code class="literal">CallSiteName</code> with
                                     descriptor <code class="literal">Descriptor</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><code class="literal">CallSiteName</code> is not
                                     <code class="literal">&lt;init&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><code class="literal">CallSiteName</code> is not
                                     <code class="literal">&lt;clinit&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm">One can validly replace types matching the
                                     argument types given in <code class="literal">Descriptor</code> on the
                                     incoming operand stack with the return type given
                                     in <code class="literal">Descriptor</code>, yielding the outgoing type
                                     state.
                              </p>
                           </li>
                        </ul>
                     </div><pre class="programlisting">
instructionIsTypeSafe(invokedynamic(CP,0,0), Environment, _Offset,
                      StackFrame, NextStackFrame, ExceptionStackFrame) :- 
    CP = dmethod(CallSiteName, Descriptor),
    CallSiteName \= '<code class="literal">&lt;init&gt;</code>',
    CallSiteName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType),
    reverse(OperandArgList, StackArgList),
    validTypeTransition(Environment, StackArgList, ReturnType,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="invokeinterface">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokeinterface"></a><span class="emphasis"><em>invokeinterface</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>invokeinterface</em></span> instruction is type safe iff
                        all of the following conditions hold:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm">Its first operand, <code class="literal">CP</code>, refers
                                     to a constant pool entry denoting an interface method
                                     named <code class="literal">MethodName</code> with
                                     descriptor <code class="literal">Descriptor</code> that is a member of an
                                     interface <code class="literal">MethodIntfName</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><code class="literal">MethodName</code> is not <code class="literal">&lt;init&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><code class="literal">MethodName</code> is not <code class="literal">&lt;clinit&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm">Its second operand, <code class="literal">Count</code>, is
                                     a valid count operand (see below).
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm">One can validly replace types matching the
                                     type <code class="literal">MethodIntfName</code> and the argument types
                                     given in <code class="literal">Descriptor</code> on the incoming operand
                                     stack with the return type given in <code class="literal">Descriptor</code>,
                                     yielding the outgoing type state.
                              </p>
                           </li>
                        </ul>
                     </div><pre class="programlisting">
instructionIsTypeSafe(invokeinterface(CP, Count, 0), Environment, _Offset,
                      StackFrame, NextStackFrame, ExceptionStackFrame) :- 
    CP = imethod(MethodIntfName, MethodName, Descriptor),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    MethodName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType),
    currentClassLoader(Environment, L),
    reverse([class(MethodIntfName, L) | OperandArgList], StackArgList),
    canPop(StackFrame, StackArgList, TempFrame),
    validTypeTransition(Environment, [], ReturnType, TempFrame, NextStackFrame),
    countIsValid(Count, StackFrame, TempFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">The <code class="literal">Count</code> operand of an
                        <span class="emphasis"><em>invokeinterface</em></span> instruction is valid if it equals the size of the
                        arguments to the instruction. This is equal to the difference between
                        the size of <code class="literal">InputFrame</code>
                        and <code class="literal">OutputFrame</code>.
                     </p><pre class="programlisting">
countIsValid(Count, InputFrame, OutputFrame) :-
    InputFrame = frame(_Locals1, OperandStack1, _Flags1),
    OutputFrame = frame(_Locals2, OperandStack2, _Flags2),
    length(OperandStack1, Length1),
    length(OperandStack2, Length2),
    Count =:= Length1 - Length2.
</pre></div>
                  <div class="section-verification" title="invokespecial">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokespecial"></a><span class="emphasis"><em>invokespecial</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>invokespecial</em></span> instruction is type safe iff all
                        of the following conditions hold:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm">Its first operand, <code class="literal">CP</code>, refers
                                     to a constant pool entry denoting a method
                                     named <code class="literal">MethodName</code> with
                                     descriptor <code class="literal">Descriptor</code> that is a member of a
                                     class <code class="literal">MethodClassName</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm">Either:</p>
                              <div class="norm">
                                 <ul class="norm" type="circle">
                                    <li class="listitem">
                                       <p class="norm"><code class="literal">MethodName</code> is not
                                          	<code class="literal">&lt;init&gt;</code>.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm"><code class="literal">MethodName</code> is not
                                          	<code class="literal">&lt;clinit&gt;</code>.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm">One can validly replace types matching the
                                          	  current class and the argument types given
                                          	  in <code class="literal">Descriptor</code> on the incoming operand
                                          	  stack with the return type given
                                          	  in <code class="literal">Descriptor</code>, yielding the outgoing type
                                          	  state.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm">One can validly replace types matching the
                                          	  class <code class="literal">MethodClassName</code> and the argument
                                          	  types given in <code class="literal">Descriptor</code> on the incoming
                                          	  operand stack with the return type given
                                          	  in <code class="literal">Descriptor</code>.
                                       </p>
                                    </li>
                                 </ul>
                              </div>
                           </li>
                        </ul>
                     </div><pre class="programlisting">
instructionIsTypeSafe(invokespecial(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = method(MethodClassName, MethodName, Descriptor),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    MethodName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType),
    thisClass(Environment, CurrentClass), 
    reverse([CurrentClass | OperandArgList], StackArgList),
    validTypeTransition(Environment, StackArgList, ReturnType,
                        StackFrame, NextStackFrame),
    currentClassLoader(Environment, L),
    reverse([class(MethodClassName, L) | OperandArgList], StackArgList2),
    validTypeTransition(Environment, StackArgList2, ReturnType,
                        StackFrame, _ResultStackFrame),
    isAssignable(class(CurrentClassName, L), class(MethodClassName, L)).
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm">Or:</p>
                              <div class="norm">
                                 <ul class="norm" type="circle">
                                    <li class="listitem">
                                       <p class="norm">MethodName is <code class="literal">&lt;init&gt;</code>.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm"><code class="literal">Descriptor</code> specifies a
                                          	<code class="literal">void</code> return type.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm">One can validly pop types matching the
                                          	  argument types given in <code class="literal">Descriptor</code> and an
                                          	  uninitialized type, <code class="literal">UninitializedArg</code>, off
                                          	  the incoming operand stack,
                                          	  yielding <code class="literal">OperandStack</code>.
                                       </p>
                                    </li>
                                    <li class="listitem">
                                       <p class="norm">The outgoing type state is derived from the
                                          	  incoming type state by first replacing the incoming operand
                                          	  stack with <code class="literal">OperandStack</code> and then
                                          	  replacing all instances
                                          	  of <code class="literal">UninitializedArg</code> with the type of
                                          	  instance being initialized.
                                       </p>
                                    </li>
                                 </ul>
                              </div>
                           </li>
                        </ul>
                     </div><pre class="programlisting">
instructionIsTypeSafe(invokespecial(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    CP = method(MethodClassName, '<code class="literal">&lt;init&gt;</code>', Descriptor),
    parseMethodDescriptor(Descriptor, OperandArgList, void), 
    reverse(OperandArgList, StackArgList),
    canPop(StackFrame, StackArgList, TempFrame),
    TempFrame = frame(Locals, FullOperandStack, Flags),
    FullOperandStack = [UninitializedArg | OperandStack],
    currentClassLoader(Environment, CurrentLoader),
    rewrittenUninitializedType(UninitializedArg, Environment,
                               class(MethodClassName, CurrentLoader), This), 
    rewrittenInitializationFlags(UninitializedArg, Flags, NextFlags), 
    substitute(UninitializedArg, This, OperandStack, NextOperandStack),
    substitute(UninitializedArg, This, Locals, NextLocals),
    NextStackFrame = frame(NextLocals, NextOperandStack, NextFlags),
    ExceptionStackFrame = frame(NextLocals, [], Flags),
    passesProtectedCheck(Environment, MethodClassName, '<code class="literal">&lt;init&gt;</code>',
                         Descriptor, NextStackFrame).

rewrittenUninitializedType(uninitializedThis, Environment,
                           _MethodClass, This) :-
    thisClass(Environment, This).

rewrittenUninitializedType(uninitialized(Address), Environment,
                           MethodClass, MethodClass) :-
    allInstructions(Environment, Instructions),
    member(instruction(Address, new(MethodClass)), Instructions).

substitute(_Old, _New, [], []).
substitute(Old, New, [Old | FromRest], [New | ToRest]) :-
    substitute(Old, New, FromRest, ToRest).
substitute(Old, New, [From1 | FromRest], [From1 | ToRest]) :-
    From1 \= Old,
    substitute(Old, New, FromRest, ToRest).
</pre><p class="norm">To compute what type the uninitialized argument's
                        type needs to be rewritten to, there are two cases:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm">If we are initializing an object within its
                                       constructor, its type is initially <code class="literal">uninitializedThis</code>. This
                                       type will be rewritten to the type of the class of the <code class="literal">&lt;init&gt;</code>
                                       method.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm">The second case arises from initialization of an
                                       object created by <span class="emphasis"><em>new</em></span>. The uninitialized arg type is rewritten
                                       to <code class="literal">MethodClass</code>, the type of the method holder
                                       of <code class="literal">&lt;init&gt;</code>. We check whether there really is a <span class="emphasis"><em>new</em></span> instruction
                                       at <code class="literal">Address</code>.
                              </p>
                           </li>
                        </ul>
                     </div><pre class="programlisting">
rewrittenInitializationFlags(uninitializedThis, _Flags, []).
rewrittenInitializationFlags(uninitialized(_), Flags, Flags).
</pre><p class="note">The rule for <span class="emphasis"><em>invokespecial</em></span> of an <code class="literal">&lt;init&gt;</code> method is
                        the sole motivation for passing back a distinct exception stack
                        frame. The concern is that <span class="emphasis"><em>invokespecial</em></span> can cause a superclass
                        <code class="literal">&lt;init&gt;</code> method to be invoked, and that invocation could fail, leaving
                        <code class="literal">this</code> uninitialized. This situation cannot be created using source
                        code in the Java programming language, but can be created by programming in bytecode
                        directly.
                     </p>
                     <p class="note">The original frame holds an uninitialized object in
                        a local and has flag <code class="literal">uninitializedThis</code>. Normal termination of
                        <span class="emphasis"><em>invokespecial</em></span> initializes the uninitialized object and turns off the
                        <code class="literal">uninitializedThis</code> flag. But if the invocation of an <code class="literal">&lt;init&gt;</code> method
                        throws an exception, the uninitialized object might be left in a
                        partially initialized state, and needs to be made permanently
                        unusable. This is represented by an exception frame containing the
                        broken object (the new value of the local) and the <code class="literal">uninitializedThis</code>
                        flag (the old flag). There is no way to get from an
                        apparently-initialized object bearing the <code class="literal">uninitializedThis</code> flag to
                        a properly initialized object, so the object is permanently
                        unusable. If not for this case, the exception stack frame could be the
                        same as the input stack frame.
                     </p>
                  </div>
                  <div class="section-verification" title="invokestatic">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokestatic"></a><span class="emphasis"><em>invokestatic</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>invokestatic</em></span> instruction is type safe iff all
                        of the following conditions hold:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm">Its first operand, <code class="literal">CP</code>, refers
                                     to a constant pool entry denoting a method
                                     named <code class="literal">MethodName</code> with
                                     descriptor <code class="literal">Descriptor</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><code class="literal">MethodName</code> is not
                                     <code class="literal">&lt;init&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><code class="literal">MethodName</code> is not
                                     <code class="literal">&lt;clinit&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm">One can validly replace types matching the
                                     argument types given in <code class="literal">Descriptor</code> on the
                                     incoming operand stack with the return type given
                                     in <code class="literal">Descriptor</code>, yielding the outgoing type
                                     state.
                              </p>
                           </li>
                        </ul>
                     </div><pre class="programlisting">
instructionIsTypeSafe(invokestatic(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = method(_MethodClassName, MethodName, Descriptor),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    MethodName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType), 
    reverse(OperandArgList, StackArgList),
    validTypeTransition(Environment, StackArgList, ReturnType,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="invokevirtual">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.invokevirtual"></a><span class="emphasis"><em>invokevirtual</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm"><a name="jvms-4.10.1.9.invokevirtual-100"></a>An
                        <span class="emphasis"><em>invokevirtual</em></span> instruction is type safe iff all of the following
                        conditions hold:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.10.1.9.invokevirtual-100-A"></a>Its
                                     first operand, <code class="literal">CP</code>, refers to a constant pool
                                     entry denoting a method named <code class="literal">MethodName</code> with
                                     descriptor <code class="literal">Descriptor</code> that is a member of a
                                     class <code class="literal">MethodClassName</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.10.1.9.invokevirtual-100-B"></a><code class="literal">MethodName</code>
                                     is not <code class="literal">&lt;init&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.10.1.9.invokevirtual-100-C"></a><code class="literal">MethodName</code>
                                     is not <code class="literal">&lt;clinit&gt;</code>.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.10.1.9.invokevirtual-100-D"></a>One
                                     can validly replace types matching the
                                     class <code class="literal">MethodClassName</code> and the argument types
                                     given in <code class="literal">Descriptor</code> on the incoming operand
                                     stack with the return type given in <code class="literal">Descriptor</code>,
                                     yielding the outgoing type state.
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><a name="jvms-4.10.1.9.invokevirtual-100-E"></a>If
                                     the method is <code class="literal">protected</code>, the usage conforms to the special rules
                                     governing access to <code class="literal">protected</code> members
                                     (<a class="xref" href="jvms-4.html#jvms-4.10.1.8" title="4.10.1.8.&nbsp;Type Checking for protected Members">&sect;4.10.1.8</a>).
                              </p>
                           </li>
                        </ul>
                     </div><pre class="programlisting">
instructionIsTypeSafe(invokevirtual(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = method(MethodClassName, MethodName, Descriptor),
    MethodName \= '<code class="literal">&lt;init&gt;</code>',
    MethodName \= '<code class="literal">&lt;clinit&gt;</code>',
    parseMethodDescriptor(Descriptor, OperandArgList, ReturnType), 
    reverse(OperandArgList, ArgList),
    currentClassLoader(Environment, L),
    reverse([class(MethodClassName, L) | OperandArgList], StackArgList),
    validTypeTransition(Environment, StackArgList, ReturnType,
                        StackFrame, NextStackFrame),
    canPop(StackFrame, ArgList, PoppedFrame),
    passesProtectedCheck(Environment, MethodClassName, MethodName,
                         Descriptor, PoppedFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ior">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ior"></a><span class="emphasis"><em>ior</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ior</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>iadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(ior, iadd).
</pre></div>
                  <div class="section-verification" title="irem">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.irem"></a><span class="emphasis"><em>irem</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>irem</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>iadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(irem, iadd).
</pre></div>
                  <div class="section-verification" title="ireturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ireturn"></a><span class="emphasis"><em>ireturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ireturn</em></span> instruction is type safe if the
                        enclosing method has a declared return type of <code class="literal">int</code>, and one can
                        validly pop a type matching <code class="literal">int</code> off the incoming operand
                        stack.
                     </p><pre class="programlisting">
instructionIsTypeSafe(ireturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, int),
    canPop(StackFrame, [int], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ishl">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ishl"></a><span class="emphasis"><em>ishl</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ishl</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>iadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(ishl, iadd).
</pre></div>
                  <div class="section-verification" title="ishr">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ishr"></a><span class="emphasis"><em>ishr</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ishr</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>iadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(ishr, iadd).
</pre></div>
                  <div class="section-verification" title="istore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.istore"></a><span class="emphasis"><em>istore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>istore</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a store instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">int</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(istore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="istore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.istore_n"></a><span class="emphasis"><em>istore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>istore_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span>
                        &#8804; 3, are type safe iff the equivalent <span class="emphasis"><em>istore</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(istore_0, istore(0)).
instructionHasEquivalentTypeRule(istore_1, istore(1)).
instructionHasEquivalentTypeRule(istore_2, istore(2)).
instructionHasEquivalentTypeRule(istore_3, istore(3)).
</pre></div>
                  <div class="section-verification" title="isub">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.isub"></a><span class="emphasis"><em>isub</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>isub</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>iadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(isub, iadd).
</pre></div>
                  <div class="section-verification" title="iushr">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.iushr"></a><span class="emphasis"><em>iushr</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>iushr</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>iadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(iushr, iadd).
</pre></div>
                  <div class="section-verification" title="ixor">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ixor"></a><span class="emphasis"><em>ixor</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ixor</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>iadd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(ixor, iadd).
</pre></div>
                  <div class="section-verification" title="l2d">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.l2d"></a><span class="emphasis"><em>l2d</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>l2d</em></span> instruction is type safe if one can validly
                        pop <code class="literal">long</code> off the incoming operand stack and replace it with
                        <code class="literal">double</code>, yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(l2d, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long], double,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="l2f">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.l2f"></a><span class="emphasis"><em>l2f</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>l2f</em></span> instruction is type safe if one can validly
                        pop <code class="literal">long</code> off the incoming operand stack and replace it with <code class="literal">float</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(l2f, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long], float,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="l2i">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.l2i"></a><span class="emphasis"><em>l2i</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>l2i</em></span> instruction is type safe if one can validly
                        pop <code class="literal">long</code> off the incoming operand stack and replace it with <code class="literal">int</code>,
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(l2i, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ladd">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ladd"></a><span class="emphasis"><em>ladd</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ladd</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">long</code> and <code class="literal">long</code> on the incoming
                        operand stack with <code class="literal">long</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(ladd, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long, long], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="laload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.laload"></a><span class="emphasis"><em>laload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>laload</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">int</code> and array of <code class="literal">long</code> on the
                        incoming operand stack with <code class="literal">long</code> yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(laload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(long)], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="land">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.land"></a><span class="emphasis"><em>land</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>land</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>ladd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(land, ladd).
</pre></div>
                  <div class="section-verification" title="lastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lastore"></a><span class="emphasis"><em>lastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lastore</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">long</code>, <code class="literal">int</code> and array of <code class="literal">long</code> off the
                        incoming operand stack yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(lastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [long, int, arrayOf(long)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lcmp">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lcmp"></a><span class="emphasis"><em>lcmp</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>lcmp</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">long</code> and <code class="literal">long</code> on the incoming
                        operand stack with <code class="literal">int</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(lcmp, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long, long], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lconst_<l&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lconst_l"></a><span class="emphasis"><em>lconst_&lt;l&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lconst_0</em></span> instruction is type safe if one can
                        validly push the type <code class="literal">long</code> onto the incoming operand stack yielding
                        the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(lconst_0, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], long, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">An <span class="emphasis"><em>lconst_1</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>lconst_0</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lconst_1, lconst_0).
</pre></div>
                  <div class="section-verification" title="ldc">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ldc"></a><span class="emphasis"><em>ldc</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ldc</em></span> instruction with
                        operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting an entity of type <code class="literal">Type</code>,
                        where <code class="literal">Type</code> is either <code class="literal">int</code>, <code class="literal">float</code>, <code class="literal">String</code>, <code class="literal">Class</code>,
                        <code class="literal">java.lang.invoke.MethodType</code>, or <code class="literal">java.lang.invoke.MethodHandle</code>, and one can validly push <code class="literal">Type</code> onto
                        the incoming operand stack yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(ldc(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    functor(CP, Tag, _),
    isBootstrapLoader(BL),
    member([Tag, Type], [
        [int, int],
        [float, float],
        [string, class('java/lang/String', BL)],
        [classConst, class('java/lang/Class', BL)],
        [methodTypeConst, class('java/lang/invoke/MethodType', BL)],
        [methodHandleConst, class('java/lang/invoke/MethodHandle', BL)],
    ]),
    validTypeTransition(Environment, [], Type, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ldc_w">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ldc_w"></a><span class="emphasis"><em>ldc_w</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ldc_w</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>ldc</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(ldc_w(CP), ldc(CP))
</pre></div>
                  <div class="section-verification" title="ldc2_w">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ldc2_w"></a><span class="emphasis"><em>ldc2_w</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ldc2_w</em></span> instruction with
                        operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting an entity of
                        type <code class="literal">Tag</code>, where <code class="literal">Tag</code> is either
                        <code class="literal">long</code> or <code class="literal">double</code>, and one can validly push <code class="literal">Tag</code>
                        onto the incoming operand stack yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(ldc2_w(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    functor(CP, Tag, _),
    member(Tag, [long, double]), 
    validTypeTransition(Environment, [], Tag, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="ldiv">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.ldiv"></a><span class="emphasis"><em>ldiv</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>ldiv</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>ladd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(ldiv, ladd).
</pre></div>
                  <div class="section-verification" title="lload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lload"></a><span class="emphasis"><em>lload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lload</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a load instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">long</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(lload(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    loadIsTypeSafe(Environment, Index, long, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lload_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lload_n"></a><span class="emphasis"><em>lload_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>lload_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span> &#8804;
                        3, are type safe iff the equivalent <span class="emphasis"><em>lload</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lload_0, lload(0)).
instructionHasEquivalentTypeRule(lload_1, lload(1)).
instructionHasEquivalentTypeRule(lload_2, lload(2)).
instructionHasEquivalentTypeRule(lload_3, lload(3)).
</pre></div>
                  <div class="section-verification" title="lmul">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lmul"></a><span class="emphasis"><em>lmul</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lmul</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>ladd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lmul, ladd).
</pre></div>
                  <div class="section-verification" title="lneg">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lneg"></a><span class="emphasis"><em>lneg</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lneg</em></span> instruction is type safe iff there is a
                        type matching <code class="literal">long</code> on the incoming operand stack. The <span class="emphasis"><em>lneg</em></span>
                        instruction does not alter the type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(lneg, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [long], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lookupswitch">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lookupswitch"></a><span class="emphasis"><em>lookupswitch</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>lookupswitch</em></span> instruction is type safe if its
                        keys are sorted, one can validly pop <code class="literal">int</code> off the incoming operand
                        stack yielding a new type state <code class="literal">BranchStackFrame</code>,
                        and all of the instruction's targets are valid branch targets
                        assuming <code class="literal">BranchStackFrame</code> as their incoming type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(lookupswitch(Targets, Keys), Environment, _, StackFrame, 
                      afterGoto, ExceptionStackFrame) :-
    sort(Keys, Keys),
    canPop(StackFrame, [int], BranchStackFrame),
    checklist(targetIsTypeSafe(Environment, BranchStackFrame), Targets),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lor">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lor"></a><span class="emphasis"><em>lor</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>lor</em></span> instruction is type safe iff the equivalent
                        <span class="emphasis"><em>ladd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lor, ladd).
</pre></div>
                  <div class="section-verification" title="lrem">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lrem"></a><span class="emphasis"><em>lrem</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lrem</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>ladd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lrem, ladd).
</pre></div>
                  <div class="section-verification" title="lreturn">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lreturn"></a><span class="emphasis"><em>lreturn</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lreturn</em></span> instruction is type safe if the
                        enclosing method has a declared return type of <code class="literal">long</code>, and one can
                        validly pop a type matching <code class="literal">long</code> off the incoming operand
                        stack.
                     </p><pre class="programlisting">
instructionIsTypeSafe(lreturn, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, long),
    canPop(StackFrame, [long], _PoppedStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lshl">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lshl"></a><span class="emphasis"><em>lshl</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lshl</em></span> instruction is type safe if one can
                        validly replace the types <code class="literal">int</code> and <code class="literal">long</code> on the incoming operand
                        stack with the type <code class="literal">long</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(lshl, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, long], long,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lshr">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lshr"></a><span class="emphasis"><em>lshr</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lshr</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>lshl</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lshr, lshl).
</pre></div>
                  <div class="section-verification" title="lstore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lstore"></a><span class="emphasis"><em>lstore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lstore</em></span> instruction with
                        operand <code class="literal">Index</code> is type safe and yields an outgoing
                        type state <code class="literal">NextStackFrame</code>, if a store instruction
                        with operand <code class="literal">Index</code> and type <code class="literal">long</code> is type safe and
                        yields an outgoing type
                        state <code class="literal">NextStackFrame</code>.
                     </p><pre class="programlisting">
instructionIsTypeSafe(lstore(Index), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    storeIsTypeSafe(Environment, Index, long, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="lstore_<n&gt;">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lstore_n"></a><span class="emphasis"><em>lstore_&lt;n&gt;</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The instructions <span class="emphasis"><em>lstore_&lt;n&gt;</em></span>, for 0 &#8804; <span class="emphasis"><em>n</em></span>
                        &#8804; 3, are type safe iff the equivalent <span class="emphasis"><em>lstore</em></span> instruction is type
                        safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lstore_0, lstore(0)).
instructionHasEquivalentTypeRule(lstore_1, lstore(1)).
instructionHasEquivalentTypeRule(lstore_2, lstore(2)).
instructionHasEquivalentTypeRule(lstore_3, lstore(3)).
</pre></div>
                  <div class="section-verification" title="lsub">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lsub"></a><span class="emphasis"><em>lsub</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lsub</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>ladd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lsub, ladd).
</pre></div>
                  <div class="section-verification" title="lushr">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lushr"></a><span class="emphasis"><em>lushr</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lushr</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>lshl</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lushr, lshl).
</pre></div>
                  <div class="section-verification" title="lxor">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.lxor"></a><span class="emphasis"><em>lxor</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>lxor</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>ladd</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(lxor, ladd).
</pre></div>
                  <div class="section-verification" title="monitorenter">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.monitorenter"></a><span class="emphasis"><em>monitorenter</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>monitorenter</em></span> instruction is type safe iff one
                        can validly pop a type matching <code class="literal">reference</code> off the incoming operand stack
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(monitorenter, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    canPop(StackFrame, [reference], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="monitorexit">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.monitorexit"></a><span class="emphasis"><em>monitorexit</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>monitorexit</em></span> instruction is type safe iff the
                        equivalent <span class="emphasis"><em>monitorenter</em></span> instruction is type safe.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(monitorexit, monitorenter).
</pre></div>
                  <div class="section-verification" title="multianewarray">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.multianewarray"></a><span class="emphasis"><em>multianewarray</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>multianewarray</em></span> instruction with
                        operands <code class="literal">CP</code> and <code class="literal">Dim</code> is type safe
                        iff <code class="literal">CP</code> refers to a constant pool entry denoting an
                        array type whose dimension is greater or equal
                        to <code class="literal">Dim</code>, <code class="literal">Dim</code> is strictly
                        positive, and one can validly replace <code class="literal">Dim</code> <code class="literal">int</code>
                        types on the incoming operand stack with the type denoted
                        by <code class="literal">CP</code> yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(multianewarray(CP, Dim), Environment, _Offset,
                      StackFrame, NextStackFrame, ExceptionStackFrame) :- 
    CP = arrayOf(_),
    classDimension(CP, Dimension),
    Dimension &gt;= Dim,
    Dim &gt; 0, 
    /* Make a list of Dim ints */
    findall(int, between(1, Dim, _), IntList),
    validTypeTransition(Environment, IntList, CP,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">The dimension of an array type whose component type
                        is also an array type is one more than the dimension of its component
                        type.
                     </p><pre class="programlisting">
classDimension(arrayOf(X), Dimension) :-
    classDimension(X, Dimension1), 
    Dimension is Dimension1 + 1.	

classDimension(_, Dimension) :-
    Dimension = 0. 
</pre></div>
                  <div class="section-verification" title="new">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.new"></a><span class="emphasis"><em>new</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>new</em></span> instruction with
                        operand <code class="literal">CP</code> at offset <code class="literal">Offset</code> is
                        type safe iff <code class="literal">CP</code> refers to a constant pool entry
                        denoting a class type, the
                        type <code class="literal">uninitialized(Offset)</code> does not appear in the
                        incoming operand stack, and one can validly
                        push <code class="literal">uninitialized(Offset)</code> onto the incoming
                        operand stack and replace <code class="literal">uninitialized(Offset)</code>
                        with <code class="literal">top</code> in the incoming local variables yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(new(CP), Environment, Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, OperandStack, Flags), 
    CP = class(_, _), 
    NewItem = uninitialized(Offset),
    notMember(NewItem, OperandStack),
    substitute(NewItem, top, Locals, NewLocals),
    validTypeTransition(Environment, [], NewItem,
                        frame(NewLocals, OperandStack, Flags),
                        NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="newarray">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.newarray"></a><span class="emphasis"><em>newarray</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>newarray</em></span> instruction with
                        operand <code class="literal">TypeCode</code> is type safe
                        iff <code class="literal">TypeCode</code> corresponds to the primitive
                        type <code class="literal">ElementType</code>, and one can validly replace the
                        type <code class="literal">int</code> on the incoming operand stack with the type 'array
                        of <code class="literal">ElementType</code>', yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(newarray(TypeCode), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    primitiveArrayInfo(TypeCode, _TypeChar, ElementType, _VerifierType),
    validTypeTransition(Environment, [int], arrayOf(ElementType),
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">The correspondence between type codes and primitive
                        types is specified by the following predicate:
                     </p><pre class="programlisting">
primitiveArrayInfo(4,  0'Z, boolean, int).
primitiveArrayInfo(5,  0'C, char,    int).
primitiveArrayInfo(6,  0'F, float,   float).
primitiveArrayInfo(7,  0'D, double,  double).
primitiveArrayInfo(8,  0'B, byte,    int).
primitiveArrayInfo(9,  0'S, short,   int).
primitiveArrayInfo(10, 0'I, int,     int). 
primitiveArrayInfo(11, 0'J, long,    long).
</pre></div>
                  <div class="section-verification" title="nop">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.nop"></a><span class="emphasis"><em>nop</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>nop</em></span> instruction is always type safe. The <span class="emphasis"><em>nop</em></span>
                        instruction does not affect the type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(nop, _Environment, _Offset, StackFrame,
                      StackFrame, ExceptionStackFrame) :-
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="pop">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.pop"></a><span class="emphasis"><em>pop</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>pop</em></span> instruction is type safe iff one can validly
                        pop a category 1 type off the incoming operand stack yielding the
                        outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(pop, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, [Type | Rest], Flags),
    Type \= top,
    sizeOf(Type, 1),
    NextStackFrame = frame(Locals, Rest, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="pop2">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.pop2"></a><span class="emphasis"><em>pop2</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>pop2</em></span> instruction is type safe iff it is
                        a <span class="emphasis"><em>type safe form</em></span> of the <span class="emphasis"><em>pop2</em></span>
                        instruction.
                     </p><pre class="programlisting">
instructionIsTypeSafe(pop2, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(Locals, InputOperandStack, Flags),
    pop2SomeFormIsTypeSafe(InputOperandStack, OutputOperandStack),
    NextStackFrame = frame(Locals, OutputOperandStack, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre><p class="norm">A <span class="emphasis"><em>pop2</em></span> instruction is a <span class="emphasis"><em>type safe
                              form</em></span> of the <span class="emphasis"><em>pop2</em></span> instruction iff it is a <span class="emphasis"><em>type
                              safe form 1</em></span> <span class="emphasis"><em>pop2</em></span> instruction or a <span class="emphasis"><em>type safe
                              form 2</em></span> <span class="emphasis"><em>pop2</em></span> instruction.
                     </p><pre class="programlisting">
pop2SomeFormIsTypeSafe(InputOperandStack, OutputOperandStack) :-
    pop2Form1IsTypeSafe(InputOperandStack, OutputOperandStack).

pop2SomeFormIsTypeSafe(InputOperandStack, OutputOperandStack) :-
    pop2Form2IsTypeSafe(InputOperandStack, OutputOperandStack).
</pre><p class="norm">A <span class="emphasis"><em>pop2</em></span> instruction is a <span class="emphasis"><em>type safe form
                              1</em></span> <span class="emphasis"><em>pop2</em></span> instruction iff one can validly pop two types of
                        size 1 off the incoming operand stack yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
pop2Form1IsTypeSafe([Type1, Type2 | Rest], Rest) :-
    sizeOf(Type1, 1),
    sizeOf(Type2, 1).
</pre><p class="norm">A <span class="emphasis"><em>pop2</em></span> instruction is a <span class="emphasis"><em>type safe form
                              2</em></span> <span class="emphasis"><em>pop2</em></span> instruction iff one can validly pop a type of size
                        2 off the incoming operand stack yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
pop2Form2IsTypeSafe([top, Type | Rest], Rest) :- sizeOf(Type, 2).
</pre></div>
                  <div class="section-verification" title="putfield">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.putfield"></a><span class="emphasis"><em>putfield</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>putfield</em></span> instruction with
                        operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting a field whose declared type
                        is <code class="literal">FieldType</code>, declared in a
                        class <code class="literal">FieldClass</code>, and one can validly pop types
                        matching <code class="literal">FieldType</code>
                        and <code class="literal">FieldClass</code> off the incoming operand stack
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(putfield(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = field(FieldClass, FieldName, FieldDescriptor),
    parseFieldDescriptor(FieldDescriptor, FieldType),	
    canPop(StackFrame, [FieldType], PoppedFrame),
    passesProtectedCheck(Environment, FieldClass, FieldName,
                         FieldDescriptor, PoppedFrame),
    currentClassLoader(Environment, CurrentLoader),
    canPop(StackFrame, [FieldType, class(FieldClass, CurrentLoader)],
           NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="putstatic">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.putstatic"></a><span class="emphasis"><em>putstatic</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>putstatic</em></span> instruction with
                        operand <code class="literal">CP</code> is type safe iff <code class="literal">CP</code>
                        refers to a constant pool entry denoting a field whose declared type
                        is <code class="literal">FieldType</code>, and one can validly pop a type
                        matching <code class="literal">FieldType</code> off the incoming operand stack
                        yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(putstatic(CP), _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    CP = field(_FieldClass, _FieldName, FieldDescriptor),
    parseFieldDescriptor(FieldDescriptor, FieldType),
    canPop(StackFrame, [FieldType], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="return">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.return"></a><span class="emphasis"><em>return</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>return</em></span> instruction is type safe if the enclosing
                        method declares a <code class="literal">void</code> return type, and either:
                     </p>
                     <div class="norm">
                        <ul class="norm" type="disc">
                           <li class="listitem">
                              <p class="norm">The enclosing method is not an <code class="literal">&lt;init&gt;</code> method,
                                     or
                              </p>
                           </li>
                           <li class="listitem">
                              <p class="norm"><code class="literal">this</code> has already been completely initialized
                                     at the point where the instruction occurs.
                              </p>
                           </li>
                        </ul>
                     </div><pre class="programlisting">
instructionIsTypeSafe(return, Environment, _Offset, StackFrame,
                      afterGoto, ExceptionStackFrame) :- 
    thisMethodReturnType(Environment, void),
    StackFrame = frame(_Locals, _OperandStack, Flags),
    notMember(flagThisUninit, Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="saload">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.saload"></a><span class="emphasis"><em>saload</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>saload</em></span> instruction is type safe iff one can
                        validly replace types matching <code class="literal">int</code> and array of <code class="literal">short</code> on the
                        incoming operand stack with <code class="literal">int</code> yielding the outgoing type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(saload, Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [int, arrayOf(short)], int,
                        StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="sastore">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.sastore"></a><span class="emphasis"><em>sastore</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>sastore</em></span> instruction is type safe iff one can
                        validly pop types matching <code class="literal">int</code>, <code class="literal">int</code>, and array of <code class="literal">short</code> off the
                        incoming operand stack yielding the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(sastore, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    canPop(StackFrame, [int, int, arrayOf(short)], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="sipush">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.sipush"></a><span class="emphasis"><em>sipush</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">An <span class="emphasis"><em>sipush</em></span> instruction is type safe iff one can
                        validly push the type <code class="literal">int</code> onto the incoming operand stack yielding
                        the outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(sipush(_Value), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    validTypeTransition(Environment, [], int, StackFrame, NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="swap">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.swap"></a><span class="emphasis"><em>swap</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>swap</em></span> instruction is type safe iff one can
                        validly replace two category 1 types, <code class="literal">Type1</code> and <code class="literal">Type2</code>, on the
                        incoming operand stack with the types <code class="literal">Type2</code> and <code class="literal">Type1</code> yielding the
                        outgoing type state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(swap, _Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :- 
    StackFrame = frame(_Locals, [Type1, Type2 | Rest], _Flags),
    sizeOf(Type1, 1),
    sizeOf(Type2, 1),
    NextStackFrame = frame(_Locals, [Type2, Type1 | Rest], _Flags),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="tableswitch">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.tableswitch"></a><span class="emphasis"><em>tableswitch</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">A <span class="emphasis"><em>tableswitch</em></span> instruction is type safe if its keys
                        are sorted, one can validly pop <code class="literal">int</code> off the incoming operand stack
                        yielding a new type state <code class="literal">BranchStackFrame</code>, and all
                        of the instruction's targets are valid branch targets
                        assuming <code class="literal">BranchStackFrame</code> as their incoming type
                        state.
                     </p><pre class="programlisting">
instructionIsTypeSafe(tableswitch(Targets, Keys), Environment, _Offset,
                      StackFrame, afterGoto, ExceptionStackFrame) :- 
    sort(Keys, Keys), 
    canPop(StackFrame, [int], BranchStackFrame),
    checklist(targetIsTypeSafe(Environment, BranchStackFrame), Targets),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).
</pre></div>
                  <div class="section-verification" title="wide">
                     <div class="titlepage">
                        <div>
                           <div>
                              <h5 class="title"><a name="jvms-4.10.1.9.wide"></a><span class="emphasis"><em>wide</em></span></h5>
                           </div>
                        </div>
                     </div>
                     <p class="norm">The <span class="emphasis"><em>wide</em></span> instructions follow the same rules as the
                        instructions they widen.
                     </p><pre class="programlisting">
instructionHasEquivalentTypeRule(wide(WidenedInstruction),
                                 WidenedInstruction).
</pre></div>
               </div>
            </div>
            <div class="section" title="4.10.2.&nbsp;Verification by Type Inference">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="jvms-4.10.2"></a>4.10.2.&nbsp;Verification by Type Inference
                        </h3>
                     </div>
                  </div>
               </div>
               <p class="norm"><a name="jvms-4.10.2-100"></a>A <code class="literal">class</code> file that does
                  not contain a <code class="literal">StackMapTable</code> attribute (which necessarily has a
                  version number of 49.0 or below) must be verified using type
                  inference.
               </p>
               <div class="section" title="4.10.2.1.&nbsp;The Process of Verification by Type Inference">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.1"></a>4.10.2.1.&nbsp;The Process of Verification by Type Inference
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.1-100"></a>During linking, the
                     verifier checks the <code class="literal">code</code> array of the <code class="literal">Code</code> attribute for each
                     method of the <code class="literal">class</code> file by performing data-flow analysis on each
                     method. The verifier ensures that at any given point in the program,
                     no matter what code path is taken to reach that point, the following
                     is true:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-A"></a>The operand stack
                                  is always the same size and contains the same types of
                                  values.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-B"></a>No local variable
                                  is accessed unless it is known to contain a value of an
                                  appropriate type.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-C"></a>Methods are invoked
                                  with the appropriate arguments.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-D"></a>Fields are assigned
                                  only using values of appropriate types.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-E"></a>All opcodes have
                                  appropriate type arguments on the operand stack and in the local
                                  variable array.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.1-100-F"></a>There is never an
                                  uninitialized class instance in a local variable in code protected
                                  by an exception handler. However, an uninitialized class instance
                                  may be on the operand stack in code protected by an exception
                                  handler. When an exception is thrown, the contents of the operand
                                  stack are discarded.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.1-110"></a>For efficiency reasons,
                     certain tests that could in principle be performed by the verifier are
                     delayed until the first time the code for the method is actually
                     invoked. In so doing, the verifier avoids loading <code class="literal">class</code> files unless
                     it has to.
                  </p>
                  <p class="note">For example, if a method invokes another method that
                     returns an instance of class <span class="type">A</span>, and that instance is assigned only
                     to a field of the same type, the verifier does not bother to check if
                     the class <span class="type">A</span> actually exists. However, if it is assigned to a field
                     of the type <span class="type">B</span>, the definitions of both <span class="type">A</span> and <span class="type">B</span> must be loaded in
                     to ensure that <span class="type">A</span> is a subclass of <span class="type">B</span>.
                  </p>
               </div>
               <div class="section" title="4.10.2.2.&nbsp;The Bytecode Verifier">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.2"></a>4.10.2.2.&nbsp;The Bytecode Verifier
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.2-100"></a>The code for each method
                     is verified independently. First, the bytes that make up the code are
                     broken up into a sequence of instructions, and the index into the
                     <code class="literal">code</code> array of the start of each instruction is placed in an
                     array. The verifier then goes through the code a second time and
                     parses the instructions. During this pass a data structure is built to
                     hold information about each Java Virtual Machine instruction in the method. The
                     operands, if any, of each instruction are checked to make sure they
                     are valid. For instance:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-A"></a>Branches must be
                                  within the bounds of the <code class="literal">code</code> array for the method.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-B"></a>The targets of all
                                  control-flow instructions are each the start of an instruction. In
                                  the case of a <span class="emphasis"><em>wide</em></span> instruction, the <span class="emphasis"><em>wide</em></span> opcode is considered
                                  the start of the instruction, and the opcode giving the operation
                                  modified by that <span class="emphasis"><em>wide</em></span> instruction is not considered to start an
                                  instruction. Branches into the middle of an instruction are
                                  disallowed.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-C"></a>No instruction can
                                  access or modify a local variable at an index greater than or
                                  equal to the number of local variables that its method indicates
                                  it allocates.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-D"></a>All references to
                                  the constant pool must be to an entry of the appropriate
                                  type. (For example, the instruction <span class="emphasis"><em>getfield</em></span> must reference a
                                  field.)
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-E"></a>The code does not
                                  end in the middle of an instruction.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-F"></a>Execution cannot
                                  fall off the end of the code.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-100-G"></a>For each exception
                                  handler, the starting and ending point of code protected by the
                                  handler must be at the beginning of an instruction or, in the case
                                  of the ending point, immediately past the end of the code. The
                                  starting point must be before the ending point. The exception
                                  handler code must start at a valid instruction, and it must not
                                  start at an opcode being modified by the <span class="emphasis"><em>wide</em></span>
                                  instruction.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.2-200"></a>For each instruction of
                     the method, the verifier records the contents of the operand stack and
                     the contents of the local variable array prior to the execution of
                     that instruction. For the operand stack, it needs to know the stack
                     height and the type of each value on it. For each local variable, it
                     needs to know either the type of the contents of that local variable
                     or that the local variable contains an unusable or unknown value (it
                     might be uninitialized). The bytecode verifier does not need to
                     distinguish between the integral types (e.g., <code class="literal">byte</code>, <code class="literal">short</code>, <code class="literal">char</code>)
                     when determining the value types on the operand stack.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-210"></a>Next, a data-flow
                     analyzer is initialized. For the first instruction of the method, the
                     local variables that represent parameters initially contain values of
                     the types indicated by the method's type descriptor; the operand stack
                     is empty. All other local variables contain an illegal value. For the
                     other instructions, which have not been examined yet, no information
                     is available regarding the operand stack or local variables.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-220"></a>Finally, the data-flow
                     analyzer is run. For each instruction, a "changed" bit indicates
                     whether this instruction needs to be looked at. Initially, the
                     "changed" bit is set only for the first instruction. The data-flow
                     analyzer executes the following loop:
                  </p>
                  <div class="orderedlist">
                     <ol class="orderedlist" type="1">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-A"></a>Select a Java Virtual Machine
                                  instruction whose "changed" bit is set. If no instruction remains
                                  whose "changed" bit is set, the method has successfully been
                                  verified. Otherwise, turn off the "changed" bit of the selected
                                  instruction.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-B"></a>Model the effect of
                                  the instruction on the operand stack and local variable array by
                                  doing the following:
                           </p>
                           <div class="norm">
                              <ul class="norm" type="disc">
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-B-1"></a>If the
                                       	instruction uses values from the operand stack, ensure that
                                       	there are a sufficient number of values on the stack and that
                                       	the top values on the stack are of an appropriate
                                       	type. Otherwise, verification fails.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-B-2"></a>If the
                                       	instruction uses a local variable, ensure that the specified
                                       	local variable contains a value of the appropriate
                                       	type. Otherwise, verification fails.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-B-3"></a>If the
                                       	instruction pushes values onto the operand stack, ensure that
                                       	there is sufficient room on the operand stack for the new
                                       	values. Add the indicated types to the top of the modeled
                                       	operand stack.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-B-4"></a>If the
                                       	instruction modifies a local variable, record that the local
                                       	variable now contains the new type.
                                    </p>
                                 </li>
                              </ul>
                           </div>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-C"></a>Determine the
                                  instructions that can follow the current instruction. Successor
                                  instructions can be one of the following:
                           </p>
                           <div class="norm">
                              <ul class="norm" type="disc">
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-C-1"></a>The next
                                       	instruction, if the current instruction is not an
                                       	unconditional control transfer instruction (for instance,
                                       	<span class="emphasis"><em>goto</em></span>, <span class="emphasis"><em>return</em></span>, or <span class="emphasis"><em>athrow</em></span>). Verification fails if it is
                                       	possible to "fall off" the last instruction of the
                                       	method.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-C-2"></a>The target(s)
                                       	of a conditional or unconditional branch or switch.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-C-3"></a>Any exception
                                       	handlers for this instruction.
                                    </p>
                                 </li>
                              </ul>
                           </div>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-D"></a>Merge the state of
                                  the operand stack and local variable array at the end of the
                                  execution of the current instruction into each of the successor
                                  instructions.
                           </p>
                           <p class="norm"><a name="jvms-4.10.2.2-220-D.1"></a>In the special
                                  case of control transfer to an exception handler, the operand
                                  stack is set to contain a single object of the exception type
                                  indicated by the exception handler information. There must be
                                  sufficient room on the operand stack for this single value, as if
                                  an instruction had pushed it.
                           </p>
                           <div class="norm">
                              <ul class="norm" type="disc">
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-D-1"></a>If this is
                                       	the first time the successor instruction has been visited,
                                       	record that the operand stack and local variable values
                                       	calculated in steps 2 and 3 are the state of the operand stack
                                       	and local variable array prior to executing the successor
                                       	instruction. Set the "changed" bit for the successor
                                       	instruction.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.2-220-D-2"></a>If the
                                       	successor instruction has been seen before, merge the operand
                                       	stack and local variable values calculated in steps 2 and 3
                                       	into the values already there. Set the "changed" bit if there
                                       	is any modification to the values.
                                    </p>
                                 </li>
                              </ul>
                           </div>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.2-220-E"></a>Continue at step
                                  1.
                           </p>
                        </li>
                     </ol>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.2-300"></a>To merge two operand
                     stacks, the number of values on each stack must be identical. The
                     types of values on the stacks must also be identical, except that
                     differently typed <code class="literal">reference</code> values may appear at corresponding places on
                     the two stacks. In this case, the merged operand stack contains a
                     <code class="literal">reference</code> to an instance of the first common superclass of the two
                     types. Such a <code class="literal">reference</code> type always exists because the type <code class="literal">Object</code> is a
                     superclass of all class and interface types. If the operand stacks
                     cannot be merged, verification of the method fails.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-310"></a>To merge two local
                     variable array states, corresponding pairs of local variables are
                     compared. If the two types are not identical, then unless both contain
                     <code class="literal">reference</code> values, the verifier records that the local variable contains an
                     unusable value. If both of the pair of local variables contain <code class="literal">reference</code>
                     values, the merged state contains a <code class="literal">reference</code> to an instance of the first
                     common superclass of the two types.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-400"></a>If the data-flow analyzer
                     runs on a method without reporting a verification failure, then the
                     method has been successfully verified by the <code class="literal">class</code> file
                     verifier.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.2-500"></a>Certain instructions and
                     data types complicate the data-flow analyzer. We now examine each of
                     these in more detail.
                  </p>
               </div>
               <div class="section" title="4.10.2.3.&nbsp;Values of Types long and double">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.3"></a>4.10.2.3.&nbsp;Values of Types <code class="literal">long</code> and <code class="literal">double</code></h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.3-100"></a>Values of the <code class="literal">long</code> and
                     <code class="literal">double</code> types are treated specially by the verification
                     process.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.3-110"></a>Whenever a value of type
                     <code class="literal">long</code> or <code class="literal">double</code> is moved into a local variable at index <span class="emphasis"><em>n</em></span>,
                     index <span class="emphasis"><em>n</em></span>+1 is specially marked to indicate that it has been
                     reserved by the value at index <span class="emphasis"><em>n</em></span> and must not be used as a local
                     variable index. Any value previously at index <span class="emphasis"><em>n</em></span>+1 becomes
                     unusable.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.3-120"></a>Whenever a value is moved
                     to a local variable at index <span class="emphasis"><em>n</em></span>, the index <span class="emphasis"><em>n</em></span>-1 is examined to
                     see if it is the index of a value of type <code class="literal">long</code> or <code class="literal">double</code>. If so,
                     the local variable at index <span class="emphasis"><em>n</em></span>-1 is changed to indicate that it
                     now contains an unusable value. Since the local variable at index
                     <span class="emphasis"><em>n</em></span> has been overwritten, the local variable at index <span class="emphasis"><em>n</em></span>-1
                     cannot represent a value of type <code class="literal">long</code> or <code class="literal">double</code>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.3-130"></a>Dealing with values of
                     types <code class="literal">long</code> or <code class="literal">double</code> on the operand stack is simpler; the verifier
                     treats them as single values on the stack. For example, the
                     verification code for the <span class="emphasis"><em>dadd</em></span> opcode (add two <code class="literal">double</code> values)
                     checks that the top two items on the stack are both of type
                     <code class="literal">double</code>. When calculating operand stack length, values of type <code class="literal">long</code>
                     and <code class="literal">double</code> have length two.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.3-140"></a>Untyped instructions that
                     manipulate the operand stack must treat values of type <code class="literal">long</code> and
                     <code class="literal">double</code> as atomic (indivisible). For example, the verifier reports a
                     failure if the top value on the stack is a <code class="literal">double</code> and it encounters
                     an instruction such as <span class="emphasis"><em>pop</em></span> or <span class="emphasis"><em>dup</em></span>. The instructions <span class="emphasis"><em>pop2</em></span> or
                     <span class="emphasis"><em>dup2</em></span> must be used instead.
                  </p>
               </div>
               <div class="section" title="4.10.2.4.&nbsp;Instance Initialization Methods and Newly Created Objects">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.4"></a>4.10.2.4.&nbsp;Instance Initialization Methods and Newly Created Objects
                           </h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.4-100"></a>Creating a new class
                     instance is a multistep process. The statement:
                  </p><pre class="programlisting">
...
new myClass(i, j, k);
...
</pre><p class="norm"><a name="jvms-4.10.2.4-110"></a>can be implemented by the
                     following:
                  </p><pre class="programlisting">
...
new #1            // Allocate uninitialized space for myClass
dup               // Duplicate object on the operand stack
iload_1           // Push i
iload_2           // Push j
iload_3           // Push k
invokespecial #5  // Invoke myClass.<code class="literal">&lt;init&gt;</code>
...
</pre><p class="norm"><a name="jvms-4.10.2.4-120"></a>This instruction sequence
                     leaves the newly created and initialized object on top of the operand
                     stack. (Additional examples of compilation to the instruction set of
                     the Java Virtual Machine are given in <a class="xref" href="jvms-3.html" title="Chapter&nbsp;3.&nbsp;Compiling for the Java Virtual Machine">&sect;3</a>.)
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.4-130"></a>The instance
                     initialization method (<a class="xref" href="jvms-2.html#jvms-2.9" title="2.9.&nbsp;Special Methods">&sect;2.9</a>) for
                     class <code class="literal">myClass</code> sees the new uninitialized object as
                     its <code class="literal">this</code> argument in local variable 0. Before that method invokes
                     another instance initialization method of <code class="literal">myClass</code>
                     or its direct superclass on <code class="literal">this</code>, the only operation the method can
                     perform on <code class="literal">this</code> is assigning fields declared
                     within <code class="literal">myClass</code>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.4-140"></a>When doing dataflow
                     analysis on instance methods, the verifier initializes local variable
                     0 to contain an object of the current class, or, for instance
                     initialization methods, local variable 0 contains a special type
                     indicating an uninitialized object. After an appropriate instance
                     initialization method is invoked (from the current class or the
                     current superclass) on this object, all occurrences of this special
                     type on the verifier's model of the operand stack and in the local
                     variable array are replaced by the current class type. The verifier
                     rejects code that uses the new object before it has been initialized
                     or that initializes the object more than once. In addition, it ensures
                     that every normal return of the method has invoked an instance
                     initialization method either in the class of this method or in the
                     direct superclass.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.4-150"></a>Similarly, a special type
                     is created and pushed on the verifier's model of the operand stack as
                     the result of the Java Virtual Machine instruction <span class="emphasis"><em>new</em></span>. The special type indicates
                     the instruction by which the class instance was created and the type
                     of the uninitialized class instance created. When an instance
                     initialization method declared in the class of the uninitialized class
                     instance is invoked on that class instance, all occurrences of the
                     special type are replaced by the intended type of the class
                     instance. This change in type may propagate to subsequent instructions
                     as the dataflow analysis proceeds.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.4-160"></a>The instruction number
                     needs to be stored as part of the special type, as there may be
                     multiple not-yet-initialized instances of a class in existence on the
                     operand stack at one time. For example, the Java Virtual Machine instruction sequence
                     that implements:
                  </p><pre class="programlisting">
new InputStream(new Foo(), new InputStream("foo"))
</pre><p class="norm"><a name="jvms-4.10.2.4-170"></a>may have two
                     uninitialized instances of <code class="literal">InputStream</code> on the
                     operand stack at once. When an instance initialization method is
                     invoked on a class instance, only those occurrences of the special
                     type on the operand stack or in the local variable array that are the
                     same object as the class instance are replaced.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.4-200"></a>A valid instruction
                     sequence must not have an uninitialized object on the operand stack or
                     in a local variable at the target of a backwards branch if the special
                     type of the uninitialized object is merged with a special type other
                     than itself, or in a local variable in code protected by an exception
                     handler or a <code class="literal">finally</code> clause. Otherwise, a devious piece of code
                     might fool the verifier into thinking it had initialized a class
                     instance when it had, in fact, initialized a class instance created in
                     a previous pass through a loop.
                  </p>
               </div>
               <div class="section" title="4.10.2.5.&nbsp;Exceptions and finally">
                  <div class="titlepage">
                     <div>
                        <div>
                           <h4 class="title"><a name="jvms-4.10.2.5"></a>4.10.2.5.&nbsp;Exceptions and <code class="literal">finally</code></h4>
                        </div>
                     </div>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.5-100"></a>To implement the
                     <code class="literal">try</code>-<code class="literal">finally</code> construct, a compiler for the Java programming language that
                     generates <code class="literal">class</code> files with version number 50.0 or below may use the
                     exception-handling facilities together with two special instructions:
                     <span class="emphasis"><em>jsr</em></span> ("jump to subroutine") and <span class="emphasis"><em>ret</em></span> ("return from subroutine"). The
                     <code class="literal">finally</code> clause is compiled as a subroutine within the Java Virtual Machine code for
                     its method, much like the code for an exception handler. When a <span class="emphasis"><em>jsr</em></span>
                     instruction that invokes the subroutine is executed, it pushes its
                     return address, the address of the instruction after the <span class="emphasis"><em>jsr</em></span> that is
                     being executed, onto the operand stack as a value of type
                     <code class="literal">returnAddress</code>. The code for the subroutine stores the return address
                     in a local variable. At the end of the subroutine, a <span class="emphasis"><em>ret</em></span> instruction
                     fetches the return address from the local variable and transfers
                     control to the instruction at the return address.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.5-110"></a>Control can be
                     transferred to the <code class="literal">finally</code> clause (the <code class="literal">finally</code> subroutine can be
                     invoked) in several different ways. If the <code class="literal">try</code> clause completes
                     normally, the <code class="literal">finally</code> subroutine is invoked via a <span class="emphasis"><em>jsr</em></span> instruction
                     before evaluating the next expression. A <code class="literal">break</code> or <code class="literal">continue</code> inside
                     the <code class="literal">try</code> clause that transfers control outside the <code class="literal">try</code> clause
                     executes a <span class="emphasis"><em>jsr</em></span> to the code for the <code class="literal">finally</code> clause first. If the
                     <code class="literal">try</code> clause executes a <span class="emphasis"><em>return</em></span>, the compiled code does the
                     following:
                  </p>
                  <div class="orderedlist">
                     <ol class="orderedlist" type="1">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-110-A"></a>Saves the return
                                  value (if any) in a local variable.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-110-B"></a>Executes a <span class="emphasis"><em>jsr</em></span> to
                                  the code for the <code class="literal">finally</code> clause.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-110-C"></a>Upon return from
                                    the <code class="literal">finally</code> clause, returns the value saved in the local
                                    variable.
                           </p>
                        </li>
                     </ol>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.5-120"></a>The compiler sets up a
                     special exception handler, which catches any exception thrown by the
                     <code class="literal">try</code> clause. If an exception is thrown in the <code class="literal">try</code> clause, this
                     exception handler does the following:
                  </p>
                  <div class="orderedlist">
                     <ol class="orderedlist" type="1">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-120-A"></a>Saves the exception
                                  in a local variable.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-120-B"></a>Executes a <span class="emphasis"><em>jsr</em></span> to
                                  the <code class="literal">finally</code> clause.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-120-C"></a>Upon return from
                                  the <code class="literal">finally</code> clause, rethrows the exception.
                           </p>
                        </li>
                     </ol>
                  </div>
                  <p class="note">For more information about the implementation of the
                     <code class="literal">try</code>-<code class="literal">finally</code> construct, see <a class="xref" href="jvms-3.html#jvms-3.13" title="3.13.&nbsp;Compiling finally">&sect;3.13</a>.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.5-200"></a>The code for the
                     <code class="literal">finally</code> clause presents a special problem to the verifier. Usually,
                     if a particular instruction can be reached via multiple paths and a
                     particular local variable contains incompatible values through those
                     multiple paths, then the local variable becomes unusable. However, a
                     <code class="literal">finally</code> clause might be called from several different places,
                     yielding several different circumstances:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-200-A"></a>The invocation from
                                  the exception handler may have a certain local variable that
                                  contains an exception.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-200-B"></a>The invocation to
                                  implement <span class="emphasis"><em>return</em></span> may have some local variable that contains the
                                  return value.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-200-C"></a>The invocation from
                                  the bottom of the <code class="literal">try</code> clause may have an indeterminate value in
                                  that same local variable.
                           </p>
                        </li>
                     </ul>
                  </div>
                  <p class="norm"><a name="jvms-4.10.2.5-210"></a>The code for the
                     <code class="literal">finally</code> clause itself might pass verification, but after completing
                     the updating all the successors of the <span class="emphasis"><em>ret</em></span> instruction, the verifier
                     would note that the local variable that the exception handler expects
                     to hold an exception, or that the return code expects to hold a return
                     value, now contains an indeterminate value.
                  </p>
                  <p class="norm"><a name="jvms-4.10.2.5-220"></a>Verifying code that
                     contains a <code class="literal">finally</code> clause is complicated. The basic idea is the
                     following:
                  </p>
                  <div class="norm">
                     <ul class="norm" type="disc">
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-220-A"></a>Each instruction
                                  keeps track of the list of <span class="emphasis"><em>jsr</em></span> targets needed to reach that
                                  instruction. For most code, this list is empty. For instructions
                                  inside code for the <code class="literal">finally</code> clause, it is of length one. For
                                  multiply nested <code class="literal">finally</code> code (extremely rare!), it may be longer
                                  than one.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-220-B"></a>For each
                                  instruction and each <span class="emphasis"><em>jsr</em></span> needed to reach that instruction, a bit
                                  vector is maintained of all local variables accessed or modified
                                  since the execution of the <span class="emphasis"><em>jsr</em></span> instruction.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-220-C"></a>When executing the
                                  <span class="emphasis"><em>ret</em></span> instruction, which implements a return from a subroutine,
                                  there must be only one possible subroutine from which the
                                  instruction can be returning. Two different subroutines cannot
                                  "merge" their execution to a single <span class="emphasis"><em>ret</em></span> instruction.
                           </p>
                        </li>
                        <li class="listitem">
                           <p class="norm"><a name="jvms-4.10.2.5-220-D"></a>To perform the
                                  data-flow analysis on a <span class="emphasis"><em>ret</em></span> instruction, a special procedure is
                                  used. Since the verifier knows the subroutine from which the
                                  instruction must be returning, it can find all the <span class="emphasis"><em>jsr</em></span>
                                  instructions that call the subroutine and merge the state of the
                                  operand stack and local variable array at the time of the <span class="emphasis"><em>ret</em></span>
                                  instruction into the operand stack and local variable array of the
                                  instructions following the <span class="emphasis"><em>jsr</em></span>. Merging uses a special set of
                                  values for local variables:
                           </p>
                           <div class="norm">
                              <ul class="norm" type="circle">
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.5-220-D-1"></a>For any local
                                       	variable that the bit vector (constructed above) indicates has
                                       	been accessed or modified by the subroutine, use the type of
                                       	the local variable at the time of the <span class="emphasis"><em>ret</em></span>.
                                    </p>
                                 </li>
                                 <li class="listitem">
                                    <p class="norm"><a name="jvms-4.10.2.5-220-D-2"></a>For other
                                       	local variables, use the type of the local variable before the
                                       	<span class="emphasis"><em>jsr</em></span> instruction.
                                    </p>
                                 </li>
                              </ul>
                           </div>
                        </li>
                     </ul>
                  </div>
               </div>
            </div>
         </div>
         <div class="section" title="4.11.&nbsp;Limitations of the Java Virtual Machine">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title" style="clear: both"><a name="jvms-4.11"></a>4.11.&nbsp;Limitations of the Java Virtual Machine
                     </h2>
                  </div>
               </div>
            </div>
            <p class="norm"><a name="jvms-4.11-100"></a>The following limitations of
               the Java Virtual Machine are implicit in the <code class="literal">class</code> file format:
            </p>
            <div class="norm">
               <ul class="norm" type="disc">
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-A"></a>The per-class or
                            per-interface constant pool is limited to 65535 entries by the
                            16-bit <code class="literal">constant_pool_count</code> field of the
                            <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>). This acts as
                            an internal limit on the total complexity of a single class or
                            interface.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-B"></a>The number of fields
                            that may be declared by a class or interface is limited to 65535
                            by the size of the <code class="literal">fields_count</code> item of the
                            <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-B.1"></a>Note that the value
                            of the <code class="literal">fields_count</code> item of the <code class="literal">ClassFile</code>
                            structure does not include fields that are inherited from
                            superclasses or superinterfaces.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-C"></a>The number of methods
                            that may be declared by a class or interface is limited to 65535
                            by the size of the <code class="literal">methods_count</code> item of the
                            <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-C.1"></a>Note that the value
                            of the <code class="literal">methods_count</code> item of the <code class="literal">ClassFile</code>
                            structure does not include methods that are inherited from
                            superclasses or superinterfaces.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-D"></a>The number of direct
                            superinterfaces of a class or interface is limited to 65535 by the
                            size of the <code class="literal">interfaces_count</code> item of the
                            <code class="literal">ClassFile</code> structure (<a class="xref" href="jvms-4.html#jvms-4.1" title="4.1.&nbsp;The ClassFile Structure">&sect;4.1</a>).
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-E"></a>The greatest number of
                            local variables in the local variables array of a frame created
                            upon invocation of a method (<a class="xref" href="jvms-2.html#jvms-2.6" title="2.6.&nbsp;Frames">&sect;2.6</a>) is
                            limited to 65535 by the size of the
                            <code class="literal">max_locals</code> item of the <code class="literal">Code</code> attribute
                            (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>) giving the code of the method, and
                            by the 16-bit local variable indexing of the Java Virtual Machine instruction
                            set.
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-E.1"></a>Note that values of
                            type <code class="literal">long</code> and <code class="literal">double</code> are each considered to reserve two local
                            variables and contribute two units toward
                            the <code class="literal">max_locals</code> value, so use of local variables
                            of those types further reduces this limit.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-F"></a>The size of an operand
                            stack in a frame (<a class="xref" href="jvms-2.html#jvms-2.6" title="2.6.&nbsp;Frames">&sect;2.6</a>) is limited to 65535
                            values by the <code class="literal">max_stack</code> field of the <code class="literal">Code</code>
                            attribute (<a class="xref" href="jvms-4.html#jvms-4.7.3" title="4.7.3.&nbsp;The Code Attribute">&sect;4.7.3</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-F.1"></a>Note that values of
                            type <code class="literal">long</code> and <code class="literal">double</code> are each considered to contribute two
                            units toward the <code class="literal">max_stack</code> value, so use of
                            values of these types on the operand stack further reduces this
                            limit.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-G"></a>The number of method
                            parameters is limited to 255 by the definition of a method
                            descriptor (<a class="xref" href="jvms-4.html#jvms-4.3.3" title="4.3.3.&nbsp;Method Descriptors">&sect;4.3.3</a>), where the limit
                            includes one unit for <code class="literal">this</code> in the case of instance or interface
                            method invocations.
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-G.1"></a>Note that a method
                            descriptor is defined in terms of a notion of method parameter
                            length in which a parameter of type <code class="literal">long</code> or <code class="literal">double</code> contributes
                            two units to the length, so parameters of these types further
                            reduce the limit.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-H"></a>The length of field and
                            method names, field and method descriptors, and other constant
                            string values (including those referenced by <code class="literal">ConstantValue</code>
                            (<a class="xref" href="jvms-4.html#jvms-4.7.2" title="4.7.2.&nbsp;The ConstantValue Attribute">&sect;4.7.2</a>) attributes) is limited to 65535
                            characters by the 16-bit unsigned <code class="literal">length</code> item
                            of the <code class="literal">CONSTANT_Utf8_info</code> structure
                            (<a class="xref" href="jvms-4.html#jvms-4.4.7" title="4.4.7.&nbsp;The CONSTANT_Utf8_info Structure">&sect;4.4.7</a>).
                     </p>
                     <p class="norm"><a name="jvms-4.11-100-H.1"></a>Note that the limit
                            is on the number of bytes in the encoding and not on the number of
                            encoded characters. UTF-8 encodes some characters using two or
                            three bytes. Thus, strings incorporating multibyte characters are
                            further constrained.
                     </p>
                  </li>
                  <li class="listitem">
                     <p class="norm"><a name="jvms-4.11-100-I"></a>The number of
                            dimensions in an array is limited to 255 by the size of
                            the <span class="emphasis"><em>dimensions</em></span> opcode of the <span class="emphasis"><em>multianewarray</em></span>
                            instruction and by the constraints imposed on the
                            <span class="emphasis"><em>multianewarray</em></span>, <span class="emphasis"><em>anewarray</em></span>, and <span class="emphasis"><em>newarray</em></span> instructions
                            (<a class="xref" href="jvms-4.html#jvms-4.9.1" title="4.9.1.&nbsp;Static Constraints">&sect;4.9.1</a>,
                            <a class="xref" href="jvms-4.html#jvms-4.9.2" title="4.9.2.&nbsp;Structural Constraints">&sect;4.9.2</a>).
                     </p>
                  </li>
               </ul>
            </div>
         </div>
      </div>
      <div class="navfooter">
         <hr>
         <table width="100%" summary="Navigation footer">
            <tr>
               <td width="40%" align="left"><a accesskey="p" href="jvms-3.html">Prev</a>&nbsp;
               </td>
               <td width="20%" align="center">&nbsp;</td>
               <td width="40%" align="right">&nbsp;<a accesskey="n" href="jvms-5.html">Next</a></td>
            </tr>
            <tr>
               <td width="40%" align="left" valign="top">Chapter&nbsp;3.&nbsp;Compiling for the Java Virtual Machine&nbsp;</td>
               <td width="20%" align="center"><a accesskey="h" href="index.html">Home</a></td>
               <td width="40%" align="right" valign="top">&nbsp;Chapter&nbsp;5.&nbsp;Loading, Linking, and Initializing</td>
            </tr>
         </table>
      </div>
      <div xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:rx="http://www.renderx.com/XSL/Extensions" class="navfooter">
         <hr><a href="jvms-0-front.html">
                Legal Notice
              </a></div>
   </body>
</html>
