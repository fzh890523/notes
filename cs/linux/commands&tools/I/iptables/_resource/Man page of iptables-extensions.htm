Content-type: text/html; charset=UTF-8

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML><HEAD><TITLE>Man page of iptables-extensions</TITLE>
</HEAD><BODY>
<H1>iptables-extensions</H1>
Section: iptables 1.4.20 (8)<BR>Updated: <BR><A HREF="#index">Index</A>
<A HREF="/cgi-bin/man/man2html">Return to Main Contents</A><HR>

<A NAME="lbAB">&nbsp;</A>
<H2>NAME</H2>

iptables-extensions --- list of extensions in the standard iptables distribution
<A NAME="lbAC">&nbsp;</A>
<H2>SYNOPSIS</H2>

<B>ip6tables</B> [<B>-m</B> <I>name</I> [<I>module-options</I>...]]
[<B>-j</B> <I>target-name</I> [<I>target-options</I>...]
<P>

<B>iptables</B> [<B>-m</B> <I>name</I> [<I>module-options</I>...]]
[<B>-j</B> <I>target-name</I> [<I>target-options</I>...]
<A NAME="lbAD">&nbsp;</A>
<H2>MATCH EXTENSIONS</H2>

iptables can use extended packet matching modules
with the <B>-m</B> or <B>--match</B>
options, followed by the matching module name; after these, various
extra command line options become available, depending on the specific
module.  You can specify multiple extended match modules in one line,
and you can use the <B>-h</B> or <B>--help</B>
options after the module has been specified to receive help specific
to that module.  The extended match modules are evaluated in the order
they are specified in the rule.
<P>

If the <B>-p</B> or <B>--protocol</B> was specified and if and only if an
unknown option is encountered, iptables will try load a match module of the
same name as the protocol, to try making the option available.

<A NAME="lbAE">&nbsp;</A>
<H3>addrtype</H3>

This module matches packets based on their 
<B>address type.</B>

Address types are used within the kernel networking stack and categorize
addresses into various groups.  The exact definition of that group depends on the specific layer three protocol.
<P>

The following address types are possible:
<DL COMPACT>
<DT><B>UNSPEC</B>

<DD>
an unspecified address (i.e. 0.0.0.0)
<DT><B>UNICAST</B>

<DD>
an unicast address
<DT><B>LOCAL</B>

<DD>
a local address
<DT><B>BROADCAST</B>

<DD>
a broadcast address
<DT><B>ANYCAST</B>

<DD>
an anycast packet
<DT><B>MULTICAST</B>

<DD>
a multicast address
<DT><B>BLACKHOLE</B>

<DD>
a blackhole address
<DT><B>UNREACHABLE</B>

<DD>
an unreachable address
<DT><B>PROHIBIT</B>

<DD>
a prohibited address
<DT><B>THROW</B>

<DD>
FIXME
<DT><B>NAT</B>

<DD>
FIXME
<DT><B>XRESOLVE</B>

<DD>
<DT>[<B>!</B>] <B>--src-type</B> <I>type</I><DD>
Matches if the source address is of given type
<DT>[<B>!</B>] <B>--dst-type</B> <I>type</I><DD>
Matches if the destination address is of given type
<DT><B>--limit-iface-in</B>

<DD>
The address type checking can be limited to the interface the packet is coming
in. This option is only valid in the
<B>PREROUTING</B>,

<B>INPUT</B>

and
<B>FORWARD</B>

chains. It cannot be specified with the
<B>--limit-iface-out</B>
option.
<DT><B>--limit-iface-out</B><DD>
The address type checking can be limited to the interface the packet is going
out. This option is only valid in the
<B>POSTROUTING</B>,

<B>OUTPUT</B>

and
<B>FORWARD</B>

chains. It cannot be specified with the
<B>--limit-iface-in</B>
option.
</DL>
<A NAME="lbAF">&nbsp;</A>
<H3>ah (IPv6-specific)</H3>

This module matches the parameters in Authentication header of IPsec packets.
<DL COMPACT>
<DT>[<B>!</B>] <B>--ahspi</B> <I>spi</I>[<B>:</B><I>spi</I>]<DD>
Matches SPI.
<DT>[<B>!</B>] <B>--ahlen</B> <I>length</I><DD>
Total length of this header in octets.
<DT><B>--ahres</B><DD>
Matches if the reserved field is filled with zero.
</DL>
<A NAME="lbAG">&nbsp;</A>
<H3>ah (IPv4-specific)</H3>

This module matches the SPIs in Authentication header of IPsec packets.
<DL COMPACT>
<DT>[<B>!</B>] <B>--ahspi</B> <I>spi</I>[<B>:</B><I>spi</I>]<DD>
</DL>
<A NAME="lbAH">&nbsp;</A>
<H3>bpf</H3>

Match using Linux Socket Filter. Expects a BPF program in decimal format. This
is the format generated by the <B>nfbpf_compile</B> utility.
<DL COMPACT>
<DT><B>--bytecode</B> <I>code</I><DD>
Pass the BPF byte code format (described in the example below).
</DL>
<P>

The code format is similar to the output of the tcpdump -ddd command: one line
that stores the number of instructions, followed by one line for each
instruction. Instruction lines follow the pattern 'u16 u8 u8 u32' in decimal
notation. Fields encode the operation, jump offset if true, jump offset if
false and generic multiuse field 'K'. Comments are not supported.
<P>

For example, to read only packets matching 'ip proto 6', insert the following,
without the comments or trailing whitespace:
<DL COMPACT>
<DT><DD>
4               # number of instructions
<BR>

48 0 0 9        # load byte  ip-&gt;proto
<BR>

21 0 1 6        # jump equal IPPROTO_TCP
<BR>

6 0 0 1         # return     pass (non-zero)
<BR>

6 0 0 0         # return     fail (zero)
</DL>
<P>

You can pass this filter to the bpf match with the following command:
<DL COMPACT>
<DT><DD>
iptables -A OUTPUT -m bpf --bytecode '4,48 0 0 9,21 0 1 6,6 0 0 1,6 0 0 0' -j ACCEPT
</DL>
<P>

Or instead, you can invoke the nfbpf_compile utility.
<DL COMPACT>
<DT><DD>
iptables -A OUTPUT -m bpf --bytecode &quot;`nfbpf_compile RAW 'ip proto 6'`&quot; -j ACCEPT
</DL>
<P>

You may want to learn more about BPF from FreeBSD's <A HREF="/cgi-bin/man/man2html?4+bpf">bpf</A>(4) manpage.
<A NAME="lbAI">&nbsp;</A>
<H3>cluster</H3>

Allows you to deploy gateway and back-end load-sharing clusters without the
need of load-balancers.
<P>

This match requires that all the nodes see the same packets. Thus, the cluster
match decides if this node has to handle a packet given the following options:
<DL COMPACT>
<DT><B>--cluster-total-nodes</B> <I>num</I><DD>
Set number of total nodes in cluster.
<DT>[<B>!</B>] <B>--cluster-local-node</B> <I>num</I><DD>
Set the local node number ID.
<DT>[<B>!</B>] <B>--cluster-local-nodemask</B> <I>mask</I><DD>
Set the local node number ID mask. You can use this option instead
of <B>--cluster-local-node</B>.
<DT><B>--cluster-hash-seed</B> <I>value</I><DD>
Set seed value of the Jenkins hash.
</DL>
<P>

Example:
<DL COMPACT>
<DT><DD>
iptables -A PREROUTING -t mangle -i eth1 -m cluster
--cluster-total-nodes 2 --cluster-local-node 1
--cluster-hash-seed 0xdeadbeef
-j MARK --set-mark 0xffff
<DT><DD>
iptables -A PREROUTING -t mangle -i eth2 -m cluster
--cluster-total-nodes 2 --cluster-local-node 1
--cluster-hash-seed 0xdeadbeef
-j MARK --set-mark 0xffff
<DT><DD>
iptables -A PREROUTING -t mangle -i eth1
-m mark ! --mark 0xffff -j DROP
<DT><DD>
iptables -A PREROUTING -t mangle -i eth2
-m mark ! --mark 0xffff -j DROP
</DL>
<P>

And the following commands to make all nodes see the same packets:
<DL COMPACT>
<DT><DD>
ip maddr add 01:00:5e:00:01:01 dev eth1
<DT><DD>
ip maddr add 01:00:5e:00:01:02 dev eth2
<DT><DD>
arptables -A OUTPUT -o eth1 --h-length 6
-j mangle --mangle-mac-s 01:00:5e:00:01:01
<DT><DD>
arptables -A INPUT -i eth1 --h-length 6
--destination-mac 01:00:5e:00:01:01
-j mangle --mangle-mac-d 00:zz:yy:xx:5a:27
<DT><DD>
arptables -A OUTPUT -o eth2 --h-length 6
-j mangle --mangle-mac-s 01:00:5e:00:01:02
<DT><DD>
arptables -A INPUT -i eth2 --h-length 6
--destination-mac 01:00:5e:00:01:02
-j mangle --mangle-mac-d 00:zz:yy:xx:5a:27
</DL>
<P>

In the case of TCP connections, pickup facility has to be disabled
to avoid marking TCP ACK packets coming in the reply direction as
valid.
<DL COMPACT>
<DT><DD>
echo 0 &gt; /proc/sys/net/netfilter/nf_conntrack_tcp_loose
</DL>
<A NAME="lbAJ">&nbsp;</A>
<H3>comment</H3>

Allows you to add comments (up to 256 characters) to any rule.
<DL COMPACT>
<DT><B>--comment</B> <I>comment</I><DD>
<DT>Example:<DD>
iptables -A INPUT -i eth1 -m comment --comment &quot;my local LAN&quot;
</DL>
<A NAME="lbAK">&nbsp;</A>
<H3>connbytes</H3>

Match by how many bytes or packets a connection (or one of the two
flows constituting the connection) has transferred so far, or by
average bytes per packet.
<P>

The counters are 64-bit and are thus not expected to overflow ;)
<P>

The primary use is to detect long-lived downloads and mark them to be
scheduled using a lower priority band in traffic control.
<P>

The transferred bytes per connection can also be viewed through
`conntrack -L` and accessed via ctnetlink.
<P>

NOTE that for connections which have no accounting information, the match will
always return false. The &quot;net.netfilter.nf_conntrack_acct&quot; sysctl flag controls
whether <B>new</B> connections will be byte/packet counted. Existing connection
flows will not be gaining/losing a/the accounting structure when be sysctl flag
is flipped.
<DL COMPACT>
<DT>[<B>!</B>] <B>--connbytes</B> <I>from</I>[<B>:</B><I>to</I>]<DD>
match packets from a connection whose packets/bytes/average packet
size is more than FROM and less than TO bytes/packets. if TO is
omitted only FROM check is done. &quot;!&quot; is used to match packets not
falling in the range.
<DT><B>--connbytes-dir</B> {<B>original</B>|<B>reply</B>|<B>both</B>}<DD>
which packets to consider
<DT><B>--connbytes-mode</B> {<B>packets</B>|<B>bytes</B>|<B>avgpkt</B>}<DD>
whether to check the amount of packets, number of bytes transferred or
the average size (in bytes) of all packets received so far. Note that
when &quot;both&quot; is used together with &quot;avgpkt&quot;, and data is going (mainly)
only in one direction (for example HTTP), the average packet size will
be about half of the actual data packets.
<DT>Example:<DD>
iptables .. -m connbytes --connbytes 10000:100000 --connbytes-dir both --connbytes-mode bytes ...
</DL>
<A NAME="lbAL">&nbsp;</A>
<H3>connlabel</H3>

Module matches or adds connlabels to a connection.
connlabels are similar to connmarks, except labels are bit-based; i.e.
all labels may be attached to a flow at the same time.
Up to 128 unique labels are currently supported.
<DL COMPACT>
<DT>[<B>!</B>] <B>--label</B> <B>name</B><DD>
matches if label <B>name</B> has been set on a connection.
Instead of a name (which will be translated to a number, see EXAMPLE below),
a number may be used instead.  Using a number always overrides connlabel.conf.
<DT><B>--set</B><DD>
if the label has not been set on the connection, set it.
Note that setting a label can fail.  This is because the kernel allocates the
conntrack label storage area when the connection is created, and it only
reserves the amount of memory required by the ruleset that exists at
the time the connection is created.
In this case, the match will fail (or succeed, in case <B>--label</B>
option was negated).
</DL>
<P>

This match depends on libnetfilter_conntrack 1.0.4 or later.
Label translation is done via the <B>/etc/xtables/connlabel.conf</B> configuration file.
<P>

Example:
<DL COMPACT>
<DT><DD>
<PRE>
0       eth0-in
1       eth0-out
2       ppp-in
3       ppp-out
4       bulk-traffic
5       interactive
</PRE>

</DL>
<P>

<A NAME="lbAM">&nbsp;</A>
<H3>connlimit</H3>

Allows you to restrict the number of parallel connections to a server per
client IP address (or client address block).
<DL COMPACT>
<DT><B>--connlimit-upto</B> <I>n</I><DD>
Match if the number of existing connections is below or equal <I>n</I>.
<DT><B>--connlimit-above</B> <I>n</I><DD>
Match if the number of existing connections is above <I>n</I>.
<DT><B>--connlimit-mask</B> <I>prefix_length</I><DD>
Group hosts using the prefix length. For IPv4, this must be a number between
(including) 0 and 32. For IPv6, between 0 and 128. If not specified, the
maximum prefix length for the applicable protocol is used.
<DT><B>--connlimit-saddr</B><DD>
Apply the limit onto the source group. This is the default if
--connlimit-daddr is not specified.
<DT><B>--connlimit-daddr</B><DD>
Apply the limit onto the destination group.
</DL>
<P>

Examples:
<DL COMPACT>
<DT># allow 2 telnet connections per client host<DD>
iptables -A INPUT -p tcp --syn --dport 23 -m connlimit --connlimit-above 2 -j REJECT
<DT># you can also match the other way around:<DD>
iptables -A INPUT -p tcp --syn --dport 23 -m connlimit --connlimit-upto 2 -j ACCEPT
<DT># limit the number of parallel HTTP requests to 16 per class C sized source network (24 bit netmask)<DD>
iptables -p tcp --syn --dport 80 -m connlimit --connlimit-above 16
--connlimit-mask 24 -j REJECT
<DT># limit the number of parallel HTTP requests to 16 for the link local network<DD>
(ipv6)
ip6tables -p tcp --syn --dport 80 -s fe80::/64 -m connlimit --connlimit-above
16 --connlimit-mask 64 -j REJECT
<DT># Limit the number of connections to a particular host:<DD>
ip6tables -p tcp --syn --dport 49152:65535 -d 2001:db8::1 -m connlimit
--connlimit-above 100 -j REJECT
</DL>
<A NAME="lbAN">&nbsp;</A>
<H3>connmark</H3>

This module matches the netfilter mark field associated with a connection
(which can be set using the <B>CONNMARK</B> target below).
<DL COMPACT>
<DT>[<B>!</B>] <B>--mark</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Matches packets in connections with the given mark value (if a mask is
specified, this is logically ANDed with the mark before the comparison).
</DL>
<A NAME="lbAO">&nbsp;</A>
<H3>conntrack</H3>

This module, when combined with connection tracking, allows access to the
connection tracking state for this packet/connection.
<DL COMPACT>
<DT>[<B>!</B>] <B>--ctstate</B> <I>statelist</I><DD>
<I>statelist</I> is a comma separated list of the connection states to match.
Possible states are listed below.
<DT>[<B>!</B>] <B>--ctproto</B> <I>l4proto</I><DD>
Layer-4 protocol to match (by number or name)
<DT>[<B>!</B>] <B>--ctorigsrc</B> <I>address</I>[<B>/</B><I>mask</I>]<DD>
<DT>[<B>!</B>] <B>--ctorigdst</B> <I>address</I>[<B>/</B><I>mask</I>]<DD>
<DT>[<B>!</B>] <B>--ctreplsrc</B> <I>address</I>[<B>/</B><I>mask</I>]<DD>
<DT>[<B>!</B>] <B>--ctrepldst</B> <I>address</I>[<B>/</B><I>mask</I>]<DD>
Match against original/reply source/destination address
<DT>[<B>!</B>] <B>--ctorigsrcport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
<DT>[<B>!</B>] <B>--ctorigdstport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
<DT>[<B>!</B>] <B>--ctreplsrcport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
<DT>[<B>!</B>] <B>--ctrepldstport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
Match against original/reply source/destination port (TCP/UDP/etc.) or GRE key.
Matching against port ranges is only supported in kernel versions above 2.6.38.
<DT>[<B>!</B>] <B>--ctstatus</B> <I>statelist</I><DD>
<I>statuslist</I> is a comma separated list of the connection statuses to match.
Possible statuses are listed below.
<DT>[<B>!</B>] <B>--ctexpire</B> <I>time</I>[<B>:</B><I>time</I>]<DD>
Match remaining lifetime in seconds against given value or range of values
(inclusive)
<DT><B>--ctdir</B> {<B>ORIGINAL</B>|<B>REPLY</B>}<DD>
Match packets that are flowing in the specified direction. If this flag is not
specified at all, matches packets in both directions.
</DL>
<P>

States for <B>--ctstate</B>:
<DL COMPACT>
<DT><B>INVALID</B><DD>
The packet is associated with no known connection.
<DT><B>NEW</B><DD>
The packet has started a new connection, or otherwise associated
with a connection which has not seen packets in both directions.
<DT><B>ESTABLISHED</B><DD>
The packet is associated with a connection which has seen packets
in both directions.
<DT><B>RELATED</B><DD>
The packet is starting a new connection, but is associated with an
existing connection, such as an FTP data transfer, or an ICMP error.
<DT><B>UNTRACKED</B><DD>
The packet is not tracked at all, which happens if you explicitly untrack it
by using -j CT --notrack in the raw table.
<DT><B>SNAT</B><DD>
A virtual state, matching if the original source address differs from the reply
destination.
<DT><B>DNAT</B><DD>
A virtual state, matching if the original destination differs from the reply
source.
</DL>
<P>

Statuses for <B>--ctstatus</B>:
<DL COMPACT>
<DT><B>NONE</B><DD>
None of the below.
<DT><B>EXPECTED</B><DD>
This is an expected connection (i.e. a conntrack helper set it up).
<DT><B>SEEN_REPLY</B><DD>
Conntrack has seen packets in both directions.
<DT><B>ASSURED</B><DD>
Conntrack entry should never be early-expired.
<DT><B>CONFIRMED</B><DD>
Connection is confirmed: originating packet has left box.
</DL>
<A NAME="lbAP">&nbsp;</A>
<H3>cpu</H3>

<DL COMPACT>
<DT>[<B>!</B>] <B>--cpu</B> <I>number</I><DD>
Match cpu handling this packet. cpus are numbered from 0 to NR_CPUS-1
Can be used in combination with RPS (Remote Packet Steering) or
multiqueue NICs to spread network traffic on different queues.
</DL>
<P>

Example:
<P>

iptables -t nat -A PREROUTING -p tcp --dport 80 -m cpu --cpu 0 
-j REDIRECT --to-port 8080
<P>

iptables -t nat -A PREROUTING -p tcp --dport 80 -m cpu --cpu 1 
-j REDIRECT --to-port 8081
<P>

Available since Linux 2.6.36.
<A NAME="lbAQ">&nbsp;</A>
<H3>dccp</H3>

<DL COMPACT>
<DT>[<B>!</B>] <B>--source-port</B>,<B>--sport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
<DT>[<B>!</B>] <B>--destination-port</B>,<B>--dport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
<DT>[<B>!</B>] <B>--dccp-types</B> <I>mask</I><DD>
Match when the DCCP packet type is one of 'mask'. 'mask' is a comma-separated
list of packet types.  Packet types are: 
<B>REQUEST RESPONSE DATA ACK DATAACK CLOSEREQ CLOSE RESET SYNC SYNCACK INVALID</B>.

<DT>[<B>!</B>] <B>--dccp-option</B> <I>number</I><DD>
Match if DCCP option set.
</DL>
<A NAME="lbAR">&nbsp;</A>
<H3>devgroup</H3>

Match device group of a packets incoming/outgoing interface.
<DL COMPACT>
<DT>[<B>!</B>] <B>--src-group</B> <I>name</I><DD>
Match device group of incoming device
<DT>[<B>!</B>] <B>--dst-group</B> <I>name</I><DD>
Match device group of outgoing device
</DL>
<A NAME="lbAS">&nbsp;</A>
<H3>dscp</H3>

This module matches the 6 bit DSCP field within the TOS field in the
IP header.  DSCP has superseded TOS within the IETF.
<DL COMPACT>
<DT>[<B>!</B>] <B>--dscp</B> <I>value</I><DD>
Match against a numeric (decimal or hex) value [0-63].
<DT>[<B>!</B>] <B>--dscp-class</B> <I>class</I><DD>
Match the DiffServ class. This value may be any of the
BE, EF, AFxx or CSx classes.  It will then be converted
into its according numeric value.
</DL>
<A NAME="lbAT">&nbsp;</A>
<H3>dst (IPv6-specific)</H3>

This module matches the parameters in Destination Options header
<DL COMPACT>
<DT>[<B>!</B>] <B>--dst-len</B> <I>length</I><DD>
Total length of this header in octets.
<DT><B>--dst-opts</B> <I>type</I>[<B>:</B><I>length</I>][<B>,</B><I>type</I>[<B>:</B><I>length</I>]...]<DD>
numeric type of option and the length of the option data in octets.
</DL>
<A NAME="lbAU">&nbsp;</A>
<H3>ecn</H3>

This allows you to match the ECN bits of the IPv4/IPv6 and TCP header.  ECN is the Explicit Congestion Notification mechanism as specified in RFC3168
<DL COMPACT>
<DT>[<B>!</B>] <B>--ecn-tcp-cwr</B><DD>
This matches if the TCP ECN CWR (Congestion Window Received) bit is set.
<DT>[<B>!</B>] <B>--ecn-tcp-ece</B><DD>
This matches if the TCP ECN ECE (ECN Echo) bit is set.
<DT>[<B>!</B>] <B>--ecn-ip-ect</B> <I>num</I><DD>
This matches a particular IPv4/IPv6 ECT (ECN-Capable Transport). You have to specify
a number between `0' and `3'.
</DL>
<A NAME="lbAV">&nbsp;</A>
<H3>esp</H3>

This module matches the SPIs in ESP header of IPsec packets.
<DL COMPACT>
<DT>[<B>!</B>] <B>--espspi</B> <I>spi</I>[<B>:</B><I>spi</I>]<DD>
</DL>
<A NAME="lbAW">&nbsp;</A>
<H3>eui64 (IPv6-specific)</H3>

This module matches the EUI-64 part of a stateless autoconfigured IPv6 address.
It compares the EUI-64 derived from the source MAC address in Ethernet frame
with the lower 64 bits of the IPv6 source address. But &quot;Universal/Local&quot;
bit is not compared. This module doesn't match other link layer frame, and
is only valid in the
<B>PREROUTING</B>,

<B>INPUT</B>

and
<B>FORWARD</B>

chains.
<A NAME="lbAX">&nbsp;</A>
<H3>frag (IPv6-specific)</H3>

This module matches the parameters in Fragment header.
<DL COMPACT>
<DT>[<B>!</B>] <B>--fragid</B> <I>id</I>[<B>:</B><I>id</I>]<DD>
Matches the given Identification or range of it.
<DT>[<B>!</B>] <B>--fraglen</B> <I>length</I><DD>
This option cannot be used with kernel version 2.6.10 or later. The length of
Fragment header is static and this option doesn't make sense.
<DT><B>--fragres</B><DD>
Matches if the reserved fields are filled with zero.
<DT><B>--fragfirst</B><DD>
Matches on the first fragment.
<DT><B>--fragmore</B><DD>
Matches if there are more fragments.
<DT><B>--fraglast</B><DD>
Matches if this is the last fragment.
</DL>
<A NAME="lbAY">&nbsp;</A>
<H3>hashlimit</H3>

<B>hashlimit</B> uses hash buckets to express a rate limiting match (like the
<B>limit</B> match) for a group of connections using a <B>single</B> iptables
rule. Grouping can be done per-hostgroup (source and/or destination address)
and/or per-port. It gives you the ability to express &quot;<I>N</I> packets per time
quantum per group&quot; or &quot;<I>N</I> bytes per seconds&quot; (see below for some examples).
<P>

A hash limit option (<B>--hashlimit-upto</B>, <B>--hashlimit-above</B>) and
<B>--hashlimit-name</B> are required.
<DL COMPACT>
<DT><B>--hashlimit-upto</B> <I>amount</I>[<B>/second</B>|<B>/minute</B>|<B>/hour</B>|<B>/day</B>]<DD>
Match if the rate is below or equal to <I>amount</I>/quantum. It is specified either as
a number, with an optional time quantum suffix (the default is 3/hour), or as
<I>amount</I>b/second (number of bytes per second).
<DT><B>--hashlimit-above</B> <I>amount</I>[<B>/second</B>|<B>/minute</B>|<B>/hour</B>|<B>/day</B>]<DD>
Match if the rate is above <I>amount</I>/quantum.
<DT><B>--hashlimit-burst</B> <I>amount</I><DD>
Maximum initial number of packets to match: this number gets recharged by one
every time the limit specified above is not reached, up to this number; the
default is 5.  When byte-based rate matching is requested, this option specifies
the amount of bytes that can exceed the given rate.  This option should be used
with caution -- if the entry expires, the burst value is reset too.
<DT><B>--hashlimit-mode</B> {<B>srcip</B>|<B>srcport</B>|<B>dstip</B>|<B>dstport</B>}<B>,</B>...<DD>
A comma-separated list of objects to take into consideration. If no
--hashlimit-mode option is given, hashlimit acts like limit, but at the
expensive of doing the hash housekeeping.
<DT><B>--hashlimit-srcmask</B> <I>prefix</I><DD>
When --hashlimit-mode srcip is used, all source addresses encountered will be
grouped according to the given prefix length and the so-created subnet will be
subject to hashlimit. <I>prefix</I> must be between (inclusive) 0 and 32. Note
that --hashlimit-srcmask 0 is basically doing the same thing as not specifying
srcip for --hashlimit-mode, but is technically more expensive.
<DT><B>--hashlimit-dstmask</B> <I>prefix</I><DD>
Like --hashlimit-srcmask, but for destination addresses.
<DT><B>--hashlimit-name</B> <I>foo</I><DD>
The name for the /proc/net/ipt_hashlimit/foo entry.
<DT><B>--hashlimit-htable-size</B> <I>buckets</I><DD>
The number of buckets of the hash table
<DT><B>--hashlimit-htable-max</B> <I>entries</I><DD>
Maximum entries in the hash.
<DT><B>--hashlimit-htable-expire</B> <I>msec</I><DD>
After how many milliseconds do hash entries expire.
<DT><B>--hashlimit-htable-gcinterval</B> <I>msec</I><DD>
How many milliseconds between garbage collection intervals.
</DL>
<P>

Examples:
<DL COMPACT>
<DT>matching on source host<DD>
&quot;1000 packets per second for every host in 192.168.0.0/16&quot; =&gt;
-s 192.168.0.0/16 --hashlimit-mode srcip --hashlimit-upto 1000/sec
<DT>matching on source port<DD>
&quot;100 packets per second for every service of 192.168.1.1&quot; =&gt;
-s 192.168.1.1 --hashlimit-mode srcport --hashlimit-upto 100/sec
<DT>matching on subnet<DD>
&quot;10000 packets per minute for every /28 subnet (groups of 8 addresses)
in 10.0.0.0/8&quot; =&gt;
-s 10.0.0.8 --hashlimit-mask 28 --hashlimit-upto 10000/min
<DT>matching bytes per second<DD>
&quot;flows exceeding 512kbyte/s&quot; =&gt;
--hashlimit-mode srcip,dstip,srcport,dstport --hashlimit-above 512kb/s
<DT>matching bytes per second<DD>
&quot;hosts that exceed 512kbyte/s, but permit up to 1Megabytes without matching&quot;
--hashlimit-mode dstip --hashlimit-above 512kb/s --hashlimit-burst 1mb
</DL>
<A NAME="lbAZ">&nbsp;</A>
<H3>hbh (IPv6-specific)</H3>

This module matches the parameters in Hop-by-Hop Options header
<DL COMPACT>
<DT>[<B>!</B>] <B>--hbh-len</B> <I>length</I><DD>
Total length of this header in octets.
<DT><B>--hbh-opts</B> <I>type</I>[<B>:</B><I>length</I>][<B>,</B><I>type</I>[<B>:</B><I>length</I>]...]<DD>
numeric type of option and the length of the option data in octets.
</DL>
<A NAME="lbBA">&nbsp;</A>
<H3>helper</H3>

This module matches packets related to a specific conntrack-helper.
<DL COMPACT>
<DT>[<B>!</B>] <B>--helper</B> <I>string</I><DD>
Matches packets related to the specified conntrack-helper.
<DL COMPACT><DT><DD>
<P>

string can be &quot;ftp&quot; for packets related to a ftp-session on default port.
For other ports append -portnr to the value, ie. &quot;ftp-2121&quot;.
<P>

Same rules apply for other conntrack-helpers.
</DL>

</DL>
<A NAME="lbBB">&nbsp;</A>
<H3>hl (IPv6-specific)</H3>

This module matches the Hop Limit field in the IPv6 header.
<DL COMPACT>
<DT>[<B>!</B>] <B>--hl-eq</B> <I>value</I><DD>
Matches if Hop Limit equals <I>value</I>.
<DT><B>--hl-lt</B> <I>value</I><DD>
Matches if Hop Limit is less than <I>value</I>.
<DT><B>--hl-gt</B> <I>value</I><DD>
Matches if Hop Limit is greater than <I>value</I>.
</DL>
<A NAME="lbBC">&nbsp;</A>
<H3>icmp (IPv4-specific)</H3>

This extension can be used if `--protocol icmp' is specified. It
provides the following option:
<DL COMPACT>
<DT>[<B>!</B>] <B>--icmp-type</B> {<I>type</I>[<B>/</B><I>code</I>]|<I>typename</I>}<DD>
This allows specification of the ICMP type, which can be a numeric
ICMP type, type/code pair, or one of the ICMP type names shown by the command
<PRE>
 iptables -p icmp -h
</PRE>

</DL>
<A NAME="lbBD">&nbsp;</A>
<H3>icmp6 (IPv6-specific)</H3>

This extension can be used if `--protocol ipv6-icmp' or `--protocol icmpv6' is
specified. It provides the following option:
<DL COMPACT>
<DT>[<B>!</B>] <B>--icmpv6-type</B> <I>type</I>[<B>/</B><I>code</I>]|<I>typename</I><DD>
This allows specification of the ICMPv6 type, which can be a numeric
ICMPv6
<I>type</I>,

<I>type</I>

and
<I>code</I>,

or one of the ICMPv6 type names shown by the command
<PRE>
 ip6tables -p ipv6-icmp -h
</PRE>

</DL>
<A NAME="lbBE">&nbsp;</A>
<H3>iprange</H3>

This matches on a given arbitrary range of IP addresses.
<DL COMPACT>
<DT>[<B>!</B>] <B>--src-range</B> <I>from</I>[<B>-</B><I>to</I>]<DD>
Match source IP in the specified range.
<DT>[<B>!</B>] <B>--dst-range</B> <I>from</I>[<B>-</B><I>to</I>]<DD>
Match destination IP in the specified range.
</DL>
<A NAME="lbBF">&nbsp;</A>
<H3>ipv6header (IPv6-specific)</H3>

This module matches IPv6 extension headers and/or upper layer header.
<DL COMPACT>
<DT><B>--soft</B><DD>
Matches if the packet includes <B>any</B> of the headers specified with
<B>--header</B>.
<DT>[<B>!</B>] <B>--header</B> <I>header</I>[<B>,</B><I>header</I>...]<DD>
Matches the packet which EXACTLY includes all specified headers. The headers
encapsulated with ESP header are out of scope.
Possible <I>header</I> types can be:
<DT><B>hop</B>|<B>hop-by-hop</B><DD>
Hop-by-Hop Options header
<DT><B>dst</B><DD>
Destination Options header
<DT><B>route</B><DD>
Routing header
<DT><B>frag</B><DD>
Fragment header
<DT><B>auth</B><DD>
Authentication header
<DT><B>esp</B><DD>
Encapsulating Security Payload header
<DT><B>none</B><DD>
No Next header which matches 59 in the 'Next Header field' of IPv6 header or
any IPv6 extension headers
<DT><B>proto</B><DD>
which matches any upper layer protocol header. A protocol name from
/etc/protocols and numeric value also allowed. The number 255 is equivalent to
<B>proto</B>.
</DL>
<A NAME="lbBG">&nbsp;</A>
<H3>ipvs</H3>

Match IPVS connection properties.
<DL COMPACT>
<DT>[<B>!</B>] <B>--ipvs</B><DD>
packet belongs to an IPVS connection
<DT>Any of the following options implies --ipvs (even negated)<DD>
<DT>[<B>!</B>] <B>--vproto</B> <I>protocol</I><DD>
VIP protocol to match; by number or name, e.g. &quot;tcp&quot;
<DT>[<B>!</B>] <B>--vaddr</B> <I>address</I>[<B>/</B><I>mask</I>]<DD>
VIP address to match
<DT>[<B>!</B>] <B>--vport</B> <I>port</I><DD>
VIP port to match; by number or name, e.g. &quot;http&quot;
<DT><B>--vdir</B> {<B>ORIGINAL</B>|<B>REPLY</B>}<DD>
flow direction of packet
<DT>[<B>!</B>] <B>--vmethod</B> {<B>GATE</B>|<B>IPIP</B>|<B>MASQ</B>}<DD>
IPVS forwarding method used
<DT>[<B>!</B>] <B>--vportctl</B> <I>port</I><DD>
VIP port of the controlling connection to match, e.g. 21 for FTP
</DL>
<A NAME="lbBH">&nbsp;</A>
<H3>length</H3>

This module matches the length of the layer-3 payload (e.g. layer-4 packet)
of a packet against a specific value
or range of values.
<DL COMPACT>
<DT>[<B>!</B>] <B>--length</B> <I>length</I>[<B>:</B><I>length</I>]<DD>
</DL>
<A NAME="lbBI">&nbsp;</A>
<H3>limit</H3>

This module matches at a limited rate using a token bucket filter.
A rule using this extension will match until this limit is reached.
It can be used in combination with the
<B>LOG</B>

target to give limited logging, for example.
<P>

xt_limit has no negation support - you will have to use -m hashlimit !
--hashlimit <I>rate</I> in this case whilst omitting --hashlimit-mode.
<DL COMPACT>
<DT><B>--limit</B> <I>rate</I>[<B>/second</B>|<B>/minute</B>|<B>/hour</B>|<B>/day</B>]<DD>
Maximum average matching rate: specified as a number, with an optional
`/second', `/minute', `/hour', or `/day' suffix; the default is
3/hour.
<DT><B>--limit-burst</B> <I>number</I><DD>
Maximum initial number of packets to match: this number gets
recharged by one every time the limit specified above is not reached,
up to this number; the default is 5.
</DL>
<A NAME="lbBJ">&nbsp;</A>
<H3>mac</H3>

<DL COMPACT>
<DT>[<B>!</B>] <B>--mac-source</B> <I>address</I><DD>
Match source MAC address.  It must be of the form XX:XX:XX:XX:XX:XX.
Note that this only makes sense for packets coming from an Ethernet device
and entering the
<B>PREROUTING</B>,

<B>FORWARD</B>

or
<B>INPUT</B>

chains.
</DL>
<A NAME="lbBK">&nbsp;</A>
<H3>mark</H3>

This module matches the netfilter mark field associated with a packet
(which can be set using the
<B>MARK</B>

target below).
<DL COMPACT>
<DT>[<B>!</B>] <B>--mark</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Matches packets with the given unsigned mark value (if a <I>mask</I> is
specified, this is logically ANDed with the <I>mask</I> before the
comparison).
</DL>
<A NAME="lbBL">&nbsp;</A>
<H3>mh (IPv6-specific)</H3>

This extension is loaded if `--protocol ipv6-mh' or `--protocol mh' is
specified. It provides the following option:
<DL COMPACT>
<DT>[<B>!</B>] <B>--mh-type</B> <I>type</I>[<B>:</B><I>type</I>]<DD>
This allows specification of the Mobility Header(MH) type, which can be
a numeric MH
<I>type</I>,

<I>type</I>

or one of the MH type names shown by the command
<PRE>
 ip6tables -p mh -h
</PRE>

</DL>
<A NAME="lbBM">&nbsp;</A>
<H3>multiport</H3>

This module matches a set of source or destination ports.  Up to 15
ports can be specified.  A port range (port:port) counts as two
ports.  It can only be used in conjunction with one of the
following protocols:
<B>tcp</B>, <B>udp</B>, <B>udplite</B>, <B>dccp</B> and <B>sctp</B>.
<DL COMPACT>
<DT>[<B>!</B>] <B>--source-ports</B>,<B>--sports</B> <I>port</I>[<B>,</B><I>port</I>|<B>,</B><I>port</I><B>:</B><I>port</I>]...<DD>
Match if the source port is one of the given ports.  The flag
<B>--sports</B>
is a convenient alias for this option. Multiple ports or port ranges are
separated using a comma, and a port range is specified using a colon.
<B>53,1024:65535</B> would therefore match ports 53 and all from 1024 through
65535.
<DT>[<B>!</B>] <B>--destination-ports</B>,<B>--dports</B> <I>port</I>[<B>,</B><I>port</I>|<B>,</B><I>port</I><B>:</B><I>port</I>]...<DD>
Match if the destination port is one of the given ports.  The flag
<B>--dports</B>
is a convenient alias for this option.
<DT>[<B>!</B>] <B>--ports</B> <I>port</I>[<B>,</B><I>port</I>|<B>,</B><I>port</I><B>:</B><I>port</I>]...<DD>
Match if either the source or destination ports are equal to one of
the given ports.
</DL>
<A NAME="lbBN">&nbsp;</A>
<H3>nfacct</H3>

The nfacct match provides the extended accounting infrastructure for iptables.
You have to use this match together with the standalone user-space utility
<B><A HREF="/cgi-bin/man/man2html?8+nfacct">nfacct</A>(8)</B>

<P>

The only option available for this match is the following:
<DL COMPACT>
<DT><B>--nfacct-name</B> <I>name</I><DD>
This allows you to specify the existing object name that will be use for
accounting the traffic that this rule-set is matching.
</DL>
<P>

To use this extension, you have to create an accounting object:
<DL COMPACT>
<DT><DD>
nfacct add http-traffic
</DL>
<P>

Then, you have to attach it to the accounting object via iptables:
<DL COMPACT>
<DT><DD>
iptables -I INPUT -p tcp --sport 80 -m nfacct --nfacct-name http-traffic
<DT><DD>
iptables -I OUTPUT -p tcp --dport 80 -m nfacct --nfacct-name http-traffic
</DL>
<P>

Then, you can check for the amount of traffic that the rules match:
<DL COMPACT>
<DT><DD>
nfacct get http-traffic
<DT><DD>
{ pkts = 00000000000000000156, bytes = 00000000000000151786 } = http-traffic;
</DL>
<P>

You can obtain
<B><A HREF="/cgi-bin/man/man2html?8+nfacct">nfacct</A>(8)</B>

from <A HREF="http://www.netfilter.org">http://www.netfilter.org</A> or, alternatively, from the git.netfilter.org
repository.
<A NAME="lbBO">&nbsp;</A>
<H3>osf</H3>

The osf module does passive operating system fingerprinting. This modules
compares some data (Window Size, MSS, options and their order, TTL, DF,
and others) from packets with the SYN bit set. 
<DL COMPACT>
<DT>[<B>!</B>] <B>--genre</B> <I>string</I><DD>
Match an operating system genre by using a passive fingerprinting.
<DT><B>--ttl</B> <I>level</I><DD>
Do additional TTL checks on the packet to determine the operating system.
<I>level</I> can be one of the following values:
<DT>&bull;<DD>
0 - True IP address and fingerprint TTL comparison. This generally works for
LANs.
<DT>&bull;<DD>
1 - Check if the IP header's TTL is less than the fingerprint one. Works for
globally-routable addresses.
<DT>&bull;<DD>
2 - Do not compare the TTL at all.
<DT><B>--log</B> <I>level</I><DD>
Log determined genres into dmesg even if they do not match the desired one.
<I>level</I> can be one of the following values:
<DT>&bull;<DD>
0 - Log all matched or unknown signatures
<DT>&bull;<DD>
1 - Log only the first one
<DT>&bull;<DD>
2 - Log all known matched signatures
</DL>
<P>

You may find something like this in syslog:
<P>

Windows [2000:SP3:Windows XP Pro SP1, 2000 SP3]: 11.22.33.55:4024 -&gt;
11.22.33.44:139 hops=3 Linux [2.5-2.6:] : 1.2.3.4:42624 -&gt; 1.2.3.5:22 hops=4
<P>

OS fingerprints are loadable using the <B>nfnl_osf</B> program. To load
fingerprints from a file, use:
<P>

<B>nfnl_osf -f /usr/share/xtables/pf.os</B>
<P>

To remove them again,
<P>

<B>nfnl_osf -f /usr/share/xtables/pf.os -d</B>
<P>

The fingerprint database can be downlaoded from
<A HREF="http://www.openbsd.org/cgi-bin/cvsweb/src/etc/pf.os">http://www.openbsd.org/cgi-bin/cvsweb/src/etc/pf.os</A> .
<A NAME="lbBP">&nbsp;</A>
<H3>owner</H3>

This module attempts to match various characteristics of the packet creator,
for locally generated packets. This match is only valid in the OUTPUT and
POSTROUTING chains. Forwarded packets do not have any socket associated with
them. Packets from kernel threads do have a socket, but usually no owner.
<DL COMPACT>
<DT>[<B>!</B>] <B>--uid-owner</B> <I>username</I><DD>
<DT>[<B>!</B>] <B>--uid-owner</B> <I>userid</I>[<B>-</B><I>userid</I>]<DD>
Matches if the packet socket's file structure (if it has one) is owned by the
given user. You may also specify a numerical UID, or an UID range.
<DT>[<B>!</B>] <B>--gid-owner</B> <I>groupname</I><DD>
<DT>[<B>!</B>] <B>--gid-owner</B> <I>groupid</I>[<B>-</B><I>groupid</I>]<DD>
Matches if the packet socket's file structure is owned by the given group.
You may also specify a numerical GID, or a GID range.
<DT>[<B>!</B>] <B>--socket-exists</B><DD>
Matches if the packet is associated with a socket.
</DL>
<A NAME="lbBQ">&nbsp;</A>
<H3>physdev</H3>

This module matches on the bridge port input and output devices enslaved
to a bridge device. This module is a part of the infrastructure that enables
a transparent bridging IP firewall and is only useful for kernel versions
above version 2.5.44.
<DL COMPACT>
<DT>[<B>!</B>] <B>--physdev-in</B> <I>name</I><DD>
Name of a bridge port via which a packet is received (only for
packets entering the
<B>INPUT</B>,

<B>FORWARD</B>

and
<B>PREROUTING</B>

chains). If the interface name ends in a &quot;+&quot;, then any
interface which begins with this name will match. If the packet didn't arrive
through a bridge device, this packet won't match this option, unless '!' is used.
<DT>[<B>!</B>] <B>--physdev-out</B> <I>name</I><DD>
Name of a bridge port via which a packet is going to be sent (for packets
entering the
<B>FORWARD</B>,

<B>OUTPUT</B>

and
<B>POSTROUTING</B>

chains).  If the interface name ends in a &quot;+&quot;, then any
interface which begins with this name will match. Note that in the
<B>nat</B> and <B>mangle</B>

<B>OUTPUT</B>

chains one cannot match on the bridge output port, however one can in the
<B>filter OUTPUT</B>

chain. If the packet won't leave by a bridge device or if it is yet unknown what
the output device will be, then the packet won't match this option,
unless '!' is used.
<DT>[<B>!</B>] <B>--physdev-is-in</B><DD>
Matches if the packet has entered through a bridge interface.
<DT>[<B>!</B>] <B>--physdev-is-out</B><DD>
Matches if the packet will leave through a bridge interface.
<DT>[<B>!</B>] <B>--physdev-is-bridged</B><DD>
Matches if the packet is being bridged and therefore is not being routed.
This is only useful in the FORWARD and POSTROUTING chains.
</DL>
<A NAME="lbBR">&nbsp;</A>
<H3>pkttype</H3>

This module matches the link-layer packet type.
<DL COMPACT>
<DT>[<B>!</B>] <B>--pkt-type</B> {<B>unicast</B>|<B>broadcast</B>|<B>multicast</B>}<DD>
</DL>
<A NAME="lbBS">&nbsp;</A>
<H3>policy</H3>

This modules matches the policy used by IPsec for handling a packet.
<DL COMPACT>
<DT><B>--dir</B> {<B>in</B>|<B>out</B>}<DD>
Used to select whether to match the policy used for decapsulation or the
policy that will be used for encapsulation.
<B>in</B>

is valid in the
<B>PREROUTING, INPUT and FORWARD</B>

chains,
<B>out</B>

is valid in the
<B>POSTROUTING, OUTPUT and FORWARD</B>

chains.
<DT><B>--pol</B> {<B>none</B>|<B>ipsec</B>}<DD>
Matches if the packet is subject to IPsec processing. <B>--pol none</B>
cannot be combined with <B>--strict</B>.
<DT><B>--strict</B><DD>
Selects whether to match the exact policy or match if any rule of
the policy matches the given policy.
</DL>
<P>

For each policy element that is to be described, one can use one or more of
the following options. When <B>--strict</B> is in effect, at least one must be
used per element.
<DL COMPACT>
<DT>[<B>!</B>] <B>--reqid</B> <I>id</I><DD>
Matches the reqid of the policy rule. The reqid can be specified with
<B><A HREF="/cgi-bin/man/man2html?8+setkey">setkey</A>(8)</B>

using
<B>unique:id</B>

as level.
<DT>[<B>!</B>] <B>--spi</B> <I>spi</I><DD>
Matches the SPI of the SA.
<DT>[<B>!</B>] <B>--proto</B> {<B>ah</B>|<B>esp</B>|<B>ipcomp</B>}<DD>
Matches the encapsulation protocol.
<DT>[<B>!</B>] <B>--mode</B> {<B>tunnel</B>|<B>transport</B>}<DD>
Matches the encapsulation mode.
<DT>[<B>!</B>] <B>--tunnel-src</B> <I>addr</I>[<B>/</B><I>mask</I>]<DD>
Matches the source end-point address of a tunnel mode SA.
Only valid with <B>--mode tunnel</B>.
<DT>[<B>!</B>] <B>--tunnel-dst</B> <I>addr</I>[<B>/</B><I>mask</I>]<DD>
Matches the destination end-point address of a tunnel mode SA.
Only valid with <B>--mode tunnel</B>.
<DT><B>--next</B><DD>
Start the next element in the policy specification. Can only be used with
<B>--strict</B>.
</DL>
<A NAME="lbBT">&nbsp;</A>
<H3>quota</H3>

Implements network quotas by decrementing a byte counter with each
packet. The condition matches until the byte counter reaches zero. Behavior
is reversed with negation (i.e. the condition does not match until the
byte counter reaches zero).
<DL COMPACT>
<DT>[<B>!</B>] <B>--quota</B> <I>bytes</I><DD>
The quota in bytes.
</DL>
<A NAME="lbBU">&nbsp;</A>
<H3>rateest</H3>

The rate estimator can match on estimated rates as collected by the RATEEST
target. It supports matching on absolute bps/pps values, comparing two rate
estimators and matching on the difference between two rate estimators.
<P>

For a better understanding of the available options, these are all possible
combinations:

<DL COMPACT>
<DT>&bull;<DD>
<B>rateest</B> <I>operator</I> <B>rateest-bps</B>
<DT>&bull;<DD>
<B>rateest</B> <I>operator</I> <B>rateest-pps</B>

<DT>&bull;<DD>
(<B>rateest</B> minus <B>rateest-bps1</B>) <I>operator</I> <B>rateest-bps2</B>
<DT>&bull;<DD>
(<B>rateest</B> minus <B>rateest-pps1</B>) <I>operator</I> <B>rateest-pps2</B>

<DT>&bull;<DD>
<B>rateest1</B> <I>operator</I> <B>rateest2</B> <B>rateest-bps</B>(without rate!)
<DT>&bull;<DD>
<B>rateest1</B> <I>operator</I> <B>rateest2</B> <B>rateest-pps</B>(without rate!)

<DT>&bull;<DD>
(<B>rateest1</B> minus <B>rateest-bps1</B>) <I>operator</I>
(<B>rateest2</B> minus <B>rateest-bps2</B>)
<DT>&bull;<DD>
(<B>rateest1</B> minus <B>rateest-pps1</B>) <I>operator</I>
(<B>rateest2</B> minus <B>rateest-pps2</B>)
<DT><B>--rateest-delta</B><DD>
For each estimator (either absolute or relative mode), calculate the difference
between the estimator-determined flow rate and the static value chosen with the
BPS/PPS options. If the flow rate is higher than the specified BPS/PPS, 0 will
be used instead of a negative value. In other words, &quot;max(0, rateest#_rate -
rateest#_bps)&quot; is used.
<DT>[<B>!</B>] <B>--rateest-lt</B><DD>
Match if rate is less than given rate/estimator.
<DT>[<B>!</B>] <B>--rateest-gt</B><DD>
Match if rate is greater than given rate/estimator.
<DT>[<B>!</B>] <B>--rateest-eq</B><DD>
Match if rate is equal to given rate/estimator.
</DL>
<P>

In the so-called &quot;absolute mode&quot;, only one rate estimator is used and compared
against a static value, while in &quot;relative mode&quot;, two rate estimators are
compared against another.
<DL COMPACT>
<DT><B>--rateest</B> <I>name</I><DD>
Name of the one rate estimator for absolute mode.
<DT><B>--rateest1</B> <I>name</I><DD>
<DT><B>--rateest2</B> <I>name</I><DD>
The names of the two rate estimators for relative mode.
<DT><B>--rateest-bps</B> [<I>value</I>]<DD>
<DT><B>--rateest-pps</B> [<I>value</I>]<DD>
<DT><B>--rateest-bps1</B> [<I>value</I>]<DD>
<DT><B>--rateest-bps2</B> [<I>value</I>]<DD>
<DT><B>--rateest-pps1</B> [<I>value</I>]<DD>
<DT><B>--rateest-pps2</B> [<I>value</I>]<DD>
Compare the estimator(s) by bytes or packets per second, and compare against
the chosen value. See the above bullet list for which option is to be used in
which case. A unit suffix may be used - available ones are: bit, [kmgt]bit,
[KMGT]ibit, Bps, [KMGT]Bps, [KMGT]iBps.
</DL>
<P>

Example: This is what can be used to route outgoing data connections from an
FTP server over two lines based on the available bandwidth at the time the data
connection was started:
<P>

# Estimate outgoing rates
<P>

iptables -t mangle -A POSTROUTING -o eth0 -j RATEEST --rateest-name eth0
--rateest-interval 250ms --rateest-ewma 0.5s
<P>

iptables -t mangle -A POSTROUTING -o ppp0 -j RATEEST --rateest-name ppp0
--rateest-interval 250ms --rateest-ewma 0.5s
<P>

# Mark based on available bandwidth
<P>

iptables -t mangle -A balance -m conntrack --ctstate NEW -m helper --helper ftp
-m rateest --rateest-delta --rateest1 eth0 --rateest-bps1 2.5mbit --rateest-gt
--rateest2 ppp0 --rateest-bps2 2mbit -j CONNMARK --set-mark 1
<P>

iptables -t mangle -A balance -m conntrack --ctstate NEW -m helper --helper ftp
-m rateest --rateest-delta --rateest1 ppp0 --rateest-bps1 2mbit --rateest-gt
--rateest2 eth0 --rateest-bps2 2.5mbit -j CONNMARK --set-mark 2
<P>

iptables -t mangle -A balance -j CONNMARK --restore-mark
<A NAME="lbBV">&nbsp;</A>
<H3>realm (IPv4-specific)</H3>

This matches the routing realm.  Routing realms are used in complex routing
setups involving dynamic routing protocols like BGP.
<DL COMPACT>
<DT>[<B>!</B>] <B>--realm</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Matches a given realm number (and optionally mask). If not a number, value
can be a named realm from /etc/iproute2/rt_realms (mask can not be used in
that case).
</DL>
<A NAME="lbBW">&nbsp;</A>
<H3>recent</H3>

Allows you to dynamically create a list of IP addresses and then match against
that list in a few different ways.
<P>

For example, you can create a &quot;badguy&quot; list out of people attempting to connect
to port 139 on your firewall and then DROP all future packets from them without
considering them.
<P>

<B>--set</B>, <B>--rcheck</B>, <B>--update</B> and <B>--remove</B> are
mutually exclusive.
<DL COMPACT>
<DT><B>--name</B> <I>name</I><DD>
Specify the list to use for the commands. If no name is given then
<B>DEFAULT</B> will be used.
<DT>[<B>!</B>] <B>--set</B><DD>
This will add the source address of the packet to the list. If the source
address is already in the list, this will update the existing entry. This will
always return success (or failure if <B>!</B> is passed in).
<DT><B>--rsource</B><DD>
Match/save the source address of each packet in the recent list table. This
is the default.
<DT><B>--rdest</B><DD>
Match/save the destination address of each packet in the recent list table.
<DT><B>--mask</B> <I>netmask</I><DD>
Netmask that will be applied to this recent list.
<DT>[<B>!</B>] <B>--rcheck</B><DD>
Check if the source address of the packet is currently in the list.
<DT>[<B>!</B>] <B>--update</B><DD>
Like <B>--rcheck</B>, except it will update the &quot;last seen&quot; timestamp if it
matches.
<DT>[<B>!</B>] <B>--remove</B><DD>
Check if the source address of the packet is currently in the list and if so
that address will be removed from the list and the rule will return true. If
the address is not found, false is returned.
<DT><B>--seconds</B> <I>seconds</I><DD>
This option must be used in conjunction with one of <B>--rcheck</B> or
<B>--update</B>. When used, this will narrow the match to only happen when the
address is in the list and was seen within the last given number of seconds.
<DT><B>--reap</B><DD>
This option can only be used in conjunction with <B>--seconds</B>.
When used, this will cause entries older than the last given number of seconds
to be purged.
<DT><B>--hitcount</B> <I>hits</I><DD>
This option must be used in conjunction with one of <B>--rcheck</B> or
<B>--update</B>. When used, this will narrow the match to only happen when the
address is in the list and packets had been received greater than or equal to
the given value. This option may be used along with <B>--seconds</B> to create
an even narrower match requiring a certain number of hits within a specific
time frame. The maximum value for the hitcount parameter is given by the
&quot;ip_pkt_list_tot&quot; parameter of the xt_recent kernel module. Exceeding this
value on the command line will cause the rule to be rejected.
<DT><B>--rttl</B><DD>
This option may only be used in conjunction with one of <B>--rcheck</B> or
<B>--update</B>. When used, this will narrow the match to only happen when the
address is in the list and the TTL of the current packet matches that of the
packet which hit the <B>--set</B> rule. This may be useful if you have problems
with people faking their source address in order to DoS you via this module by
disallowing others access to your site by sending bogus packets to you.
</DL>
<P>

Examples:
<DL COMPACT>
<DT><DD>
iptables -A FORWARD -m recent --name badguy --rcheck --seconds 60 -j DROP
<DT><DD>
iptables -A FORWARD -p tcp -i eth0 --dport 139 -m recent --name badguy --set -j DROP
</DL>
<P>

Steve's ipt_recent website (<A HREF="http://snowman.net/projects/ipt_recent/)">http://snowman.net/projects/ipt_recent/)</A> also has
some examples of usage.
<P>

<B>/proc/net/xt_recent/*</B> are the current lists of addresses and information
about each entry of each list.
<P>

Each file in <B>/proc/net/xt_recent/</B> can be read from to see the current
list or written two using the following commands to modify the list:
<DL COMPACT>
<DT><B>echo +</B><I>addr</I><B> &gt;/proc/net/xt_recent/DEFAULT</B><DD>
to add <I>addr</I> to the DEFAULT list
<DT><B>echo -</B><I>addr</I><B> &gt;/proc/net/xt_recent/DEFAULT</B><DD>
to remove <I>addr</I> from the DEFAULT list
<DT><B>echo / &gt;/proc/net/xt_recent/DEFAULT</B><DD>
to flush the DEFAULT list (remove all entries).
</DL>
<P>

The module itself accepts parameters, defaults shown:
<DL COMPACT>
<DT><B>ip_list_tot</B>=<I>100</I><DD>
Number of addresses remembered per table.
<DT><B>ip_pkt_list_tot</B>=<I>20</I><DD>
Number of packets per address remembered.
<DT><B>ip_list_hash_size</B>=<I>0</I><DD>
Hash table size. 0 means to calculate it based on ip_list_tot, default: 512.
<DT><B>ip_list_perms</B>=<I>0644</I><DD>
Permissions for /proc/net/xt_recent/* files.
<DT><B>ip_list_uid</B>=<I>0</I><DD>
Numerical UID for ownership of /proc/net/xt_recent/* files.
<DT><B>ip_list_gid</B>=<I>0</I><DD>
Numerical GID for ownership of /proc/net/xt_recent/* files.
</DL>
<A NAME="lbBX">&nbsp;</A>
<H3>rpfilter</H3>

Performs a reverse path filter test on a packet.
If a reply to the packet would be sent via the same interface
that the packet arrived on, the packet will match.
Note that, unlike the in-kernel rp_filter, packets protected
by IPSec are not treated specially.  Combine this match with
the policy match if you want this.
Also, packets arriving via the loopback interface are always permitted.
This match can only be used in the PREROUTING chain of the raw or mangle table.
<DL COMPACT>
<DT><B>--loose</B><DD>
Used to specifiy that the reverse path filter test should match
even if the selected output device is not the expected one.
<DT><B>--validmark</B><DD>
Also use the packets' nfmark value when performing the reverse path route lookup.
<DT><B>--accept-local</B><DD>
This will permit packets arriving from the network with a source address that is also
assigned to the local machine.
<DT><B>--invert</B><DD>
This will invert the sense of the match.  Instead of matching packets that passed the
reverse path filter test, match those that have failed it.
</DL>
<P>

Example to log and drop packets failing the reverse path filter test:
<P>
iptables -t raw -N RPFILTER
<P>
iptables -t raw -A RPFILTER -m rpfilter -j RETURN
<P>
iptables -t raw -A RPFILTER -m limit --limit 10/minute -j NFLOG --nflog-prefix &quot;rpfilter drop&quot;
<P>
iptables -t raw -A RPFILTER -j DROP
<P>
iptables -t raw -A PREROUTING -j RPFILTER
<P>
Example to drop failed packets, without logging:
<P>
iptables -t raw -A RPFILTER -m rpfilter --invert -j DROP
<A NAME="lbBY">&nbsp;</A>
<H3>rt (IPv6-specific)</H3>

Match on IPv6 routing header
<DL COMPACT>
<DT>[<B>!</B>] <B>--rt-type</B> <I>type</I><DD>
Match the type (numeric).
<DT>[<B>!</B>] <B>--rt-segsleft</B> <I>num</I>[<B>:</B><I>num</I>]<DD>
Match the `segments left' field (range).
<DT>[<B>!</B>] <B>--rt-len</B> <I>length</I><DD>
Match the length of this header.
<DT><B>--rt-0-res</B><DD>
Match the reserved field, too (type=0)
<DT><B>--rt-0-addrs</B> <I>addr</I>[<B>,</B><I>addr</I>...]<DD>
Match type=0 addresses (list).
<DT><B>--rt-0-not-strict</B><DD>
List of type=0 addresses is not a strict list.
</DL>
<A NAME="lbBZ">&nbsp;</A>
<H3>sctp</H3>

<DL COMPACT>
<DT>[<B>!</B>] <B>--source-port</B>,<B>--sport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
<DT>[<B>!</B>] <B>--destination-port</B>,<B>--dport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
<DT>[<B>!</B>] <B>--chunk-types</B> {<B>all</B>|<B>any</B>|<B>only</B>} <I>chunktype</I>[<B>:</B><I>flags</I>] [...]<DD>
The flag letter in upper case indicates that the flag is to match if set,
in the lower case indicates to match if unset.
<P>
Chunk types: DATA INIT INIT_ACK SACK HEARTBEAT HEARTBEAT_ACK ABORT SHUTDOWN SHUTDOWN_ACK ERROR COOKIE_ECHO COOKIE_ACK ECN_ECNE ECN_CWR SHUTDOWN_COMPLETE ASCONF ASCONF_ACK FORWARD_TSN
<P>
chunk type            available flags      
<BR>

DATA                  I U B E i u b e
<BR>

ABORT                 T t                 
<BR>

SHUTDOWN_COMPLETE     T t                 
<P>
(lowercase means flag should be &quot;off&quot;, uppercase means &quot;on&quot;)
</DL>
<P>

Examples:
<P>
iptables -A INPUT -p sctp --dport 80 -j DROP
<P>
iptables -A INPUT -p sctp --chunk-types any DATA,INIT -j DROP
<P>
iptables -A INPUT -p sctp --chunk-types any DATA:Be -j ACCEPT
<A NAME="lbCA">&nbsp;</A>
<H3>set</H3>

This module matches IP sets which can be defined by <A HREF="/cgi-bin/man/man2html?8+ipset">ipset</A>(8).
<DL COMPACT>
<DT>[<B>!</B>] <B>--match-set</B> <I>setname</I> <I>flag</I>[<B>,</B><I>flag</I>]...<DD>
where flags are the comma separated list of
<B>src</B>

and/or
<B>dst</B>

specifications and there can be no more than six of them. Hence the command
<DT><DD>
<BR>&nbsp;iptables&nbsp;-A&nbsp;FORWARD&nbsp;-m&nbsp;set&nbsp;--match-set&nbsp;test&nbsp;src,dst
<DT><DD>
will match packets, for which (if the set type is ipportmap) the source
address and destination port pair can be found in the specified set. If
the set type of the specified set is single dimension (for example ipmap),
then the command will match packets for which the source address can be
found in the specified set. 
<DT><B>--return-nomatch</B><DD>
If the <B>--return-nomatch</B> option is specified and the set type
supports the <B>nomatch</B> flag, then the matching is reversed: a match
with an element flagged with <B>nomatch</B> returns <B>true</B>, while a
match with a plain element returns <B>false</B>.
<DT><B>!</B> <B>--update-counters</B><DD>
If the <B>--update-counters</B> flag is negated, then the packet and
byte counters of the matching element in the set won't be updated. Default
the packet and byte counters are updated.
<DT><B>!</B> <B>--update-subcounters</B><DD>
If the <B>--update-subcounters</B> flag is negated, then the packet and
byte counters of the matching element in the member set of a list type of
set won't be updated. Default the packet and byte counters are updated.
<DT>[<B>!</B>] <B>--packets-eq</B> <I>value</I><DD>
If the packet is matched an element in the set, match only if the
packet counter of the element matches the given value too.
<DT><B>--packets-lt</B> <I>value</I><DD>
If the packet is matched an element in the set, match only if the
packet counter of the element is less than the given value as well.
<DT><B>--packets-gt</B> <I>value</I><DD>
If the packet is matched an element in the set, match only if the
packet counter of the element is greater than the given value as well.
<DT>[<B>!</B>] <B>-bytes-eq</B> <I>value</I><DD>
If the packet is matched an element in the set, match only if the
byte counter of the element matches the given value too.
<DT><B>--bytes-lt</B> <I>value</I><DD>
If the packet is matched an element in the set, match only if the
byte counter of the element is less than the given value as well.
<DT><B>--bytes-gt</B> <I>value</I><DD>
If the packet is matched an element in the set, match only if the
byte counter of the element is greater than the given value as well.
</DL>
<P>

The packet and byte counters related options and flags are ignored
when the set was defined without counter support.
<P>

The option <B>--match-set</B> can be replaced by <B>--set</B> if that does 
not clash with an option of other extensions.
<P>

Use of -m set requires that ipset kernel support is provided, which, for
standard kernels, is the case since Linux 2.6.39.
<A NAME="lbCB">&nbsp;</A>
<H3>socket</H3>

This matches if an open socket can be found by doing a socket lookup on the
packet.
<DL COMPACT>
<DT><B>--transparent</B><DD>
Ignore non-transparent sockets.
</DL>
<A NAME="lbCC">&nbsp;</A>
<H3>state</H3>

The &quot;state&quot; extension is a subset of the &quot;conntrack&quot; module.
&quot;state&quot; allows access to the connection tracking state for this packet.
<DL COMPACT>
<DT>[<B>!</B>] <B>--state</B> <I>state</I><DD>
Where state is a comma separated list of the connection states to match. Only a
subset of the states unterstood by &quot;conntrack&quot; are recognized: <B>INVALID</B>,
<B>ESTABLISHED</B>, <B>NEW</B>, <B>RELATED</B> or <B>UNTRACKED</B>. For their
description, see the &quot;conntrack&quot; heading in this manpage.
</DL>
<A NAME="lbCD">&nbsp;</A>
<H3>statistic</H3>

This module matches packets based on some statistic condition.
It supports two distinct modes settable with the 
<B>--mode</B>
option.
<P>

Supported options:
<DL COMPACT>
<DT><B>--mode</B> <I>mode</I><DD>
Set the matching mode of the matching rule, supported modes are
<B>random</B>

and
<B>nth. </B>

<DT>[<B>!</B>] <B>--probability</B> <I>p</I><DD>
Set the probability for a packet to be randomly matched. It only works with the
<B>random</B> mode. <I>p</I> must be within 0.0 and 1.0. The supported
granularity is in 1/2147483648th increments.
<DT>[<B>!</B>] <B>--every</B> <I>n</I><DD>
Match one packet every nth packet. It works only with the
<B>nth</B>

mode (see also the 
<B>--packet</B>
option).
<DT><B>--packet</B> <I>p</I><DD>
Set the initial counter value (0 &lt;= p &lt;= n-1, default 0) for the
<B>nth </B>

mode.
</DL>
<A NAME="lbCE">&nbsp;</A>
<H3>string</H3>

This modules matches a given string by using some pattern matching strategy. It requires a linux kernel &gt;= 2.6.14.
<DL COMPACT>
<DT><B>--algo</B> {<B>bm</B>|<B>kmp</B>}<DD>
Select the pattern matching strategy. (bm = Boyer-Moore, kmp = Knuth-Pratt-Morris)
<DT><B>--from</B> <I>offset</I><DD>
Set the offset from which it starts looking for any matching. If not passed, default is 0.
<DT><B>--to</B> <I>offset</I><DD>
Set the offset up to which should be scanned. That is, byte <I>offset</I>-1
(counting from 0) is the last one that is scanned.
If not passed, default is the packet size.
<DT>[<B>!</B>] <B>--string</B> <I>pattern</I><DD>
Matches the given pattern.
<DT>[<B>!</B>] <B>--hex-string</B> <I>pattern</I><DD>
Matches the given pattern in hex notation.
</DL>
<A NAME="lbCF">&nbsp;</A>
<H3>tcp</H3>

These extensions can be used if `--protocol tcp' is specified. It
provides the following options:
<DL COMPACT>
<DT>[<B>!</B>] <B>--source-port</B>,<B>--sport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
Source port or port range specification. This can either be a service
name or a port number. An inclusive range can also be specified,
using the format <I>first</I><B>:</B><I>last</I>.
If the first port is omitted, &quot;0&quot; is assumed; if the last is omitted,
&quot;65535&quot; is assumed.
If the first port is greater than the second one they will be swapped.
The flag
<B>--sport</B>
is a convenient alias for this option.
<DT>[<B>!</B>] <B>--destination-port</B>,<B>--dport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
Destination port or port range specification.  The flag
<B>--dport</B>
is a convenient alias for this option.
<DT>[<B>!</B>] <B>--tcp-flags</B> <I>mask</I> <I>comp</I><DD>
Match when the TCP flags are as specified.  The first argument <I>mask</I> is the
flags which we should examine, written as a comma-separated list, and
the second argument <I>comp</I> is a comma-separated list of flags which must be
set.  Flags are:
<B>SYN ACK FIN RST URG PSH ALL NONE</B>.

Hence the command
<PRE>
 iptables -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST SYN
</PRE>

will only match packets with the SYN flag set, and the ACK, FIN and
RST flags unset.
<DT>[<B>!</B>] <B>--syn</B><DD>
Only match TCP packets with the SYN bit set and the ACK,RST and FIN bits
cleared.  Such packets are used to request TCP connection initiation;
for example, blocking such packets coming in an interface will prevent
incoming TCP connections, but outgoing TCP connections will be
unaffected.
It is equivalent to <B>--tcp-flags SYN,RST,ACK,FIN SYN</B>.
If the &quot;!&quot; flag precedes the &quot;--syn&quot;, the sense of the
option is inverted.
<DT>[<B>!</B>] <B>--tcp-option</B> <I>number</I><DD>
Match if TCP option set.
</DL>
<A NAME="lbCG">&nbsp;</A>
<H3>tcpmss</H3>

This matches the TCP MSS (maximum segment size) field of the TCP header.  You can only use this on TCP SYN or SYN/ACK packets, since the MSS is only negotiated during the TCP handshake at connection startup time.
<DL COMPACT>
<DT>[<B>!</B>] <B>--mss</B> <I>value</I>[<B>:</B><I>value</I>]<DD>
Match a given TCP MSS value or range.
</DL>
<A NAME="lbCH">&nbsp;</A>
<H3>time</H3>

This matches if the packet arrival time/date is within a given range. All
options are optional, but are ANDed when specified. All times are interpreted
as UTC by default.
<DL COMPACT>
<DT><B>--datestart</B> <I>YYYY</I>[<B>-</B><I>MM</I>[<B>-</B><I>DD</I>[<B>T</B><I>hh</I>[<B>:</B><I>mm</I>[<B>:</B><I>ss</I>]]]]]<DD>
<DT><B>--datestop</B> <I>YYYY</I>[<B>-</B><I>MM</I>[<B>-</B><I>DD</I>[<B>T</B><I>hh</I>[<B>:</B><I>mm</I>[<B>:</B><I>ss</I>]]]]]<DD>
Only match during the given time, which must be in ISO 8601 &quot;T&quot; notation.
The possible time range is 1970-01-01T00:00:00 to 2038-01-19T04:17:07.
<DT><DD>
If --datestart or --datestop are not specified, it will default to 1970-01-01
and 2038-01-19, respectively.
<DT><B>--timestart</B> <I>hh</I><B>:</B><I>mm</I>[<B>:</B><I>ss</I>]<DD>
<DT><B>--timestop</B> <I>hh</I><B>:</B><I>mm</I>[<B>:</B><I>ss</I>]<DD>
Only match during the given daytime. The possible time range is 00:00:00 to
23:59:59. Leading zeroes are allowed (e.g. &quot;06:03&quot;) and correctly interpreted
as base-10.
<DT>[<B>!</B>] <B>--monthdays</B> <I>day</I>[<B>,</B><I>day</I>...]<DD>
Only match on the given days of the month. Possible values are <B>1</B>
to <B>31</B>. Note that specifying <B>31</B> will of course not match
on months which do not have a 31st day; the same goes for 28- or 29-day
February.
<DT>[<B>!</B>] <B>--weekdays</B> <I>day</I>[<B>,</B><I>day</I>...]<DD>
Only match on the given weekdays. Possible values are <B>Mon</B>, <B>Tue</B>,
<B>Wed</B>, <B>Thu</B>, <B>Fri</B>, <B>Sat</B>, <B>Sun</B>, or values from <B>1</B>
to <B>7</B>, respectively. You may also use two-character variants (<B>Mo</B>,
<B>Tu</B>, etc.).
<DT><B>--contiguous</B><DD>
When <B>--timestop</B> is smaller than <B>--timestart</B> value, match
this as a single time period instead distinct intervals.  See EXAMPLES.
<DT><B>--kerneltz</B><DD>
Use the kernel timezone instead of UTC to determine whether a packet meets the
time regulations.
</DL>
<P>

About kernel timezones: Linux keeps the system time in UTC, and always does so.
On boot, system time is initialized from a referential time source. Where this
time source has no timezone information, such as the x86 CMOS RTC, UTC will be
assumed. If the time source is however not in UTC, userspace should provide the
correct system time and timezone to the kernel once it has the information.
<P>

Local time is a feature on top of the (timezone independent) system time. Each
process has its own idea of local time, specified via the TZ environment
variable. The kernel also has its own timezone offset variable. The TZ
userspace environment variable specifies how the UTC-based system time is
displayed, e.g. when you run <A HREF="/cgi-bin/man/man2html?1+date">date</A>(1), or what you see on your desktop clock.
The TZ string may resolve to different offsets at different dates, which is
what enables the automatic time-jumping in userspace. when DST changes. The
kernel's timezone offset variable is used when it has to convert between
non-UTC sources, such as FAT filesystems, to UTC (since the latter is what the
rest of the system uses).
<P>

The caveat with the kernel timezone is that Linux distributions may ignore to
set the kernel timezone, and instead only set the system time. Even if a
particular distribution does set the timezone at boot, it is usually does not
keep the kernel timezone offset - which is what changes on DST - up to date.
ntpd will not touch the kernel timezone, so running it will not resolve the
issue. As such, one may encounter a timezone that is always +0000, or one that
is wrong half of the time of the year. As such, <B>using --kerneltz is highly
discouraged.</B>
<P>

EXAMPLES. To match on weekends, use:
<DL COMPACT>
<DT><DD>
-m time --weekdays Sa,Su
</DL>
<P>

Or, to match (once) on a national holiday block:
<DL COMPACT>
<DT><DD>
-m time --datestart 2007-12-24 --datestop 2007-12-27
</DL>
<P>

Since the stop time is actually inclusive, you would need the following stop
time to not match the first second of the new day:
<DL COMPACT>
<DT><DD>
-m time --datestart 2007-01-01T17:00 --datestop 2007-01-01T23:59:59
</DL>
<P>

During lunch hour:
<DL COMPACT>
<DT><DD>
-m time --timestart 12:30 --timestop 13:30
</DL>
<P>

The fourth Friday in the month:
<DL COMPACT>
<DT><DD>
-m time --weekdays Fr --monthdays 22,23,24,25,26,27,28
</DL>
<P>

(Note that this exploits a certain mathematical property. It is not possible to
say &quot;fourth Thursday OR fourth Friday&quot; in one rule. It is possible with
multiple rules, though.)
<P>

Matching across days might not do what is expected.  For instance,
<DL COMPACT>
<DT><DD>
-m time --weekdays Mo --timestart 23:00  --timestop 01:00
Will match Monday, for one hour from midnight to 1 a.m., and then
again for another hour from 23:00 onwards.  If this is unwanted, e.g. if you
would like 'match for two hours from Montay 23:00 onwards' you need to also specify
the --contiguous option in the example above.
</DL>
<A NAME="lbCI">&nbsp;</A>
<H3>tos</H3>

This module matches the 8-bit Type of Service field in the IPv4 header (i.e.
including the &quot;Precedence&quot; bits) or the (also 8-bit) Priority field in the IPv6
header.
<DL COMPACT>
<DT>[<B>!</B>] <B>--tos</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Matches packets with the given TOS mark value. If a mask is specified, it is
logically ANDed with the TOS mark before the comparison.
<DT>[<B>!</B>] <B>--tos</B> <I>symbol</I><DD>
You can specify a symbolic name when using the tos match for IPv4. The list of
recognized TOS names can be obtained by calling iptables with <B>-m tos -h</B>.
Note that this implies a mask of 0x3F, i.e. all but the ECN bits.
</DL>
<A NAME="lbCJ">&nbsp;</A>
<H3>ttl (IPv4-specific)</H3>

This module matches the time to live field in the IP header.
<DL COMPACT>
<DT>[<B>!</B>] <B>--ttl-eq</B> <I>ttl</I><DD>
Matches the given TTL value.
<DT><B>--ttl-gt</B> <I>ttl</I><DD>
Matches if TTL is greater than the given TTL value.
<DT><B>--ttl-lt</B> <I>ttl</I><DD>
Matches if TTL is less than the given TTL value.
</DL>
<A NAME="lbCK">&nbsp;</A>
<H3>u32</H3>

U32 tests whether quantities of up to 4 bytes extracted from a packet have
specified values. The specification of what to extract is general enough to
find data at given offsets from tcp headers or payloads.
<DL COMPACT>
<DT>[<B>!</B>] <B>--u32</B> <I>tests</I><DD>
The argument amounts to a program in a small language described below.
<DT><DD>
tests := location &quot;=&quot; value | tests &quot;&amp;&amp;&quot; location &quot;=&quot; value
<DT><DD>
value := range | value &quot;,&quot; range
<DT><DD>
range := number | number &quot;:&quot; number
</DL>
<P>

a single number, <I>n</I>, is interpreted the same as <I>n:n</I>. <I>n:m</I> is
interpreted as the range of numbers <B>&gt;=n</B> and <B>&lt;=m</B>.
<DL COMPACT>
<DT><DD>
location := number | location operator number
<DT><DD>
operator := &quot;&amp;&quot; | &quot;&lt;&lt;&quot; | &quot;&gt;&gt;&quot; | &quot;@&quot;
</DL>
<P>

The operators <B>&amp;</B>, <B>&lt;&lt;</B>, <B>&gt;&gt;</B> and <B>&amp;&amp;</B> mean the same as in C.
The <B>=</B> is really a set membership operator and the value syntax describes
a set. The <B>@</B> operator is what allows moving to the next header and is
described further below.
<P>

There are currently some artificial implementation limits on the size of the
tests:
<DL COMPACT>
<DT>    *<DD>
no more than 10 of &quot;<B>=</B>&quot; (and 9 &quot;<B>&amp;&amp;</B>&quot;s) in the u32 argument
<DT>    *<DD>
no more than 10 ranges (and 9 commas) per value
<DT>    *<DD>
no more than 10 numbers (and 9 operators) per location
</DL>
<P>

To describe the meaning of location, imagine the following machine that
interprets it. There are three registers:
<DL COMPACT>
<DT><DD>
A is of type <B>char *</B>, initially the address of the IP header
<DT><DD>
B and C are unsigned 32 bit integers, initially zero
</DL>
<P>

The instructions are:
<DL COMPACT>
<DT><DD>
number B = number;
<DT><DD>
C = (*(A+B)&lt;&lt;24) + (*(A+B+1)&lt;&lt;16) + (*(A+B+2)&lt;&lt;8) + *(A+B+3)
<DT><DD>
&amp;number C = C &amp; number
<DT><DD>
&lt;&lt; number C = C &lt;&lt; number
<DT><DD>
&gt;&gt; number C = C &gt;&gt; number
<DT><DD>
@number A = A + C; then do the instruction number
</DL>
<P>

Any access of memory outside [skb-&gt;data,skb-&gt;end] causes the match to fail.
Otherwise the result of the computation is the final value of C.
<P>

Whitespace is allowed but not required in the tests. However, the characters
that do occur there are likely to require shell quoting, so it is a good idea
to enclose the arguments in quotes.
<P>

Example:
<DL COMPACT>
<DT><DD>
match IP packets with total length &gt;= 256
<DT><DD>
The IP header contains a total length field in bytes 2-3.
<DT><DD>
--u32 &quot;<B>0 &amp; 0xFFFF = 0x100:0xFFFF</B>&quot;
<DT><DD>
read bytes 0-3
<DT><DD>
AND that with 0xFFFF (giving bytes 2-3), and test whether that is in the range
[0x100:0xFFFF]
</DL>
<P>

Example: (more realistic, hence more complicated)
<DL COMPACT>
<DT><DD>
match ICMP packets with icmp type 0
<DT><DD>
First test that it is an ICMP packet, true iff byte 9 (protocol) = 1
<DT><DD>
--u32 &quot;<B>6 &amp; 0xFF = 1 &amp;&amp;</B> ...
<DT><DD>
read bytes 6-9, use <B>&amp;</B> to throw away bytes 6-8 and compare the result to
1. Next test that it is not a fragment. (If so, it might be part of such a
packet but we cannot always tell.) N.B.: This test is generally needed if you
want to match anything beyond the IP header. The last 6 bits of byte 6 and all
of byte 7 are 0 iff this is a complete packet (not a fragment). Alternatively,
you can allow first fragments by only testing the last 5 bits of byte 6.
<DT><DD>
<BR>&nbsp;...&nbsp;<B>4&nbsp;&amp;&nbsp;0x3FFF&nbsp;=&nbsp;0&nbsp;&amp;&amp;</B>&nbsp;...
<DT><DD>
Last test: the first byte past the IP header (the type) is 0. This is where we
have to use the @syntax. The length of the IP header (IHL) in 32 bit words is
stored in the right half of byte 0 of the IP header itself.
<DT><DD>
<BR>&nbsp;...&nbsp;<B>0&nbsp;&gt;&gt;&nbsp;22&nbsp;&amp;&nbsp;0x3C&nbsp;@&nbsp;0&nbsp;&gt;&gt;&nbsp;24&nbsp;=&nbsp;0</B>&quot;
<DT><DD>
The first 0 means read bytes 0-3, <B>&gt;&gt;22</B> means shift that 22 bits to the
right. Shifting 24 bits would give the first byte, so only 22 bits is four
times that plus a few more bits. <B>&amp;3C</B> then eliminates the two extra bits
on the right and the first four bits of the first byte. For instance, if IHL=5,
then the IP header is 20 (4 x 5) bytes long. In this case, bytes 0-1 are (in
binary) xxxx0101 yyzzzzzz, <B>&gt;&gt;22</B> gives the 10 bit value xxxx0101yy and
<B>&amp;3C</B> gives 010100. <B>@</B> means to use this number as a new offset into
the packet, and read four bytes starting from there. This is the first 4 bytes
of the ICMP payload, of which byte 0 is the ICMP type. Therefore, we simply
shift the value 24 to the right to throw out all but the first byte and compare
the result with 0.
</DL>
<P>

Example:
<DL COMPACT>
<DT><DD>
TCP payload bytes 8-12 is any of 1, 2, 5 or 8
<DT><DD>
First we test that the packet is a tcp packet (similar to ICMP).
<DT><DD>
--u32 &quot;<B>6 &amp; 0xFF = 6 &amp;&amp;</B> ...
<DT><DD>
Next, test that it is not a fragment (same as above).
<DT><DD>
<BR>&nbsp;...&nbsp;<B>0&nbsp;&gt;&gt;&nbsp;22&nbsp;&amp;&nbsp;0x3C&nbsp;@&nbsp;12&nbsp;&gt;&gt;&nbsp;26&nbsp;&amp;&nbsp;0x3C&nbsp;@&nbsp;8&nbsp;=&nbsp;1,2,5,8</B>&quot;
<DT><DD>
<B>0&gt;&gt;22&amp;3C</B> as above computes the number of bytes in the IP header. <B>@</B>
makes this the new offset into the packet, which is the start of the TCP
header. The length of the TCP header (again in 32 bit words) is the left half
of byte 12 of the TCP header. The <B>12&gt;&gt;26&amp;3C</B> computes this length in bytes
(similar to the IP header before). &quot;@&quot; makes this the new offset, which is the
start of the TCP payload. Finally, 8 reads bytes 8-12 of the payload and
<B>=</B> checks whether the result is any of 1, 2, 5 or 8.
</DL>
<A NAME="lbCL">&nbsp;</A>
<H3>udp</H3>

These extensions can be used if `--protocol udp' is specified. It
provides the following options:
<DL COMPACT>
<DT>[<B>!</B>] <B>--source-port</B>,<B>--sport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
Source port or port range specification.
See the description of the
<B>--source-port</B>
option of the TCP extension for details.
<DT>[<B>!</B>] <B>--destination-port</B>,<B>--dport</B> <I>port</I>[<B>:</B><I>port</I>]<DD>
Destination port or port range specification.
See the description of the
<B>--destination-port</B>
option of the TCP extension for details.
</DL>
<A NAME="lbCM">&nbsp;</A>
<H3>unclean (IPv4-specific)</H3>

This module takes no options, but attempts to match packets which seem
malformed or unusual.  This is regarded as experimental.
<A NAME="lbCN">&nbsp;</A>
<H2>TARGET EXTENSIONS</H2>

iptables can use extended target modules: the following are included
in the standard distribution.

<A NAME="lbCO">&nbsp;</A>
<H3>AUDIT</H3>

This target allows to create audit records for packets hitting the target.
It can be used to record accepted, dropped, and rejected packets. See
<A HREF="/cgi-bin/man/man2html?8+auditd">auditd</A>(8) for additional details.
<DL COMPACT>
<DT><B>--type</B> {<B>accept</B>|<B>drop</B>|<B>reject</B>}<DD>
Set type of audit record.
</DL>
<P>

Example:
<DL COMPACT>
<DT><DD>
iptables -N AUDIT_DROP
<DT><DD>
iptables -A AUDIT_DROP -j AUDIT --type drop
<DT><DD>
iptables -A AUDIT_DROP -j DROP
</DL>
<A NAME="lbCP">&nbsp;</A>
<H3>CHECKSUM</H3>

This target allows to selectively work around broken/old applications.
It can only be used in the mangle table.
<DL COMPACT>
<DT><B>--checksum-fill</B><DD>
Compute and fill in the checksum in a packet that lacks a checksum.
This is particularly useful, if you need to work around old applications
such as dhcp clients, that do not work well with checksum offloads,
but don't want to disable checksum offload in your device.
</DL>
<A NAME="lbCQ">&nbsp;</A>
<H3>CLASSIFY</H3>

This module allows you to set the skb-&gt;priority value (and thus classify the packet into a specific CBQ class).
<DL COMPACT>
<DT><B>--set-class</B> <I>major</I><B>:</B><I>minor</I><DD>
Set the major and minor class value. The values are always interpreted as
hexadecimal even if no 0x prefix is given.
</DL>
<A NAME="lbCR">&nbsp;</A>
<H3>CLUSTERIP (IPv4-specific)</H3>

This module allows you to configure a simple cluster of nodes that share
a certain IP and MAC address without an explicit load balancer in front of
them.  Connections are statically distributed between the nodes in this
cluster.
<DL COMPACT>
<DT><B>--new</B><DD>
Create a new ClusterIP.  You always have to set this on the first rule
for a given ClusterIP.
<DT><B>--hashmode</B> <I>mode</I><DD>
Specify the hashing mode.  Has to be one of
<B>sourceip</B>, <B>sourceip-sourceport</B>, <B>sourceip-sourceport-destport</B>.
<DT><B>--clustermac</B> <I>mac</I><DD>
Specify the ClusterIP MAC address. Has to be a link-layer multicast address
<DT><B>--total-nodes</B> <I>num</I><DD>
Number of total nodes within this cluster.
<DT><B>--local-node</B> <I>num</I><DD>
Local node number within this cluster.
<DT><B>--hash-init</B> <I>rnd</I><DD>
Specify the random seed used for hash initialization.
</DL>
<A NAME="lbCS">&nbsp;</A>
<H3>CONNMARK</H3>

This module sets the netfilter mark value associated with a connection. The
mark is 32 bits wide.
<DL COMPACT>
<DT><B>--set-xmark</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Zero out the bits given by <I>mask</I> and XOR <I>value</I> into the ctmark.
<DT><B>--save-mark</B> [<B>--nfmask</B> <I>nfmask</I>] [<B>--ctmask</B> <I>ctmask</I>]<DD>
Copy the packet mark (nfmark) to the connection mark (ctmark) using the given
masks. The new nfmark value is determined as follows:
<DT><DD>
ctmark = (ctmark &amp; ~ctmask) ^ (nfmark &amp; nfmask)
<DT><DD>
i.e. <I>ctmask</I> defines what bits to clear and <I>nfmask</I> what bits of the
nfmark to XOR into the ctmark. <I>ctmask</I> and <I>nfmask</I> default to
0xFFFFFFFF.
<DT><B>--restore-mark</B> [<B>--nfmask</B> <I>nfmask</I>] [<B>--ctmask</B> <I>ctmask</I>]<DD>
Copy the connection mark (ctmark) to the packet mark (nfmark) using the given
masks. The new ctmark value is determined as follows:
<DT><DD>
nfmark = (nfmark &amp; ~<I>nfmask</I>) ^ (ctmark &amp; <I>ctmask</I>);
<DT><DD>
i.e. <I>nfmask</I> defines what bits to clear and <I>ctmask</I> what bits of the
ctmark to XOR into the nfmark. <I>ctmask</I> and <I>nfmask</I> default to
0xFFFFFFFF.
<DT><DD>
<B>--restore-mark</B> is only valid in the <B>mangle</B> table.
</DL>
<P>

The following mnemonics are available for <B>--set-xmark</B>:
<DL COMPACT>
<DT><B>--and-mark</B> <I>bits</I><DD>
Binary AND the ctmark with <I>bits</I>. (Mnemonic for <B>--set-xmark
0/</B><I>invbits</I>, where <I>invbits</I> is the binary negation of <I>bits</I>.)
<DT><B>--or-mark</B> <I>bits</I><DD>
Binary OR the ctmark with <I>bits</I>. (Mnemonic for <B>--set-xmark</B>
<I>bits</I><B>/</B><I>bits</I>.)
<DT><B>--xor-mark</B> <I>bits</I><DD>
Binary XOR the ctmark with <I>bits</I>. (Mnemonic for <B>--set-xmark</B>
<I>bits</I><B>/0</B>.)
<DT><B>--set-mark</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Set the connection mark. If a mask is specified then only those bits set in the
mask are modified.
<DT><B>--save-mark</B> [<B>--mask</B> <I>mask</I>]<DD>
Copy the nfmark to the ctmark. If a mask is specified, only those bits are
copied.
<DT><B>--restore-mark</B> [<B>--mask</B> <I>mask</I>]<DD>
Copy the ctmark to the nfmark. If a mask is specified, only those bits are
copied. This is only valid in the <B>mangle</B> table.
</DL>
<A NAME="lbCT">&nbsp;</A>
<H3>CONNSECMARK</H3>

This module copies security markings from packets to connections
(if unlabeled), and from connections back to packets (also only
if unlabeled).  Typically used in conjunction with SECMARK, it is
valid in the
<B>security</B>

table (for backwards compatibility with older kernels, it is also
valid in the
<B>mangle</B>

table).
<DL COMPACT>
<DT><B>--save</B><DD>
If the packet has a security marking, copy it to the connection
if the connection is not marked.
<DT><B>--restore</B><DD>
If the packet does not have a security marking, and the connection
does, copy the security marking from the connection to the packet.
<P>
</DL>
<A NAME="lbCU">&nbsp;</A>
<H3>CT</H3>

The CT target allows to set parameters for a packet or its associated
connection. The target attaches a &quot;template&quot; connection tracking entry to
the packet, which is then used by the conntrack core when initializing
a new ct entry. This target is thus only valid in the &quot;raw&quot; table.
<DL COMPACT>
<DT><B>--notrack</B><DD>
Disables connection tracking for this packet.
<DT><B>--helper</B> <I>name</I><DD>
Use the helper identified by <I>name</I> for the connection. This is more
flexible than loading the conntrack helper modules with preset ports.
<DT><B>--ctevents</B> <I>event</I>[<B>,</B>...]<DD>
Only generate the specified conntrack events for this connection. Possible
event types are: <B>new</B>, <B>related</B>, <B>destroy</B>, <B>reply</B>,
<B>assured</B>, <B>protoinfo</B>, <B>helper</B>, <B>mark</B> (this refers to
the ctmark, not nfmark), <B>natseqinfo</B>, <B>secmark</B> (ctsecmark).
<DT><B>--expevents</B> <I>event</I>[<B>,</B>...]<DD>
Only generate the specified expectation events for this connection.
Possible event types are: <B>new</B>.
<DT><B>--zone</B> <I>id</I><DD>
Assign this packet to zone <I>id</I> and only have lookups done in that zone.
By default, packets have zone 0.
<DT><B>--timeout</B> <I>name</I><DD>
Use the timeout policy identified by <I>name</I> for the connection. This is
provides more flexible timeout policy definition than global timeout values
available at /proc/sys/net/netfilter/nf_conntrack_*_timeout_*.
</DL>
<A NAME="lbCV">&nbsp;</A>
<H3>DNAT</H3>

This target is only valid in the
<B>nat</B>

table, in the
<B>PREROUTING</B>

and
<B>OUTPUT</B>

chains, and user-defined chains which are only called from those
chains.  It specifies that the destination address of the packet
should be modified (and all future packets in this connection will
also be mangled), and rules should cease being examined.  It takes the
following options:
<DL COMPACT>
<DT><B>--to-destination</B> [<I>ipaddr</I>[<B>-</B><I>ipaddr</I>]][<B>:</B><I>port</I>[<B>-</B><I>port</I>]]<DD>
which can specify a single new destination IP address, an inclusive
range of IP addresses. Optionally a port range,
if the rule also specifies one of the following protocols:
<B>tcp</B>, <B>udp</B>, <B>dccp</B> or <B>sctp</B>.
If no port range is specified, then the destination port will never be
modified. If no IP address is specified then only the destination port
will be modified.
In Kernels up to 2.6.10 you can add several --to-destination options. For
those kernels, if you specify more than one destination address, either via an
address range or multiple --to-destination options, a simple round-robin (one
after another in cycle) load balancing takes place between these addresses.
Later Kernels (&gt;= 2.6.11-rc1) don't have the ability to NAT to multiple ranges
anymore.
<DT><B>--random</B><DD>
If option
<B>--random</B>
is used then port mapping will be randomized (kernel &gt;= 2.6.22).
<DT><B>--persistent</B><DD>
Gives a client the same source-/destination-address for each connection.
This supersedes the SAME target. Support for persistent mappings is available
from 2.6.29-rc2.
<DT>IPv6 support available since Linux kernels &gt;= 3.7.<DD>
</DL>
<A NAME="lbCW">&nbsp;</A>
<H3>DNPT (IPv6-specific)</H3>

Provides stateless destination IPv6-to-IPv6 Network Prefix Translation (as
described by RFC 6296).
<P>

You have to use this target in the
<B>mangle</B>

table, not in the
<B>nat</B>

table. It takes the following options:
<DL COMPACT>
<DT><B>--src-pfx</B> [<I>prefix/</I><I>length]<DD>
Set source prefix that you want to translate and length
<DT></I><B>--dst-pfx</B> [<I>prefix/</I><I>length]<DD>
Set destination prefix that you want to use in the translation and length
</DL>
<P>

You have to use the SNPT target to undo the translation. Example:
<DL COMPACT>
<DT><DD>
ip6tables -t mangle -I POSTROUTING -s fd00::/64  -o vboxnet0
-j SNPT --src-pfx fd00::/64 --dst-pfx 2001:e20:2000:40f::/64
<DT><DD>
ip6tables -t mangle -I PREROUTING -i wlan0 -d 2001:e20:2000:40f::/64
-j DNPT --src-pfx 2001:e20:2000:40f::/64 --dst-pfx fd00::/64
</DL>
<P>

You may need to enable IPv6 neighbor proxy:
<DL COMPACT>
<DT><DD>
sysctl -w net.ipv6.conf.all.proxy_ndp=1
</DL>
<P>

You also have to use the
</I><B>NOTRACK</B>

target to disable connection tracking for translated flows.
<A NAME="lbCX">&nbsp;</A>
<H3>DSCP</H3>

This target allows to alter the value of the DSCP bits within the TOS
header of the IPv4 packet.  As this manipulates a packet, it can only
be used in the mangle table.
<DL COMPACT>
<DT><B>--set-dscp</B> <I>value</I><DD>
Set the DSCP field to a numerical value (can be decimal or hex)
<DT><B>--set-dscp-class</B> <I>class</I><DD>
Set the DSCP field to a DiffServ class.
</DL>
<A NAME="lbCY">&nbsp;</A>
<H3>ECN (IPv4-specific)</H3>

This target allows to selectively work around known ECN blackholes.
It can only be used in the mangle table.
<DL COMPACT>
<DT><B>--ecn-tcp-remove</B><DD>
Remove all ECN bits from the TCP header.  Of course, it can only be used
in conjunction with
<B>-p tcp</B>.
</DL>
<A NAME="lbCZ">&nbsp;</A>
<H3>HL (IPv6-specific)</H3>

This is used to modify the Hop Limit field in IPv6 header. The Hop Limit field
is similar to what is known as TTL value in IPv4.  Setting or incrementing the
Hop Limit field can potentially be very dangerous, so it should be avoided at
any cost. This target is only valid in
<B>mangle</B>

table.
<P>

<B>Don't ever set or increment the value on packets that leave your local network!</B>

<DL COMPACT>
<DT><B>--hl-set</B> <I>value</I><DD>
Set the Hop Limit to `value'.
<DT><B>--hl-dec</B> <I>value</I><DD>
Decrement the Hop Limit `value' times.
<DT><B>--hl-inc</B> <I>value</I><DD>
Increment the Hop Limit `value' times.
</DL>
<A NAME="lbDA">&nbsp;</A>
<H3>HMARK</H3>

Like MARK, i.e. set the fwmark, but the mark is calculated from hashing
packet selector at choice. You have also to specify the mark range and,
optionally, the offset to start from. ICMP error messages are inspected
and used to calculate the hashing.
<P>

Existing options are:
<DL COMPACT>
<DT><B>--hmark-tuple</B> tuple<I></I><DD>
Possible tuple members are:
<B>src</B>

meaning source address (IPv4, IPv6 address),
<B>dst</B>

meaning destination address (IPv4, IPv6 address),
<B>sport</B>

meaning source port (TCP, UDP, UDPlite, SCTP, DCCP),
<B>dport</B>

meaning destination port (TCP, UDP, UDPlite, SCTP, DCCP),
<B>spi</B>

meaning Security Parameter Index (AH, ESP), and
<B>ct</B>

meaning the usage of the conntrack tuple instead of the packet selectors.
<DT><B>--hmark-mod</B> <I>value (must be &gt; 0)</I><DD>
Modulus for hash calculation (to limit the range of possible marks)
<DT><B>--hmark-offset</B> <I>value</I><DD>
Offset to start marks from.
<DT>For advanced usage, instead of using --hmark-tuple, you can specify custom<DD>
prefixes and masks:
<DT><B>--hmark-src-prefix</B> <I>cidr</I><DD>
The source address mask in CIDR notation.
<DT><B>--hmark-dst-prefix</B> <I>cidr</I><DD>
The destination address mask in CIDR notation.
<DT><B>--hmark-sport-mask</B> <I>value</I><DD>
A 16 bit source port mask in hexadecimal.
<DT><B>--hmark-dport-mask</B> <I>value</I><DD>
A 16 bit destination port mask in hexadecimal.
<DT><B>--hmark-spi-mask</B> <I>value</I><DD>
A 32 bit field with spi mask.
<DT><B>--hmark-proto-mask</B> <I>value</I><DD>
An 8 bit field with layer 4 protocol number.
<DT><B>--hmark-rnd</B> <I>value</I><DD>
A 32 bit random custom value to feed hash calculation.
</DL>
<P>

<I>Examples:</I>
<P>

iptables -t mangle -A PREROUTING -m conntrack --ctstate NEW
<BR>&nbsp;-j&nbsp;HMARK&nbsp;--hmark-tuple&nbsp;ct,src,dst,proto&nbsp;--hmark-offset&nbsp;10000
--hmark-mod 10 --hmark-rnd 0xfeedcafe
<P>

iptables -t mangle -A PREROUTING -j HMARK --hmark-offset 10000
--hmark-tuple src,dst,proto --hmark-mod 10 --hmark-rnd 0xdeafbeef
<A NAME="lbDB">&nbsp;</A>
<H3>IDLETIMER</H3>

This target can be used to identify when interfaces have been idle for a
certain period of time.  Timers are identified by labels and are created when
a rule is set with a new label.  The rules also take a timeout value (in
seconds) as an option.  If more than one rule uses the same timer label, the
timer will be restarted whenever any of the rules get a hit.  One entry for
each timer is created in sysfs.  This attribute contains the timer remaining
for the timer to expire.  The attributes are located under the xt_idletimer
class:
<P>

/sys/class/xt_idletimer/timers/&lt;label&gt;
<P>

When the timer expires, the target module sends a sysfs notification to the
userspace, which can then decide what to do (eg. disconnect to save power).
<DL COMPACT>
<DT><B>--timeout</B> <I>amount</I><DD>
This is the time in seconds that will trigger the notification.
<DT><B>--label</B> <I>string</I><DD>
This is a unique identifier for the timer.  The maximum length for the
label string is 27 characters.
</DL>
<A NAME="lbDC">&nbsp;</A>
<H3>LED</H3>

This creates an LED-trigger that can then be attached to system indicator
lights, to blink or illuminate them when certain packets pass through the
system. One example might be to light up an LED for a few minutes every time
an SSH connection is made to the local machine. The following options control
the trigger behavior:
<DL COMPACT>
<DT><B>--led-trigger-id</B> <I>name</I><DD>
This is the name given to the LED trigger. The actual name of the trigger
will be prefixed with &quot;netfilter-&quot;.
<DT><B>--led-delay</B> <I>ms</I><DD>
This indicates how long (in milliseconds) the LED should be left illuminated
when a packet arrives before being switched off again. The default is 0
(blink as fast as possible.) The special value <I>inf</I> can be given to
leave the LED on permanently once activated. (In this case the trigger will
need to be manually detached and reattached to the LED device to switch it
off again.)
<DT><B>--led-always-blink</B><DD>
Always make the LED blink on packet arrival, even if the LED is already on.
This allows notification of new packets even with long delay values (which
otherwise would result in a silent prolonging of the delay time.)
<DT>Example:<DD>
<DT>Create an LED trigger for incoming SSH traffic:<DD>
iptables -A INPUT -p tcp --dport 22 -j LED --led-trigger-id ssh
<DT>Then attach the new trigger to an LED:<DD>
echo netfilter-ssh &gt;/sys/class/leds/<I>ledname</I>/trigger
</DL>
<A NAME="lbDD">&nbsp;</A>
<H3>LOG</H3>

Turn on kernel logging of matching packets.  When this option is set
for a rule, the Linux kernel will print some information on all
matching packets (like most IP/IPv6 header fields) via the kernel log
(where it can be read with
<I>dmesg</I>

or
<I><A HREF="/cgi-bin/man/man2html?8+syslogd">syslogd</A></I>(8)).

This is a &quot;non-terminating target&quot;, i.e. rule traversal continues at
the next rule.  So if you want to LOG the packets you refuse, use two
separate rules with the same matching criteria, first using target LOG
then DROP (or REJECT).
<DL COMPACT>
<DT><B>--log-level</B> <I>level</I><DD>
Level of logging, which can be (system-specific) numeric or a mnemonic.
Possible values are (in decreasing order of priority): <B>emerg</B>,
<B>alert</B>, <B>crit</B>, <B>error</B>, <B>warning</B>, <B>notice</B>, <B>info</B>
or <B>debug</B>.
<DT><B>--log-prefix</B> <I>prefix</I><DD>
Prefix log messages with the specified prefix; up to 29 letters long,
and useful for distinguishing messages in the logs.
<DT><B>--log-tcp-sequence</B><DD>
Log TCP sequence numbers. This is a security risk if the log is
readable by users.
<DT><B>--log-tcp-options</B><DD>
Log options from the TCP packet header.
<DT><B>--log-ip-options</B><DD>
Log options from the IP/IPv6 packet header.
<DT><B>--log-uid</B><DD>
Log the userid of the process which generated the packet.
</DL>
<A NAME="lbDE">&nbsp;</A>
<H3>MARK</H3>

This target is used to set the Netfilter mark value associated with the packet.
It can, for example, be used in conjunction with routing based on fwmark (needs
iproute2). If you plan on doing so, note that the mark needs to be set in the
PREROUTING chain of the mangle table to affect routing.
The mark field is 32 bits wide.
<DL COMPACT>
<DT><B>--set-xmark</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Zeroes out the bits given by <I>mask</I> and XORs <I>value</I> into the packet
mark (&quot;nfmark&quot;). If <I>mask</I> is omitted, 0xFFFFFFFF is assumed.
<DT><B>--set-mark</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Zeroes out the bits given by <I>mask</I> and ORs <I>value</I> into the packet
mark. If <I>mask</I> is omitted, 0xFFFFFFFF is assumed.
</DL>
<P>

The following mnemonics are available:
<DL COMPACT>
<DT><B>--and-mark</B> <I>bits</I><DD>
Binary AND the nfmark with <I>bits</I>. (Mnemonic for <B>--set-xmark
0/</B><I>invbits</I>, where <I>invbits</I> is the binary negation of <I>bits</I>.)
<DT><B>--or-mark</B> <I>bits</I><DD>
Binary OR the nfmark with <I>bits</I>. (Mnemonic for <B>--set-xmark</B>
<I>bits</I><B>/</B><I>bits</I>.)
<DT><B>--xor-mark</B> <I>bits</I><DD>
Binary XOR the nfmark with <I>bits</I>. (Mnemonic for <B>--set-xmark</B>
<I>bits</I><B>/0</B>.)
</DL>
<A NAME="lbDF">&nbsp;</A>
<H3>MASQUERADE</H3>

This target is only valid in the
<B>nat</B>

table, in the
<B>POSTROUTING</B>

chain.  It should only be used with dynamically assigned IP (dialup)
connections: if you have a static IP address, you should use the SNAT
target.  Masquerading is equivalent to specifying a mapping to the IP
address of the interface the packet is going out, but also has the
effect that connections are
<I>forgotten</I>

when the interface goes down.  This is the correct behavior when the
next dialup is unlikely to have the same interface address (and hence
any established connections are lost anyway).
<DL COMPACT>
<DT><B>--to-ports</B> <I>port</I>[<B>-</B><I>port</I>]<DD>
This specifies a range of source ports to use, overriding the default
<B>SNAT</B>

source port-selection heuristics (see above).  This is only valid
if the rule also specifies one of the following protocols:
<B>tcp</B>, <B>udp</B>, <B>dccp</B> or <B>sctp</B>.
<DT><B>--random</B><DD>
Randomize source port mapping
If option
<B>--random</B>
is used then port mapping will be randomized (kernel &gt;= 2.6.21).
<DT>IPv6 support available since Linux kernels &gt;= 3.7.<DD>
</DL>
<A NAME="lbDG">&nbsp;</A>
<H3>MIRROR (IPv4-specific)</H3>

This is an experimental demonstration target which inverts the source
and destination fields in the IP header and retransmits the packet.
It is only valid in the
<B>INPUT</B>,

<B>FORWARD</B>

and
<B>PREROUTING</B>

chains, and user-defined chains which are only called from those
chains.  Note that the outgoing packets are
<B>NOT</B>

seen by any packet filtering chains, connection tracking or NAT, to
avoid loops and other problems.
<A NAME="lbDH">&nbsp;</A>
<H3>NETMAP</H3>

This target allows you to statically map a whole network of addresses onto
another network of addresses.  It can only be used from rules in the
<B>nat</B>

table.
<DL COMPACT>
<DT><B>--to</B> <I>address</I>[<B>/</B><I>mask</I>]<DD>
Network address to map to.  The resulting address will be constructed in the
following way: All 'one' bits in the mask are filled in from the new `address'.
All bits that are zero in the mask are filled in from the original address.
<DT>IPv6 support available since Linux kernels &gt;= 3.7.<DD>
</DL>
<A NAME="lbDI">&nbsp;</A>
<H3>NFLOG</H3>

This target provides logging of matching packets. When this target is
set for a rule, the Linux kernel will pass the packet to the loaded
logging backend to log the packet. This is usually used in combination
with nfnetlink_log as logging backend, which will multicast the packet
through a
<I>netlink</I>

socket to the specified multicast group. One or more userspace processes
may subscribe to the group to receive the packets. Like LOG, this is a
non-terminating target, i.e. rule traversal continues at the next rule.
<DL COMPACT>
<DT><B>--nflog-group</B> <I>nlgroup</I><DD>
The netlink group (0 - 2^16-1) to which packets are (only applicable for
nfnetlink_log). The default value is 0.
<DT><B>--nflog-prefix</B> <I>prefix</I><DD>
A prefix string to include in the log message, up to 64 characters
long, useful for distinguishing messages in the logs.
<DT><B>--nflog-range</B> <I>size</I><DD>
The number of bytes to be copied to userspace (only applicable for
nfnetlink_log). nfnetlink_log instances may specify their own
range, this option overrides it.
<DT><B>--nflog-threshold</B> <I>size</I><DD>
Number of packets to queue inside the kernel before sending them
to userspace (only applicable for nfnetlink_log). Higher values
result in less overhead per packet, but increase delay until the
packets reach userspace. The default value is 1.

</DL>
<A NAME="lbDJ">&nbsp;</A>
<H3>NFQUEUE</H3>

This target is an extension of the QUEUE target. As opposed to QUEUE, it allows
you to put a packet into any specific queue, identified by its 16-bit queue
number.
It can only be used with Kernel versions 2.6.14 or later, since it requires
the
<B>nfnetlink_queue</B>

kernel support. The <B>queue-balance</B> option was added in Linux 2.6.31,
<B>queue-bypass</B> in 2.6.39.
<DL COMPACT>
<DT><B>--queue-num</B> <I>value</I><DD>
This specifies the QUEUE number to use. Valid queue numbers are 0 to 65535. The default value is 0.
</DL>
<P>

<DL COMPACT>
<DT><B>--queue-balance</B> <I>value</I><B>:</B><I>value</I><DD>
This specifies a range of queues to use. Packets are then balanced across the given queues.
This is useful for multicore systems: start multiple instances of the userspace program on
queues x, x+1, .. x+n and use &quot;--queue-balance <I>x</I><B>:</B><I>x+n</I>&quot;.
Packets belonging to the same connection are put into the same nfqueue.
</DL>
<P>

<DL COMPACT>
<DT><B>--queue-bypass</B><DD>
By default, if no userspace program is listening on an NFQUEUE, then all packets that are to be queued
are dropped.  When this option is used, the NFQUEUE rule behaves like ACCEPT instead, and the packet
will move on to the next table.
</DL>
<P>

<DL COMPACT>
<DT><B>--queue-cpu-fanout</B><DD>
Available starting Linux kernel 3.10. When used together with
<B>--queue-balance</B> this will use the CPU ID as an index to map packets to
the queues. The idea is that you can improve performance if there's a queue
per CPU. This requires <B>--queue-balance</B> to be specified.
</DL>
<A NAME="lbDK">&nbsp;</A>
<H3>NOTRACK</H3>

This extension disables connection tracking for all packets matching that rule.
It is equivalent with -j CT --notrack. Like CT, NOTRACK can only be used in
the <B>raw</B> table.
<A NAME="lbDL">&nbsp;</A>
<H3>RATEEST</H3>

The RATEEST target collects statistics, performs rate estimation calculation
and saves the results for later evaluation using the <B>rateest</B> match.
<DL COMPACT>
<DT><B>--rateest-name</B> <I>name</I><DD>
Count matched packets into the pool referred to by <I>name</I>, which is freely
choosable.
<DT><B>--rateest-interval</B> <I>amount</I>{<B>s</B>|<B>ms</B>|<B>us</B>}<DD>
Rate measurement interval, in seconds, milliseconds or microseconds.
<DT><B>--rateest-ewmalog</B> <I>value</I><DD>
Rate measurement averaging time constant.
</DL>
<A NAME="lbDM">&nbsp;</A>
<H3>REDIRECT</H3>

This target is only valid in the
<B>nat</B>

table, in the
<B>PREROUTING</B>

and
<B>OUTPUT</B>

chains, and user-defined chains which are only called from those
chains.  It redirects the packet to the machine itself by changing the
destination IP to the primary address of the incoming interface
(locally-generated packets are mapped to the localhost address,
127.0.0.1 for IPv4 and ::1 for IPv6).
<DL COMPACT>
<DT><B>--to-ports</B> <I>port</I>[<B>-</B><I>port</I>]<DD>
This specifies a destination port or range of ports to use: without
this, the destination port is never altered.  This is only valid
if the rule also specifies one of the following protocols:
<B>tcp</B>, <B>udp</B>, <B>dccp</B> or <B>sctp</B>.
<DT><B>--random</B><DD>
If option
<B>--random</B>
is used then port mapping will be randomized (kernel &gt;= 2.6.22).
<DT>IPv6 support available starting Linux kernels &gt;= 3.7.<DD>
</DL>
<A NAME="lbDN">&nbsp;</A>
<H3>REJECT (IPv6-specific)</H3>

This is used to send back an error packet in response to the matched
packet: otherwise it is equivalent to 
<B>DROP</B>

so it is a terminating TARGET, ending rule traversal.
This target is only valid in the
<B>INPUT</B>,

<B>FORWARD</B>

and
<B>OUTPUT</B>

chains, and user-defined chains which are only called from those
chains.  The following option controls the nature of the error packet
returned:
<DL COMPACT>
<DT><B>--reject-with</B> <I>type</I><DD>
The type given can be
<B>icmp6-no-route</B>,
<B>no-route</B>,
<B>icmp6-adm-prohibited</B>,
<B>adm-prohibited</B>,
<B>icmp6-addr-unreachable</B>,
<B>addr-unreach</B>,
<B>icmp6-port-unreachable</B> or
<B>port-unreach</B>
which return the appropriate ICMPv6 error message (<B>port-unreach</B> is
the default). Finally, the option
<B>tcp-reset</B>
can be used on rules which only match the TCP protocol: this causes a
TCP RST packet to be sent back.  This is mainly useful for blocking 
<I>ident</I>

(113/tcp) probes which frequently occur when sending mail to broken mail
hosts (which won't accept your mail otherwise).
<B>tcp-reset</B>
can only be used with kernel versions 2.6.14 or later.
</DL>
<A NAME="lbDO">&nbsp;</A>
<H3>REJECT (IPv4-specific)</H3>

This is used to send back an error packet in response to the matched
packet: otherwise it is equivalent to
<B>DROP</B>

so it is a terminating TARGET, ending rule traversal.
This target is only valid in the
<B>INPUT</B>,

<B>FORWARD</B>

and
<B>OUTPUT</B>

chains, and user-defined chains which are only called from those
chains.  The following option controls the nature of the error packet
returned:
<DL COMPACT>
<DT><B>--reject-with</B> <I>type</I><DD>
The type given can be
<B>icmp-net-unreachable</B>,
<B>icmp-host-unreachable</B>,
<B>icmp-port-unreachable</B>,
<B>icmp-proto-unreachable</B>,
<B>icmp-net-prohibited</B>,
<B>icmp-host-prohibited</B> or
<B>icmp-admin-prohibited</B> (*)
which return the appropriate ICMP error message (<B>port-unreachable</B> is
the default).  The option
<B>tcp-reset</B>
can be used on rules which only match the TCP protocol: this causes a
TCP RST packet to be sent back.  This is mainly useful for blocking 
<I>ident</I>

(113/tcp) probes which frequently occur when sending mail to broken mail
hosts (which won't accept your mail otherwise).
</DL>
<P>

(*) Using icmp-admin-prohibited with kernels that do not support it will result in a plain DROP instead of REJECT
<A NAME="lbDP">&nbsp;</A>
<H3>SAME (IPv4-specific)</H3>

Similar to SNAT/DNAT depending on chain: it takes a range of addresses
(`--to 1.2.3.4-1.2.3.7') and gives a client the same
source-/destination-address for each connection.
<P>

N.B.: The DNAT target's <B>--persistent</B> option replaced the SAME target.
<DL COMPACT>
<DT><B>--to</B> <I>ipaddr</I>[<B>-</B><I>ipaddr</I>]<DD>
Addresses to map source to. May be specified more than once for
multiple ranges.
<DT><B>--nodst</B><DD>
Don't use the destination-ip in the calculations when selecting the
new source-ip
<DT><B>--random</B><DD>
Port mapping will be forcibly randomized to avoid attacks based on 
port prediction (kernel &gt;= 2.6.21).
</DL>
<A NAME="lbDQ">&nbsp;</A>
<H3>SECMARK</H3>

This is used to set the security mark value associated with the
packet for use by security subsystems such as SELinux.  It is
valid in the
<B>security</B>

table (for backwards compatibility with older kernels, it is also
valid in the
<B>mangle</B>

table). The mark is 32 bits wide.
<DL COMPACT>
<DT><B>--selctx</B> <I>security_context</I><DD>
</DL>
<A NAME="lbDR">&nbsp;</A>
<H3>SET</H3>

This module adds and/or deletes entries from IP sets which can be defined
by <A HREF="/cgi-bin/man/man2html?8+ipset">ipset</A>(8).
<DL COMPACT>
<DT><B>--add-set</B> <I>setname</I> <I>flag</I>[<B>,</B><I>flag</I>...]<DD>
add the address(es)/port(s) of the packet to the set
<DT><B>--del-set</B> <I>setname</I> <I>flag</I>[<B>,</B><I>flag</I>...]<DD>
delete the address(es)/port(s) of the packet from the set
<DT><DD>
where <I>flag</I>(s) are
<B>src</B>

and/or
<B>dst</B>

specifications and there can be no more than six of them.
<DT><B>--timeout</B> <I>value</I><DD>
when adding an entry, the timeout value to use instead of the default
one from the set definition
<DT><B>--exist</B><DD>
when adding an entry if it already exists, reset the timeout value
to the specified one or to the default from the set definition
</DL>
<P>

Use of -j SET requires that ipset kernel support is provided, which, for
standard kernels, is the case since Linux 2.6.39.
<A NAME="lbDS">&nbsp;</A>
<H3>SNAT</H3>

This target is only valid in the
<B>nat</B>

table, in the
<B>POSTROUTING</B>

and
<B>INPUT</B>

chains, and user-defined chains which are only called from those
chains.  It specifies that the source address of the packet should be
modified (and all future packets in this connection will also be
mangled), and rules should cease being examined.  It takes the
following options:
<DL COMPACT>
<DT><B>--to-source</B> [<I>ipaddr</I>[<B>-</B><I>ipaddr</I>]][<B>:</B><I>port</I>[<B>-</B><I>port</I>]]<DD>
which can specify a single new source IP address, an inclusive range
of IP addresses. Optionally a port range,
if the rule also specifies one of the following protocols:
<B>tcp</B>, <B>udp</B>, <B>dccp</B> or <B>sctp</B>.
If no port range is specified, then source ports below 512 will be
mapped to other ports below 512: those between 512 and 1023 inclusive
will be mapped to ports below 1024, and other ports will be mapped to
1024 or above. Where possible, no port alteration will occur.
In Kernels up to 2.6.10, you can add several --to-source options. For those
kernels, if you specify more than one source address, either via an address
range or multiple --to-source options, a simple round-robin (one after another
in cycle) takes place between these addresses.
Later Kernels (&gt;= 2.6.11-rc1) don't have the ability to NAT to multiple ranges
anymore.
<DT><B>--random</B><DD>
If option
<B>--random</B>
is used then port mapping will be randomized (kernel &gt;= 2.6.21).
<DT><B>--persistent</B><DD>
Gives a client the same source-/destination-address for each connection.
This supersedes the SAME target. Support for persistent mappings is available
from 2.6.29-rc2.
</DL>
<P>

Kernels prior to 2.6.36-rc1 don't have the ability to
<B>SNAT</B>

in the
<B>INPUT</B>

chain.
<DL COMPACT>
<DT>IPv6 support available since Linux kernels &gt;= 3.7.<DD>
</DL>
<A NAME="lbDT">&nbsp;</A>
<H3>SNPT (IPv6-specific)</H3>

Provides stateless source IPv6-to-IPv6 Network Prefix Translation (as described
by RFC 6296).
<P>

You have to use this target in the
<B>mangle</B>

table, not in the
<B>nat</B>

table. It takes the following options:
<DL COMPACT>
<DT><B>--src-pfx</B> [<I>prefix/</I><I>length]<DD>
Set source prefix that you want to translate and length
<DT></I><B>--dst-pfx</B> [<I>prefix/</I><I>length]<DD>
Set destination prefix that you want to use in the translation and length
</DL>
<P>

You have to use the DNPT target to undo the translation. Example:
<DL COMPACT>
<DT><DD>
ip6tables -t mangle -I POSTROUTING -s fd00::/64  -o vboxnet0
-j SNPT --src-pfx fd00::/64 --dst-pfx 2001:e20:2000:40f::/64
<DT><DD>
ip6tables -t mangle -I PREROUTING -i wlan0 -d 2001:e20:2000:40f::/64
-j DNPT --src-pfx 2001:e20:2000:40f::/64 --dst-pfx fd00::/64
</DL>
<P>

You may need to enable IPv6 neighbor proxy:
<DL COMPACT>
<DT><DD>
sysctl -w net.ipv6.conf.all.proxy_ndp=1
</DL>
<P>

You also have to use the
</I><B>NOTRACK</B>

target to disable connection tracking for translated flows.
<A NAME="lbDU">&nbsp;</A>
<H3>TCPMSS</H3>

This target allows to alter the MSS value of TCP SYN packets, to control
the maximum size for that connection (usually limiting it to your
outgoing interface's MTU minus 40 for IPv4 or 60 for IPv6, respectively).
Of course, it can only be used
in conjunction with
<B>-p tcp</B>.
<P>

This target is used to overcome criminally braindead ISPs or servers
which block &quot;ICMP Fragmentation Needed&quot; or &quot;ICMPv6 Packet Too Big&quot;
packets.  The symptoms of this
problem are that everything works fine from your Linux
firewall/router, but machines behind it can never exchange large
packets:
<DL COMPACT>
<DT>1.<DD>
Web browsers connect, then hang with no data received.
<DT>2.<DD>
Small mail works fine, but large emails hang.
<DT>3.<DD>
ssh works fine, but scp hangs after initial handshaking.
</DL>
<P>

Workaround: activate this option and add a rule to your firewall
configuration like:
<DL COMPACT>
<DT><DD>
<BR>&nbsp;iptables&nbsp;-t&nbsp;mangle&nbsp;-A&nbsp;FORWARD&nbsp;-p&nbsp;tcp&nbsp;--tcp-flags&nbsp;SYN,RST&nbsp;SYN
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-j&nbsp;TCPMSS&nbsp;--clamp-mss-to-pmtu
<DT><B>--set-mss</B> <I>value</I><DD>
Explicitly sets MSS option to specified value. If the MSS of the packet is
already lower than <I>value</I>, it will <B>not</B> be increased (from Linux
2.6.25 onwards) to avoid more problems with hosts relying on a proper MSS.
<DT><B>--clamp-mss-to-pmtu</B><DD>
Automatically clamp MSS value to (path_MTU - 40 for IPv4; -60 for IPv6).
This may not function as desired where asymmetric routes with differing
path MTU exist --- the kernel uses the path MTU which it would use to send
packets from itself to the source and destination IP addresses. Prior to
Linux 2.6.25, only the path MTU to the destination IP address was
considered by this option; subsequent kernels also consider the path MTU
to the source IP address.
</DL>
<P>

These options are mutually exclusive.
<A NAME="lbDV">&nbsp;</A>
<H3>TCPOPTSTRIP</H3>

This target will strip TCP options off a TCP packet. (It will actually replace
them by NO-OPs.) As such, you will need to add the <B>-p tcp</B> parameters.
<DL COMPACT>
<DT><B>--strip-options</B> <I>option</I>[<B>,</B><I>option</I>...]<DD>
Strip the given option(s). The options may be specified by TCP option number or
by symbolic name. The list of recognized options can be obtained by calling
iptables with <B>-j TCPOPTSTRIP -h</B>.
</DL>
<A NAME="lbDW">&nbsp;</A>
<H3>TEE</H3>

The <B>TEE</B> target will clone a packet and redirect this clone to another
machine on the <B>local</B> network segment. In other words, the nexthop
must be the target, or you will have to configure the nexthop to forward it
further if so desired.
<DL COMPACT>
<DT><B>--gateway</B> <I>ipaddr</I><DD>
Send the cloned packet to the host reachable at the given IP address.
Use of 0.0.0.0 (for IPv4 packets) or :: (IPv6) is invalid.
</DL>
<P>

To forward all incoming traffic on eth0 to an Network Layer logging box:
<P>

-t mangle -A PREROUTING -i eth0 -j TEE --gateway 2001:db8::1
<A NAME="lbDX">&nbsp;</A>
<H3>TOS</H3>

This module sets the Type of Service field in the IPv4 header (including the
&quot;precedence&quot; bits) or the Priority field in the IPv6 header. Note that TOS
shares the same bits as DSCP and ECN. The TOS target is only valid in the
<B>mangle</B> table.
<DL COMPACT>
<DT><B>--set-tos</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Zeroes out the bits given by <I>mask</I> (see NOTE below) and XORs <I>value</I>
into the TOS/Priority field. If <I>mask</I> is omitted, 0xFF is assumed.
<DT><B>--set-tos</B> <I>symbol</I><DD>
You can specify a symbolic name when using the TOS target for IPv4. It implies
a mask of 0xFF (see NOTE below). The list of recognized TOS names can be
obtained by calling iptables with <B>-j TOS -h</B>.
</DL>
<P>

The following mnemonics are available:
<DL COMPACT>
<DT><B>--and-tos</B> <I>bits</I><DD>
Binary AND the TOS value with <I>bits</I>. (Mnemonic for <B>--set-tos
0/</B><I>invbits</I>, where <I>invbits</I> is the binary negation of <I>bits</I>.
See NOTE below.)
<DT><B>--or-tos</B> <I>bits</I><DD>
Binary OR the TOS value with <I>bits</I>. (Mnemonic for <B>--set-tos</B>
<I>bits</I><B>/</B><I>bits</I>. See NOTE below.)
<DT><B>--xor-tos</B> <I>bits</I><DD>
Binary XOR the TOS value with <I>bits</I>. (Mnemonic for <B>--set-tos</B>
<I>bits</I><B>/0</B>. See NOTE below.)
</DL>
<P>

NOTE: In Linux kernels up to and including 2.6.38, with the exception of
longterm releases 2.6.32 (&gt;=.42), 2.6.33 (&gt;=.15), and 2.6.35 (&gt;=.14), there is
a bug whereby IPv6 TOS mangling does not behave as documented and differs from
the IPv4 version. The TOS mask indicates the bits one wants to zero out, so it
needs to be inverted before applying it to the original TOS field. However, the
aformentioned kernels forgo the inversion which breaks --set-tos and its
mnemonics.
<A NAME="lbDY">&nbsp;</A>
<H3>TPROXY</H3>

This target is only valid in the <B>mangle</B> table, in the <B>PREROUTING</B>
chain and user-defined chains which are only called from this chain. It
redirects the packet to a local socket without changing the packet header in
any way. It can also change the mark value which can then be used in advanced
routing rules.
It takes three options:
<DL COMPACT>
<DT><B>--on-port</B> <I>port</I><DD>
This specifies a destination port to use. It is a required option, 0 means the
new destination port is the same as the original. This is only valid if the
rule also specifies <B>-p tcp</B> or <B>-p udp</B>.
<DT><B>--on-ip</B> <I>address</I><DD>
This specifies a destination address to use. By default the address is the IP
address of the incoming interface. This is only valid if the rule also
specifies <B>-p tcp</B> or <B>-p udp</B>.
<DT><B>--tproxy-mark</B> <I>value</I>[<B>/</B><I>mask</I>]<DD>
Marks packets with the given value/mask. The fwmark value set here can be used
by advanced routing. (Required for transparent proxying to work: otherwise
these packets will get forwarded, which is probably not what you want.)
</DL>
<A NAME="lbDZ">&nbsp;</A>
<H3>TRACE</H3>

This target marks packets so that the kernel will log every rule which match 
the packets as those traverse the tables, chains, rules.
<P>

A logging backend, such as <A HREF="/cgi-bin/man/man2html?6+ip">ip</A>(6)t_LOG or nfnetlink_log, must be loaded for this
to be visible.
The packets are logged with the string prefix:
&quot;TRACE: tablename:chainname:type:rulenum &quot; where type can be &quot;rule&quot; for 
plain rule, &quot;return&quot; for implicit rule at the end of a user defined chain 
and &quot;policy&quot; for the policy of the built in chains. 
<BR>

It can only be used in the
<B>raw</B>

table.
<A NAME="lbEA">&nbsp;</A>
<H3>TTL (IPv4-specific)</H3>

This is used to modify the IPv4 TTL header field.  The TTL field determines
how many hops (routers) a packet can traverse until it's time to live is
exceeded.
<P>

Setting or incrementing the TTL field can potentially be very dangerous,
so it should be avoided at any cost. This target is only valid in
<B>mangle</B>

table.
<P>

<B>Don't ever set or increment the value on packets that leave your local network!</B>

<DL COMPACT>
<DT><B>--ttl-set</B> <I>value</I><DD>
Set the TTL value to `value'.
<DT><B>--ttl-dec</B> <I>value</I><DD>
Decrement the TTL value `value' times.
<DT><B>--ttl-inc</B> <I>value</I><DD>
Increment the TTL value `value' times.
</DL>
<A NAME="lbEB">&nbsp;</A>
<H3>ULOG (IPv4-specific)</H3>

This is the deprecated ipv4-only predecessor of the NFLOG target.
It provides userspace logging of matching packets.  When this
target is set for a rule, the Linux kernel will multicast this packet
through a
<I>netlink</I>

socket. One or more userspace processes may then subscribe to various 
multicast groups and receive the packets.
Like LOG, this is a &quot;non-terminating target&quot;, i.e. rule traversal
continues at the next rule.
<DL COMPACT>
<DT><B>--ulog-nlgroup</B> <I>nlgroup</I><DD>
This specifies the netlink group (1-32) to which the packet is sent.
Default value is 1.
<DT><B>--ulog-prefix</B> <I>prefix</I><DD>
Prefix log messages with the specified prefix; up to 32 characters
long, and useful for distinguishing messages in the logs.
<DT><B>--ulog-cprange</B> <I>size</I><DD>
Number of bytes to be copied to userspace.  A value of 0 always copies
the entire packet, regardless of its size.  Default is 0.
<DT><B>--ulog-qthreshold</B> <I>size</I><DD>
Number of packet to queue inside kernel.  Setting this value to, e.g. 10
accumulates ten packets inside the kernel and transmits them as one
netlink multipart message to userspace.  Default is 1 (for backwards
compatibility).
<BR>

<P>
</DL>

<HR>
<A NAME="index">&nbsp;</A><H2>Index</H2>
<DL>
<DT><A HREF="#lbAB">NAME</A><DD>
<DT><A HREF="#lbAC">SYNOPSIS</A><DD>
<DT><A HREF="#lbAD">MATCH EXTENSIONS</A><DD>
<DL>
<DT><A HREF="#lbAE">addrtype</A><DD>
<DT><A HREF="#lbAF">ah (IPv6-specific)</A><DD>
<DT><A HREF="#lbAG">ah (IPv4-specific)</A><DD>
<DT><A HREF="#lbAH">bpf</A><DD>
<DT><A HREF="#lbAI">cluster</A><DD>
<DT><A HREF="#lbAJ">comment</A><DD>
<DT><A HREF="#lbAK">connbytes</A><DD>
<DT><A HREF="#lbAL">connlabel</A><DD>
<DT><A HREF="#lbAM">connlimit</A><DD>
<DT><A HREF="#lbAN">connmark</A><DD>
<DT><A HREF="#lbAO">conntrack</A><DD>
<DT><A HREF="#lbAP">cpu</A><DD>
<DT><A HREF="#lbAQ">dccp</A><DD>
<DT><A HREF="#lbAR">devgroup</A><DD>
<DT><A HREF="#lbAS">dscp</A><DD>
<DT><A HREF="#lbAT">dst (IPv6-specific)</A><DD>
<DT><A HREF="#lbAU">ecn</A><DD>
<DT><A HREF="#lbAV">esp</A><DD>
<DT><A HREF="#lbAW">eui64 (IPv6-specific)</A><DD>
<DT><A HREF="#lbAX">frag (IPv6-specific)</A><DD>
<DT><A HREF="#lbAY">hashlimit</A><DD>
<DT><A HREF="#lbAZ">hbh (IPv6-specific)</A><DD>
<DT><A HREF="#lbBA">helper</A><DD>
<DT><A HREF="#lbBB">hl (IPv6-specific)</A><DD>
<DT><A HREF="#lbBC">icmp (IPv4-specific)</A><DD>
<DT><A HREF="#lbBD">icmp6 (IPv6-specific)</A><DD>
<DT><A HREF="#lbBE">iprange</A><DD>
<DT><A HREF="#lbBF">ipv6header (IPv6-specific)</A><DD>
<DT><A HREF="#lbBG">ipvs</A><DD>
<DT><A HREF="#lbBH">length</A><DD>
<DT><A HREF="#lbBI">limit</A><DD>
<DT><A HREF="#lbBJ">mac</A><DD>
<DT><A HREF="#lbBK">mark</A><DD>
<DT><A HREF="#lbBL">mh (IPv6-specific)</A><DD>
<DT><A HREF="#lbBM">multiport</A><DD>
<DT><A HREF="#lbBN">nfacct</A><DD>
<DT><A HREF="#lbBO">osf</A><DD>
<DT><A HREF="#lbBP">owner</A><DD>
<DT><A HREF="#lbBQ">physdev</A><DD>
<DT><A HREF="#lbBR">pkttype</A><DD>
<DT><A HREF="#lbBS">policy</A><DD>
<DT><A HREF="#lbBT">quota</A><DD>
<DT><A HREF="#lbBU">rateest</A><DD>
<DT><A HREF="#lbBV">realm (IPv4-specific)</A><DD>
<DT><A HREF="#lbBW">recent</A><DD>
<DT><A HREF="#lbBX">rpfilter</A><DD>
<DT><A HREF="#lbBY">rt (IPv6-specific)</A><DD>
<DT><A HREF="#lbBZ">sctp</A><DD>
<DT><A HREF="#lbCA">set</A><DD>
<DT><A HREF="#lbCB">socket</A><DD>
<DT><A HREF="#lbCC">state</A><DD>
<DT><A HREF="#lbCD">statistic</A><DD>
<DT><A HREF="#lbCE">string</A><DD>
<DT><A HREF="#lbCF">tcp</A><DD>
<DT><A HREF="#lbCG">tcpmss</A><DD>
<DT><A HREF="#lbCH">time</A><DD>
<DT><A HREF="#lbCI">tos</A><DD>
<DT><A HREF="#lbCJ">ttl (IPv4-specific)</A><DD>
<DT><A HREF="#lbCK">u32</A><DD>
<DT><A HREF="#lbCL">udp</A><DD>
<DT><A HREF="#lbCM">unclean (IPv4-specific)</A><DD>
</DL>
<DT><A HREF="#lbCN">TARGET EXTENSIONS</A><DD>
<DL>
<DT><A HREF="#lbCO">AUDIT</A><DD>
<DT><A HREF="#lbCP">CHECKSUM</A><DD>
<DT><A HREF="#lbCQ">CLASSIFY</A><DD>
<DT><A HREF="#lbCR">CLUSTERIP (IPv4-specific)</A><DD>
<DT><A HREF="#lbCS">CONNMARK</A><DD>
<DT><A HREF="#lbCT">CONNSECMARK</A><DD>
<DT><A HREF="#lbCU">CT</A><DD>
<DT><A HREF="#lbCV">DNAT</A><DD>
<DT><A HREF="#lbCW">DNPT (IPv6-specific)</A><DD>
<DT><A HREF="#lbCX">DSCP</A><DD>
<DT><A HREF="#lbCY">ECN (IPv4-specific)</A><DD>
<DT><A HREF="#lbCZ">HL (IPv6-specific)</A><DD>
<DT><A HREF="#lbDA">HMARK</A><DD>
<DT><A HREF="#lbDB">IDLETIMER</A><DD>
<DT><A HREF="#lbDC">LED</A><DD>
<DT><A HREF="#lbDD">LOG</A><DD>
<DT><A HREF="#lbDE">MARK</A><DD>
<DT><A HREF="#lbDF">MASQUERADE</A><DD>
<DT><A HREF="#lbDG">MIRROR (IPv4-specific)</A><DD>
<DT><A HREF="#lbDH">NETMAP</A><DD>
<DT><A HREF="#lbDI">NFLOG</A><DD>
<DT><A HREF="#lbDJ">NFQUEUE</A><DD>
<DT><A HREF="#lbDK">NOTRACK</A><DD>
<DT><A HREF="#lbDL">RATEEST</A><DD>
<DT><A HREF="#lbDM">REDIRECT</A><DD>
<DT><A HREF="#lbDN">REJECT (IPv6-specific)</A><DD>
<DT><A HREF="#lbDO">REJECT (IPv4-specific)</A><DD>
<DT><A HREF="#lbDP">SAME (IPv4-specific)</A><DD>
<DT><A HREF="#lbDQ">SECMARK</A><DD>
<DT><A HREF="#lbDR">SET</A><DD>
<DT><A HREF="#lbDS">SNAT</A><DD>
<DT><A HREF="#lbDT">SNPT (IPv6-specific)</A><DD>
<DT><A HREF="#lbDU">TCPMSS</A><DD>
<DT><A HREF="#lbDV">TCPOPTSTRIP</A><DD>
<DT><A HREF="#lbDW">TEE</A><DD>
<DT><A HREF="#lbDX">TOS</A><DD>
<DT><A HREF="#lbDY">TPROXY</A><DD>
<DT><A HREF="#lbDZ">TRACE</A><DD>
<DT><A HREF="#lbEA">TTL (IPv4-specific)</A><DD>
<DT><A HREF="#lbEB">ULOG (IPv4-specific)</A><DD>
</DL>
</DL>
<HR>
This document was created by
man2html,
using the manual pages.<BR>
Time: 08:56:03 GMT, June 25, 2015
</BODY>
</HTML>
