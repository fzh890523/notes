<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0066)https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252"><title>Iptables Tutorial 1.2.2</title><meta name="GENERATOR" content="Modular DocBook HTML Stylesheet Version 1.79"><link rel="STYLESHEET" type="text/css" href="./Iptables Tutorial 1.2.2_files/table.css"></head><body class="BOOK" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="BOOK"><a name="IPTABLES-TUTORIAL"></a><div class="TITLEPAGE"><h1 class="TITLE"><a name="AEN2">Iptables Tutorial 1.2.2</a></h1><h3 class="AUTHOR"><a name="AEN4"></a>Oskar Andreasson</h3><div class="AFFILIATION"><div class="ADDRESS"><p class="ADDRESS">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="EMAIL">&lt;<a href="mailto:oan@frozentux.net">oan@frozentux.net</a>&gt;</code><br>
&nbsp;&nbsp;&nbsp;&nbsp;</p></div></div><p class="COPYRIGHT">Copyright © 2001-2006 Oskar Andreasson</p><div class="LEGALNOTICE"><p></p><a name="AEN13"></a><p> 
Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License, Version
1.1; with the Invariant Sections being "Introduction" and all
sub-sections, with the Front-Cover Texts being "Original Author: Oskar
Andreasson", and with no Back-Cover Texts. A copy of the license is
included in the section entitled "GNU Free Documentation License".
   </p><p>All scripts in this tutorial are covered by the GNU General Public
License. The scripts are free source; you can redistribute them and/or
modify them under the terms of the GNU General Public License as published
by the Free Software Foundation, version 2 of the License.
   </p><p> These scripts are distributed in the hope that they will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
Public License for more details.
   </p><p> You should have received a copy of the GNU General Public
License within this tutorial, under the section entitled "GNU General
Public License"; if not, write to the Free Software Foundation, Inc., 59
Temple Place, Suite 330, Boston, MA 02111-1307 USA
   </p><p></p></div><hr></div><hr><h1><a name="AEN18"></a>Dedications</h1><p>I would like to dedicate this document to my wonderful sister, niece and 
brother-in-law for giving me inspiration and feedback. They are a source of 
joy and a ray of light when I have need of it.  Thank you!
  </p><p>A special word should also be extended to Ninel for always encouraging my 
writing and for taking care of me when I needed it the most. Thank you!
  </p><p>Second of all, I would like to dedicate this work to all of the
incredibly hard working Linux developers and maintainers. It is people
like those who make this wonderful operating system possible.
  </p><div class="TOC"><dl><dt><b>Table of Contents</b></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ABOUTTHEAUTHOR">About the author</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#HOWTOREAD">How to read</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#PREREQUISITES">Prerequisites</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#CONVENTIONSUSED">Conventions used in this document</a></dt><dt>1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INTRODUCTION">Introduction</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#WHYTHISDOCUMENT">Why this document was written</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#HOWITWAS">How it was written</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TERMSUSED">Terms used in this document</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN167">What's next?</a></dt></dl></dd><dt>2. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPIPREPETITION">TCP/IP repetition</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPIPLAYERS">TCP/IP Layers</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPCHARACTERISTICS">IP characteristics</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPHEADERS">IP headers</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPCHARACTERISTICS">TCP characteristics</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPHEADERS">TCP headers</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#UDPCHARACTERISTICS">UDP characteristics</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#UDPHEADERS">UDP headers</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPCHARACTERISTICS">ICMP characteristics</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPHEADERS">ICMP headers</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPECHO">ICMP Echo Request/Reply</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPDESTUNREACH">ICMP Destination Unreachable</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SOURCEQUENCH">Source Quench</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#REDIRECT">Redirect</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TTLEQ0">TTL equals 0</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#PARAMETERPROBLEM">Parameter problem</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TIMESTAMP">Timestamp request/reply</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INFORMATIONREQUEST">Information request/reply</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPCHARACTERISTICS">SCTP Characteristics</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPINIT">Initialization and association</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPDATA">Data sending and control session</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPSHUTDOWN">Shutdown and abort</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERS">SCTP Headers</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERGENERIC">SCTP Generic header format</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON">SCTP Common and generic headers</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERABORT">SCTP ABORT chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOOKIE-ACK">SCTP COOKIE ACK chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOOKIE-ECHO">SCTP COOKIE ECHO chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERDATA">SCTP DATA chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERERROR">SCTP ERROR chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERHEARTBEAT">SCTP HEARTBEAT chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERHEARTBEAT-ACK">SCTP HEARTBEAT ACK chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERINIT">SCTP INIT chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERINIT-ACK">SCTP INIT ACK chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERSACK">SCTP SACK chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERSHUTDOWN">SCTP SHUTDOWN chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERSHUTDOWNACK">SCTP SHUTDOWN ACK chunk</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERSHUTDOWNCOMPLETE">SCTP SHUTDOWN COMPLETE chunk</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPIPDSTDRIVENROUTING">TCP/IP destination driven 
routing</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPIPREP.SUMMARY">What's next?</a></dt></dl></dd><dt>3. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPFILTERING">IP filtering introduction</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#WHATISANIPFILTER">What is an IP filter</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPFILTERGENERALTERMS">IP filtering terms and 
expressions</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#HOWTOPLANANIPFILTER">How to plan an IP filter</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN3144">What's next?</a></dt></dl></dd><dt>4. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NATINTRO">Network Address Translation Introduction</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NATUSAGE">What NAT is used for and basic terms and 
expressions</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NATCAVEATS">Caveats using NAT</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#EXAMPLENATMACHINE">Example NAT machine in theory</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#WHATISNEEDEDTOBUILDNAT">What is needed to build a 
NAT machine</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NATPLACEMENT">Placement of NAT machines</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NATPROXIES">How to place proxies</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NATFINALSTAGE">The final stage of our NAT machine</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NATWHATSNEXT">What's next?</a></dt></dl></dd><dt>5. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#PREPARATIONS">Preparations</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#WHERETOGET">Where to get iptables</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#KERNELSETUP">Kernel setup</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#USERLANDSETUP">User-land setup</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COMPILINGUSERAPPS">Compiling the user-land applications</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INSTALLRH71">Installation on Red Hat 7.1</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN3738">What's next?</a></dt></dl></dd><dt>6. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TRAVERSINGOFTABLES">Traversing of tables and chains</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TRAVERSINGGENERAL">General</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MANGLETABLE">Mangle table</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NATTABLE">Nat table</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RAWTABLE">Raw table</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#FILTERTABLE">Filter table</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#USERTABLES">User specified chains</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN4215">What's next?</a></dt></dl></dd><dt>7. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#STATEMACHINE">The state machine</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#STATEMACHINEINTRODUCTION">Introduction</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#THECONNTRACKENTRIES">The conntrack entries</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#USERLANDSTATES">User-land states</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPCONNECTIONS">TCP connections</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#UDPCONNECTIONS">UDP connections</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPCONNECTIONS">ICMP connections</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DEFAULTCONNECTIONS">Default connections</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#UNTRACKEDCONNS">Untracked connections and the raw 
table</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COMPLEXPROTOCOLS">Complex protocols and connection tracking</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN4931">What's next?</a></dt></dl></dd><dt>8. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SAVEANDRESTORE">Saving and restoring large
 rule-sets</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SPEEDCONSIDERATIONS">Speed considerations</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DRAWBACKSWITHRESTORE">Drawbacks with restore</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPTABLES-SAVE">iptables-save</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPTABLES-RESTORE">iptables-restore</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN5100">What's next?</a></dt></dl></dd><dt>9. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#HOWARULEISBUILT">How a rule is built</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#BASICS">Basics of the iptables command</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLES">Tables</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COMMANDS">Commands</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN5568">What's next?</a></dt></dl></dd><dt>10. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MATCHES">Iptables matches</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#GENERICMATCHES">Generic matches</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IMPLICITMATCHES">Implicit matches</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPMATCHES">TCP matches</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#UDPMATCHES">UDP matches</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPMATCHES">ICMP matches</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPMATCHES">SCTP matches</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#EXPLICITMATCHES">Explicit matches</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ADDRTYPEMATCH">Addrtype match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AHESPMATCH">AH/ESP match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COMMENTMATCH">Comment match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#CONNMARKMATCH">Connmark match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#CONNTRACKMATCH">Conntrack match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DSCPMATCH">Dscp match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ECNMATCH">Ecn match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#HASHLIMITMATCH">Hashlimit match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#HELPERMATCH">Helper match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPRANGEMATCH">IP range match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#LENGTHMATCH">Length match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#LIMITMATCH">Limit match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MACMATCH">Mac match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MARKMATCH">Mark match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MULTIPORTMATCH">Multiport match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#OWNERMATCH">Owner match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#PKTTYPEMATCH">Packet type match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#REALMMATCH">Realm match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RECENTMATCH">Recent match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#STATEMATCH">State match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPMSSMATCH">Tcpmss match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TOSMATCH">Tos match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TTLMATCH">Ttl match</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#UNCLEANMATCH">Unclean match</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN8812">What's next?</a></dt></dl></dd><dt>11. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TARGETS">Iptables targets and jumps</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ACCEPTTARGET">ACCEPT target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#CLASSIFYTARGET">CLASSIFY target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#CLUSTERIPTARGET">CLUSTERIP target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#CONNMARKTARGET">CONNMARK target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#CONNSECMARKTARGET">CONNSECMARK target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DNATTARGET">DNAT target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DROPTARGET">DROP target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DSCPTARGET">DSCP target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ECNTARGET">ECN target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#LOGTARGET">LOG target options</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MARKTARGET">MARK target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MASQUERADETARGET">MASQUERADE target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MIRRORTARGET">MIRROR target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NETMAPTARGET">NETMAP target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NFQUEUETARGET">NFQUEUE target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NOTRACKTARGET">NOTRACK target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#QUEUETARGET">QUEUE target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#REDIRECTTARGET">REDIRECT target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#REJECTTARGET">REJECT target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RETURNTARGET">RETURN target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SAMETARGET">SAME target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SECMARKTARGET">SECMARK target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SNATTARGET">SNAT target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPMSSTARGET">TCPMSS target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TOSTARGET">TOS target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TTLTARGET">TTL target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ULOGTARGET">ULOG target</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN10754">What's next?</a></dt></dl></dd><dt>12. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DEBUGGING">Debugging your scripts</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DEBUGGINGANECESSITY">Debugging, a necessity</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#BASHX">Bash debugging tips</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SYSTEMTOOLSDEBUG">System tools used for debugging</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPTABLESDEBUGGING">Iptables debugging</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#OTHERDEBUGGINGTOOLS">Other debugging tools</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DEBUGGING.NMAP">Nmap</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DEBUGGING.NESSUS">Nessus</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DEBUGGING.WHATSNEXT">What's next?</a></dt></dl></dd><dt>13. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLFILE">rc.firewall file</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#EXAMPLERCFIREWALL">example rc.firewall</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#EXPLANATIONOFRCFIREWALL">explanation of rc.firewall</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#CONFIGOPTIONS">Configuration options</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INITIALLOADING">Initial loading of extra modules</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#PROCSETUP">proc set up</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DISPLACEMENT">Displacement of rules to different chains</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DEFAULTPOLICIES">Setting up default policies</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SETTINGUPUSER">Setting up user specified chains in the filter table</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INPUTCHAIN">INPUT chain</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#FORWARDCHAIN">FORWARD chain</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#OUTPUTCHAIN">OUTPUT chain</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#PREROUTINGCHAIN">PREROUTING chain of the nat table</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#STARTINGSNAT">Starting SNAT and the POSTROUTING chain</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN11772">What's next?</a></dt></dl></dd><dt>14. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#EXAMPLESCRIPTS">Example scripts</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXTSCRIPTSTRUCTURE">rc.firewall.txt script
structure</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#THESTRUCTURE">The structure</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXT">rc.firewall.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCDMZFIREWALLTXT">rc.DMZ.firewall.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCDHCPFIREWALLTXT">rc.DHCP.firewall.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCUTINFIREWALLTXT">rc.UTIN.firewall.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCTEST-IPTABLESTXT">rc.test-iptables.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFLUSH-IPTABLESTXT">rc.flush-iptables.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#LIMIT-MATCHTXT">Limit-match.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#PID-OWNERTXT">Pid-owner.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RECENT-MATCHTXT">Recent-match.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SID-OWNERTXT">Sid-owner.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TTL-INCTXT">Ttl-inc.txt</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPTSAVE-RULESET">Iptables-save ruleset</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN12445">What's next?</a></dt></dl></dd><dt>15. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#GUIS">Graphical User Interfaces for 
Iptables/netfilter</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#FWBUILDER">fwbuilder</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TURTLEFIREWALL">Turtle Firewall Project</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ISCS">Integrated Secure Communications System</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPMENU">IPMenu</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#EASYFWGENERATOR">Easy Firewall Generator</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#GUIS.WHATSNEXT">What's next?</a></dt></dl></dd><dt>16. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COMMERCIALPRODUCTS">Commercial products based on Linux, 
iptables and netfilter</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INGATE1200">Ingate Firewall 1200</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN12606">What's next?</a></dt></dl></dd><dt>A. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#DETAILEDEXPLANATIONS">Detailed explanations of special commands</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#LISTINGRULESET">Listing your active rule-set</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#UPDATINGTABLES">Updating and flushing your tables</a></dt></dl></dd><dt>B. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COMMONPROBLEMS">Common problems and questions</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MODULEPROBLEMS">Problems loading modules</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NEWNOTSYN">State NEW packets but no SYN bit set</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SYNACKANDNEW">SYN/ACK and NEW packets</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ISPWHOUSEASSIGNEDIP">Internet Service Providers who use assigned IP addresses</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#LETTINGDHCPREQUESTS">Letting DHCP requests through iptables</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MIRCDCC">mIRC DCC problems</a></dt></dl></dd><dt>C. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPTYPES">ICMP types</a></dt><dt>D. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPOPTIONS">TCP options</a></dt><dt>E. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#OTHERRESOURCES">Other resources and links</a></dt><dt>F. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ACKNOWLEDGEMENTS">Acknowledgments</a></dt><dt>G. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#HISTORY">History</a></dt><dt>H. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#GFDL">GNU Free Documentation License</a></dt><dd><dl><dt>0. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN13655">PREAMBLE</a></dt><dt>1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#APPLICABILITY">APPLICABILITY AND DEFINITIONS</a></dt><dt>2. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#VERBATIM">VERBATIM COPYING</a></dt><dt>3. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COPYING">COPYING IN QUANTITY</a></dt><dt>4. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MODIFICATIONS">MODIFICATIONS</a></dt><dt>5. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COMBININGDOCS">COMBINING DOCUMENTS</a></dt><dt>6. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COLLECTIONSOFDOCS">COLLECTIONS OF DOCUMENTS</a></dt><dt>7. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AGGREGATION">AGGREGATION WITH INDEPENDENT WORKS</a></dt><dt>8. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TRANSLATION">TRANSLATION</a></dt><dt>9. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TERMINATION">TERMINATION</a></dt><dt>10. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#FUTUREREVISIONS">FUTURE REVISIONS OF THIS LICENSE</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#HOWTOUSETHISLICENSE">How to use this License for your documents</a></dt></dl></dd><dt>I. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#GPL">GNU General Public License</a></dt><dd><dl><dt>0. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN13752">Preamble</a></dt><dt>1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#GPLTERMSANDCONDITIONS">TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</a></dt><dt>2. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#GPLHOWTOAPPLY">How to Apply These Terms to Your New Programs</a></dt></dl></dd><dt>J. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#EXAMPLECODE">Example scripts code-base</a></dt><dd><dl><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INCLUDERCFIREWALL">Example rc.firewall script</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INCLUDERCDMZFIREWALL">Example rc.DMZ.firewall script</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INCLUDERCUTINFIREWALL">Example rc.UTIN.firewall script</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INCLUDERCDHCPFIREWALL">Example rc.DHCP.firewall script</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INCLUDEFLUSHIPTABLES">Example rc.flush-iptables script</a></dt><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#INCLUDETESTTABLES">Example rc.test-iptables script</a></dt></dl></dd><dt><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#AEN13882">Index</a></dt></dl></div><div class="LOT"><dl class="LOT"><dt><b>List of Tables</b></dt><dt>2-1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.SCTPTYPES">SCTP Types</a></dt><dt>2-2. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLEERRORCAUSES">Error Causes</a></dt><dt>2-3. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLEINITPARAMETERS">INIT Variable Parameters</a></dt><dt>2-4. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLEINITACKPARAMETERS">INIT ACK Variable Parameters</a></dt><dt>6-1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLEDESTINATIONLOCALHOST">Destination local host (our own
machine)</a></dt><dt>6-2. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLESOURCELOCALHOST">Source local host (our own
machine)</a></dt><dt>6-3. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLEFORWARDEDPACKETS">Forwarded packets</a></dt><dt>7-1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.USERLANDSTATES">User-land states</a></dt><dt>7-2. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.INTERNALSTATES">Internal states</a></dt><dt>7-3. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.COMPLEXPROTOCOLS">Complex protocols support</a></dt><dt>9-1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TABLES">Tables</a></dt><dt>9-2. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.COMMANDS">Commands</a></dt><dt>9-3. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.OPTIONS">Options</a></dt><dt>10-1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.GENERICMATCHES">Generic matches</a></dt><dt>10-2. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TCPMATCHES">TCP matches</a></dt><dt>10-3. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.UDPMATCHES">UDP matches</a></dt><dt>10-4. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.ICMPMATCHES">ICMP matches</a></dt><dt>10-5. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.SCTPMATCHES">SCTP matches</a></dt><dt>10-6. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.ADDRTYPES">Address types</a></dt><dt>10-7. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.ADDRTYPEMATCH">Addrtype match options</a></dt><dt>10-8. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.AHMATCH">AH match options</a></dt><dt>10-9. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.ESPMATCH">ESP match options</a></dt><dt>10-10. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.COMMENTMATCH">Comment match options</a></dt><dt>10-11. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.CONNMARKMATCH">Connmark match options</a></dt><dt>10-12. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.CONNTRACKMATCH">Conntrack match options</a></dt><dt>10-13. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.DSCPMATCH">Dscp match options</a></dt><dt>10-14. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.ECNMATCH">Ecn match options</a></dt><dt>10-15. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ECNFIELDIP">ECN Field in IP</a></dt><dt>10-16. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.HASHLIMITMATCH">Hashlimit match options</a></dt><dt>10-17. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.HELPERMATCH">Helper match options</a></dt><dt>10-18. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.IPRANGEMATCH">IP range match options</a></dt><dt>10-19. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.LENGTHMATCH">Length match options</a></dt><dt>10-20. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.LIMITMATCH">Limit match options</a></dt><dt>10-21. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.MACMATCH">Mac match options</a></dt><dt>10-22. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.MARKMATCH">Mark match options</a></dt><dt>10-23. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.MULTIPORTMATCH">Multiport match options</a></dt><dt>10-24. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.OWNERMATCH">Owner match options</a></dt><dt>10-25. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.PKTTYPEMATCH">Packet type match options</a></dt><dt>10-26. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.REALMMATCH">Realm match options</a></dt><dt>10-27. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.RECENTMATCH">Recent match options</a></dt><dt>10-28. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.STATEMATCHES">State match options</a></dt><dt>10-29. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TCPMSSMATCH">Tcpmss match options</a></dt><dt>10-30. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TOSMATCH">Tos match options</a></dt><dt>10-31. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TTLMATCH">Ttl match options</a></dt><dt>11-1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.CLASSIFYTARGET">CLASSIFY target options</a></dt><dt>11-2. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.CLUSTERIPTARGET">CLUSTERIP target options</a></dt><dt>11-3. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.CONNMARKTARGET">CONNMARK target options</a></dt><dt>11-4. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.CONNSECMARKTARGET">CONNSECMARK target options</a></dt><dt>11-5. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.DNATTARGET">DNAT target options</a></dt><dt>11-6. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.DSCPTARGET">DSCP target options</a></dt><dt>11-7. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.ECNTARGET">ECN target options</a></dt><dt>11-8. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.LOGTARGET">LOG target options</a></dt><dt>11-9. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.MARKTARGET">MARK target options</a></dt><dt>11-10. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.MASQUERADETARGET">MASQUERADE target options</a></dt><dt>11-11. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.NETMAPTARGET">NETMAP target options</a></dt><dt>11-12. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.NFQUEUETARGET">NFQUEUE target options</a></dt><dt>11-13. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.REDIRECTTARGET">REDIRECT target options</a></dt><dt>11-14. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.REJECTTARGET">REJECT target options</a></dt><dt>11-15. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.SAMETARGET">SAME target options</a></dt><dt>11-16. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.SECMARKTARGET">SECMARK target options</a></dt><dt>11-17. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.SNATTARGET">SNAT target options</a></dt><dt>11-18. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TCPMSSTARGET">TCPMSS target options</a></dt><dt>11-19. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TOSTARGET">TOS target options</a></dt><dt>11-20. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TTLTARGET">TTL target options</a></dt><dt>11-21. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.ULOGTARGET">ULOG target options</a></dt><dt>C-1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.ICMPTYPES">ICMP types</a></dt><dt>D-1. <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TCPOPTIONS">TCP Options</a></dt></dl></div><div class="PREFACE"><hr><h1><a name="ABOUTTHEAUTHOR"></a>About the author</h1><p>The author of the iptables tutorial was born in... 
   </p><p>No, jokes aside. At age 8 I got my first computer for christmas present, a 
Commodore 64 with a C-1541 diskdrive, 8 needle printer and some games etc. It 
took me several days to even bother. My father managed to put it together and 
after 2 days he finally learned himself how to load a game and showed how to do 
it for myself. A life immersed in computers was born this day I guess. I played 
mostly games at this stage, but did venture into the C-64 basic programming 
language a couple of times on and off. After some years, I got my hands on an 
Amiga 500, which was mainly used for games and some school work and fiddling 
around. Amiga 1200 was next.
   </p><p>Back in 1993-94 My father was clearsighted enough to understand that Amiga was, 
unfortunately, not the way of the future. PC and i386 computers was. Despite 
my screams in vain he bought me a PC, 486 50MHz with 16 MB of ram, Compaq 
computer. This was actually one of the worst computer designs I have ever 
seen, everything was integrated, including speakers and CRT screen. I guess 
they where trying to mimic the Apple designs of the day, but failing miserably 
to do so. It should be noted though, that this was the computer that got me 
really into computers. I started coding for real, started using the Internet 
and actually installed Linux on this machine. 
   </p><p>I have for a long time been an avid Linux user and 
administrator. My Linux experience started in 1994 with a slackware 
installation from borrowed CD's. This first installation was mostly a trial 
installation. I had no previous experience and it took me quite some time to 
get modems running et cetera, and I kept running a dual boot system. The second 
installation, circa 1996, I had no media around so I winded up downloading the 
whole slackware A, AP, D and N disksets via FTP on a 28k8 modem. Since I 
realized I would never learn anything from using graphical interfaces, I went 
back to basics. Nothing but console, no X11 or graphics except for svgalib. In 
the end, I believe this has helped me a lot. I believe there is nothing to 
teach you how to use something as to actually forcing yourself to do it, as I 
did at this time. I had no choice but to learn. I continued running like this 
for close to 2 years. After this, I finally installed XFree86 from scratch. 
After an 24 hour compilation, I realized that I had totally misconfigured the 
compilation and had to restart the compilation from scratch. As a human, you 
are always bound to do errors. It simply happens and you better get used to it. 
Also, this kind of build process teaches you to be patient. Let things have 
its time and don't force it.
   </p><p>In 2000-2001 I was part of a small group of people who ran a newssite mainly 
focusing on Amiga related news, but also some Linux and general computer news. 
The site was called BoingWorld, located at www.boingworld.com (no long 
available unfortunately). The Linux 2.3 kernels where reaching their end of 
line and the 2.4 kernels where starting to pop up. At this point, I realized 
there was a half-new concept of firewalling inside of it. Sure I had run into 
ipfwadm and ipchains before and used it to some extent, but never truly gone 
heads first into it. I also realized there was embaerassingly little 
documentation and I felt it might be an interesting idea to write an iptables 
tutorial for boingworld. Said and done, I wrote the first 5-10 pages of what 
you are currently reading. Becoming a smashing hit, I continued to add material 
to the tutorial. The original pages are no longer anywhere to be found in this 
tutorial/documentation, but the concept lives on. 
   </p><p>I have worked several different companies during this time with Linux/network 
administration, writing documentation and course material, helped several 
hundred, if not thousand, people emailing questions regarding iptables and 
netfilter and general networking questions. I have attended two CERTconf's and 
held three presentations at the same conference, and also the Netfilter 
workshop 2003. It has been an hectic and sometimes very ungrateful job to 
maintain and update this work, but in the end I am very happy for it and this 
is something I am very proud of having done. At the time of writing this in end 
of 2006, the project has been close to dead for several years, and I regret 
this. I hope to change this in the coming years, and that a lot of people will 
find this work to be of future use, possibly adding to the family of documents 
with other interesting documentation that might be needed. 
   </p></div><div class="PREFACE"><hr><h1><a name="HOWTOREAD"></a>How to read</h1><p>This document could either be read as a reference or from start to end. It was 
originally written as a small introduction to iptables and to some extent 
netfilter, but this focus has changed over the years. It aims at being an as 
complete reference as possibly to iptables and netfilter and to at least give 
a basic and fast primer or repetition to the areas that you might need to 
understand. It should be noted that this document will not, nor will it be 
able to, deal with specific bugs inside or outside the scope of iptables and 
netfilter, nor does it really deal with how to get around bugs like this. 
   </p><p>If you find peculiar bugs or behaviors in iptables or any of the subcomponents, 
you should contact the Netfilter mailing lists and tell them about the problem 
and they can tell you if this is a real bug or if it has already been fixed.
There are security related bugs found in iptables and Netfilter, 
one or two do slip by once in a while, it's inevitable. These are properly 
shown on the front page of the <a href="http://www.netfilter.org/" target="_top">Netfilter 
main page</a>, and that is where you should go to get information on such 
topics.
   </p><p>The above also implies that the rule-sets available with this tutorial are
not written to deal with actual bugs inside Netfilter. The main goal of
them is to simply show how to set up rules in a nice simple fashion that
deals with all problems we may run into. For example, this tutorial will
not cover how we would close down the HTTP port for the simple reason that
Apache happens to be vulnerable in version 1.2.12 (This is covered really,
though not for that reason).
   </p><p>This document was written to give everyone a good and simple primer
at how to get started with iptables, but at the same time it was created
to be as complete as possible. It does not contain any targets or matches
that are in patch-o-matic for the simple reason that it would require too
much effort to keep such a list updated. If you need information about
the patch-o-matic updates, you should read the info that comes with it in
patch-o-matic as well as the other documentations available on the <a href="http://www.netfilter.org/" target="_top">Netfilter main page</a>.
   </p><p>If you have any suggestions on additions or if you think you find any problems 
around the area of iptables and netfilter not covered in this document feel 
free to contact me about this. I will be more than happy to take a look at it 
and possibly add what might be missing. 
   </p></div><div class="PREFACE"><hr><h1><a name="PREREQUISITES"></a>Prerequisites</h1><p>This document requires some previous knowledge about Linux/Unix, shell
scripting, as well as how to compile your own kernel, and some simple
knowledge about the kernel internals.
   </p><p>I have tried as much as possible to eradicate all prerequisites needed before
fully grasping this document, but to some extent it is simply impossible to not
need some previous knowledge.
   </p></div><div class="PREFACE"><hr><h1><a name="CONVENTIONSUSED"></a>Conventions used in this document</h1><p>The following conventions are used in this document when it comes to
commands, files and other specific information.
   </p><p></p><ul><li style="list-style-type: disc"><p>Long code excerpts and command-outputs are printed like shown below. This 
includes screendumps and larger examples taken from the console.
     </p><pre class="SCREEN">[blueflux@work1 neigh]$ ls
default  eth0  lo
[blueflux@work1 neigh]$
     </pre></li><li style="list-style-type: disc"><p>All commands and program names in the tutorial are shown in bold
typeface. This includes all the commands that you might type, or 
part of the command that you type.
     </p></li><li style="list-style-type: disc"><p>All system items such as hardware, and also kernel internals or abstract
system items such as the loopback interface are all shown in an
italic typeface.
     </p></li><li style="list-style-type: disc"><p>computer output is formatted in this way
in the text. Computer output could be summed up as all the output that the 
computer will give you on the console. 
     </p></li><li style="list-style-type: disc"><p>filenames and paths in the file-system are shown like 
<tt class="FILENAME">/usr/local/bin/iptables</tt>. 
     </p></li></ul></div><div class="CHAPTER"><hr><h1><a name="INTRODUCTION"></a>Chapter 1. Introduction</h1><div class="SECTION"><hr><h2 class="SECTION"><a name="WHYTHISDOCUMENT">Why this document was written</a></h2><p> Well, I found a big empty space in the HOWTO's out there lacking
in information about the iptables and Netfilter functions in the new Linux
2.4.x kernels. Among other things, I'm going to try to answer questions
that some might have about the new possibilities like state matching.  
Most of this will be illustrated with an example <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXT"><i>rc.firewall.txt</i></a> file that you 
can use in your <tt class="FILENAME">/etc/rc.d/</tt> scripts. Yes, this file was 
originally based upon the masquerading HOWTO for those of you who recognize 
it.
   </p><p> Also, there's a small script that I wrote just in case you screw
up as much as I did during the configuration available as <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFLUSH-IPTABLESTXT"><i>rc.flush-iptables.txt</i></a>.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="HOWITWAS">How it was written</a></h2><p>I originally wrote this as a very small tutorial for boingworld.com, which was 
an Amiga/Linux/General newssite that a small group of people, including me, 
ran a couple of years back. Due to the fantastic amount of readers and 
comments that I got from it, I continued to write on it. The original version 
was approximately 10-15 A4 pages in printed version and has since been growing 
slowly but steadily. A huge amount of people has helped me out, spellchecking, 
bug corrections, etc. At the time of writing this, the 
https://www.frozentux.net/iptables-tutorial/ site has had over 600.000 unique hits 
alone. 
   </p><p>This document was written to guide you through the setup process step by step 
and hopefully help you to understand some more about the iptables package. I 
have based most of the stuff here on the example rc.firewall file, since I 
found that example to be a good way to learn how to use iptables. I 
decided to just follow the basic chain structure and from there walk
through each and one of the chains traversed and explain how the script works. 
That way the tutorial is a little bit harder to follow, though this way is 
more logical. Whenever you find something that's hard to understand, just come 
back to this tutorial.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="TERMSUSED">Terms used in this document</a></h2><p>This document contains a few terms that may need more detailed 
explanations before you read them. This section will try to cover the most 
obvious ones and how I have chosen to use them within this document.
   </p><p>Connection - This is
generally referred to in this document as a series of packets relating to each
other. These packets refer to each other as an established kind of connection.
A connection is in another word a series of exchanged packets. In TCP, this
mainly means establishing a connection via the 3-way handshake, and then this
is considered a connection until the release handshake.
   </p><p>DNAT - Destination Network
Address Translation. DNAT refers to the technique of
translating the Destination IP address of a packet,
or to change it simply put. This is used together with
SNAT to allow several hosts to share a single
Internet routable IP address, and to still provide
Server Services. This is normally done by assigning different ports with an
Internet routable IP address, and then tell the Linux
router where to send the traffic.
   </p><p>IPSEC - Internet Protocol
Security is a protocol used to encrypt IPv4 packets
and sending them securely over the Internet. For more information on
IPSEC, look in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#OTHERRESOURCES"><i>Other resources and links</i></a> appendix for other resources on the
topic.
   </p><p>Kernel space - This is
more or less the opposite of User space. This implies
the actions that take place within the kernel, and not outside of the kernel.
   </p><p>Packet - A singular unit sent
over a network, containing a header and a data portion. For example, an
IP packet or an TCP packet.
In Request For Comments
(RFC's) a packet isn't so generalized, instead
IP packets are called datagrams, while
TCP packets are called segments. I have chosen to
call pretty much everything packets in this document for simplicity.
   </p><p>QoS - Quality of Service is a way
of specifying how a packet should be handled and what kind of service quality
it should receive while sending it. For more information on this topic, take a
look in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPIPREPETITION"><i>TCP/IP repetition</i></a> chapter as well as the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#OTHERRESOURCES"><i>Other resources and links</i></a> appendix for
external resources on the subject.
   </p><p>Segment - A
TCP segment is pretty much the same as an packet, but
a formalized word for a TCP packet. 
   </p><p>Stream - This term refers to a
connection that sends and receives packets that are related to each other in
some fashion. Basically, I have used this term for any kind of connection that
sends two or more packets in both directions. In TCP
this may mean a connection that sends a SYN and then
replies with an SYN/ACK, but it may also mean a
connection that sends a SYN and then replies with an
ICMP Host unreachable. In other words, I use this
term very loosely.
   </p><p>SNAT - Source
Network Address Translation. This refers to the techniques used
to translate one source address to another in a packet. This is used to make
it possible for several hosts to share a single Internet routable
IP address, since there is currently a shortage of
available IP addresses in
IPv4 (IPv6 will solve
this).
   </p><p> 
State - This term refers to
which state the packet is in, either according to <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC793"><i>RFC 793 - Transmission Control Protocol</i></a> or according to userside states used in
Netfilter/iptables. Note that the used states
internally, and externally, do not follow the RFC 793

specification fully. The main reason is that
Netfilter has to make several assumptions about the
connections and packets.
   </p><p>User space - With this
term I mean everything and anything that takes place outside the kernel. For
example, invoking iptables -h takes place outside the
kernel, while iptables -A FORWARD -p tcp -j ACCEPT takes
place (partially) within the kernel, since a new rule is added to the
ruleset.
   </p><p>Userland - See User space.
   </p><p>VPN - Virtual Private Network is
a technique used to create virtually private networks over non-private
networks, such as the Internet. IPSEC is one
technique used to create VPN connections.
OpenVPN is another.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="AEN167">What's next?</a></h2><p>This chapter has given some small insight into why this document was written
and how it was written. It also explained some common terms used throughout
the document.
   </p><p>The next chapter will bring up a rather lengthy introduction and repetition to
TCP/IP. Basically this means the IP protocol and some of its sub-protocols
that are commonly used with iptables and netfilter. These are TCP, UDP, ICMP
and SCTP. SCTP is a rather new standard in comparison to the other protocols,
hence quite a lot of space and time has gone into describing this protocol for
all of those who are still not quite familiar with it. The next chapter will
also discuss some basic and more advanced routing techniques used today.
   </p></div></div><div class="CHAPTER"><hr><h1><a name="TCPIPREPETITION"></a>Chapter 2. TCP/IP repetition</h1><p>Iptables is an extremely knowledge intensive tool. This means that iptables 
takes quite a bit of knowledge to be able to use iptables to it's full extent. 
Among other things, you must have a very good understanding of the
TCP/IP protocol.    
    </p><p>This chapter aims at explaining the pure "must understands" of
TCP/IP before you can go on and work with iptables.
Among the things we will go through are the IP,
TCP, UDP and
ICMP protocols and their headers, and general usages
of each of these protocols and how they correlate to each other. Iptables
works inside Internet and Transport layers, and because of that, this chapter
will focus mainly on those layers as well.
    </p><p>Iptables is also able to work on higher layers, such as the Application layer.
However, it was not built for this task, and should not be used for that kind of
usage. I will explain more about this in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPFILTERING"><i>IP filtering introduction</i></a> chapter.
    </p><div class="SECTION"><hr><h2 class="SECTION"><a name="TCPIPLAYERS">TCP/IP Layers</a></h2><p>TCP/IP is, as already stated, multi-layered. This
means that we have one functionality running at one depth, and another one at
another level, etcetera. The reason that we have all of these layers is
actually very simple.
      </p><p>The biggest reason is that the whole architecture is very extensible. We can
add new functionality to the application layers, for example, without having to
reimplement the whole TCP/IP stack code, or to
include a complete TCP/IP stack into the actual
application. Just the same way as we don't need to rewrite every single
program, every time that we make a new network interface card. Each layer
should need to know as little as possible about each other, to keep them
separated.
      </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>When we are talking about the programming code of
TCP/IP which resides inside the kernel, we are often
talking about the TCP/IP stack. The
TCP/IP stack simply means all of the sublayers used,
from the Network access layer and all the way up to the Application layer.
        </p></td></tr></tbody></table></div><p>There are two basic architectures to follow when talking about layers. One of
them is the OSI (Open Systems
Interconnect) Reference Model and consists of 7 layers. We will
only look at it superficially here since we are more interested in the
TCP/IP layers. However, from an historical point,
this is interesting to know about, especially if you are working with lots of
different types of networks. The layers are as follows in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#OSIREFERENCE">OSI Reference Model</a> list.
      </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>There is some discussion as to which of these reference models is mostly used, 
but it seems that the OSI reference model still is
the prevalent reference model. This might also depend on where you live,
however, in most US and EU countries it seems as you can default to
OSI reference model while speaking to technicians and
salespeople. 
        </p><p>However, throughout the rest of this document, we will mainly refer to the 
TCP/IP reference model, unless otherwise noted.
        </p></td></tr></tbody></table></div><p></p><ol type="1"><li><p>            Application layer
          </p></li><li><p>            Presentation layer
          </p></li><li><p>            Session layer
          </p></li><li><p>            Transport layer
          </p></li><li><p>            Network layer
          </p></li><li><p>            Data Link layer
          </p></li><li><p>            Physical layer
          </p></li></ol><p>A packet that is sent by us, goes from the top and to the bottom of this list, 
each layer adding its own set of <span class="emphasis"><i class="EMPHASIS">headers</i></span> to the packet in 
what we call the encapsulation phase. When the packet finally reaches it's 
destination the packet goes backwards through the list and the headers are 
stripped out of the packet, one by one, each header giving the destination host 
all of the needed information for the packet data to finally reach the 
application or program that it was destined for.
      </p><p>The second and more interesting layering standard that we are more interested in
is the TCP/IP protocol architecture, as shown in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPIPLAYERS.LIST">TCP/IP architecture</a> list. There is no 
universal agreement among people on just how many layers there are in the 
TCP/IP architecture. However, it is generally considered that there are 3 
through 5 layers available, and in most pictures and explanations, there will 
be 4 layers discussed. We will, for simplicities sake, only consider those 
four layers that are generally discussed.
      </p><p></p><ol type="1"><li><p>            Application layer
          </p></li><li><p>            Transport layer
          </p></li><li><p>            Internet layer
          </p></li><li><p>            Network Access layer
          </p></li></ol><p>As you can see, the architecture of the TCP/IP
protocol set is very much like the OSI Reference
Model, but yet not. Just the same as with the OSI
Reference Model, we add and subtract headers for each layer that we enter or
leave.
      </p><p>For example, lets use one of the most common analogies to modern computer 
networking, the snail-mail letter. Everything is done in steps, just as 
is everything in TCP/IP.
      </p><p>You want to send a letter to someone asking how they are, and what they are
doing. To do this, you must first create the data, or questions. The actual 
data would be located inside the Application layer.
      </p><p>After this we would put the data written on a sheet of paper inside an envelope 
and write on it to whom the letter is destined for within a specific company or 
household. Perhaps something like the example below:
      </p>Attn: John Doe
      <p>This is equivalent to the the Transport layer, as it
is known in TCP/IP. In the Transport
layer, if we were dealing with TCP, this
would have been equivalent to some port (e.g., port 25).
      </p><p>At this point we write the address on the envelope of the recipient, such as 
this:
      </p>V. Andersgardsgatan 2
41715 Gothenburg
      <p>This would in the analogy be the same as the Internet
layer. The internet layer contains
information telling us where to reach the recipient, or host, in a
TCP/IP network. Just the same way as the recipient on
an envelope. This would be the equivalent of the IP address in other words
(e.g., IP 192.168.0.4).
      </p><p>The final step is to put the whole letter in a postbox. Doing this would
approximately equal to putting a packet into the Network Access
Layer. The network access layer contains
the functions and routines for accessing the actual physical network that the
packet should be transported over.
      </p><p>When the receiver finally receives the letter, he will open the whole letter 
from the envelope and address etc (decapsulate it). The letter he receives may 
either require a reply or not. In either case, the letter may be replied upon
by the receiver, by reversing the receiver and transmitter addresses on the
original letter he received, so that receiver becomes transmitter, and
transmitter becomes receiver.
      </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>It is very important to understand that iptables was and is specifically built 
to work on the headers of the Internet and the
Transport layers. It is possible to do some very
basic filtering with iptables in the Application and
Network access layers as well, but it was not
designed for this, nor is it very suitable for those purposes. 
        </p><p>For example, if we use a string match and match for a specific string inside
the packet, lets say get /index.html. Will that work?
Normally, yes. However, if the packet size is very small, it will not. The
reason is that iptables is built to work on a <span class="emphasis"><i class="EMPHASIS">per packet</i></span>
basis, which means that if the string is split into several separate packets,
iptables will not see that whole string. For this reason, you are much, much
better off using a proxy of
some sort for filtering in
the application layer. We will discuss these problems in more detail later on
in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPFILTERING"><i>IP filtering introduction</i></a>.
        </p></td></tr></tbody></table></div><p>As iptables and netfilter mainly operate in the
Internet and Transport
layers, that is the layers that we will put our main focus in, in the upcoming
sections of this chapter. Under the Internet layer, we will almost exclusively
see the IP protocol. There are a few additions to
this, such as, for example, the
GRE 
protocol, but they are very rare on the internet. Also, iptables is (as the
name implies) not focused around these protocols very well either. Because of
all these factors we will mainly focus around the IP
protocol of  the Internet layer, and
TCP, UDP and
ICMP of the Transport layer.
      </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>The ICMP protocol is actually sort of a mix between
the two layers. It runs in the Internet layer, but it
has the exact same headers as the IP protocol, but
also a few extra headers, and then directly inside that encapsulation, the
data. We will discuss this in more detail further on, in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPCHARACTERISTICS"><i>ICMP characteristics</i></a>.
        </p></td></tr></tbody></table></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="IPCHARACTERISTICS">IP characteristics</a></h2><p>The IP protocol resides in the
Internet layer, as we have already said. The
IP
protocol is the protocol in the TCP/IP stack that is responsible for letting
your machine, routers, switches and etcetera, know where a specific packet is
going. This protocol is the very heart of the whole
TCP/IP stack, and makes up
the very foundation of everything in the Internet.
      </p><p>The IP protocol encapsulates the
Transport layer packet with information about which
Transport layer protocol it came from, what host it
is going to, and where it came from, and a little bit of other useful
information. All of this is, of course, extremely precisely standardized, down
to every single bit. The same applies to every single protocol that we will
discuss in this chapter.
      </p><p>The IP protocol has a couple of basic functionalities
that it must be able to handle. It must be able to define the datagram, which
is the next building block created by the transport layer (this may in other
words be TCP, UDP or
ICMP for example). The IP
protocol also defines the Internet addressing system that we use today. This
means that the IP protocol is what defines how to
reach between hosts, and this also affects how we are able to route packets,
of course. The addresses we are talking about are what we generally call an
IP address. Usually when we talk about
IP addresses, we talk about dotted quad numbers
(e.g., <span class="emphasis"><i class="EMPHASIS">127.0.0.1</i></span>). This is mostly to make the
IP addresses more readable for the human eye, since
the IP address is actually just a 32 bit field of 1's
and 0's (<span class="emphasis"><i class="EMPHASIS">127.0.0.1</i></span> would hence be read as
<span class="emphasis"><i class="EMPHASIS">01111111000000000000000000000001</i></span> within the actual
IP header).
      </p><p>The IP protocol has even more magic it must perform
up it's sleeve. It must also be able to decapsulate and encapsulate the
IP datagram (IP data) and
send or receive the datagram from either the Network access
layer, or the transport layer. This may
seem obvious, but sometimes it is not. On top of all this, it  has two big
functions it must perform as well, that will be of quite interest for the
firewalling and routing community. The IP protocol is
responsible for routing packets from one host to another, as well as packets
that we may receive from one host destined for another. Most of the time on
single network access host, this is a very simple process. You have two
different options, either the packet is destined for our locally attached
network, or possibly through a default gateway. but once you start working
with firewalls or security policies together with multiple network interfaces
and different routes, it may cause quite some headache for many network
administrators. The last of the responsibilities for the
IP protocol is that it must fragment and reassemble
any datagram that has previously been fragmented, or that needs to be
fragmented to fit in to the packetsize of this specific network hardware
topology that we are connected to. If these packet fragments are sufficiently
small, they may cause a horribly annoying headache for firewall administrators
as well. The problem is, that once they are fragmented to small enough chunks,
we will start having problems to read even the headers of the packet, not to
mention the actual data.
      </p><div class="TIP"><p></p><table class="TIP" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/tip.gif" hspace="5" alt="Tip"></td><td align="LEFT" valign="TOP"><p>As of Linux kernel 2.4 series, and iptables, this should no longer be a problem
for most linux firewalls. The connection tracking system used by iptables for
state matching and NAT'ing etc must be able to read
the packet defragmented. Because of this, conntrack automatically defragments
all packets before they reach the netfilter/iptables structure in the kernel.
        </p></td></tr></tbody></table></div><p>The IP protocol is also a connectionless protocol,
which in turn means that IP does not "negotiate" a
connection. a connection-oriented protocol on the other hand negotiates a
connection (called a <span class="emphasis"><i class="EMPHASIS">handshake</i></span>)
 and then when all data has
been sent, tears it down. TCP is an example of this
kind of protocol, however, it is implemented on top of the
IP protocol. The reason for not being
connection-oriented
 just yet are
several, but among others, a handshake is not required at this time yet since
there are other protocols that this would add an unnecessarily high overhead
to, and that is made up in such a way that if we don't get a reply, we know
the packet was lost somewhere in transit anyways, and resend the original
request. As you can see, sending the request and then waiting for a specified
amount of time for the reply in this case, is much preferred over first
sending one packet to say that we want to open a connection, then receive a
packet letting us know it was opened, and finally acknowledge that we know
that the whole connection is actually open, and <span class="emphasis"><i class="EMPHASIS">then</i></span>
actually send the request, and after that send another packet to tear the
connection down and wait for another reply.
      </p><p>IP is also known as an
<span class="emphasis"><i class="EMPHASIS">unreliable protocol</i></span>,  or simply put it does not know if a packet was
received or not. It simply receives a packet from the transport layer and does
its thing, and then passes it on to the network access
layer, and then nothing more to it. It may receive a return
packet, which traverses from network access layer to the
IP protocol which  does it's thing again, and then
passes it on upwards to the Transport layer. However,
it doesn't care if it gets a reply packet, or if the packet was received at
the other end. Same thing applies for the unreliability of
IP as for the connectionless-ness, since
unreliability would require adding an extra reply packet to each packet that
is sent. For example, let us consider a DNS lookup.
As it is, we send a DNS
 request for servername.com. If
we never receive a reply, we know something went wrong and re-request the
lookup, but during normal use we would send out one request, and get one reply
back. Adding reliability to this protocol would mean that the request would
require two packets (one request, and one confirmation that the packet was
received) and then two packets for the reply (one reply, and one reply to
acknowledge the reply was received). In other words, we just doubled the
amount of packets needed to send, and almost doubled the amount of data needed
to be transmitted.
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="IPHEADERS">IP headers</a></h2><p>The IP packet contains several different parts in the header as you have
understood from the previous introduction to the IP protocol. The whole header 
is meticuluously divided into different parts, and each part of the header is
allocated as small of a piece as possible to do it's work, just to give the
protocol as little overhead as possible. You will see the exact configuration of
the IP headers in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPHEADERS"><i>IP headers</i></a> image.
      </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>Understand that the explanations of the different headers are very brief and 
that we will only discuss the absolute basics of them. For each type of header 
that we discuss, we will also list the proper RFC's
that you should read for further understanding and technical explanations of
the protocol in question. As a sidenote to this note,
RFC stands for Request For
Comments, but these days, they have a totally different meaning
to the Internet community. They are what defines and standardises the whole
Internet, compared to what they were when the researchers started writing
RFC's to each other. Back then, they were simply
requests for comments and a way of asking other researchers about their
opinions.
        </p></td></tr></tbody></table></div><p>The IP protocol is mainly described in <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC791"><i>RFC 791 - Internet Protocol</i></a>. However, this
RFC is also updated by <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC1349"><i>RFC 1349 - Type of Service in the Internet Protocol 
Suite</i></a>, which was obsoleted by <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2474"><i>RFC 2474 - Definition of the Differentiated Services Field 
(DS Field) in the IPv4 and IPv6 Headers</i></a>, and which was updated by
<a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC3168"><i>RFC 3168 - The Addition of Explicit Congestion Notification 
(ECN) to IP</i></a> and <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC3260"><i>RFC 3260 - New Terminology and Clarifications for 
Diffserv</i></a>.
      </p><div class="TIP"><p></p><table class="TIP" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/tip.gif" hspace="5" alt="Tip"></td><td align="LEFT" valign="TOP"><p>As you can see, all of these standards can get a little bit hard to follow at 
times. One tip for finding the different RFC's that
are related to each other is to use the search functions available at <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFCEDITOR.ORG"><i>RFC-editor.org</i></a>. In the case of
IP, consider that the RFC
791 is the basic RFC, and all of the
other are simply updates and changes to that standard. We will discuss these
more in detail when we get to the specific headers that are changed by these
newer RFC's.
        </p><p>One thing to remember is, that sometimes, an RFC can
be obsoleted (not used at all). Normally this means that the
RFC has been so drastically updated and that it is
better to simply replace the whole thing. It may also become obsolete for
other reasons as well. When an RFC becomes obsoleted,
a field is added to the original RFC that points to
the new RFC instead.
        </p></td></tr></tbody></table></div><p>        </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/ip-headers.jpg"></p></div>
      <p></p><p>Version

 - bits 0-3. This is a
version number of the IP protocol in binary.
IPv4 iscalled 0100, while
IPv6 is called 0110. This field is generally not used
for filtering very much. The version described in RFC
791 is IPv4.
      </p><p>IHL
 (Internet Header Length) - bits
4-7. This field tells us how long the IP 
header is in 32 bit words. As you can see, we have split the header up in this 
way (32 bits per line) in the image as well. Since the
Options field is of 
optional length, we can never be absolutely sure of how long the whole header 
is, without this field. The minimum length of this of the header is 5 words.
      </p><p>Type   of Service, DSCP,

 ECN

 - bits 8-15. This is one of the
most complex areas of the IP header for the simple
reason that it has been updated 3 times. It has always had the same basic
usage, but the implementation has changed several times. First the field was
called the Type of Service field. Bit [0-2] of the
field was called the Precedence field. Bit [3] was
Normal/Low delay, Bit [4] was
Normal/High throughput, Bit [5] was
Normal/High reliability and bit [6-7] was reserved
for future usage. This is still used in a lot of places with older hardware,
and it still causes some problems for the Internet. Among other things, bit
[6-7] are specified to be set to 0. In the ECN
updates (RFC 3168, we start using these reserved bits
and hence set other values than 0 to these bits. But a lot of old firewalls
and routers have built in checks looking if these bits are set to 1, and if
the packets do, the packet is discarded. Today, this is clearly a violation of
RFC's, but there is not much you can do about it,
except to complain. 
      </p><p>The 
second iteration of this field was when the field was changed into the
DS field as defined in RFC

2474. DS stands for Differentiated
Services. According to this standard bits [0-5] is
Differentiated Services Code Point
(DSCP) and the remaining two bits [6-7] are still
unused. The DSCP field is pretty much used the same
as in how the ToS field was used before, to mark what
kind of service this packet should be treated like if the router in question
makes any  difference between them. One big change is that a device must
ignore the unused bits to be fully RFC 2474
compliant, which means we get rid of the previous hassle as explained
previously, as long as the device creators follow this
RFC.
      </p><p>The third, and almost last, change of the ToS field
was when the two, previously, unused bits were used for
ECN (Explicit Congestion
Notification),  as defined in RFC
3168.  ECN is used
to let the end nodes know about a routers congestion, before it actually
starts dropping packets, so that the end nodes will be able to slow down their
data transmissions, before the router actually needs to start dropping data.
Previously, dropping data was the only way that a router had to tell that it
was overloaded, and the end nodes had to do a slow restart for each dropped
packet, and then slowly gather up speed again. The two bits are named
ECT (ECN Capable Transport)
and CE (Congestion
Experienced) codepoints. 
      </p><p>The final iteration of the whole mess is RFC 3260

which gives some new terminology and clarifications to the usage of the
DiffServ
 system. It doesn't involve
too many new updates or changes, except in the terminology. The
RFC is also used to clarify some points that were
discussed between developers. 
      </p><p>Total   Length - bits 16 - 31. This field tells us how
large the packet is in octets, including headers and everything. The maximum
size is 65535 octets, or bytes, for a single packet. The minimum packet size
is 576 bytes, not caring if the packet arrives in fragments or not. It is only
recommended to send larger packets than this limit if it can be guaranteed
that the host can receive it, according to RFC 791. However, these
days most networks runs at 1500 byte packet size. This includes almost all
ethernet connections, and most Internet connections.
      </p><p>Identification
  - bits
32 - 46. This field is used in aiding the reassembly of fragmented
 packets.
      </p><p>Flags   - bits 47 - 49.
This field contains a few miscellaneous flags pertaining to fragmentation. The
first bit is reserved, but still not used, and must be set to 0. The second
bit is set to 0 if the packet may be fragmented, and to 1 if it may not be
fragmented. The third and last bit can be set to 0 if this was the last
fragment, and 1 if there are more fragments of this same packet.
      </p><p>Fragment   Offset - bits 50 - 63. The fragment offset field
shows where in the datagram that this packet belongs. The fragments are
calculated in 64 bits, and the first fragment has offset zero.
      </p><p>Time   to live - bits 64 - 72. The
TTL field tells us how long the packet may 
live, or rather how many "hops" it may take over the Internet. Every process 
that touches the packet must remove one point from the
TTL field, and if the TTL
reaches zero, the whole packet must be destroyed and discarded. This is
basically used as a safety trigger so that a packet may not end up in an
uncontrollable loop between one or several hosts. Upon destruction the host
should return an ICMP Time exceeded message to the
sender.
      </p><p>Protocol   - bits 73 -
80. In this field the protocol of the next level layer is indicated. For
example, this may be TCP,
UDP or ICMP among others.
All of these numbers are defined by the <span class="emphasis"><i class="EMPHASIS">Internet Assigned Numbers
Authority</i></span>. All numbers can befound on their homepage <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IANA.ORG"><i>Internet Assigned 
Numbers Authority</i></a>.
      </p><p>Header   checksum - bits 81 - 96. This is a checksum of
the IP header of the packet.This field is recomputed
at every host that changes the header, which means pretty much every host that
the packet traverses over, since they most often change the packets
TTL field or some other.
      </p><p>Source   address - bits 97 - 128. This is the source
address field. It is generally written in 4 octets, translated from binary to
decimal numbers with dots in between. That is for example, 127.0.0.1. The
field lets the receiver know where the packet came from.
      </p><p>Destination   address - bits 129 - 160. The destination
address field contains the destination address, and what a surprise, it is
formatted the same way as the source address.
      </p><p>Options

 - bits 161 - 192 &lt;&gt;
478. The options field is not optional, as it may sound. Actually, this is one
of the more complex fields in the IP header. The
options field contains different optional settings within the header, such as
Internet timestamps,
SACK or
record route route options. Since these options are
all optional, the Options field can have different lengths, and hence the
whole IP header. However, since we always calculate
the IP header in 32 bit words, we must always end the
header on an even number, that is the multiple of 32. The field may contain
zero or more options.
      </p><p>The options field starts with a brief 8 bit field that lets us know which 
options are used in the packet. The options are all listed in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLE.TCPOPTIONS"><i>TCP Options</i></a> table, in 
the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPOPTIONS"><i>TCP options</i></a> appendix.
For more information about the different options, read the proper
RFC's. For an updated listing of the
IP options, check at <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IANA.ORG"><i>Internet Assigned 
Numbers Authority</i></a>.
      </p><p>Padding   - bits
variable. This is a padding field that is used to make the header end at an
even 32 bit boundary. The field must always be set to zeroes straight through
to the end.
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="TCPCHARACTERISTICS">TCP characteristics</a></h2><p>The TCP protocol resides on top of the
IP protocol. It is a stateful protocol and has
built-in functions to see that the data was received properly by the other end
host. The main goals of the TCP protocol is to see
that data is reliably received and sent, that the data is transported between
the Internet layer and
Application layer correctly, and that the packet data
reaches the proper program in the application layer, and that the data reaches
the program in the right order. All of this is possible through the
TCP headers of the packet.
      </p><p>The TCP protocol looks at data as an continuous data
stream with a start and a stop signal. The signal that indicates that a new
stream is waiting to be opened is called a SYN
three-way handshake in TCP, and consists of one
packet sent with the SYN bit set. The other end then
either answers with SYN/ACK or
SYN/RST to let the client know if the connection was
accepted or denied, respectively. If the client receives an
SYN/ACK packet, it once again replies, this time with
an ACK packet. At this point, the whole connection is
established and data can be sent. During this initial handshake, all of the
specific options that will be used throughout the rest of the
TCP connection is also negotiated, such as
ECN, SACK, etcetera.
      </p><p>While the datastream is alive, we have further mechanisms to see that the
packets are actually received properly by the other end. This is the
reliability part of TCP. This is done in a simple
way, using a Sequence number in the packet. Every
time we send a packet, we give a new value to the Sequence
number, and when the other end receives the packet, it sends an
ACK packet back to the data sender. The
ACK packet acknowledges that the packet was received
properly. The sequence number also sees to it that
the packet is inserted into the data stream in a good order.
      </p><p>Once the connection is closed, this is done by sending a
FIN

 packet from either end-point. The other end then
responds by sending a FIN/ACK

 packet. The
FIN sending end can then no longer send any data, but
the other end-point can still finish sending data. Once the second end-point
wishes to close the connection totally, it sends a
FIN packet back to the originally closing end-point,
and the other end-point replies with a FIN/ACK
packet. Once this whole procedure is done, the connection is torn down
properly.
      </p><p>As you will also later see, the TCP headers contain a
checksum as well. The checksum consists of a simple hash of the packet. With
this hash, we can with rather high accuracy see if a packet has been corrupted
in any way during transit between the hosts. 
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="TCPHEADERS">TCP headers</a></h2><p>The TCP headers must be able to perform all of the
tasks above. We have already explained when and where some of the headers are
used, but there are still other areas that we haven't touched very deeply at.
Below you see an image of the complete set of TCP
headers. It is formatted in 32 bit words per row, as you can see. 
      </p><p>        </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/tcp-headers.jpg"></p></div>
      <p></p><p>Source   port - bit 0 - 15. This is the source port of the
packet. The source port was originally bound directly to a process on the
sending system. Today, we use a hash between the IP
addresses, and both the destination and
source ports to achieve this uniqueness that we can
bind to a single application or program.
      </p><p>Destination 
 port - bit 16 - 31.
This is the destination port of the
TCP packet. Just as with the source
port, this was originally bound directly to a process on the
receiving system. Today, a hash is used instead, which allows us to have more
open connections at the same time. When a packet is received, the
destination and source ports
are reversed in the reply back to the originally sending host, so that
destination port is now source
port, and source port is
destination port.
      </p><p>Sequence Number - bit 32 - 63. The sequence number field is used to set a
number on each TCP packet so that the
TCP stream 
 can be properly
sequenced (e.g., the packets winds up in the correct order). The
Sequence number is then returned in the
ACK field to ackonowledge that the packet was
properly received.
      </p><p>Acknowledgment 
 Number - bit
64 - 95. This field is used when we acknowledge a specific packet a host has
received. For example, we receive a packet with one Sequence
number set, and if everything is okey with the packet, we reply
with an ACK packet with the
Acknowledgment number set to the same as the original
Sequence number.
      </p><p>Data 
 Offset - bit 96 - 99.
This field indicates how long the TCP header is, and
where the Data part of the packet actually starts. It is set with 4 bits, and
measures the TCP header in 32 bit words. The header
should always end at an even 32 bit boundary, even with different options set.
This is possible thanks to the Padding field at the
very end of the TCP header.
      </p><p>Reserved 
 - bit 100 - 103. These bits
are reserved for future usage. In RFC 793
 this
also included the CWR and
ECE bits. According to RFC
793 bit 100-105 (i.e., this and the CWR
and ECE fields) must be set to zero to be fully
compliant. Later on, when we started introducing ECN,
this caused a lot of troubles because a lot of Internet appliances such as
firewalls and routers dropped packets with them set. This is still true as of
writing this. 
      </p><p>CWR 
 - bit 104. This bit was added in
RFC 3268  and is used by
ECN. CWR stands for
Congestion Window Reduced, and is used by the data
sending part to inform the receiving part that the congestion window has been
reduced. When the congestion window is reduced, we send less data per
timeunit, to be able to cope with the total network load.
      </p><p>ECE 
 - bit 105. This bit was also
added with RFC 3268  and is used by
ECN. ECE stands for
ECN Echo. It is used by the
TCP/IP stack on the receiver host to  let the sending
host know that it has received an CE packet. The same
thing applies here, as for the CWR bit, it was
originally a part of the reserved field and because of this, some networking
appliances will simply drop the packet if these fields contain anything else
than zeroes. This is actually still true for a lot of appliances
unfortunately. 
      </p><p>URG 
 - bit 106. This field tells us
if we should use the Urgent Pointer field or not. If
set to 0, do not use Urgent Pointer, if set to 1, do
use Urgent pointer.
      </p><p>ACK 
 - bit 107. This bit is set to a
packet to indicate that this is in reply to another packet that we received,
and that contained data. An Acknowledgment packet is always sent to indicate
that we have actually received a packet, and that it contained no errors. If
this bit is set, the original data sender will check the Acknowledgment Number
to see which packet is actually acknowledged, and then dump it from the
buffers.
      </p><p>PSH 
 - bit 108. The PUSH

 flag is used to tell the
TCP protocol on any intermediate hosts to send the
data on to the actual user, including the TCP
implementation on the receiving host. This will push all data through,
unregardless of where or how much of the TCP Window
that has been pushed through yet. 
      </p><p>RST 
 - bit 109. The
RESET flag is set to tell the other end to tear down
the TCP connection. This is done in a couple of
different scenarios, the main reasons being that the connection has crashed
for some reason, if the connection does not exist, or if the packet is wrong
in some way.
      </p><p>SYN 
 - bit 110. The
SYN (or Synchronize sequence
numbers) is used during the initial establishment of a
connection. It is set in two instances of the connection, the initial packet
that opens the connection, and the reply SYN/ACK
packet. It should never be used outside of those instances.
      </p><p>FIN 
 - bit 111. The
FIN bit indicates that the host that sent the
FIN bit has no more data to send. When the other end
sees the FIN bit, it will reply with a
FIN/ACK. Once this is done, the host that originally
sent the FIN bit can no longer send any data.
However, the other end can continue to send data until it is finished, and
will then send a FIN packet back, and wait for the
final FIN/ACK, after which the connection is sent to
a CLOSED state.
      </p><p>Window - bit 112 - 127. The Window field is used by
the receiving host to tell the sender how much data the receiver permits at
the moment. This is done by sending an ACK back,
which contains the Sequence number that we want to
acknowledge, and the Window field then contains the
maximum accepted sequence 
 numbers that the sending host
can use before he receives the next ACK packet. The
next ACK packet will update accepted Window which the
sender may use.
      </p><p>Checksum 
 - bit 128 - 143. This field
contains the checksum of the whole
TCP header. It is a one's complement of the one's
complement sum of each 16 bit word in the header. If the header does not end
on a 16 bit boundary, the additional bits are set to zero. While the
checksum is calculated, the
checksum field is set to zero. The
checksum also covers a 96 bit pseudoheader containing
the Destination-,
Source-address, protocol,
and TCP length. This is for extra security.
      </p><p>Urgent 
 Pointer - bit 144 -
159. This is a pointer that points to the end of the data which is considered
urgent. If the connection has important data that should be processed as soon
as possible by the receiving end, the sender can set the
URG 
 flag and set the Urgent pointer
to indicate where the urgent data ends.
      </p><p>Options 
 - bit 160 - **. The
Options field is a variable length field and contains
optional headers that we may want to use. Basically, this field contains 3
subfields at all times. An initial field tells us the length of the
Options field, a second field tells us which options
are used, and then we have the actual options. A complete listing of all the
TCP Options can be found in <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TCPOPTIONS"><i>TCP options</i></a>.
      </p><p>Padding 
 - bit **. The
padding field pads the TCP
header until the whole header ends at a 32-bit boundary. This ensures that the
data part of the packet begins on a 32-bit boundary, and no data is lost in
the packet. The padding always consists of only
zeros.
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="UDPCHARACTERISTICS">UDP characteristics</a></h2><p>The User Datagram Protocol
(UDP) is a very basic and simple protocol on top of
the IP protocol. It was developed to allow for very
simple data transmission without any error detection of any kind, and it is
stateless. However, it is very well fit for query/response kind of
applications, such as for example DNS, et cetera,
since we know that unless we get a reply from the DNS
server, the query was lost somewhere. Sometimes it may also be worth using the
UDP protocol instead of TCP,
such as when we want only error/loss detection but don't care about sequencing
of the packets. This removes some overhead that comes from the
TCP protocol. We may also do the other thing around,
make our own protocol on top of UDP that only
contains sequencing, but no error or loss detection.
      </p><p>The UDP protocol is specified in <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC768"><i>RFC 768 - User Datagram Protocol</i></a>. It is a very short and brief
RFC, which fits a simple protocol like this very
well.
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="UDPHEADERS">UDP headers</a></h2><p>The UDP header can be said to contain a very basic
and simplified TCP header. It contains
destination-, source-ports,
header length and a checksum
as seen in the image below.
      </p><p>        </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/udp-headers.jpg"></p></div>
      <p></p><p>Source 
 port - bit 0-15. This is
the source port of the packet, describing where a
reply packet should be sent. This can actually be set to zero if it doesn't
apply. For example, sometimes we don't require a reply packet, and the packet
can then be set to source port zero. In most
implementations, it is set to some port number.
      </p><p>Destination 
 port - bit 16-31.
The destination port of the packet. This is required
for all packets, as opposed to the source port of a
packet. 
      </p><p>Length 
 - bit 32-47. The
length field specifies the length of the whole packet
in octets, including header and data portions. The shortest possible packet
can be 8 octets long. 
      </p><p>Checksum 
 - bit 48-63. The
checksum is the same kind of
checksum as used in the TCP
header, except that it contains a different set of data. In other words, it is
a one's complement of the one's complement sum of parts of the
IP header, the whole UDP
header, theUDP data and padded with zeroes at the end
when necessary.
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="ICMPCHARACTERISTICS">ICMP characteristics</a></h2><p>ICMP messages are used for a basic kind of error
reporting between host to host, or host to gateway. Between gateway to
gateway, a protocol called Gateway to Gateway
protocol
(GGP) should normally be used
for error reporting. As we have already discussed, the
IP protocol is not designed for perfect error
handling, but ICMP messages solves some parts of
these problems. The big problem from one standpoint is that the headers of the
ICMP messages are rather complicated, and differ a
little bit from message to message. However, this will not be a big problem
from a filtering standpoint most of the time.
      </p><p>The basic form is that the message contains the standard
IP header, type, 
code and a checksum. All
ICMP messages contains these fields. The
type specifies what kind of error or reply message
this packet is, such as for example destination
unreachable, echo, echo
reply, or redirect message. The
code field specifies more information, if necessary.
If the packet is of type destination
unreachable, there are several possible values on this
code field such as network
unreachable, host unreachable, or
port unreachable. The
checksum is simply a checksum for the whole packet.
      </p><p>As you may have noticed, I mentioned the IP header
explicitly for the ICMP packet. This was done since
the actual IP header is an integral part of the
ICMP packet, and the ICMP
protocol lives on the same level as the IP protocol
in a sense. ICMP does use the
IP protocol as if it where a higher level protocol,
but at the same time not. ICMP is an integral part of
IP, and ICMP must be
implemented in every IP implementation.
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="ICMPHEADERS">ICMP headers</a></h2><p>As already explained, the headers differs a little bit from
ICMP type to ICMP type. Most
of the ICMP types are possible to group by their
headers. Because of this, we will discuss the basic header form first, and
then look at the specifics for each group of types that should be discussed.
      </p><p>        </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/icmp-basic-headers.jpg"></p></div>
      <p></p><p>All packets contain some basic values from the IP
headers discussed previously in this chapter. The headers have previously been
discussed at some length, so this is just a short listing of the headers, with
a few notes about them.
      </p><p></p><ul><li style="list-style-type: opencircle"><p>Version 
 - This should always be set
to 4.
          </p></li><li style="list-style-type: opencircle"><p>Internet   Header Length - The length of the header in 32
bit words.
          </p></li><li style="list-style-type: opencircle"><p>Type   of Service - See above. This should be set to 0,
as this is the only legit setting according to <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC792"><i>RFC 792 - Internet Control Message Protocol</i></a>.
          </p></li><li style="list-style-type: opencircle"><p>Total 
 Length - Total length
of the header and data portion of the packet, counted in octets.
          </p></li><li style="list-style-type: opencircle"><p>Identification 
, Flags and Fragment
offsets - Ripped from the IP protocol.
          </p></li><li style="list-style-type: opencircle"><p>Time 
 To Live - How many hops
this packet will survive.
          </p></li><li style="list-style-type: opencircle"><p>Protocol 
 - which version of
ICMP is being used (should always be 1).
          </p></li><li style="list-style-type: opencircle"><p>Header 
 Checksum - See the
IP explanation.
          </p></li><li style="list-style-type: opencircle"><p>Source 
 Address - The source
address from whom the packet was sent. This is not entirely true, since the
packet can have another source address, than that which is located on the
machine in question. The ICMP types that can have
this effect will be noted if so.
          </p></li><li style="list-style-type: opencircle"><p>Destination 
 Address - The
destination address of the packet.
          </p></li></ul><p>There are also a couple of new headers that are used by all of the
ICMP types. The new headers are as follows, this time
with a few more notes about them:
      </p><p></p><ul><li style="list-style-type: opencircle"><p>Type 
 - The
type field contains the ICMP
type of the packet. This is always different from
ICMP type to type. For example ICMP
Destination Unreachable packets will have a type 3 set to it. For
a complete listing of the different ICMP types, see
the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPTYPES"><i>ICMP types</i></a> appendix. This
field contains 8 bits total.
          </p></li><li style="list-style-type: opencircle"><p>Code 
 - All
ICMP types can contain different codes as well. Some
types only have a single code, while others have several codes that they can
use. For example, the ICMP Destination Unreachable
(type 3) can have at least code 0, 1, 2, 3, 4 or 5 set. Each code has a
different meaning in that context then. For a complete listing of the
different codes, see the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPTYPES"><i>ICMP types</i></a> appendix. This field is 8 bits in length,
total. We will discuss the different codes a little bit more in detail for
each type later on in this section.
          </p></li><li style="list-style-type: opencircle"><p>Checksum 
 - The
Checksum is a 16 bit field containing a one's
complement of the ones complement of the headers starting with the
ICMP type and down. While calculating the checksum,
the checksum field should be set to zero.
          </p></li></ul><p>At this point the headers for the different packets start to look different
also. We will describe the most common ICMP Types one
by one, with a brief discussion of its headers and different codes.
      </p><div class="SECTION"><hr><h3 class="SECTION"><a name="ICMPECHO">ICMP Echo Request/Reply</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/icmp-echo-headers.jpg"></p></div>
        <p></p><p>I have chosen to speak about both the reply and the request of the
ICMP echo packets here since they are so closely
related to each other. The first difference is that the echo request is type
8, while echo reply is type 0. When a host receives a type 8, it replies with
a type 0.
        </p><p>When the reply is sent, the source and
destination addresses switch places as well. After
both of those changes has been done, the checksum is
recomputed, and the reply is sent. There is only one code for both of these
types, they are always set to 0.
        </p><p></p><ul><li style="list-style-type: opencircle"><p>Identifier 
 - This is set in the
request packet, and echoed back in the reply, to be able to keep different
ping requests and replies together.
            </p></li><li style="list-style-type: opencircle"><p>Sequence 
 number - The sequence number for each host, generally this starts at 1
and is incremented by 1 for each packet.
            </p></li></ul><p>The packets also contains a data part. Per default, the data part is generally
empty, but it can contain a userspecified amount of random data.
        </p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="ICMPDESTUNREACH">ICMP Destination Unreachable</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/icmp-destination-unreachable-headers.jpg"></p></div>
        <p></p><p>The first three fields seen in the image are the same as previously described.
The Destination Unreachable type has 16 basic codes
that can be used, as seen below in the list.
        </p><p></p><ul><li style="list-style-type: opencircle"><p>Code 0 - Network unreachable  -
Tells you if a specific network is currently unreachable.
            </p></li><li style="list-style-type: opencircle"><p>Code 1 - Host unreachable  -
Tells you if a specific host is currently unreachable.
            </p></li><li style="list-style-type: opencircle"><p>Code 2 - Protocol unreachable 
- This code tells you if a specific protocol (tcp, udp, etc) can not be
reached at the moment.
            </p></li><li style="list-style-type: opencircle"><p>Code 3 - Port unreachable  - If
a port (ssh, http, ftp-data, etc) is not reachable, you will get this
message.
            </p></li><li style="list-style-type: opencircle"><p>Code 4 - Fragmentation needed and DF set  - If a packet needs to be fragmented to be
delivered, but the Do not fragment bit is set in the packet, the gateway will
return this message.
           </p></li><li style="list-style-type: opencircle"><p>Code 5 - Source route failed  -
If a source route failed for some reason, this message is returned.
            </p></li><li style="list-style-type: opencircle"><p>Code 6 - Destination network unknown  - If there is no route to a specific network,
this message is returned.
            </p></li><li style="list-style-type: opencircle"><p>Code 7 - Destination host unknown  - If there is no route to a specific host,
this message is returned.
            </p></li><li style="list-style-type: opencircle"><p>Code 8 - Source host isolated (obsolete)
- If a host is isolated, this message should be returned. This code is
obsoleted today.
            </p></li><li style="list-style-type: opencircle"><p>Code 9 - Destination network administratively prohibited
 - If a network was blocked at a gateway and
your packet was unable to reach it because of this, you should get this
ICMP code back.
              </p></li><li style="list-style-type: opencircle"><p>Code 10 - Destination host administratively prohibited
 - If you where unable to reach a host
because it was administratively prohibited (e.g., routing administration),
you will get this message back.
            </p></li><li style="list-style-type: opencircle"><p>Code 11 - Network unreachable for TOS  - If a network was unreachable because of a
<span class="emphasis"><i class="EMPHASIS">bad</i></span> TOS setting in your packet,
this code will be generated as a return packet.
            </p></li><li style="list-style-type: opencircle"><p>Code 12 - Host unreachable for TOS  - If your packet was unable to reach a host
because of the TOS of the packet, this is the message
you get back.

            </p></li><li style="list-style-type: opencircle"><p>Code 13 - Communication administratively prohibited by filtering
 - If the
packet was prohibited by some kind of filtering (e.g., firewalling), we get a
code 13 back.
            </p></li><li style="list-style-type: opencircle"><p>Code 14 - Host precedence violation  - This is sent by the first hop router to
notify a connected host, to notify the host that the used precedence is not
permitted for a specific destination/source combination.
            </p></li><li style="list-style-type: opencircle"><p>Code 15 - Precedence cutoff in effect  - The first hop router may send this message to
a host if the datagram it received had a too low precedence level set in it.
            </p></li></ul><p>On top of this, it also contains a small "data" part, which should be the whole
Internet header (IP header) and 64 bits of the original IP datagram. If the next
level protocol contains any ports, etc, it is assumed that the ports should be
available in the extra 64 bits.
        </p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SOURCEQUENCH">Source Quench</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/icmp-source-quench-headers.jpg"></p></div>
        <p></p><p>A source quench packet can be sent to tell the originating source of a packet or
stream of packets to slow down when continuing to send data. Note that gateway
or destination host that the packets traverses can also be quiet and silently
discard the packets, instead of sending any source quench packets.
        </p><p>This packet contains no extra header except the data portion, which contains the
internet header plus 64 bits of the original data datagram. This is used to
match the source quench message to the correct process, which is currently
sending data through the gateway or to the destination host.
        </p><p>All source quench packets have their
ICMP types set to 4. They have no codes
except 0.
        </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>Today, there are a couple of new possible ways of notifying the sending and
receiving host that a gateway or destination host is overloaded. One way for
example is the ECN (Explicit Congestion Notification) system.
          </p></td></tr></tbody></table></div></div><div class="SECTION"><hr><h3 class="SECTION"><a name="REDIRECT">Redirect</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/icmp-redirect-headers.jpg"></p></div>
        <p></p><p>The ICMP Redirect type is sent in a single case.
Consider this, you have a network (192.168.0.0/24) with several clients and
hosts on it, and two gateways. One gateway to a 10.0.0.0/24 network, and a
default gateway to the rest of the Internet. Now consider if one of the hosts
on the 192.168.0.0/24 network has no route set to 10.0.0.0/24, but it has the
default gateway set. It sends a packet to the default gateway, which of course
knows about the 10.0.0.0/24 network. The default gateway can deduce that it is
faster to send the packet directly to the 10.0.0.0/24 gateway since the packet
will enter and leave the gateway on the same interface. The default gateway
will hence send out a single ICMP Redirect packet to
the host, telling it about the real gateway, and then sending the packet on to
the 10.0.0.0/24 gateway. The host will now know about the closest 10.0.0.0/24
gateway, and hopefully use it in the future.
        </p><p>The main header of the Redirect type is the
Gateway Internet Address field. This field tells the
host about the proper gateway, which should really be used. The packet also
contains the IP header of the original packet, and
the 64 first bits of data in the original packet, which is used to connect it
to the proper process sending the data.
        </p><p>The Redirect type has 4 different codes as well,
these are the following.
        </p><p></p><ul><li style="list-style-type: opencircle"><p>Code 0 - Redirect for network - Only used for redirects for a whole network 
(e.g., the example above).
            </p></li><li style="list-style-type: opencircle"><p>Code 1 - Redirect for host - Only used for
redirects of a specific host (e.g., a host route).
            </p></li><li style="list-style-type: opencircle"><p>Code 2 - Redirect for TOS and network - Only used
for redirects of a specific Type of Service and to a
whole network. Used as code 0, but also based on the
TOS.
            </p></li><li style="list-style-type: opencircle"><p>Code 3 - Redirect for TOS and host - Only used for
redirects of a specific Type of Service and to a
specific host. Used as code 1, but also based on the
TOS in other words.
            </p></li></ul></div><div class="SECTION"><hr><h3 class="SECTION"><a name="TTLEQ0">TTL equals 0</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/icmp-time-exceeded-headers.jpg"></p></div>
        <p></p><p>The TTL equals 0 ICMP type
is also known as Time Exceeded Message and has type 
11 set to it, and has 2 ICMP codes available. If the
TTL field reaches 0 during 
transit through a gateway or fragment reassembly on the destination host, the 
packet must be discarded. To notify the sending host of this problem, we can 
send a TTL equals 0 ICMP
packet. The sender can then raise the TTL of outgoing 
packets to this destination if necessary.
        </p><p>The packet only contains the extra data portion of the packet. The data field 
contains the Internet header plus 64 bits of the data of the
IP packet, so that 
the other end may match the packet to the proper process. As previously 
mentioned, the TTL equals 0 type can have two codes.
        </p><p></p><ul><li style="list-style-type: opencircle"><p>Code 0 - TTL equals 0 during transit  -
This is sent to the sending host if the original packet
TTL reached 0 when it was forwarded by a gateway.
            </p></li><li style="list-style-type: opencircle"><p>Code 1 - TTL equals 0 during reassembly 
- This is sent if the original packet was fragmented, and
TTL reached 0 during reassembly of the fragments.
This code should only be sent from the destination host.
            </p></li></ul></div><div class="SECTION"><hr><h3 class="SECTION"><a name="PARAMETERPROBLEM">Parameter problem</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/icmp-parameter-problem-headers.jpg"></p></div>
        <p></p><p>The parameter problem ICMP
uses type 12 and it has 2 codes that it uses as well. Parameter
problem messages are used to tell the sending host that the
gateway or receiving host had problems understanding parts of the
IP headers such as errors, or that some required
options where missing.
        </p><p>The parameter problem type contains one special
header, which is a pointer to the field that caused the error in the original
packet, if the code is 0 that is. The following codes are available:
        </p><p></p><ul><li style="list-style-type: opencircle"><p>Code 0 - IP header bad (catchall error)  - This is a catchall error message as discussed just above.
Together with the pointer, this code is used to point to which part of the IP
header contained an error.
            </p></li><li style="list-style-type: opencircle"><p>Code 1 - Required options missing 
- If an IP option that is required is missing, this code is used to tell about
it.
            </p></li></ul></div><div class="SECTION"><hr><h3 class="SECTION"><a name="TIMESTAMP">Timestamp request/reply</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/icmp-timestamp-headers.jpg"></p></div>
        <p></p><p>The timestamp type is obsolete these days, but we
bring it up briefly here. Both the reply and the request has a single code
(0). The request is type 13 while the reply is type 14. The timestamp packets
contains 3 32-bit timestamps counting the milliseconds since midnight UT
(Universal Time). 
        </p><p>The first timestamp is the Originate timestamp, which contains the last time
the sender touched the packet. The receive timestamp is the time that the
echoing host first touched the packet and the transmit timestamp is the last
timestamp set just previous to sending the packet.
        </p><p>Each timestamp message also contains the same identifiers and sequence numbers 
as the ICMP echo packets.
        </p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="INFORMATIONREQUEST">Information request/reply</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/icmp-information-headers.jpg"></p></div>
        <p></p><p>The information request and reply types are obsolete since there are protocols 
on top of the IP protocol that can now take care of
this when necessary (DHCP, etc). The information
request generates a reply from any answering host on the network that we are
attached to.
        </p><p>The host that wishes to receive information creates a packet with the source
address set to the network we are attached to (for example, 192.168.0.0), and
the destination network set to 0. The reply will contain information about our
numbers (netmask and ip address).
         </p><p>The information request is run through ICMP type 15 while the reply is sent via 
type 16.
         </p></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="SCTPCHARACTERISTICS">SCTP Characteristics</a></h2><p>Stream Control Transmission Protocol 
(SCTP) is a relatively new protocol in the game, but 
since it is growing in usage and complements the TCP 
and UDP protocols, I have chosen to add this section 
about it. It has an even higher reliability than TCP,
and at the same time a lower overhead from protocol headers. 
      </p><p>SCTP has a couple of very interesting features that 
can be interesting. For those who wish to learn more about this, read the 
<a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC3286"><i>RFC 3286 - An Introduction to the Stream Control 
Transmission Protocol</i></a> and <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a> document. The first document 
is an introduction to SCTP and should be very 
interesting to people who are still in need of more information. The second 
document is the actual specification for the protocol, which might be less 
interesting unless you are developing for the protocol or are really interested. 
      </p><p>The protocol was originally developed for Telephony over 
IP, or Voice over IP 
(VoIP), and has some very interesting attributes due 
to this. Industry grade VoIP requires very high 
reliability for one, and this means that a lot of resilience has to be built 
into the system to handle different kind of problems. The following is a list 
of the basic features of SCTP. 
      </p><p></p><ul><li><p>Unicast  with
Multicast  properties. This means it is a
point-to-point protocol but with the ability to use
several addresses at the same end host. It can in other words use different
paths to reach the end host. TCP in comparison breaks
if the transport path breaks, unless the IP protocol
corrects it.
        </p></li><li><p>Reliable transmission. It uses checksums and 
SACK  to detect corrupted, damaged,
discarded, duplicated and reordered data. It can then retransmit data as
necessary. This is pretty much the same as TCP, but
SCTP is more resilient when it comes to reordered
data and allows for faster pickups. 
        </p></li><li><p>Message oriented.  Each message can be
framed and hence you can keep tabs on the structure and order of the
datastream. TCP is byte oriented and all you get is a
stream of bytes without any order between different data inside. You need an
extra layer of abstraction in TCP in other words.
        </p></li><li><p>Rate adaptive.   It is developed to cooperate
and co-exist with TCP for bandwidth. It scales up and
down based on network load conditions just the same as
TCP. It also has the same algorithms for slow
starting when packets where lost. ECN  is also
supported.
        </p></li><li><p>Multi-homing. As previously mentioned, it is able to 
set up different end nodes directly in the protocol, and hence doesn't have to 
rely on the IP layer for resilience.
        </p></li><li><p>Multi-streaming. This allows for multiple simultaneous 
streams inside the same stream. Hence the name Stream Control 
Transmission Protocol. A single stream can for example be opened 
to download a single webpage, and all the images and html documents can then 
be downloaded within the same stream simultaneously. Or why not a database 
protocol which can create a separate control stream and then use several 
streams to receive the output from the different queries simultaneously.
        </p></li><li><p>Initiation. 4 packet initiation of connections where 
packet 3 and 4 can be used to send data. The equivalent of 
syncookies is implemented by default to avoid 
DoS attacks. INIT collision 
resolution to avoid several simultaneous 
SCTP connections. 
        </p></li></ul><p>This list could be made even longer, but I will not. Most of this information 
is gathered from the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC3286"><i>RFC 3286 - An Introduction to the Stream Control 
Transmission Protocol</i></a> 
document, so read on there for more information.
      </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>In SCTP we talk about chunks, 
not packets or windows 
anymore. An SCTP frame can contain several different 
chunks since the protocol is message oriented. A 
chunk can either be a control or a data chunk. 
Control chunks is used to control the session, and 
data chunks are used to send actual data.
       </p></td></tr></tbody></table></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPINIT">Initialization and association</a></h3><p>Each connection is initialized by creating an association between the two 
hosts that wants to talk to each other. This association is initialized 
when a user needs it. It is later used as needed.
        </p><p>The initialization is done through 4 packets. First an INIT 
chunk is sent, which is replied to with an INIT 
ACK containing a cookie, after this the connection can start 
sending data. However, two more packets are sent in the initialization. 
The cookie is replied to with a COOKIE ECHO chunk, 
which is finally replied to with a COOKIE ACK chunk.
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPDATA">Data sending and control session</a></h3><p>SCTP can at this point send data. In 
SCTP there are control chunks 
and data chunks, as previously stated. 
Data chunks are sent using DATA 
chunks, and DATA chunks are acknowledged 
by sending a SACK chunk. This works practically the 
same as a TCP SACK. SACK 
chunks are control chunks.
	</p><p>On top of this, there are some other control chunks 
that can be seen. HEARTBEAT and HEARTBEAT 
ACK chunks for one, and ERROR chunks for 
another. HEARTBEATs are used to keep the connection 
alive, and ERROR is used to inform of different 
problems or errors in the connection, such as invalid stream id's or missing 
mandatory parameters et cetera. 
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPSHUTDOWN">Shutdown and abort</a></h3><p>The SCTP connection is finally closed by either an 
ABORT chunk or by a graceful 
SHUTDOWN chunk. SCTP doesn't 
have a half-closed state as TCP, in other words one 
side can not continue sending data while the other end has closed its sending 
socket. 
        </p><p>When the user/application wants to close the SCTP 
socket gracefully, it tells the protocol to SHUTDOWN. 
SCTP then sends all the data still in its buffers, and 
then sends a SHUTDOWN chunk. When the other end 
receives the SHUTDOWN, it will stop accepting data 
from the application and finish sending all the data. Once it has gotten all 
the SACK's for the data, it will send a 
SHUTDOWN ACK chunk and once the closing side has 
received this chunk, it will finally reply with a SHUTDOWN 
COMPLETE chunk. The whole session is now closed.
	</p><p>Another way of closing a session is to ABORT it. This 
is an ungraceful way of removing an SCTP association. 
When a connecting party wants to remove an SCTP 
association instantaneously, 
it sends an ABORT chunk with all the right values 
signed. All data in the buffers et cetera will be discarded and the association 
will then be removed. The receiving end will do the same after verifying the 
ABORT chunk. 
	</p></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="SCTPHEADERS">SCTP Headers</a></h2><p>This will be a very brief introduction to the SCTP
headers. SCTP has a lot of different types of
packets, and hence I will try to follow the RFC's as
close as possible and how they depict the different headers, starting with a
general overview of the headers applicable to all
SCTP packets.
      </p><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERGENERIC">SCTP Generic header format</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-generic-header.jpg"></p></div>
        <p></p><p>This is a generic overview of how a SCTP packet is 
laid out. Basically, you have a common header first with information describing 
the whole packet, and the source and destination ports etc. See more below for 
information on the common header.
	</p><p>After the common header a variable number of chunks are sent, up to the maximum 
possible in the MTU. All chunks can be bundled except 
for INIT, INIT ACK and 
SHUTDOWN COMPLETE, which must not be bundled. 
DATA chunks may be broken down to fit inside the 
MTU of the packets. 
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERCOMMON">SCTP Common and generic headers</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-common-header.jpg"></p></div>
        <p></p><p>Every SCTP packet contains the Common header as seen above. The header contains 
four different fields and is set for every SCTP packet.
	</p><p>Source port - bit 0-15. This field gives the source port of the packet, which 
port it was sent from. The same as for TCP and 
UDP source port.
	</p><p>Destination port - bit 16-31. This is the destination port of the packet, ie., 
the port that the packet is going to. It is the same as for the 
TCP and UDP destination port.
	</p><p>Verification Tag - bit 32-63. The verification tag is used to verify that the 
packet comes from the correct sender. It is always set to the same value as the 
value received by the other peer in the Initiate Tag during the 
association initialization, with a few exceptions:
	</p><p></p><ul><li><p>An SCTP packet containing an 
INIT chunk must have the Verification tag set to 0.
            </p></li><li><p>A SHUTDOWN COMPLETE chunk with the 
T-bit set must have the verification tag copied from 
the verification tag of the SHUTDOWN-ACK chunk. 
            </p></li><li><p>Packets containing ABORT chunk may have the 
verification tag set to the same verification tag as the packet causing the 
ABORT.
            </p></li></ul><p>Checksum - bit 64-95. A checksum calculated for the whole 
SCTP packet based on the 
Adler-32 algorithm. Read <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a>, appendix B for more information about this 
algorithm.
        </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunks-generic-fields.jpg"></p></div><p>All SCTP chunks has a special layout that they all
adhere to as can be seen above. This isn't an actual header, but rather a
formalized way of how they do look. 
	</p><p>Type - bit 0-7. This field specifies the chunk type of the packet, for example
is it an INIT or SHUTDOWN
chunk or what? Each chunk type has a specific number, and is specified in the
image below. Here is a complete list of Chunk types:
	</p><div class="TABLE"><a name="TABLE.SCTPTYPES"></a><p><b>Table 2-1. SCTP Types</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="56"><col width="1*"></colgroup><thead><tr><th>Chunk Number</th><th>Chunk Name</th></tr></thead><tbody><tr><td>0</td><td>Payload Data (DATA)</td></tr><tr><td>1</td><td>Initiation (INIT)</td></tr><tr><td>2</td><td>Initiation Acknowledgement (INIT ACK)</td></tr><tr><td>3</td><td>Selective Acknowledgement (SACK)</td></tr><tr><td>4</td><td>Heartbeat Request (HEARTBEAT)</td></tr><tr><td>5</td><td>Heartbeat Acknowledgement (HEARTBEAT ACK)</td></tr><tr><td>6</td><td>Abort (ABORT)</td></tr><tr><td>7</td><td>Shutdown (SHUTDOWN)</td></tr><tr><td>8</td><td>Shutdown Acknowledgement (SHUTDOWN ACK)</td></tr><tr><td>9</td><td>Operation Error (ERROR)</td></tr><tr><td>10</td><td>State Cookie (COOKIE ECHO)</td></tr><tr><td>11</td><td>Cookie Acknowledgement (COOKIE ACK)</td></tr><tr><td>12</td><td>Reserved for Explicit Congestion Notification Echo
(ECNE)</td></tr><tr><td>13</td><td>Reserved for Congestion Window Reduced (CWR)</td></tr><tr><td>14</td><td>Shutdown Complete (SHUTDOWN COMPLETE)</td></tr><tr><td>15-62</td><td>Reserved for IETF</td></tr><tr><td>63</td><td>IETF-defined chunk extensions</td></tr><tr><td>64-126</td><td>reserved to IETF</td></tr><tr><td>127</td><td>IETF-defined chunk extensions</td></tr><tr><td>128-190</td><td>reserved to IETF</td></tr><tr><td>191</td><td>IETF-defined chunk extensions</td></tr><tr><td>192-254</td><td>reserved to IETF</td></tr><tr><td>255</td><td>IETF-defined chunk extensions</td></tr></tbody></table></div><p>Chunk Flags - bit 8-15. The chunk flags are generally not
used but are set up for future usage if nothing else. They are chunk specific
flags or bits of information that might be needed for the other peer.
According to specifications, flags are only used in
DATA, ABORT and
SHUTDOWN COMPLETE packets at this moment. This may
change however.
	</p><div class="IMPORTANT"><p></p><table class="IMPORTANT" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/important.gif" hspace="5" alt="Important"></td><td align="LEFT" valign="TOP"><p>A lot of times when you read an RFC, you might run into some old proven
problems. The <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a> document
is one example of this, where they specifically specify that the Chunk flags
should always be set to 0 and ignored unless used for something. This is
written all over the place, and it begs for problems in the future. If you do
firewalling or routing, watch out very carefully for this, since specifications
for fields like this may change in the future and hence break at your firewall
without any legit reason. This happened before with the implementation of ECN
in the IP headers for example. See more in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPHEADERS"><i>IP headers</i></a> section of this chapter.
	  </p></td></tr></tbody></table></div><p>Chunk Length - bit 16-31. This is the chunk length
calculated in bytes. It includes all headers, including the chunk type, chunk
flags, chunk length and chunk value. If there is no chunk value, the chunk
length will be set to 4 (bytes).
	</p><p>Chunk Value - bit 32-n. This is specific to each chunk and
may contain more flags and data pertaining to the chunk type. Sometimes it
might be empty, in which case the chunk length will be set to 4. 
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERABORT">SCTP ABORT chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-abort-header.jpg"></p></div>
        <p></p><p>The ABORT chunk is used to abort an association as
previously described in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPSHUTDOWN"><i>Shutdown and abort</i></a> section of this chapter.
ABORT is issued upon unrecoverable errors in the
association such as bad headers or data.
	</p><p>Type - bit 0-7. Always set to 6 for this chunk type.
	</p><p>Reserved - bit 8-14. Reserved for future chunk flags but not used as of writing
this. See the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more information about the chunk
flags field.
	</p><p>T-bit - bit 15. If this bit is set to 0, the sender had a
TCB associated with this packet that it
has destroyed. If the sender had no TCB the
T-bit should be set to 1.
	</p><p>Length - bit 16-31. Sets the length of the chunk in bytes including error
causes.
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERCOOKIE-ACK">SCTP COOKIE ACK chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-cookie-ack-header.jpg"></p></div>
        <p></p><p>The COOKIE ACK chunk is used during the initialization 
of the connection and never anywhere else in the connection. It must precede
all DATA and SACK chunks but 
may be sent in the same packet as the first of these packets.
	</p><p>Type - bit 0-7. Always set to 11 for this type.
	</p><p>Chunk flags - bit 8-15. Not used so far. Should always be set to 0 according to
<a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a>. You should always
watch out for this kind of specific behaviour stated by RFC's since it might
change in the future, and hence break your firewalls etc. Just the same as
happened with IP and ECN. See
the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a>
section for more information.
	</p><p>Length - bit 16-31. Should always be 4 (bytes) for this chunk.
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERCOOKIE-ECHO">SCTP COOKIE ECHO chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-cookie-echo-header.jpg"></p></div>
        <p></p><p>The COOKIE ECHO chunk is used during the
initialization of the SCTP connection by the
initiating party to reply to the cookie sent by the responding party in
the State cookie field in the INIT
ACK packet. It may be sent together with
DATA chunks in the same packet, but must precede the
DATA chunks in such case.
	</p><p>Type - bit 0-7. The chunk type is always set to 10 for this chunk.
	</p><p>Chunk flags - bit 8-15. This field is not used today. The
RFC specifies that the flags should always be set to
0, but this might cause trouble as can be seen in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> section
above, specifically the Chunk flags explanation.
	</p><p>Length - bit 16-31. Specifies the length of the chunk, including type,
chunk flags, length and cookie fields in bytes.
	</p><p>Cookie - bit 32-n. This field contains the cookie as sent in the previous
INIT ACK chunk. It must be the exact same as the
cookie sent by the responding party for the other end to actually open the
connection. The <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a>
specifies that the cookie should be as small as possible to insure
interoperability, which is very vague and doesn't say much.
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERDATA">SCTP DATA chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-data-header.jpg"></p></div>
        <p></p><p>DATA chunks are used to send actual data through the
stream and have rather complex headers in some ways, but not really worse than
TCP headers in general. Each
DATA chunk may be part of a different stream, since
each SCTP connection can handle several different
streams. 
	</p><p>Type - bit 0-7. The Type field should always be set to 0 for DATA chunks.
	</p><p>Reserved - bit 8-12. Not used today. Might be applicable for change. See <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more
information.
	</p><p>U-bit - bit 13. The U-bit is used to indicate
if this is an unordered DATA chunk. If it is, the
Stream Sequence Number must be ignored by the
receiving host and send it on to the upper layer without delay or tries to
re-order the DATA chunks.
	</p><p>B-bit - bit 14. The B-bit is used to indicate
the beginning of a fragmented DATA chunk. If this bit
is set and the E (ending) bit is not set, it indicates that this is the first
fragment of a chunk that has been fragmented into several
DATA chunks. 
	</p><p>E-bit - bit 15. The E-bit is used to indicate
the ending of a fragmented DATA chunk. If this flag
is set on a chunk, it signals to the SCTP receiver
that it can start reassembling the fragments and pass them on to the upper
layer. If a packet has both the BE-bits set to set to
0, it signals that the chunk is a middle part of a fragmented chunk. If both
BE-bits are set to 1 it signals that the packet is
unfragmented and requires no reassembly et cetera.
	</p><p>Length - bit 16-31. The length of the whole DATA
chunk calculated in bytes,including the chunk type field and on until the end
of the chunk.
	</p><p>TSN - bit 32-63. The Transmission Sequence
Number (TSN) is sent in the
DATA chunk, and the receiving host uses the
TSN to acknowledge that the chunk got through
properly by replying with a SACK chunk. This is an
overall value for the whole SCTP association.
	</p><p>Stream Identifier - bit 64-79. The Stream
Identifier is sent along with the DATA
chunk to identify which stream the DATA chunk is
associated with. This is used since SCTP can
transport several streams within a single association.
	</p><p>Stream Sequence Number - bit 80-95. This is the sequence
number of the chunk for the specific stream identified by the
Stream Identifier. This sequence number is specific
for each stream identifier. If a chunk has been fragmented, the
Stream Sequence Number must be the same for all
fragments of the original chunk. 
	</p><p>Payload Protocol Identifier - bit 96-127.
This value is filled in by the upper layers, or applications using the
SCTP protocol as a way to identify to each other the
content of the DATA chunk. The field must always be
sent, including in fragments since routers and firewalls, et cetera, on the
way might need the information. If the value was set to 0, the value was not
set by the upper layers.
	</p><p>User data - bit 128-n. This is the actual data that the chunk is
transporting. It can be of variable length, ending on an even octet. It is the
data in the stream as specified by the stream sequence number n in the stream
S. 
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERERROR">SCTP ERROR chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-error-header.jpg"></p></div>
        <p></p><p>The ERROR chunk is sent to inform the other peer of
any problems within the current stream. Each ERROR
chunk can contain one or more Error Causes, which are
more specifically detailed in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a> document. I will not go into further details
here than the basic ERROR chunk, since it would be too
much information. The ERROR chunk is not fatal in and
of itself, but rather details an error that has happened. It may however be
used together with an ABORT chunk to inform the peer
of the error before killing the connection. 
	</p><p>Type - bit 0-7. This value is always set to 9 for
ERROR chunks. 
	</p><p>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more information.
	</p><p>Length - bit 16-31. Specifies the length of the chunk in bytes, including
all the Error Causes.
	</p><p>Error causes - bit 32-n. Each ERROR
chunk may contain one or more Error Causes, which
notifies the opposite peer of a problem with the connection. Each
Error Cause follows a specific format, as described
in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a> document. We
will not go into them here more than to say that they all contain an
Cause Code, cause length and cause specific
information field. The following Error Causes are
possible:
	</p><div class="TABLE"><a name="TABLEERRORCAUSES"></a><p><b>Table 2-2. Error Causes</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="48"><col width="1*"></colgroup><thead><tr><th>Cause Value</th><th>Chunk Code</th></tr></thead><tbody><tr><td>1</td><td>Invalid Stream Identifier</td></tr><tr><td>2</td><td>Missing Mandatory Parameter</td></tr><tr><td>3</td><td>Stale Cookie Error</td></tr><tr><td>4</td><td>Out of Resource</td></tr><tr><td>5</td><td>Unresolvable Address</td></tr><tr><td>6</td><td>Unrecognized Chunk Type</td></tr><tr><td>7</td><td>Invalid Mandatory Parameter</td></tr><tr><td>8</td><td>Unrecognized Parameters</td></tr><tr><td>9</td><td>No User Data</td></tr><tr><td>10</td><td>Cookie Received While Shutting Down</td></tr></tbody></table></div></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERHEARTBEAT">SCTP HEARTBEAT chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-heartbeat-header.jpg"></p></div>
        <p></p><p>The HEARTBEAT chunk is sent by one of the peers to
probe and find out if a specific SCTP endpoint address
is up. This is sent to the different addresses that was negotiated during the
initialization of the association to find out if they are all up.
	</p><p>Type - bit 0-7. The type is always set to 4 for
HEARTBEAT chunks.
	</p><p>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more information.
	</p><p>Length - bit 16-31. The length of the whole chunk, including the
Heartbeat Information TLV. 
	</p><p>Heartbeat Information TLV - bit 32-n. This
is a variable-length parameter as defined inside the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a> document. This is a mandatory parameter for
the HEARTBEAT chunks that contains 3 fields, info
type = 1, info length and a sender-specific Heartbeat
Information parameter. The last field should be a sender-specific
information field of some kind, for example a timestamp when the heartbeat was
sent and a destination IP address. This is then returned in the
HEARTBEAT ACK chunk.
        </p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERHEARTBEAT-ACK">SCTP HEARTBEAT ACK chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-heartbeat-ack-header.jpg"></p></div>
        <p></p><p>The HEARTBEAT ACK is used to acknowledge that a
HEARTBEAT was received and that the connection is
working properly. The chunk is always sent to the same IP address as the
request was sent from. 
	</p><p>Type - bit 0-7. Always set to 5 for HEARTBEAT ACK
chunks. 
	</p><p>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more information.
	</p><p>Chunk length - bit 16-31. The length of the
HEARTBEAT ACK chunk including the
Heartbeat Information TLV, calculated in bytes. 
	</p><p>Heartbeat Information TLV - bit 32-n. This
field must contain the Heartbeat Information
parameter that was sent in the original HEARTBEAT
chunk. 
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERINIT">SCTP INIT chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-init-header.jpg"></p></div>
        <p></p><p>The INIT chunk is used to initiate a new association
with a destination host, and is the first chunk to be sent by the connecting
host. The INIT chunk contains several mandatory fixed
length parameters, and some optional variable length parameters. The fixed
length mandatory parameters are already in the above headers, and are the
Initiate Tag, Advertised Receiver Window
Credit, Number of Outbound Streams,
Number of Inbound Streams and the Initial
TSN parameters. After this comes a couple of optional parameters,
they will be listed with the optional parameters paragraph below.
	</p><p>Type - bit 0-7. The type field is always set to 1 for
INIT chunks. 
	</p><p>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more information.
	</p><p>Chunk Length - bit 16-31. The chunk length is the length of
the whole packet, including everything in the headers, including the optional
parameters.
	</p><p>Initiate Tag - bit 32-63. The Initiate
Tag is set within the INIT chunk and
must be used by the receiver to acknowledge all packets henceforth, within the
Verification Tag of the established association. The
Initiate Tag may take any value except 0. If the
value is 0 anyways, the receiver must react with an
ABORT. 
	</p><p>Advertised Receiver Window Credit (a_rwnd)- bit
64-95. This is the minimum receiving buffer that the sender of the
INIT chunk will allocate for this association, in
bytes. This can then be used by the receiver of the
a_rwnd, to know how much data it can send out without
being SACK'ed. This window should not be lessened,
but it might by sending the new a_rwnd in a SACK
chunk.
	</p><p>Number of Outbound Streams - bit 96-111. This specifies the maximum number of
outbound streams that the connecting host wishes to create to the receiving
host. The value must not be 0, and if it is, the receiving host should
ABORT the association immediately. There is no
negotiation of the minimum number of outbound
or inbound streams, it is simply set to the lowest that either host has set in
the header.
	</p><p>Number of Inbound Streams - bit 112-127.
Specifies the maximum number of inbound connections that the sending peer will
allow the receiving host to create in this association. This must not be set
to 0, or the receiving host should ABORT the
connection. There is no negotiation of the minimum number of outbound or
inbound streams, it is simply set to the lowest that either host has set in
the header.
	</p><p>Initial TSN - bit 128-159. This value sets the initial
Transmit Sequence Number
(TSN) that the sender will use when sending data. The
field may be set to the same value as the Initiate
Tag. 
	</p><p>On top of the above mandatory fixed length headers, there are also some
optional variable length parameters that might be set, and at least one of the
IPv4, IPv6 or
Hostname parameters must be set. Only one
Hostname may be set, and if a
Hostname is set, no IPv4 or
IPv6 parameters may be set. Multiple
IPv4 and IPv6 parameters may
also be set in the same INIT chunk. Also, none of
these parameters needs to be set in case the sender only has one address that
can be reached, which is where the chunk should be coming from. These
parameters are used to set up which addresses may be used to connect to the
other end of the association. This is a full list of all the parameters
available in the INIT chunk:
	</p><div class="TABLE"><a name="TABLEINITPARAMETERS"></a><p><b>Table 2-3. INIT Variable Parameters</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="4*"><col width="2*"><col width="2*"></colgroup><thead><tr><th>Parameter Name</th><th>Status</th><th>Type Value</th></tr></thead><tbody><tr><td>IPv4 Address</td><td>Optional</td><td>5</td></tr><tr><td>IPv6 Address</td><td>Optional</td><td>6</td></tr><tr><td>Cookie Preservative</td><td>Optional</td><td>9</td></tr><tr><td>Host Name Address</td><td>Optional</td><td>11</td></tr><tr><td>Supported Address Types</td><td>Optional</td><td>12</td></tr><tr><td>Reserved for ECN Capable</td><td>Optional</td><td>32768</td></tr></tbody></table></div><p>Below we describe the three most common Parameters used in the
INIT chunk.
	</p><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-init-param-ipv4-header.jpg"></p></div>
        <p></p><p>The IPv4 parameter is used to send an
IPv4 address in the INIT
chunk. The IPv4 address can be used to send data
through the association. Multiple IPv4 and
IPv6 addresses can be specified for a single
SCTP association. 
	</p><p>Parameter Type - bit 0-15. This is always set to 5 for
IPv4 address parameters. 
	</p><p>Length - bit 16-31. This is always set to 8 for IPv4
address parameters.
	</p><p>IPv4 Address - bit 32-63. This is an IPv4 address of
the sending endpoint. 
	</p><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-init-param-ipv6-header.jpg"></p></div>
        <p></p><p>This parameter is used to send IPv6 addresses in the
INIT chunk. This address can then be used to contact
the sending endpoint with this association.
	</p><p>Type - bit 0-15. Always set to 6 for the IPv6
parameters. 
	</p><p>Length bit 16-31. Always set to 20 for IPv6
parameters. 
	</p><p>IPv6 address - bit 32-159. This is an IPv6 address of
the sending endpoint that can be used to connect to by the receiving endpoint.
	</p><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-init-param-host-name-header.jpg"></p></div>
        <p></p><p>The Hostname parameter is used to send a single
hostname as an address. Thea receiving host must then look up the hostname and
use any and/or all of the addresses it receives from there. If a hostname
parameter is sent, no other IPv4,
IPv6 or Hostname parameters
may be sent.
	</p><p>Type - bit 0-15. This is always set to 11 for Hostname
Parameters.
	</p><p>Length - bit 16-31. The length of the whole parameter, including type, length
and hostname field. The Hostname field is variable
length. The length is counted in bytes.
	</p><p>Hostname - bit 32-n. A variable length parameter containing a hostname. The
hostname is resolved by the receiving end to get the addresses that can be used
to contact the sending endpoint. 
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERINIT-ACK">SCTP INIT ACK chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-init-ack-header.jpg"></p></div>
        <p></p><p>The INIT ACK chunk is sent in response to a
INIT chunk and contains basically the same headers,
but with values from the recipient of the original
INIT chunk. In addition, it has two extra variable
length parameters, the State Cookie and the
Unrecognized Parameter parameters.
	</p><p>Type - bit 0-7. This header is always set to 2 for INIT
ACK chunks. 
	</p><p>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more information.
	</p><p>Chunk Length - bit 16-31. The chunk length is the length of
the whole packet, including everything in the headers, and the optional
parameters.
	</p><p>Initiate Tag - bit 32-63. The receiver of the
Initiate Tag of the INIT ACK
chunk must save this value and copy it into the Verification
Tag field of every packet that it sends to the sender of the
INIT ACK chunk. The Initiate
Tag must not be 0, and if it is, the receiver of the
INIT ACK chunk must close the connection with an
ABORT. 
	</p><p>Advertised Receiver Window Credit (a_rwnd) - bit
64-95. The dedicated buffers that the sender of this chunk has located for
traffic, counted in bytes. The dedicated buffers should never be lowered to
below this value. 
	</p><p>Number of Outbound Streams - bit 96-111.
How many outbound streams that the sending host wishes to create. Must not be
0, or the receiver of the INIT ACK should
ABORT the association. There is no negotiation of the
minimum number of outbound or inbound streams, it is simply set to the lowest
that either host has set in the header.
	</p><p>Number of Inbound Streams - bit 112-127.
How many inbound streams that the sending endpoint is willing to accept. Must
not be 0, or the receiver of the INIT ACK should
ABORT the association. There is no negotiation of the
minimum number of outbound or inbound streams, it is simply set to the lowest
that either host has set in the header.
	</p><p>Initial TSN - bit 128-159. This is set to the
Initial Transmission Sequence Number
(I-TSN) which will be used by the sending party in
the association to start with.
	</p><p>After this point, the INIT ACK chunk continues with
optional variable-length parameters. The parameters are exactly the same as for
the INIT chunk, with the exception of the addition of
the State Cookie and the Unrecognized
Parameters parameter, and the deletion of the
Supported Address Types parameter. The list in other
words look like this:
	</p><div class="TABLE"><a name="TABLEINITACKPARAMETERS"></a><p><b>Table 2-4. INIT ACK Variable Parameters</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="4*"><col width="2*"><col width="2*"></colgroup><thead><tr><th>Parameter Name</th><th>Status</th><th>Type Value</th></tr></thead><tbody><tr><td>IPv4 Address</td><td>Optional</td><td>5</td></tr><tr><td>IPv6 Address</td><td>Optional</td><td>6</td></tr><tr><td>State Cookie</td><td>Mandatory</td><td>7</td></tr><tr><td>Unrecognized Parameters</td><td>Optional</td><td>8</td></tr><tr><td>Cookie Preservative</td><td>Optional</td><td>9</td></tr><tr><td>Host Name Address</td><td>Optional</td><td>11</td></tr><tr><td>Reserved for ECN Capable</td><td>Optional</td><td>32768</td></tr></tbody></table></div><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-init-ack-param-state-cookie-header.jpg"></p></div>
        <p></p><p>The State Cookie is used in INIT
ACK to send a cookie to the other host, and until the receiving
host has replied with a COOKIE ECHO chunk, the
association is not guaranteed. This is to prevent basically the same as a
SYN attack in TCP protocol. 
	</p><p>Type - bit 0-15. Always set to 7 for all State Cookie
parameters.
	</p><p>Length - bit 16-31. The size of the whole parameter, including the type, length
and State Cookie field in bytes.
	</p><p>State Cookie - bit 31-n. This parameter contains a cookie of variable length.
For a description on how this cookie is created, see the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a> document. 
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERSACK">SCTP SACK chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-sack-header.jpg"></p></div>
        <p></p><p>The SACK chunk is used to tell the sender of
DATA chunks which chunks has been received and where
there has been a gap in the stream, based on the received
TSN's. Basically, the SACK
chunk acknowledges that it has received data up to a certain point (the
Cumulative TSN Ack parameter), and then adds
Gap Ack Blocks for all of the data that it has
received after the Cumulative TSN Ack point. A
SACK chunk must not be sent more than once for every
DATA chunk that is received.
	</p><p>Type - bit 0-7. This header is always set to 3 for
SACK chunks. 
	</p><p>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more information.
	</p><p>Chunk Length - bit 16-31. The chunk length is the length of
the whole chunk, including everything in the headers and all the parameters.
	</p><p>Cumulative TSN Ack - bit 32-63. This is the
Cumulative TSN Ack parameter, which is used to
acknowledge data. The DATA chunk receiver will use
this field to tell the sending host that it has received all data up to this
point of the association. After this point, all data that has not been
specifically acknowledged by the Gap Ack Blocks will,
basically, be considered unaccounted for. 
	</p><p>Advertised Receiver Window Credit (a_rwnd) - bit
64-95. The a_rwnd field is basically the same as the
a_rwnd in the INIT and
INIT ACK chunks, but can be used to raise or lower
the a_rwnd value. Please read more in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC2960"><i>RFC 2960 - Stream Control Transmission Protocol</i></a> document about this. 
        </p><p>Number of Gap Ack Blocks - bit 96-111. The number of
Gap Ack Blocks listed in this chunk. Each
Gap Ack Block takes up 32 bits in the chunk.
	</p><p>Number of Duplicate TSNs - bit 112-127. The number of
DATA chunks that has been duplicated. Each duplicated
TSN is listed after the Gap Ack
Blocks in the chunk, and each TSN takes
32 bits to send. 
	</p><p>Gap Ack Block #1 Start - bit 128-143. This is the first
Gap Ack Block in the SACK
chunk. If there are no gaps in the received DATA
chunk TSN numbers, there will be no Gap
Ack Blocks at all. However, if DATA
chunks are received out of order or some DATA chunks
where lost during transit to the host, there will be gaps. The gaps that has
been seen will be reported with Gap Ack Blocks. The
Gap Ack Block start point is calculated by adding the
Gap Ack Block Start parameter to the
Cumulative TSN value. The calculated value is the
start of the block. 
	</p><p>Gap Ack Block #1 End - bit 144-159. This value reports the end
of the first Gap Ack Block in the stream. All the
DATA chunks with the TSN
between the Gap Ack Block Start and the
Gap Ack Block End has been received. The
Gap Ack Block End value is added to the
Cumulative TSN, just as the Start parameter, to get
the actual last TSN of the block chunks to be
Acknowledged. 
	</p><p>Gap Ack Block #N Start - bits variable. For every
Gap Ack Block counted in the Number of
Gap Ack Blocks parameter, one Gap Ack
Block is added, until the final N block. Ie, if
Number of Gap Ack Blocks = 2, then there will be two
Gap Ack Blocks in the SACK
chunk. This is the last one simply, and contains the same type of value as the
Gap Ack Block #1 Start.
	</p><p>Gap Ack Block #N End - bits variable. Same as for the
Gap Ack Block #N End, but for the end of the gap. 
	</p><p>Duplicate TSN #1 - bits variable. These fields report a duplicate
TSN, in which case we have already received a
specific chunk, but receive the same TSN several
times more. This can either be router glitches (retransmitting already sent
data) or a case of retransmission from the sending endpoint, or a score of
other possibilities. Each instance of a duplicate TSN
should be reported once. For example, if 2 duplicate
TSN's has been received after acknowledging the first
one, each of these duplicate TSN's should be sent
sent in the next SACK message that is being sent. If
even more duplicate TSN's should appear after this
second SACK is sent, the new duplicates should be
added in the next SACK, and so on.
	</p><p>Duplicate TSN #X - bits variable. This is the last duplicate
TSN parameter, containing the same type of
information as the first parameter.
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERSHUTDOWN">SCTP SHUTDOWN chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-shutdown-header.jpg"></p></div>
        <p></p><p>The SHUTDOWN chunk is issued when one of the endpoints
of a connection wants to close the current association. The sending party must
empty all of its sending buffers before sending the
SHUTDOWN chunk, and must not send any more
DATA chunks afterwards. The receiver must also empty
its sending buffers and must then send the responding SHUTDOWN
ACK chunk. 
	</p><p>Type - bit 0-7. This header is always set to 7 for
SHUTDOWN chunks. 
	</p><p>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more information.
	</p><p>Chunk Length - bit 16-31. The chunk length is the length of
the whole packet, including the Cumulative TSN Ack
parameter. The length of the SHUTDOWN chunk should
always be 8.
	</p><p>Cumulative TSN Ack - bit 32-63. This is a Cumulative
TSN Ack field, just the same as in the
SACK chunk. The Cumulative TSN
Ack acknowledges the last TSN received
in sequence from the opposite endpoint. This parameter does not, nor can the
rest of the SHUTDOWN chunk either, acknowledge
Gap Ack Blocks. The lack of a Gap Ack
Block in the SHUTDOWN chunk that was
acknowledged before should not be interpreted as if the previously
acknowledged block was lost again.
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERSHUTDOWNACK">SCTP SHUTDOWN ACK chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-shutdown-ack-header.jpg"></p></div>
        <p></p><p>The SHUTDOWN ACK chunk is used to acknowledge a
SHUTDOWN chunk that has been received. Before the
SHUTDOWN ACK chunk is sent, all data in the sending
buffers should be sent, but the buffers must not accept any new data from the
application. SCTP does not support half-open
connections as TCP does. 
	</p><p>Type - bit 0-7. This header is always set to 8 for
SHUTDOWN ACK chunks. 
	</p><p>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for more information.
	</p><p>Chunk Length - bit 16-31. The chunk length is the length of
the whole chunk. The length of the SHUTDOWN ACK chunk
should always be 4.
	</p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="SCTPHEADERSHUTDOWNCOMPLETE">SCTP SHUTDOWN COMPLETE chunk</a></h3><p>          </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/sctp-chunk-shutdown-complete-header.jpg"></p></div>
        <p></p><p>The SHUTDOWN COMPLETE chunk is sent, by the originating
host of the SHUTDOWN, in response to the
SHUTDOWN ACK chunk. It is sent to acknowledge that the
association is finally closed. 
	</p><p>Type - bit 0-7. Always set to 14 for SHUTDOWN COMPLETE
chunks.
	</p><p>Reserved - bit 8-14. Not used today. Might be applicable for change. See
<a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SCTPHEADERCOMMON"><i>SCTP Common and generic headers</i></a> for
more information.
	</p><p>T-bit - bit 15. The T-bit is not set to signal
that the sending host had a Transmission Control
Block (TCB) associated with this
connection and that it destroyed. If the T-bit was
set, it had no TCB to destroy. 
	</p><p>Length - bit 16-31. This is always set to 4 for SHUTDOWN
COMPLETE chunks, since the chunk should never be any larger, as
long as no updates to the standards are made. 
	</p></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="TCPIPDSTDRIVENROUTING">TCP/IP destination driven 
routing</a></h2><p>TCP/IP has grown in complexity quite a lot when it
comes to the routing part. In the beginning, most people thought it would be
enough with destination driven routing. The last few years, this has become
more and more complex however. Today, Linux can route on basically every
single field or bit in the IP header, and even based
on TCP, UDP or
ICMP headers as well. This is called policy based
routing, or advanced routing.
      </p><p>This is simply a brief discussion on how the destination driven routing is 
performed. When we send a packet from a sending host, the packet is created. 
After this, the computer looks at the packet destination address and compares
it to the routing table that it has. If the destination address is local, the
packet is sent directly to that address via its hardware
MAC address. If the packet is on the other side of a
gateway, the packet is sent to the MAC address of the
gateway. The gateway will then look at the IP headers
and see the destination address of the packet. The destination address is
looked up in the routing table again, and the packet is sent to the next
gateway, et cetera, until the packet finally reaches the local network of the
destination.
      </p><p>As you can see, this routing is very basic and simple. With the advanced
routing and policy based routing, this gets quite a bit more complex. We can
route packets differently based on their source address for example, or their
TOS value, et cetera.
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="TCPIPREP.SUMMARY">What's next?</a></h2><p>This chapter has brought you up to date to fully understand the subsequent 
chapters. The following has been gone through thoroughly:
      </p><p></p><ul><li style="list-style-type: opencircle"><p>TCP/IP structure
          </p></li><li style="list-style-type: opencircle"><p>IP protocol functionality and headers.
          </p></li><li style="list-style-type: opencircle"><p>TCP protocol functionality and headers.
          </p></li><li style="list-style-type: opencircle"><p>UDP protocol functionality and headers.
          </p></li><li style="list-style-type: opencircle"><p>ICMP protocol functionality and headers.
          </p></li><li style="list-style-type: opencircle"><p>TCP/IP destination driven routing.
          </p></li></ul><p>All of this will come in very handy later on when you start to work with the 
actual firewall rulesets. All of this information are pieces that fit together, 
and will lead to a better firewall design.
      </p></div></div><div class="CHAPTER"><hr><h1><a name="IPFILTERING"></a>Chapter 3. IP filtering introduction</h1><p>This chapter will discuss the theoretical details about an
IP filter, what it 
is, how it works and basic things such as where to place firewalls, policies, 
etcetera.
    </p><p>Questions for this chapter may be, where to actually put the firewall? In most
cases, this is a simple question, but in large corporate environments it may
get trickier. What should the policies be? Who should have access where? What
is actually an IP filter? All of these questions
should be fairly well answered later on in this chapter.
    </p><div class="SECTION"><hr><h2 class="SECTION"><a name="WHATISANIPFILTER">What is an IP filter</a></h2><p>It is important to fully understand what an IP filter is. Iptables is an IP 
filter, and if you don't fully understand this, you will get serious problems 
when designing your firewalls in the future. 
      </p><p>An IP filter operates mainly in layer 2, of the
TCP/IP reference stack. Iptables however has the
ability to also work in layer 3, which actually most IP
filters of today have. But per definition an IP
filter works in the second layer.
      </p><p>If the IP filter implementation is strictly following
the definition, it would 
in other words only be able to filter packets based on their
IP headers
(Source and Destionation address, TOS/DSCP/ECN,
TTL, Protocol, etc. Things 
that are actually in the IP header.) However, since the Iptables implementation 
is not perfectly strict around this definition, it is also able to filter 
packets based on other headers that lie deeper into the packet
(TCP, UDP, 
etc), and shallower (MAC source address).
      </p><p>There is one thing however, that iptables is rather strict about these days.
It does not "follow" streams or puzzle data together. This would simply be too
processor- and memoryconsuming . The implications of this will be discussed a
little bit more  further on. It does keep track of packets and see if they are
of the same stream (via sequence numbers,
port numbers, etc.) almost exactly the same way as
the real TCP/IP stack. This is called connection
tracking, and thanks to this we can do things such as
Destination and Source Network Address
Translation (generally called
DNAT
and SNAT),
 as well as state matching of
packets.
      </p><p>As I implied above, iptables can not connect data from different packets to 
each other (per default), and hence you can never be fully certain that you
will see the complete data at all times. I am specifically mentioning this
since there are constantly at least a couple of questions about this on the
different mailing lists pertaining to netfilter and iptables and how to do
things that are generally considered a really bad idea. For example, every
time there is a new windows based virus, there are a couple of different
persons asking how to drop all streams containing a specific string. The bad
idea about this is that it is so easily circumvented. For example if we match
for something like this:
      </p><p>cmd.exe</p><p>Now, what happens if the virus/exploit writer is smart enough to make the 
packet size so small that cmd winds up in one packet, and 
.exe winds up in the next packet? Or what if the packet has 
to travel through a network that has this small a packet size on its own? Yes, 
since these string matching functions is unable to work across packet 
boundaries, the packet will get through anyway.
      </p><p>Some of you may now be asking yourself, why don't we simply make it possible 
for the string matches, etcetera to read across packet boundaries? It is 
actually fairly simple. It would be too costly on processor time. Connection 
tracking is already taking way to much processor time to be totally 
comforting. To add another extra layer of complexity to connection tracking, 
such as this, would probably kill more firewalls than anyone of us could 
expect. Not to think of how much memory would be used for this simple task on 
each machine.
      </p><p>There is also a second reason for this functionality not being developed.
There  is a technology called proxies.
Proxies
 were developed to handle
traffic in  the higher layers, and are hence much better at fullfilling these
requirements. Proxies were originally developed to handle downloads and often
used pages and to help you get the most out of slow Internet connections. For
example, <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SQUIDPROXY"><i>Squid</i></a> is a
webproxy. A
person who wants to download a page sends the request, the proxy either grabs
the request or receives the request and opens the connection to the web
browser, and then connects to the webserver and downloads the file, and when
it has downloaded the file or page, it sends it to the client. Now, if a
second browser wants to read the same page again, the file or page is already
downloaded to the proxy, and can be sent directly, and saves bandwidth for
us.
      </p><p>As you may understand, proxies also have quite a lot of functionality to go in 
and look at the actual content of the files that it downloads. Because of 
this, they are much better at looking inside the whole streams, files, pages 
etc.
      </p><p>Now, after warning you about the inherent problems of doing level 7 filtering
in iptables and netfilter, there is actually a set of patches that has
attacked these problems. This is called <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#L7-FILTER"><i>http://l7-filter.sourceforge.net/</i></a>. It can be used to match on a lot of layer
7 protocols but is mainly to be used together with
QoS and traffic accounting,
even though it can be used for pure filtering as well. The
l7-filter is still
experimental and developed outside the kernel and netfilter coreteam, and
hence you will not hear more about it here.
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="IPFILTERGENERALTERMS">IP filtering terms and 
expressions</a></h2><p>To fully understand the upcoming chapters there are a few general terms and 
expressions that one must understand, including a lot of details regarding the 
TCP/IP chapter. This is a listing of the most common
terms used in IP filtering.
      </p><p></p><ul><li style="list-style-type: opencircle"><p>Drop/Deny - When a packet is
dropped or denied, it is simply deleted, and no further actions are taken. No
reply to tell the host it was dropped, nor is the receiving host of the packet
notified in any way. The packet simply disappears.
          </p></li><li style="list-style-type: opencircle"><p>Reject
 - This is basically the same
as a drop or deny target or policy, except that we also send a reply to the
host sending the packet that was dropped. The reply may be specified, or
automatically calculated to some value. (To this date, there is unfortunately
no iptables functionality to also send a packet notifying the receiving host
of the rejected packet what happened (ie, doing the reverse of the Reject
target). This would be very good in certain circumstances, since the receiving
host has no ability to stop Denial of Service attacks from happening.)
          </p></li><li style="list-style-type: opencircle"><p>State
 - A specific state of a
packet in comparison to a whole stream of packets. For example, if the packet
is the first that the firewall sees or knows about, it is considered new (the
SYN packet in a TCP
connection), or if it is part of an already established connection that the
firewall knows about, it is considered to be established. States are known
through the connection tracking system, which keeps track of all the
sessions.
          </p></li><li style="list-style-type: opencircle"><p>Chain
 - A chain contains a ruleset
of rules that are applied on packets that traverses the chain. Each chain has
a specific purpose (e.g., which table it is connected to, which specifies what
this chain is able to do), as well as a specific application area (e.g., only
forwarded packets, or only packets destined for this host). In iptables, there
are several different chains, which will be discussed in depth in later
chapters.
          </p></li><li style="list-style-type: opencircle"><p>Table
 - Each table has a specific
purpose, and in iptables there are 4 tables. The raw,
nat, mangle and
filter tables. For example, the
filter table is specifically designed to filter
packets, while the nat table is specifically designed
to NAT (Network Address
Translation) packets.
          </p></li><li style="list-style-type: opencircle"><p>Match
 - This word can have two
different meanings when it comes to IP filtering. The
first meaning would be a single match that tells a rule that 
this header must contain this and this information. For example, the
--source match tells us that the source address must be a
specific network range or host address. The second meaning is if a whole rule
is a match. If the packet matches the whole rule, the jump or target
instructions will be carried out (e.g., the packet will be dropped.)
          </p></li><li style="list-style-type: opencircle"><p>Target
 - There is generally a target
set for each rule in a ruleset. If the rule has matched fully, the target
specification tells us what to do with the packet. For example, if we should
drop or accept it, or NAT it, etc. There is also something called a jump
specification, for more information see the jump description in this list. As
a last note, there might not be a target or jump for each rule, but there may
be.
          </p></li><li style="list-style-type: opencircle"><p>Rule
 - A rule is a set of a match or
several matches together with a single target in most implementations of
IP filters, including the iptables implementation.
There are some implementations which let you use several targets/actions per
rule.
          </p></li><li style="list-style-type: opencircle"><p>Ruleset
 - A ruleset is the complete
set of rules that are put into a whole IP filter
implementation. In the case of iptables, this
includes all of the rules set in the filter,
nat, raw and
mangle tables, and in all of the subsequent chains.
Most of the time, they are written down in a configuration file of some sort.
	  </p></li><li style="list-style-type: opencircle"><p>Jump
 - The jump instruction is
closely related to a target. A jump instruction is written exactly the same as
a target in iptables, with the exception that instead of writing a target
name, you write the name of another chain. If the rule matches, the packet
will hence be sent to this second chain and be processed as usual in that
chain.
          </p></li><li style="list-style-type: opencircle"><p>Connection tracking - A firewall which implements connection
tracking is able to track connections/streams simply put. The ability to do so
is often done at the impact of lots of processor and memory usage. This is
unfortunately true in iptables as well, but much work has been done to work on
this. However, the good side is that the firewall will be much more secure
with connection tracking properly used by the implementer of the firewall
policies. 
          </p></li><li style="list-style-type: opencircle"><p>Accept
 - To accept a packet and to
let it through the firewall rules. This is the opposite of the drop or deny
targets, as well as the reject target.
          </p></li><li style="list-style-type: opencircle"><p>Policy
 - There are two kinds of
policies that we speak about most of the time when implementing a firewall.
First we have the chain policies, which tells the firewall implementation the
default behaviour to take on a packet if there was no rule that matched it.
This is the main usage of the word that we will use in this book. The second
type of policy is the security policy that we may have written documentation
on, for example for the whole company or for this specific network segment.
Security policies are very good documents to have thought through properly and
to study properly before starting to actually implement the firewall. 
         </p></li></ul></div><div class="SECTION"><hr><h2 class="SECTION"><a name="HOWTOPLANANIPFILTER">How to plan an IP filter</a></h2><p>One of the first steps to think about when planning the firewall is their 
placement. This should be a fairly simple step since mostly your networks 
should be fairly well segmented anyway. One of the first places that comes to 
mind is the gateway between your local network(s) and the Internet. This is a 
place where there should be fairly tight security. Also, in larger networks it 
may be a good idea to separate different divisions from each other via 
firewalls. For example, why should the development team have access to the 
human resources network, or why not protect the economic department from other 
networks? Simply put, you don't want an angry employee with the pink slip 
tampering with the salary databases.
      </p><p>Simply put, the above means that you should plan your networks as well as 
possible, and plan them to be segregated. Especially if the network is 
medium- to big-sized (100 workstations or more, based on different aspects of 
the network). In between these smaller networks, try to put firewalls that will 
only allow the kind of traffic that you would like.
      </p><p>It may also be a good idea to create a De-Militarized Zone
(DMZ) in your 
network in case you have servers that are reached from the Internet. A DMZ is 
a small physical network with servers, which is closed down to the extreme. 
This lessens the risk of anyone actually getting in to the machines in the 
DMZ, and it lessens the risk of anyone actually getting in and downloading any 
trojans etc. from the outside. The reason that they are called de-militarized 
zones is that they must be reachable from both the inside and the outside, and 
hence they are a kind of grey zone (DMZ simply put).
      </p><p>There are a couple of ways to set up the policies and default behaviours in a 
firewall, and this section will discuss the actual theory that you should think 
about before actually starting to implement your firewall, and helping you to 
think through your decisions to the fullest extent.
      </p><p>Before we start, you should understand that most firewalls have default 
behaviours. For example, if no rule in a specific chain matches, it can be 
either dropped or accepted per default. Unfortunately, there is only one
policy per chain, but this is
often easy to get around if we want to have different policies per network
interface etc.
      </p><p>There are two basic policies that we normally use. Either we drop everything 
except that which we specify, or we accept everything except that which we 
specifically drop. Most of the time, we are mostly interested in the drop 
policy, and then accepting everything that we want to allow specifically. This 
means that the firewall is more secure per default, but it may also mean that 
you will have much more work in front of you to simply get the firewall to 
operate properly. 
      </p><p>Your first decision to make is to simply figure out which type of firewall you 
should use. How big are the security concerns? What kind of applications must 
be able to get through the firewall? Certain applications are horrible to 
firewalls for the simple reason that they negotiate
ports

to use for data streams inside a control session. This makes it extremely hard
for the firewall to know which ports to open up. The most common applications
works with iptables, but the more rare ones do not work to this day,
unfortunately. 
      </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>There are also some applications that work partially, such as
ICQ.
Normal ICQ usage works perfectly, but not the chat or
file sending functions, since they require specific code to handle the
protocol. Since the ICQ
protocols are not standardized (they are proprietary and may be changed at any
time) most IP filters have chosen to either keep the
ICQ protocol handlers out, or as patches that can be
applied to the firewalls. Iptables have chosen to keep them as separate
patches.
        </p></td></tr></tbody></table></div><p>It may also be a good idea to apply
layered
security measures, which we have actually already discussed partially so far.
What we mean with this, is that you should use as many security measures as
possible at the same time, and don't rely on any one single security concept.
Having this as a basic concept for your security will increase security
tenfold at least. For an example, let's look at this.
      </p><p>        </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/cisco-pix-dmz-lan.jpg"></p></div>
      <p></p><p>As you can see, in this example I have in this example chosen to place a
Cisco PIX firewall at the
perimeter of all three network connections. It may
NAT the
internal
LAN, as
well as the DMZ if necessary. It may also block all
outgoing traffic except http return traffic as well as
ftp and ssh traffic. It can
allow incoming http traffic from both the LAN and the
Internet, and ftp and
ssh traffic from the LAN. On
top of this, we note that each webserver is based on Linux, and can hence
throw iptables and netfilter on each of the machines as well and add the same
basic policies on these. This way, if someone manages to break the
Cisco PIX, we can still rely on the netfilter
firewalls locally on each machine, and vice versa. This allows for so called
layered security.
      </p><p>On top of this, we may add <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SNORTNIDS"><i>Snort</i></a>
 on each of the machines.
Snort is an excellent open source network
intrusion detection system 
(NIDS)
which looks for signatures in the packets that it sees, and if it sees a
signature of some kind of attack or breakin it can either
e-mail the
administrator and notify him about it, or even make active responses to the
attack such as blocking the IP from which the attack
originated. It should be noted that active responses should not be used
lightly since snort has a bad behaviour of reporting lots of false positives
(e.g., reporting an attack which is not really an attack).
      </p><p>It could also be a good idea to throw in an proxy
 in front of the webservers to
catch some of the bad packets as well, which could also be a possibility to
throw in for all of the locally generated webconnections. With a
webproxy you can narrow down on traffic used by
webtraffic from your employees, as well as restrict their
webusage to some extent. As for a
webproxy to your own
webservers, you can use it to block some of the most
obvious connections to get through. A good proxy that
may be worth using is the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#SQUIDPROXY"><i>Squid</i></a>.
      </p><p>Another precaution that one
can take is to install <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TRIPWIREIDS"><i>Tripwire</i></a>. This is an excellent last line of defense
kind of application, it is generally considered to be a Host
Intrusion Detection System. What
it does is to make checksums of all the files  specified in a configuration
file, and then it is run from cron
 once in a while to see that all
of the specified files are the same as before, or have not changed in an
illegit way. This program will in other words be able to find out if anyone
has actually been able to get through and tampered with the system. A
suggestion is to run this on all of the webservers.
      </p><p>One last thing to note is that it is always a good thing to follow standards,
as we know. As you have already seen with the ICQ
example, if you don't use standardized
 systems, things can go
terribly wrong. For your own environments, this can be ignored to some extent,
but if you are running a broadband service or modempool, it gets all the more
important. People who connect through you must always be able to rely on your
standardization, and you can't expect everyone to run the specific operating
system of your choice. Some people want to run
Windows, some want to run
Linux or even VMS and so on.
If you base your security on proprietary systems, you are in for some
trouble.

      </p><p>A good example of this is certain broadband services that have popped up in 
Sweden who base lots of security on Microsoft network logon. This may sound 
like a great idea to begin with, but once we start considering other operating 
systems and so on, this is no longer such a good idea. How will someone running 
Linux get online? Or
VAX/VMS? Or HP/UX? With Linux it can be done of course, if 
it wasn't for the fact that the network administrator refuses anyone to use the 
broadband service if they are running linux by simply blocking them in such 
case. However, this book is not a theological discussion of what is best, so 
let's leave it as an example of why it is a bad idea to use
non-standards.
      </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="AEN3144">What's next?</a></h2><p>This chapter has gone through several of the basic IP filtering and security 
measures that you can take to secure your networks, workstations and servers. 
The following subjects have been brought up:
      </p><p></p><ul><li style="list-style-type: opencircle"><p>IP filtering usage
          </p></li><li style="list-style-type: opencircle"><p>IP filtering policies
          </p></li><li style="list-style-type: opencircle"><p>Network planning
          </p></li><li style="list-style-type: opencircle"><p>Firewall planning
          </p></li><li style="list-style-type: opencircle"><p>Layered security techniques
          </p></li><li style="list-style-type: opencircle"><p>Network segmentation
          </p></li></ul><p>In the next chapter we will take a quick look at what
Network Address Translation
(NAT) is, and after that we will start looking closer
at Iptables and it's functionality and actually start getting hands on with
the beast.
      </p></div></div><div class="CHAPTER"><hr><h1><a name="NATINTRO"></a>Chapter 4. Network Address Translation Introduction</h1><p>NAT is one of the biggestattractions of Linux and
Iptables to this day it seems. Instead of using fairly expensive third party
solutions such as Cisco PIX etc, a lot of smaller
companies and personal users have chosen to go with these solutions instead.
One of the main reasons is that it is cheap, and secure. It requires an old
computer, a fairly new Linux distribution which you can download for free from
the Internet, a spare network card or two and cabling. 
  </p><p>This chapter will describe a little bit of the basic theory about
NAT, what it can be used for, how it works and what
you should think about before starting to work on these subjects. 
  </p><div class="SECTION"><hr><h2 class="SECTION"><a name="NATUSAGE">What NAT is used for and basic terms and 
expressions</a></h2><p>Basically, NAT allows a host or several hosts to
share the same IP address in a way. For example, let's say we have a local
network consisting of 5-10 clients. We set their default gateways to point
through the NAT server. Normally the packet would
simply be forwarded by the gateway machine, but in the case of an
NAT server it is a little bit different. 
    </p><p>NAT servers translates the source and destination
addresses of packets as we already said to different addresses. The
NAT server receives the packet, rewrites the source
and/or destination address and then recalculates the checksum of the packet.
One of the most common usages of NAT is the
SNAT (Source Network Address
Translation) function. Basically, this is used in the above
example if we can't afford or see any real idea in having a real public IP for
each and every one of the clients. In that case, we use one of the private IP
ranges for our local network (for example, 192.168.1.0/24), and then we turn
on SNAT for our local network.
SNAT will then turn all 192.168.1.0 addresses into
it's own public IP (for example, 217.115.95.34). This way, there will be 5-10
clients or many many more using the same shared IP address.
    </p><p>There is also something called DNAT, which can be
extremely helpful when it comes to setting up servers etc. First of all, you
can help the greater good when it comes to saving IP space, second, you can
get an more or less totally impenetrable firewall in between your server and
the real server in an easy fashion, or simply share an IP for several servers
that are separated into several physically different servers. For example, we
may run a small company server farm containing a webserver and
ftp server on the same machine, while there is a
physically separated machine containing a couple of different chat services
that the employees working from home or on the road can use to keep in touch
with the employees that are on-site. We may then run all of these services on
the same IP from the outside via DNAT. 
    </p><p>The above example is also based on separate port
NAT'ing, or often called
PNAT. We don't refer to this very often throughout
this book, since it is covered by the DNAT and
SNAT functionality in netfilter. 
    </p><p>In Linux, there are actually two separate types of
NAT that can be used, either
Fast-NAT or Netfilter-NAT.
Fast-NAT is implemented inside the IP routing code of
the Linux kernel, while Netfilter-NAT is also
implemented in the Linux kernel, but inside the netfilter code. Since this
book won't touch the IP routing code too closely, we will pretty much leave it
here, except for a few notes. Fast-NAT is generally
called by this name since it is much faster than the netfilter
NAT code. It doesn't keep track of connections, and
this is both its main pro and con. Connection tracking takes a lot of
processor power, and hence it is slower, which is one of the main reasons that
the Fast-NAT is faster than
Netfilter-NAT. As we also said, the bad thing about
Fast-NAT doesn't track connections, which means it
will not be able to do SNAT very well for whole
networks, neither will it be able to NAT complex
protocols such as FTP, IRC
and other protocols that Netfilter-NAT is able to
handle very well. It is possible, but it will take much, much more work than
would be expected from the Netfilter implementation.
    </p><p>There is also a final word that is basically a synonym to
SNAT, which is the Masquerade word. In Netfilter,
masquerade is pretty much the same as SNAT with the
exception that masquerading will automatically set the new source IP to the
default IP address of the outgoing network interface. 
    </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="NATCAVEATS">Caveats using NAT</a></h2><p>As we have already explained to some extent, there are quite a lot of 
minor caveats with using NAT. The main problem is
certain protocols and applications which may not work at all. Hopefully, these
applications are not too common in the networks that you administer, and in
such case, it should cause no huge problems. 
    </p><p>The second and smaller problem is applications and protocols which will only 
work partially. These protocols are more common than the ones that will not 
work at all, which is quite unfortunate, but there isn't very much we can do 
about it as it seems. If complex protocols continue to be built, this is a 
problem we will have to continue living with. Especially if the protocols 
aren't standardized.
    </p><p>The third, and largest problem, in my point of view, is the fact that the user
who sits behind a NAT server to get out on the
internet will not be able to run his own server. It could be done, of course,
but it takes a lot more time and work to set this up. In companies, this is
probably preferred over having tons of servers run by different employees that
are reachable from the Internet, without any supervision. However, when it
comes to home users, this should be avoided to the very last. You should never
as an Internet service provider NAT your customers from a private IP range to
a public IP. It will cause you more trouble than it is worth having to deal
with, and there will always be one or another client which will want this or
that protocol to work flawlessly. When it doesn't, you will be called down
upon.
     </p><p>As one last note on the caveats of NAT, it should be
mentioned that NAT is actually just a hack more or
less. NAT was a solution that was worked out while
the <span class="emphasis"><i class="EMPHASIS">IANA</i></span> and other organisations noted that the Internet
grew exponentially, and that the IP addresses would soon be in shortage.
NAT was and is a short term solution to the problem
of the IPv4 (Yes, IP which we have talked about
before is a short version of IPv4 which stands for
Internet Protocol version 4). The long term solution to the
IPv4 address shortage is the
IPv6 protocol, which also solves a ton of other
problems. IPv6 has 128 bits assigned to their
addresses, while IPv4 only have 32 bits used for IP
addresses. This is an incredible increase in address space. It may seem like
ridiculous to have enough IP addresses to set one IP address for every atom in
our planet, but on the other hand, noone expected the
IPv4 address range to be too small either. 
     </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="EXAMPLENATMACHINE">Example NAT machine in theory</a></h2><p>This is a small theoretical scenario where we want a
NAT server between 2 different networks and an
Internet connection. What we want to do is to connect 2 networks to each
other, and both networks should have access to each other and the Internet. We
will discuss the hardware questions you should take into consideration, as
well as other theory you should think about before actually starting to
implement the NAT machine.
    </p><div class="SECTION"><hr><h3 class="SECTION"><a name="WHATISNEEDEDTOBUILDNAT">What is needed to build a 
NAT machine</a></h3><p>Before we discuss anything further, we should start by looking at what kind of
hardware is needed to build a Linux machine doing
NAT. For most smaller networks, this should be no
problem, but if you are starting to look at larger networks, it can actually
become one. The biggest problem with NAT is that it
eats resources quite fast. For a small private network with possibly 1-10
users, a <span class="emphasis"><i class="EMPHASIS">486</i></span> with <span class="emphasis"><i class="EMPHASIS">32 MB</i></span> of ram will
do more than enough. However, if you are starting to get up around 100 or more
users, you should start considering what kind of hardware you should look at.
Of course, it is also a good idea to consider bandwidth usage, and how many
connections will be open at the same time. Generally, spare computers will do
very well however, and this is one of the big pros of using a Linux based
firewall. You can use old scrap hardware that you have left over, and hence
the firewall will be very cheap in comparison to other firewalls.
      </p><p>You will also need to consider network cards. How many separate networks will
connect to your NAT/filter machine? Most of the time
it is simply enough to connect one network to an Internet connection. If you
connect to the Internet via ethernet, you should generally have 2
ethernet cards, etcetera. It can be a good idea to
choose 10/100 mbit/s network cards of relatively good brands for this for
scalability, but most any kinds of cards will do as long as they have drivers
in the Linux kernel. A note on this matter: avoid using or getting network
cards that don't have drivers actually in the Linux kernel distribution. I
have on several occasions found network cards/brands that have separately
distributed drivers on discs that work dismally. They are generally not very
well maintained, and if you get them to work on your kernel of choice to begin
with, the chance that they will actually work on the next major Linux kernel
upgrade is very small. This will most of the time mean that you may have to
get a little bit more costly network cards, but in the end it is worth it.
      </p><p>As a note, if you are going to build your firewall on really old hardware, it
is suggested that you at least try to use PCI buses
or better as far as possible. First of all, the network cards will hopefully
be possible to use in the future when you upgrade. Also,
ISA buses are extremely slow and heavy on the
CPU usage. This means that putting a lot of load onto
ISA network cards can next to kill your machine.
      </p><p>Finally, one thing more to consider is how much memory you put into the 
NAT/firewall machine. It is a good idea to put in at
least more than <span class="emphasis"><i class="EMPHASIS">64 MB</i></span> of memory if possible, even if it
is possible run it on <span class="emphasis"><i class="EMPHASIS">32MB</i></span> of memory.
NAT isn't extremely huge on memory consumption, but
it may be wise to add as much as possible just in case you will get more
traffic than expected. 
      </p><p>As you can see, there is quite a lot to think about when it comes to hardware. 
But, to be completely honest, in most cases you don't need to think about these 
points at all, unless you are building a NAT machine
for a large network or company. Most home users need not think about this, but
may more or less use whatever hardware they have handy. There are no complete
comparisons and tests on this topic, but you should fare rather well with just
a little bit of common sense.
      </p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="NATPLACEMENT">Placement of NAT machines</a></h3><p>This should look fairly simple, however, it may be harder than you originally
thought in large networks. In general, the NAT
machine should be placed on the perimeter of the network, just like any
filtering machine out there. This, most of the time,
means that the NAT and
filtering machines are the same machine, of course.
Also worth a thought, if you have very large networks, it may be worth
splitting the network into smaller networks and assign a
NAT/filtering machine for each of these networks.
Since NAT takes quite a lot of processing power, this
will definitely help keep round trip time (RTT, the
time it takes for a packet to reach a destination and the return packet to get
back) down.
      </p><p>In our example network as we described above, with two networks and an
Internet connection we should, in other words, look at how large the two
networks are. If we can consider them to be small and depending on what
requirements the clients have, a couple of hundred clients should be no
problem on a decent NAT machine. Otherwise, we could
have split up the load over several machines by setting public IP's on smaller
NAT machines, each handling their own smaller segment
of the network and then let the traffic congregate over a specific routing
only machine. This of course takes into consideration that you must have
enough public IP's for all of your NAT machines, and
that they are routed through your routing machine. 
      </p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="NATPROXIES">How to place proxies</a></h3><p>Proxies are a general problem when it comes to NAT in
most cases unfortunately, especially transparent proxies. Normal proxies
should not cause too much trouble, but creating a transparent proxy is a dog
to get to work, especially on larger networks. The first problem is that
proxies take quite a lot of processing power, just the same as
NAT does. To put both of these on the same machine is
not advisable if you are going to handle large network traffic. The second
problem is that if you NAT the source IP as well as
the destination IP, the proxy will not be able to know what hosts to contact.
E.g., which server is the client trying to contact? Since all that information
is lost during the NAT translation since the packets can't contain that
information as well if they are NAT'ed, it's a
problem. Locally, this has been solved by adding the information in the
internal data structures that are created for the packets, and hence proxies
such as squid can get the information. 
      </p><p>As you can see, the problem is that you don't have much of a choice if 
you are going to run a transparent proxy. There are,
of course, possibilities, but they are not advisable really. One possibility
is to create a proxy outside the firewall and create
a routing entry that routes all web traffic through that machine, and then
locally on the proxy machine NAT the packets to the
proper ports for the proxy. This way, the information
is preserved all the way to the proxy machine and is
still available on it.
      </p><p>The second possibility is to simply create a proxy
outside the firewall, and then block all webtraffic except the traffic going
to the proxy. This way, you will force all users to
actually use the proxy. It's a crude way of doing it,
but it will hopefully work.
      </p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="NATFINALSTAGE">The final stage of our NAT machine</a></h3><p>As a final step, we should bring all of this information together, and see how
we would solve the NAT machine then. Let's take a
look at a picture of the networks and how it looks. We have decided to put a
proxy just outside the NAT/filtering machine as
described above, but inside counting from the router. This area could be
counted upon as an DMZ in a sense, with the
NAT/filter machine being a router between the
DMZ and the two company networks. You can see the
exact layout we are discussing in the image below.
      </p><p>        </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/nat-machine.jpg"></p></div>
      <p></p><p>All the normal traffic from the NAT'ed networks will
be sent through the DMZ directly to the router, which
will send the traffic on out to the internet. Except, yes, you guessed it,
webtraffic which is instead marked inside the netfilter part of the
NAT machine, and then routed based on the mark and to
the proxy machine. Let's take a look at what I am talking about. Say a
http packet is seen by the
NAT machine. The mangle table can then be used to
mark the packet with a netfilter mark (also known as
nfmark). Even later when we should route the packets to our router, we will be
able to check for the nfmark within the routing
tables, and based on this mark, we can choose to route the http packets to the
proxy server. The proxy server will then do it's work
on the packets. We will touch these subjects to some extent later on in the
document, even though much of the routing based part is happening inside the
advanced routing topics. 
      </p><p>The NAT machine has a public IP available over the
internet, as well as the router and any other machines that may be available
on the Internet. All of the machines inside the
NAT'ed networks will be using private IP's, hence
saving both a lot of cash, and the Internet address space.
      </p></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="NATWHATSNEXT">What's next?</a></h2><p>We have in this chapter in detail explained NAT and
the theory around it. In special we have discussed a couple of different
angles to use, and some of the normal problems that may arise from using
NAT together with proxies. This chapter has covered
the following areas in detail.
    </p><p></p><ul><li style="list-style-type: opencircle"><p>NAT usage
        </p></li><li style="list-style-type: opencircle"><p>NAT components
        </p></li><li style="list-style-type: opencircle"><p>NAT history
        </p></li><li style="list-style-type: opencircle"><p>Terms and words used about NAT
        </p></li><li style="list-style-type: opencircle"><p>Hardware discussions regarding NAT
        </p></li><li style="list-style-type: opencircle"><p>Problems with NAT
        </p></li></ul><p>All of this will always be of use when you are working with netfilter and
iptables. NAT is very widely used in today's
networks, even though it is only an intermediary solution for a very
unfortunate and unexpected problem. NAT will of
course be discussed more in depth later on when we start looking at the Linux
netfilter and iptables implementations in more depth.
    </p></div></div><div class="CHAPTER"><hr><h1><a name="PREPARATIONS"></a>Chapter 5. Preparations</h1><p>  This chapter is aimed at getting you started and to help you understand
the role Netfilter and iptables play in Linux today.
This chapter should hopefully get you set up and finished to go with your
experimentation, and installation of your firewall. Given time and
perseverance, you'll then get it to perform exactly as you want it to.
  </p><div class="SECTION"><hr><h2 class="SECTION"><a name="WHERETOGET">Where to get iptables</a></h2><p>The iptables user-space package can be
downloaded from the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NETFILTER.ORG"><i>http://www.netfilter.org/</i></a>. The iptables 
package also makes use of kernel space facilities which can be configured 
into the kernel during make configure. The necessary 
steps will be discussed a bit further down in this document.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="KERNELSETUP">Kernel setup</a></h2><p>To run the pure basics of iptables you need to configure 
the following options into the kernel while doing make 
config or one of its related commands:
   </p><p>CONFIG_PACKET - This option allows
applications and utilities that need to work directly with various network 
devices. Examples of such utilities are tcpdump or snort.
   </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>CONFIG_PACKET is strictly speaking not needed
for iptables to work, but since it contains so many uses, I have chosen to
include it here. If you do not want it, don't include it.
    </p></td></tr></tbody></table></div><p>CONFIG_NETFILTER - This option is required if 
you're going to use your computer as a firewall or gateway to the Internet. In 
other words, this is most definitely required for anything in this tutorial 
to work at all. I assume you will want this, since you are reading this.
   </p><p>And of course you need to add the proper drivers for your interfaces to work
properly, i.e. Ethernet adapter, PPP and
SLIP interfaces. The above will only add some of the
pure basics in iptables. You won't be able to do anything productive to be
honest, it just adds the framework to the kernel. If you want to use the more
advanced options in Iptables, you need to set up the proper configuration
options in your kernel. Here we will show you the options available in a basic
2.4.9 kernel and a brief explanation:
   </p><p>CONFIG_IP_NF_CONNTRACK - This module is
needed to make connection tracking. Connection tracking is used by, among
other things, NAT and
Masquerading. If you need to firewall machines on a
LAN you most definitely should mark this option. For
example, this module is required by the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXT"><i>rc.firewall.txt</i></a> script to work.
   </p><p>CONFIG_IP_NF_FTP - This module is required if
you want to do connection tracking on FTP
connections. Since FTP connections are quite hard to
do connection tracking on in normal cases, conntrack needs a so called helper;
this option compiles the helper. If you do not add this module you won't be
able to FTP through a firewall or gateway properly.
   </p><p>CONFIG_IP_NF_IPTABLES - This option is
required if you want do any kind of filtering,
masquerading or NAT. It adds
the whole iptables identification framework to the kernel. Without this you
won't be able to do anything at all with iptables.
   </p><p> 
CONFIG_IP_NF_MATCH_LIMIT - This module isn't
exactly required but it's used in the example <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXT"><i>rc.firewall.txt</i></a>. This option provides the LIMIT match,
that adds the possibility to control how many packets per minute that are to
be matched, governed by an appropriate rule. For example, -m limit
--limit 3/minute would match a maximum of 3 packets per minute. This
module can also be used to avoid certain Denial of Service attacks.
   </p><p>CONFIG_IP_NF_MATCH_MAC - This allows us to
match packets based on MAC addresses. Every Ethernet
adapter has its own MAC address. We could for
instance block packets based on what MAC address is
used and block a certain computer pretty well since the
MAC address very seldom changes. We don't use this
option in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXT"><i>rc.firewall.txt</i></a> example or anywhere else.
   </p><p>CONFIG_IP_NF_MATCH_MARK - This allows us to
use a MARK match. For example, if we use the target
MARK we could mark a packet and then depending on if this
packet is marked further on in the table, we can match based on this mark. This
option is the actual match MARK, and further down we will
describe the actual target MARK.
   </p><p>CONFIG_IP_NF_MATCH_MULTIPORT - This module
allows us to match packets with a whole range of destination ports or source
ports. Normally this wouldn't be possible, but with this match it is.
   </p><p>CONFIG_IP_NF_MATCH_TOS - With this match we
can match packets based on their TOS field.
TOS stands for <span class="emphasis"><i class="EMPHASIS">Type Of Service</i></span>.
TOS can also be set by certain rules in the
mangle table and via the ip/tc commands.
   </p><p>CONFIG_IP_NF_MATCH_TCPMSS - This option adds
the possibility for us to match TCP packets based on
their MSS field.
   </p><p>CONFIG_IP_NF_MATCH_STATE - This is one of the
biggest news in comparison to ipchains. With this module we
can do stateful matching on packets. For example, if we have already seen
traffic in two directions in a TCP connection, this
packet will be counted as ESTABLISHED. This module is used
extensively in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXT"><i>rc.firewall.txt</i></a> example.
   </p><p> 
CONFIG_IP_NF_MATCH_UNCLEAN - This module will
add the possibility for us to match IP,
TCP, UDP and
ICMP packets that don't conform to type or are
invalid. We could for example drop these packets, but we never know if they
are legitimate or not. Note that this match is still experimental and might
not work perfectly in all cases.
   </p><p>CONFIG_IP_NF_MATCH_OWNER - This option will
add the possibility for us to do matching based on the owner of a socket. For
example, we can allow only the user root to have Internet access. This module
was originally just written as an example on what could be done with the new
iptables. Note that this match is still experimental and
might not work for everyone.
   </p><p>CONFIG_IP_NF_FILTER - This module will add
the basic filter table which will enable you to do
IP filtering at all. In the
filter table you'll find the
INPUT, FORWARD and
OUTPUT chains. This module is required if you plan to
do any kind of filtering on packets that you receive and send. 
   </p><p>CONFIG_IP_NF_TARGET_REJECT - This target
allows us to specify that an ICMP error message
should be sent in reply to incoming packets, instead of plainly dropping them
dead to the floor. Keep in mind that TCP connections,
as opposed to ICMP and UDP,
are always reset or refused with a TCP RST packet.
   </p><p>CONFIG_IP_NF_TARGET_MIRROR - This allows
packets to be bounced back to the sender of the packet. For example, if we set
up a MIRROR target on destination port
HTTP on our INPUT chain and
someone tries to access this port, we would bounce his packets back to him and
finally he would probably see his own homepage.
   </p><div class="WARNING"><p></p><table class="WARNING" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/warning.gif" hspace="5" alt="Warning"></td><td align="LEFT" valign="TOP"><p>The MIRROR target is not to be used lightly. It was
originally built as a test and example module, and will most probably be very
dangerous to the person setting it up (resulting in serious DDoS if among
other things).
     </p></td></tr></tbody></table></div><p>CONFIG_IP_NF_NAT - This module allows
network address translation, or
NAT, in its different forms. This option gives us
access to the nat table in iptables. This option is required if we want to do
port forwarding, masquerading, etc. Note that this option is not required for
firewalling and masquerading of a LAN, but you should
have it present unless you are able to provide unique IP addresses for all
hosts. Hence, this option is required for the example <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXT"><i>rc.firewall.txt</i></a> script to work
properly, and most definitely on your network if you do not have the ability
to add unique IP addresses as specified above.
   </p><p> 
CONFIG_IP_NF_TARGET_MASQUERADE - This module
adds the MASQUERADE target. For instance if we don't know
what IP we have to the Internet this would be the preferred way of getting the
IP instead of using DNAT or
SNAT. In other words, if we use
DHCP, PPP,
SLIP or some other connection that assigns us an IP,
we need to use this target instead of SNAT.
Masquerading gives a slightly higher load on the computer than
NAT, but will work without us knowing the IP address
in advance.
   </p><p>CONFIG_IP_NF_TARGET_REDIRECT - This target is
useful together with application proxies, for
example. Instead of letting a packet pass right through, we remap them to go
to our local box instead. In other words, we have the possibility to make a
transparent proxy this way.
   </p><p>CONFIG_IP_NF_TARGET_LOG - This adds the
LOG target and its functionality to
iptables. We can use this module to log certain packets to
syslogd and hence see what is happening to the packet. This is invaluable for
security audits, forensics or debugging a script you are writing.
   </p><p>CONFIG_IP_NF_TARGET_TCPMSS - This option can
be used to counter Internet Service Providers and servers who block
ICMP Fragmentation Needed packets. This can result in
web-pages not getting through, small mails getting through while larger mails
don't, ssh works but scp dies after handshake, etc. We can then use the
TCPMSS target to overcome this by clamping our
MSS (Maximum Segment Size) to the
PMTU (Path Maximum Transmit Unit). 
   </p><p>CONFIG_IP_NF_COMPAT_IPCHAINS - Adds a
compatibility mode with the obsolete ipchains. Do not look
to this as any real long term solution for solving migration from Linux 2.2
kernels to 2.4 kernels, since it may well be gone with kernel 2.6.
   </p><p>CONFIG_IP_NF_COMPAT_IPFWADM - Compatibility
mode with obsolescent ipfwadm. Definitely don't look to
this as a real long term solution.
   </p><p> As you can see, there is a heap of options. I have briefly
explained here what kind of extra behaviors you can expect from each
module. These are only the options available in a vanilla Linux 2.4.9
kernel. If you would like to take a look at more options, I suggest you
look at the patch-o-matic (POM) functions in
Netfilter user-land which will add heaps of other
options in the kernel. POM fixes are additions
that are supposed to be added in the kernel in the future but have not
quite reached the kernel yet. This may be for various reasons
- such as the patch not being stable yet, to Linus Torvalds being unable
to keep up, or not wanting to let the patch in to the mainstream kernel
yet since it is still experimental.
   </p><p> You will need the following options compiled into your kernel,
or as modules, for the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXT"><i>rc.firewall.txt</i></a> script to work. If you need help
with the options that the other scripts need, look at the example firewall
scripts section.
   </p><p></p><ul><li style="list-style-type: opencircle"><p>   CONFIG_PACKET
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_NETFILTER
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_CONNTRACK
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_FTP
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_IRC
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_IPTABLES
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_FILTER
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_NAT
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_MATCH_STATE
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_TARGET_LOG
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_MATCH_LIMIT
   </p></li><li style="list-style-type: opencircle"><p>   CONFIG_IP_NF_TARGET_MASQUERADE
   </p></li></ul><p> At the very least the above will be required for the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCFIREWALLTXT"><i>rc.firewall.txt</i></a> script. In
the other example scripts I will explain what requirements they have in
their respective sections. For now, let's try to stay focused on the main
script which you should be studying now.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="USERLANDSETUP">User-land setup</a></h2><p> First of all, let's look at how we compile the
iptables package. It's important to realize that for
the most part configuration and compilation of iptables goes hand in hand with
the kernel configuration and compilation. Certain distributions come with
the iptables package preinstalled, one of these is Red
Hat. However, in old Red Hat it is disabled per default. We will check closer
on how to enable it and take a look at other distributions further on in
this chapter.
   </p><div class="SECTION"><hr><h3 class="SECTION"><a name="COMPILINGUSERAPPS">Compiling the user-land applications</a></h3><p> First of all unpack the iptables package.
Here, we have used the <span class="emphasis"><i class="EMPHASIS">iptables 1.2.6a</i></span> package and a
vanilla 2.4 kernel. Unpack as usual, using bzip2 -cd
iptables-1.2.6a.tar.bz2 | tar -xvf - (this can also be
accomplished with the tar -xjvf
iptables-1.2.6a.tar.bz2, which should do pretty much the same as
the first command. However, this may not work with older versions of
tar). The package should now be unpacked properly into
a directory named iptables-1.2.6a. For
more information read the <tt class="FILENAME">iptables-1.2.6a/INSTALL</tt>
file which contains pretty good information on compiling and getting the
program to run.
    </p><p> After this, there you have the option of configuring and
installing extra modules and options etcetera for the kernel.The step
described here will only check and install standard patches that are
pending for inclusion to the kernel, there are some even more experimental
patches further along, which may only be available when you carry out
other steps.
    </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>    Some of these patches are highly experimental and may not be such a
good idea to install them. However, there are heaps of extremely
interesting matches and targets in this installation step so don't be
afraid of at least looking at them.
     </p><p> To carry out this step we do something like this from the root
of the iptables package:
     </p></td></tr></tbody></table></div><p>     make pending-patches KERNEL_DIR=/usr/src/linux/
    </p><p>The variable <code class="VARNAME">KERNEL_DIR</code> should point to the actual place that
your kernel source is located at. Normally this should be
<tt class="FILENAME">/usr/src/linux/</tt> but this may vary, and most probably you
will know yourself where the kernel source is available.
    </p><p> 
The above command only asks about certain patches that are just about to
enter the kernel anyway. There might be more patches and additions that
the developers of Netfilter are about to add to the kernel, but is a bit
further away from actually getting there. One way to install these is by
doing the following:
     </p><p>make most-of-pom KERNEL_DIR=/usr/src/linux/
    </p><p> 
The above command would ask about installing parts of what in
Netfilter world is called patch-o-matic, but still skip
the most extreme patches that might cause havoc in your kernel. Note that
we say ask, because that's what these commands actually do. They ask you
before anything is changed in the kernel source. To be able to install
<span class="emphasis"><i class="EMPHASIS">all</i></span> of the patch-o-matic
stuff you will need to run the following command:
    </p><p>     make patch-o-matic KERNEL_DIR=/usr/src/linux/
    </p><p>Don't forget to read the help for each patch thoroughly before doing anything. 
Some patches will destroy other patches while others may destroy your kernel 
if used together with some patches from patch-o-matic
etc.
    </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>You may totally ignore the above steps if you don't want to
patch your kernel, it is in other words not necessary to do the above. However,
there are some really interesting things in the
patch-o-matic that you may want to look at so there's
nothing bad in just running the commands and see what they contain.
     </p></td></tr></tbody></table></div><p> After this you are finished doing the
patch-o-matic parts of installation, you may now
compile a new kernel making use of the new patches that you have added to
the source. Don't forget to configure the kernel again since the new
patches probably are not added to the configured options. You may wait
with the kernel compilation until after the compilation of the user-land
program iptables if you feel like it, though.
    </p><p>Continue by compiling the iptables user-land application. To
compile iptables you issue a simple command that looks like
this:
    </p><p>     make KERNEL_DIR=/usr/src/linux/
    </p><p> The user-land application should now compile properly. If not,
you are on your own, or you could subscribe to the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NETFILTERLIST">Netfilter mailing list</a>, where you have the
chance of asking for help with your problems. There are a few things
that might go wrong with the installation of iptables,
so don't panic if it won't work. Try to think logically about it and find
out what's wrong, or get someone to help you.
    </p><p> If everything has worked smoothly, you're ready to install the
binaries by now. To do this, you would issue the following command to
install them:
    </p><p>make install KERNEL_DIR=/usr/src/linux/
    </p><p> Hopefully everything should work in the program now. To use any
of the changes in the iptables user-land applications
you should now recompile and reinstall your kernel and modules, if you
hadn't done so before. For more information about installing the user-land
applications from source, check the <tt class="FILENAME">INSTALL</tt> file in
the source which contains excellent information on the subject of
installation.
    </p></div><div class="SECTION"><hr><h3 class="SECTION"><a name="INSTALLRH71">Installation on Red Hat 7.1</a></h3><p> Red Hat 7.1 comes preinstalled with a 2.4.x kernel that has
Netfilter and iptables
compiled in. It also contains all the basic user-land programs and
configuration files that are needed to run it. However, the Red Hat people
have disabled the whole thing by using the backward compatible
ipchains module. Annoying to say the least, and a lot
of people keep asking different mailing lists why
iptables doesn't work. So, let's take a brief look at how
to turn the ipchains module off and how to install
iptables instead.
    </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p> The default Red Hat 7.1 installation today comes with a
hopelessly old version of the user-space applications, so you might want to
compile a new version of the applications as well as install a new and
custom compiled kernel before fully exploiting
iptables.
     </p></td></tr></tbody></table></div><p>First of all you will need to turn off the ipchains modules
so it won't start in the future. To do this, you will need to change some
filenames in the <tt class="FILENAME">/etc/rc.d/</tt> directory-structure. The
following command should do it:
    </p><p>     chkconfig --level 0123456 ipchains off
    </p><p> By doing this we move all the soft links that points to the
<tt class="FILENAME">/etc/rc.d/init.d/ipchains</tt> script to K92ipchains. The
first letter which per default would be S, tells the initscripts to start
the script. By changing this to K we tell it to Kill the service instead,
or to not run it if it was not previously started. Now the service won't
be started in the future.
    </p><p>However, to stop the service from actually running right now we need to run 
another command. This is the service command which can be 
used to work on currently running services. We would then issue the following 
command to stop the ipchains service:
    </p><p>service ipchains stop
    </p><p>Finally, to start the iptables service. First of all, we
need to know which run-levels we want it to run in. Normally this would be in
run-level 2, 3 and 5. These run-levels are used for the following things:
    </p><p>     </p><p></p><ul><li style="list-style-type: opencircle"><p>       2. Multiuser without NFS or the same as 3 if there is no networking.
       </p></li><li style="list-style-type: opencircle"><p>       3. Full multiuser mode, i.e. the normal run-level to run in.
       </p></li><li style="list-style-type: opencircle"><p>       5. X11. This is used if you automatically boot into Xwindows.
       </p></li></ul>
    <p></p><p>To make iptables run in these run-levels we would do the
following commands:
    </p><p>chkconfig --level 235 iptables on
    </p><p>The above commands would in other words make the iptables
service run in  run-level 2, 3 and 5. If you'd like the
iptables service to run in some other run-level you would
have to issue the same command in those. However, none of the other run-levels
should be used, so you should not really need to activate it for those
run-levels. Level 1 is for single user mode, i.e, when you need to fix a
screwedup box. Level 4 should be unused, and level 6 is for shutting the
computer down.
    </p><p>To activate the iptables service, we just run the following
command:
    </p><p>     service iptables start
    </p><p> There are no rules in the iptables script.
To add rules to an Red Hat 7.1 box, there is two common ways. Firstly, you
could edit the <tt class="FILENAME">/etc/rc.d/init.d/iptables</tt> script. This
would have the undesired effect of deleting all the rules if you updated
the iptables package by RPM. The other way would be to load the rule-set
and then save it with the iptables-save command and
then have it loaded automatically by the rc.d scripts.
    </p><p> First we will describe the how to set up
iptables by cutting and pasting to the
iptables init.d script. To add rules that are to be run
when the computer starts the service, you add them under the start)
section, or in the start() function. Note, if you add the rules under the
start) section don't forget to stop the start() function in the start)
section from running. Also, don't forget to edit a the stop) section
either which tells the script what to do when the computer is going down
for example, or when we are entering a run-level that doesn't require
iptables.  Also, don't forget to check out the restart
section and condrestart. Note that all this work will probably be trashed
if you have, for example, Red Hat Network automatically update your
packages. It may also be trashed by updating from the
iptables RPM package.
    </p><p>The second way of doing the set up would require the following: First of all,
make and write a rule-set in a shell script file, or directly with
iptables, that will meet your requirements, and don't
forget to experiment a bit. When you find a set up that works without
problems, or as you can see without bugs, use the
iptables-save command. You could either use it normally,
i.e. iptables-save &gt; /etc/sysconfig/iptables, which would
save the rule-set to the file <tt class="FILENAME">/etc/sysconfig/iptables</tt>.
This file is automatically used by the iptables rc.d script
to restore the rule-set in the future. The other way is to save the script by
doing service iptables save, which would save the script
automatically to <tt class="FILENAME">/etc/sysconfig/iptables</tt>. The next time
you reboot the computer, the iptables rc.d script will use
the command iptables-restore to restore the rule-set from
the save-file <tt class="FILENAME">/etc/sysconfig/iptables</tt>. Do not intermix
these two methods, since they may heavily damage each other and render your
firewall configuration useless.
    </p><p>When all of these steps are finished, you can deinstall the currently
installed ipchains and iptables packages.
This because we don't want the system to mix up the new
iptables user-land application with the old preinstalled
iptables applications. This step is only necessary if you
are going to install iptables from the source package. It's
not unusual for the new and the old package to get mixed up, since the rpm
based installation installs the package in non-standard places and won't get
overwritten by the installation for the new iptables
package. To carry out the deinstallation, do as follows:
    </p><p>rpm -e iptables
    </p><p> And why keep ipchains lying around if you
won't be using it any more?  Removing it is done the same way as with the
old iptables binaries, etc:
    </p><p>rpm -e ipchains
    </p><p> After all this has been completed, you will have finished with
the update of the iptables package from source, having
followed the source installation instructions. None of the old binaries,
libraries or include files etc should be lying around any more.
    </p></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="AEN3738">What's next?</a></h2><p>This chapter has discussed how to get and how to install iptables and
netfilter on some common platforms. In most modern Linux distributions
iptables will come with the default installation, but sometimes it might be
necessary to compile your own kernel and iptables binaries to get the
absolutely latest updates. This chapter should have been a small help managing
this. 
    </p><p>The next chapter will discuss how tables and chains are traversed, and in
what order this happens and so forth. This is very important to comprehend to
be able to build your own working rulesets in the future. All the different
tables will be discussed in some depth also since they are created for
different purposes.
    </p></div></div><div class="CHAPTER"><hr><h1><a name="TRAVERSINGOFTABLES"></a>Chapter 6. Traversing of tables and chains</h1><p>In this chapter we'll discuss how packets traverse the different
chains, and in which order. We will also discuss the order in which the
tables are traversed. We'll see how valuable this is later on, when we
write our own specific rules. We will also look at the points which
certain other components, that also are kernel dependent, enter into the
picture. Which is to say the different routing decisions and so on. This
is especially necessary if we want to write iptables
rules that could change routing patterns/rules for packets; i.e. why and
how the packets get routed, good examples of this are 
DNAT and SNAT. Not to be forgotten
are, of course, the TOS bits.
  </p><div class="SECTION"><hr><h2 class="SECTION"><a name="TRAVERSINGGENERAL">General</a></h2><p> When a packet first enters the firewall, it hits the hardware
and then gets passed on to the proper device driver in the kernel. Then
the packet starts to go through a series of steps in the kernel, before it
is either sent to the correct application (locally), or forwarded to
another host - or whatever happens to it.
    </p><p>    First, let us have a look at a packet that is destined for our
own local host. It would pass through the following steps before actually
being delivered to our application that receives it:
   </p><div class="TABLE"><a name="TABLEDESTINATIONLOCALHOST"></a><p><b>Table 6-1. Destination local host (our own
machine)</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="40"><col width="48"><col width="101"><col width="1*"></colgroup><thead><tr><th>Step</th><th>Table</th><th>Chain</th><th>Comment</th></tr></thead><tbody><tr><td>1</td><td>&nbsp;</td><td>&nbsp;</td><td>On the wire (e.g., Internet)</td></tr><tr><td>2</td><td>&nbsp;</td><td>&nbsp;</td><td>Comes in on the interface (e.g., eth0)</td></tr><tr><td>3</td><td>raw</td><td>PREROUTING</td><td>This chain is used to handle packets before the connection 
tracking takes place. It can be used to set a specific connection not to be 
handled by the connection tracking code for example.</td></tr><tr><td>4</td><td>&nbsp;</td><td>&nbsp;</td><td>This is when the connection tracking code takes place as 
discussed in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#STATEMACHINE"><i>The state machine</i></a> chapter.</td></tr><tr><td>5</td><td>mangle</td><td>PREROUTING</td><td>This chain is normally used for mangling packets, i.e.,
changing TOS and so on.</td></tr><tr><td>6</td><td>nat</td><td>PREROUTING</td><td>This chain is used for DNAT mainly. 
Avoid filtering in this chain since it will be bypassed in certain cases.</td></tr><tr><td>7</td><td>&nbsp;</td><td>&nbsp;</td><td>Routing decision, i.e., is the packet destined for our
local host or to be forwarded and where.</td></tr><tr><td>8</td><td>mangle</td><td>INPUT</td><td>At this point, the mangle INPUT chain 
is hit. We use this chain to mangle packets, after they have been routed, but 
before they are actually sent to the process on the machine.</td></tr><tr><td>9</td><td>filter</td><td>INPUT</td><td>This is where we do filtering for all incoming traffic
destined for our local host. Note that all incoming packets destined for this
host pass through this chain, no matter what interface or in which direction
they came from.</td></tr><tr><td>10</td><td>&nbsp;</td><td>&nbsp;</td><td><p>Local process or application (i.e., server or client program).
	</p></td></tr></tbody></table></div><p>Note that this time the packet was passed through the
INPUT chain instead of the
FORWARD chain. Quite logical. Most probably the only
thing that's really logical about the traversing of tables and chains in your
eyes in the beginning, but if you continue to think about it, you'll find
it will get clearer in time.
    </p><p>Now we look at the outgoing packets from our own local host and what steps they
go through.
    </p><div class="TABLE"><a name="TABLESOURCELOCALHOST"></a><p><b>Table 6-2. Source local host (our own
machine)</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="40"><col width="48"><col width="101"><col width="1*"></colgroup><thead><tr><th>Step</th><th>Table</th><th>Chain</th><th>Comment</th></tr></thead><tbody><tr><td>1</td><td>&nbsp;</td><td>&nbsp;</td><td>Local process/application (i.e., server/client
program)</td></tr><tr><td>2</td><td>&nbsp;</td><td>&nbsp;</td><td>Routing decision. What source address to use, what outgoing
interface to use, and other necessary information that needs to be
gathered.</td></tr><tr><td>3</td><td>raw</td><td>OUTPUT</td><td>This is where you do work before the connection tracking has 
taken place for locally generated packets. You can mark connections so that 
they will not be tracked for example.</td></tr><tr><td>4</td><td>&nbsp;</td><td>&nbsp;</td><td>This is where the connection tracking takes place for locally 
generated packets, for example state changes et cetera. This is discussed in 
more detail in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#STATEMACHINE"><i>The state machine</i></a> chapter.</td></tr><tr><td>5</td><td>mangle</td><td>OUTPUT</td><td>This is where we mangle packets, it is suggested that you do
not filter in this chain since it can have side effects.</td></tr><tr><td>6</td><td>nat</td><td>OUTPUT</td><td>This chain can be used to NAT outgoing packets from the
firewall itself.</td></tr><tr><td>7</td><td>&nbsp;</td><td>&nbsp;</td><td>Routing decision, since the previous mangle and nat changes may 
have changed how the packet should be routed.</td></tr><tr><td>8</td><td>filter</td><td>OUTPUT</td><td>This is where we filter packets going out from the local
host.</td></tr><tr><td>9</td><td>mangle</td><td>POSTROUTING</td><td>The POSTROUTING chain in the
mangle table is mainly used when we want to do mangling on packets before they
leave our host, but after the actual routing decisions. This chain will be hit
by both packets just traversing the firewall, as well as packets created by
the firewall itself.</td></tr><tr><td>10</td><td>nat</td><td>POSTROUTING</td><td>This is where we do SNAT as described 
        earlier. It is suggested that you don't do filtering here since it can 
        have side effects, and certain packets might slip through even though 
        you set a default policy of DROP.</td></tr><tr><td>11</td><td>&nbsp;</td><td>&nbsp;</td><td>Goes out on some interface (e.g., eth0)</td></tr><tr><td>12</td><td>&nbsp;</td><td>&nbsp;</td><td>On the wire (e.g., Internet)</td></tr></tbody></table></div><p>In this example, we're assuming that the packet is destined for another host on
another network. The packet goes through the different steps in the following
fashion:
   </p><div class="TABLE"><a name="TABLEFORWARDEDPACKETS"></a><p><b>Table 6-3. Forwarded packets</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="40"><col width="48"><col width="101"><col width="1*"></colgroup><thead><tr><th>Step</th><th>Table</th><th>Chain</th><th>Comment</th></tr></thead><tbody><tr><td>1</td><td>&nbsp;</td><td>&nbsp;</td><td>On the wire (i.e., Internet)</td></tr><tr><td>2</td><td>&nbsp;</td><td>&nbsp;</td><td>Comes in on the interface (i.e., eth0)</td></tr><tr><td>3</td><td>raw</td><td>PREROUTING</td><td>Here you can set a connection to not be handled by the 
connection tracking system.</td></tr><tr><td>4</td><td>&nbsp;</td><td>&nbsp;</td><td>This is where the non-locally generated connection tracking 
takes place, and is also discussed more in detail in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#STATEMACHINE"><i>The state machine</i></a> chapter.</td></tr><tr><td>5</td><td>mangle</td><td>PREROUTING</td><td>This chain is normally used for mangling packets, i.e.,
changing TOS and so on.</td></tr><tr><td>6</td><td>nat</td><td>PREROUTING</td><td>This chain is used for DNAT mainly. 
        SNAT is done further on. Avoid filtering in 
        this chain since it will be bypassed in certain cases.</td></tr><tr><td>7</td><td>&nbsp;</td><td>&nbsp;</td><td>Routing decision, i.e., is the packet destined for our
local host or to be forwarded and where.</td></tr><tr><td>8</td><td>mangle</td><td>FORWARD</td><td>The packet is then sent on to the
FORWARD chain of the mangle table. This can be used
for very specific needs, where we want to mangle the packets after the initial
routing decision, but before the last routing decision made just before the
packet is sent out.</td></tr><tr><td>9</td><td>filter</td><td>FORWARD</td><td>The packet gets routed onto the
FORWARD chain. Only forwarded packets go through
here, and here we do all the filtering. Note that all traffic that's
forwarded goes through here (not only in one direction), so you need to
think about it when writing your rule-set.</td></tr><tr><td>10</td><td>mangle</td><td>POSTROUTING</td><td>This chain is used for specific types of packet
mangling that we wish to take place after all kinds of routing decisions have 
been done, but still on this machine.</td></tr><tr><td>11</td><td>nat</td><td>POSTROUTING</td><td>This chain should first and foremost be used for
SNAT. Avoid doing
filtering here, since certain packets might pass this chain without ever
hitting it. This is also where Masquerading is done.</td></tr><tr><td>12</td><td>&nbsp;</td><td>&nbsp;</td><td>Goes out on the outgoing interface (i.e., eth1).</td></tr><tr><td>13</td><td>&nbsp;</td><td>&nbsp;</td><td>Out on the wire again (i.e., LAN).</td></tr></tbody></table></div><p> As you can see, there are quite a lot of steps to pass through.
The packet can be stopped at any of the iptables
chains, or anywhere else if it is malformed; however, we are mainly
interested in the iptables aspect of this lot. Do note
that there are no specific chains or tables for different interfaces or
anything like that. FORWARD is always passed by
all packets that are forwarded over this firewall/router.
    </p><div class="CAUTION"><p></p><table class="CAUTION" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/caution.gif" hspace="5" alt="Caution"></td><td align="LEFT" valign="TOP"><p>Do not use the INPUT chain to filter on in the previous
scenario! INPUT is meant solely for packets to our 
local host that do not get routed to any other destination.
     </p></td></tr></tbody></table></div><p>We have now seen how the different chains are traversed in three separate
scenarios. If we were to figure out a good map of all this, it would look
something like this:
    </p><p>    </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/tables_traverse.jpg"></p></div>
   <p></p><p>To clarify this image, consider this. If we get a packet into the first
routing decision that is not destined for the local machine itself, it will be
routed through the FORWARD chain. If the packet is,
on the other hand, destined for an IP address that
the local machine is listening to, we would send the packet through the
INPUT chain and to the local machine.
   </p><p>Also worth a note, is the fact that packets may be destined for the local
machine, but the destination address may be changed within the
PREROUTING chain by doing
NAT. Since this takes place before the first routing
decision, the packet will be looked upon after this change. Because of this,
the routing may be changed before the routing decision is done. Do note, that
<span class="emphasis"><i class="EMPHASIS">all</i></span> packets will be going through one or the other path
in this image. If you DNAT a packet back to the same network
that it came from, it will still travel through the rest of the chains until
it is back out on the network.
   </p><div class="TIP"><p></p><table class="TIP" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/tip.gif" hspace="5" alt="Tip"></td><td align="LEFT" valign="TOP"><p>If you feel that you want more information, you could use the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RCTEST-IPTABLESTXT"><i>rc.test-iptables.txt</i></a>
script. This test script should give you the necessary rules to test how the
tables and chains are traversed.
    </p></td></tr></tbody></table></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="MANGLETABLE">Mangle table</a></h2><p>This table should as we've already noted mainly be used for mangling packets.
In other words, you may freely use the mangle targets within this table, to 
change TOS (Type Of Service) fields and the like.
   </p><div class="CAUTION"><p></p><table class="CAUTION" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/caution.gif" hspace="5" alt="Caution"></td><td align="LEFT" valign="TOP"><p> You are strongly advised not to use this table for any
filtering; nor will any DNAT, SNAT
or Masquerading work in this table.
    </p></td></tr></tbody></table></div><p>The following targets are only valid in the mangle table. They can not be used 
outside the mangle table.
   </p><p></p><ul><li style="list-style-type: opencircle"><p>TOS</p></li><li style="list-style-type: opencircle"><p>TTL</p></li><li style="list-style-type: opencircle"><p>MARK</p></li><li style="list-style-type: opencircle"><p>SECMARK</p></li><li style="list-style-type: opencircle"><p>CONNSECMARK</p></li></ul><p>The TOS target is used to set and/or change
the Type of Service field in the packet. This
could be used for setting up policies on the network regarding how a
packet should be routed and so on. Note that this has not been perfected
and is not really implemented on the Internet and most of the routers
don't care about the value in this field, and sometimes, they act faulty
on what they get. Don't set this in other words for packets going to the
Internet unless you want to make routing decisions on it, with iproute2.
   </p><p> 
The TTL  target is used to change the TTL (Time
To Live) field of the packet. We could tell packets to only have a specific
TTL and so on. One good reason for this could be that
we don't want to give ourself away to nosy Internet Service Providers. Some
Internet Service Providers do not like users running multiple computers on one
single connection, and there are some Internet Service Providers known to look
for a single host generating different TTL values,
and take this as one of many signs of multiple computers connected to a single
connection.
   </p><p>The MARK target is used to set special mark values
to the packet. These marks could then be recognized by the
iproute2 programs to do different routing on the packet
depending on what mark they have, or if they don't
have any. We could also do bandwidth limiting and Class Based Queuing based on
these marks.
    </p><p>The SECMARK target can be used to set security context marks on single
packets for usage in SELinux and other security
systems that are able to handle these marks. This is then used for very fine
grained security on what subsystems of the system can touch what packets et
cetera. The SECMARK can also be set on a whole connection
with the CONNSECMARK target. 
    </p><p>CONNSECMARK  is used to copy a security context to or from a
single packet from or to the whole connection. This is then used by the
SELinux and other security systems to do more
fine-grained security on a connection level. 
    </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="NATTABLE">Nat table</a></h2><p>This table should only be used for NAT
(Network Address Translation) on different packets. In other words, it should
only be used to translate the packet's source field or destination field. 
Note that,
as we have said before, only the first packet in a stream will hit this table.
After this, the rest of the packets will automatically have the same
action taken on them as the first packet. The actual targets that do
these kind of things are:
   </p><p></p><ul><li style="list-style-type: opencircle"><p>DNAT</p></li><li style="list-style-type: opencircle"><p>SNAT</p></li><li style="list-style-type: opencircle"><p>MASQUERADE</p></li><li style="list-style-type: opencircle"><p>REDIRECT</p></li></ul><p>The DNAT target is mainly used in cases where you have a public IP and
want to redirect accesses to the firewall to some other host (on a
DMZ for example). In other words, we change the
destination address of the packet and reroute it to the host.
   </p><p>SNAT  is mainly used for changing the source address of packets. For
the most part you'll hide your local networks or DMZ,
etc. A very good example would be that of a firewall of which we know outside
IP address, but need to substitute our local network's IP numbers with that of
our firewall. With this target the firewall will automatically
SNAT and De-SNAT the packets, hence
making it possible to make connections from the LAN
to the Internet. If your network uses 192.168.0.0/netmask for example, the
packets would never get back from the Internet, because IANA has regulated
these networks (among others) as private and only for use in isolated
LANs.</p><p>The MASQUERADE  target is used in exactly the same way as
SNAT, but the MASQUERADE target takes a
little bit more overhead to compute. The reason for this, is that each time
that the MASQUERADE target gets hit by a packet, it
automatically checks for the IP address to use, instead of doing as the
SNAT target does - just using the single configured IP
address. The MASQUERADE target makes it possible to work
properly with Dynamic DHCP IP addresses that your ISP
might provide for your PPP,
PPPoE or SLIP connections to
the Internet.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="RAWTABLE">Raw table</a></h2><p>The raw table is mainly only used for one thing, and 
that is to set a mark on packets that they should not be handled by the 
connection tracking system. This is done by using the 
NOTRACK  target on the packet. If a connection is hit with 
the NOTRACK target, then conntrack will simply not track 
the connection. This has been impossible to solve without adding a new table, 
since none of the other tables are called until after conntrack has actually 
been run on the packets, and been added to the conntrack tables, or matched 
against an already available connection. You can read more about this in the 
<a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#STATEMACHINE"><i>The state machine</i></a> chapter.
   </p><p>This table only has the PREROUTING  and
OUTPUT  chains. No other chains are
required since these are the only places that you can deal with packets before
they actually hit the connection tracking.
   </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>For this table to work, the iptable_raw module must 
be loaded. It will be loaded automatically if iptables is run with the 
-t raw keywords, and if the module is available.
    </p></td></tr></tbody></table></div><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>The raw table is a relatively new addition to iptables and the kernel. It might 
not be available in early 2.6 and 2.4 kernels unless patched.
    </p></td></tr></tbody></table></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="FILTERTABLE">Filter table</a></h2><p>The filter table is mainly used for filtering
packets. We can match packets and filter them in whatever way we want. This is
the place that we actually take action against packets and look at what they
contain and DROP or /ACCEPT them,
depending on their content. Of course we may also do prior filtering; however,
this particular table is the place for which filtering was designed. Almost
all targets are usable in this table. We will be more prolific about the
filter table here; however you now know that this table is the right place to
do your main filtering. 
     </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="USERTABLES">User specified chains</a></h2><p>If a packet enters a chain such as the INPUT chain in
the filter table, we can specify a jump rule to a different chain within the
same table. The new chain must be userspecified, it may not be a built-in
chain such as the INPUT or
FORWARD chain for example. If we consider a pointer
pointing at the rule in the chain to execute, the pointer will go down from
rule to rule, from top to bottom until the chain traversal is either ended by
a target or the main chain (I.e., FORWARD,
INPUT, et cetera) ends. Once this happens, the
default policy of the built-in chain will be applied. 
     </p><p>       </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/table_subtraverse.jpg"></p></div>
     <p></p><p>If one of the rules that matches points to another userspecified chain in the
jump specification, the pointer will jump over to this chain and then start
traversing that chain from the top to bottom. For example, see how the rule
execution jumps from rule number 3 to chain 2 in the above image. The packet
matched the matches contained in rule 3, and the jump/target specification was
set to send the packet on for further examination in chain 2.
     </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>Userspecified chains can not have a default policy at the end of the chain.
Only built in chains can have this. This can be circumvented by appending a
single rule at the end of the chain that has no matches, and hence it will
behave as a default policy. If no rule is matched in a userspecified chain,
the default behaviour is to jump back to the originating chain. As seen in the
image above, the rule execution jumps from chain 2 and back to chain 1 rule 4,
below the rule that sent the rule execution into chain 2 to begin with.
       </p></td></tr></tbody></table></div><p>Each and every rule in the user specified chain is traversed until either one
of the rules matches -- then the target specifies if the traversing should end
or continue -- or the end of the chain is reached. If the end of the user
specified chain is reached, the packet is sent back to the invoking chain. The
invoking chain can be either a user specified chain or a built-in chain. 
     </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="AEN4215">What's next?</a></h2><p>In this chapter we have discussed several of the chains and tables and how
they are traversed, including the standard built-in chains and userspecified
chains. This is a very important area to understand. It may be simple, but
unless fully understood, fatal mistakes can be equally easily.
     </p><p>The next chapter will deal in depth with the state machine of netfilter, and
how states are traversed and set on packets in a connection tracking machine.
The next chapter is in other words just as important as this chapter has been. 
     </p></div></div><div class="CHAPTER"><hr><h1><a name="STATEMACHINE"></a>Chapter 7. The state machine</h1><p>  This chapter will deal with the state machine and explain it in
detail. After reading through it, you should have a complete understanding of
how the State machine works. We will also go through a large set of examples on
how states are dealt with within the state machine itself. These should clarify
everything in practice. </p><div class="SECTION"><hr><h2 class="SECTION"><a name="STATEMACHINEINTRODUCTION">Introduction</a></h2><p>  The state machine is a special part within iptables that should really not
be called the state machine at all, since it is really a connection tracking
machine. However, most people recognize it under the first name. Throughout
this chapter I will use these names more or less as if they were synonymous.
This should not be overly confusing. Connection tracking is done to let the
Netfilter framework know the state of a specific connection. Firewalls that
implement this are generally called stateful firewalls. A stateful firewall is
generally much more secure than non-stateful firewalls since it allows us to
write much tighter rule-sets.
   </p><p> Within iptables, packets can be related to tracked connections
in four different so called states. These are known as
NEW, ESTABLISHED,
RELATED and INVALID. We will discuss
each of these in more depth later. With the --state
match we can easily control who or what is allowed to initiate new
sessions.
   </p><p>All of the connection tracking is done by special framework within the kernel
called conntrack. conntrack may be loaded either as a module, or as an
internal part of the kernel itself. Most of the time, we need and want more
specific connection tracking than the default conntrack engine can maintain.
Because of this, there are also more specific parts of conntrack that handles
the TCP, UDP or
ICMP protocols among others. These modules grab
specific, unique, information from the packets, so that they may keep track of
each stream of data. The information that conntrack gathers is then used to
tell conntrack in which state the stream is currently in. For example,
UDP streams are, generally, uniquely identified by
their destination IP address, source IP
address, destination port and
source port.
   </p><p>In previous kernels, we had the possibility to turn on and off
defragmentation. However, since iptables and Netfilter were introduced
and connection tracking in particular, this option was gotten rid of. The
reason for this is that connection tracking can not work properly without
defragmenting packets, and hence defragmenting has been incorporated into
conntrack and is carried out automatically. It can not be turned off,
except by turning off connection tracking. Defragmentation is always carried
out if connection tracking is turned on.
   </p><p>All connection tracking is handled in the PREROUTING
chain, except locally generated packets which are handled in the
OUTPUT chain. What this means is that iptables will
do all recalculation of states and so on within the
PREROUTING chain. If we send the initial packet in a
stream, the state gets set to NEW within the
OUTPUT chain, and when we receive a return packet,
the state gets changed in the PREROUTING chain to
ESTABLISHED, and so on. If the first packet is not
originated by ourself, the NEW state is set within the
PREROUTING chain of course. So, all state changes and
calculations are done within the PREROUTING and
OUTPUT chains of the nat table.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="THECONNTRACKENTRIES">The conntrack entries</a></h2><p>   Let's take a brief look at a conntrack entry and how to read them in
<tt class="FILENAME">/proc/net/ip_conntrack</tt>. This gives a list of all the
current entries in your conntrack database. If you have the
ip_conntrack module loaded, a cat
of <tt class="FILENAME">/proc/net/ip_conntrack</tt> might look like:
    </p><pre class="SCREEN">tcp      6 117 SYN_SENT src=192.168.1.6 dst=192.168.1.9 sport=32775 \
     dport=22 [UNREPLIED] src=192.168.1.9 dst=192.168.1.6 sport=22 \
     dport=32775 [ASSURED] use=2
     </pre><p>   This example contains all the information that the conntrack module
maintains to know which state a specific connection is in. First of all, we
have a protocol, which in this case is tcp. Next, the same value
in normal decimal coding. After this, we see how long this conntrack entry has
to live. This value is set to 117 seconds right now and is decremented
regularly until we see more traffic. This value is then reset to the default
value for the specific state that it is in at that relevant point of time.
Next comes the actual state that this entry is in at the present point of
time. In the above mentioned case we are looking at a packet that is in the
SYN_SENT state. The internal value of a
connection is slightly different from the ones used externally with
iptables. The
value SYN_SENT tells us that we are looking
at a connection that has only seen a TCP SYN packet
in one direction. Next, we see the source IP
address, destination IP address,
source port and destination
port. At this point we see a specific keyword that tells us that
we have seen no return traffic for this connection. Lastly, we
see what we expect of return packets. The information details the
source IP address and destination IP
address (which are both inverted, since the packet is
to be directed back to us). The same thing goes for the
source port and destination
port of the connection. These are the values that should be of
any interest to us.
    </p><p>   The connection tracking entries may take on a series of different values,
all specified in the conntrack headers available in
<tt class="FILENAME">linux/include/netfilter-ipv4/ip_conntrack*.h</tt> files.
These values are dependent on which sub-protocol of
IP we use. TCP,
UDP or ICMP protocols
take specific default values as specified in
<tt class="FILENAME">linux/include/netfilter-ipv4/ip_conntrack.h</tt>. We will
look closer at this when we look at each of the protocols; however, we
will not use them extensively through this chapter, since they are not used
outside of the conntrack internals. Also, depending on how this state
changes, the default value of the time until the connection is destroyed
will also change.
    </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>Recently there was a new patch made available in iptables patch-o-matic,
called tcp-window-tracking. This patch adds, among other things, all of
the above timeouts to special sysctl variables, which means that they can
be changed on the fly, while the system is still running. Hence, this
makes it unnecessary to recompile the kernel every time you want to change
the timeouts.
     </p><p> These can be altered via using specific system calls available in the
<tt class="FILENAME">/proc/sys/net/ipv4/netfilter</tt> directory. You should
in particular look at the
<tt class="FILENAME">/proc/sys/net/ipv4/netfilter/ip_ct_*</tt> variables.
     </p></td></tr></tbody></table></div><p>   When a connection has seen traffic in both directions, the conntrack entry
will erase the [UNREPLIED] flag, and then
reset it. The entry that tells us that the connection has not seen any
traffic in both directions, will be replaced by the
[ASSURED] flag, to be found close to the end
of the entry. The [ASSURED] flag tells us
that this connection is assured and that it will not be erased if we reach the
maximum possible tracked connections. Thus, connections marked as
[ASSURED] will not be erased, contrary to
the non-assured connections (those not marked as
[ASSURED]). How many connections that the
connection tracking table can hold depends upon a variable that can be set
through the ip-sysctl functions in recent kernels. The default value held by
this entry varies heavily depending on how much memory you have. On 128 MB of
RAM you will get 8192 possible entries, and at 256 MB of RAM, you will get
16376 entries. You can read and set your settings through the
<tt class="FILENAME">/proc/sys/net/ipv4/ip_conntrack_max</tt> setting.
    </p><p>A different way of doing this, that is more efficient, is to set the hashsize 
option to the <tt class="FILENAME">ip_conntrack</tt> module once this is loaded. 
Under normal circumstances ip_conntrack_max equals 8 * hashsize. In other 
words, setting the hashsize to 4096 will result in ip_conntrack_max being set 
to 32768 conntrack entries. An example of this would be:
    </p><pre class="SCREEN"><samp class="PROMPT">work3:/home/blueflux#</samp> <kbd class="USERINPUT">modprobe ip_conntrack hashsize=4096</kbd>
<samp class="PROMPT">work3:/home/blueflux#</samp> <kbd class="USERINPUT">cat /proc/sys/net/ipv4/ip_conntrack_max</kbd>
32768
<samp class="PROMPT">work3:/home/blueflux#</samp>
      </pre></div><div class="SECTION"><hr><h2 class="SECTION"><a name="USERLANDSTATES">User-land states</a></h2><p>     As you have seen, packets may take on several different states within the
kernel itself, depending on what protocol we are talking about. However,
outside the kernel, we only have the 4 states as described previously. These
states can mainly be used in conjunction with the state match which will then
be able to match packets based on their current connection tracking state. The
valid states are NEW,
ESTABLISHED, RELATED and
INVALID. The following table will briefly explain
each possible state.
     </p><div class="TABLE"><a name="TABLE.USERLANDSTATES"></a><p><b>Table 7-1. User-land states</b></p><table border="1" rules="all" class="CALSTABLE"><colgroup><col width="96"><col width="1*"></colgroup><thead><tr><th>State</th><th>Explanation</th></tr></thead><tbody><tr><td>NEW</td><td>The NEW state tells us that the packet is
the first packet that we see. This means that the first packet that the
conntrack module sees, within a specific connection, will be matched. For
example, if we see a SYN packet and it is the first
packet in a connection that we see, it will match. However, the packet may as
well not be a SYN packet and still be considered
NEW. This may lead to certain problems in some instances,
but it may also be extremely helpful when we need to pick up lost connections
from other firewalls, or when a connection has already timed out, but in
reality is not closed.
        </td></tr><tr><td>ESTABLISHED</td><td>The ESTABLISHED state has seen traffic in both
directions and will then continuously match those packets.
ESTABLISHED connections are fairly easy to understand. The
only requirement to get into an ESTABLISHED state is that
one host sends a packet, and that it later on gets a reply from the other
host. The NEW state will upon receipt of the reply packet
to or through the firewall change to the ESTABLISHED state.
ICMP reply messages can also be
considered as ESTABLISHED, if we created a packet
that in turn generated the reply ICMP message.
        </td></tr><tr><td>RELATED</td><td>The RELATED state is one of the more tricky
states. A connection is considered RELATED when it is
related to another already ESTABLISHED connection. What
this means, is that for a connection to be considered as
RELATED, we must first have a connection that is considered
ESTABLISHED. The ESTABLISHED connection
will then spawn a connection outside of the main connection. The newly spawned
connection will then be considered RELATED, if the
conntrack module is able to understand that it is RELATED.
Some good examples of connections that can be considered as
RELATED are the FTP-data
connections that are considered RELATED to the
FTP control port, and the
DCC connections issued through
IRC. This could be used to allow
ICMP error messages, FTP
transfers and DCC's to work properly through the
firewall. Do note that most TCP protocols and some
UDP protocols that rely on this mechanism are quite
complex and send connection information within the payload of the
TCP or UDP data segments,
and hence require special helper modules to be correctly understood. 
        </td></tr><tr><td>INVALID</td><td>The INVALID state means that the packet 
can't be identified or that it does not have any state. This may be due to
several reasons, such as the system running out of memory or
ICMP error messages that do not respond to any known
connections. Generally, it is a good idea to DROP
everything in this state.
        </td></tr><tr><td>UNTRACKED</td><td>This is the UNTRACKED state. In brief, if a 
packet is marked within the raw table with the 
NOTRACK target, then that packet will show up as 
UNTRACKED in the state machine. This also means that all 
RELATED connections will not be seen, so some caution must 
be taken when dealing with the UNTRACKED connections since 
the state machine will not be able to see related ICMP 
messages et cetera.
        </td></tr></tbody></table></div><p>     These states can be used together with the --state
match to match packets based on their connection tracking state. This is what
makes the state machine so incredibly strong and efficient for our firewall.
Previously, we often had to open up all ports above 1024 to let all traffic
back into our local networks again. With the state machine in place this is
not necessary any longer, since we can now just open up the firewall for
return traffic and not for all kinds of other traffic.
     </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="TCPCONNECTIONS">TCP connections</a></h2><p>In this section and the upcoming ones, we will take a closer look at the
states and how they are handled for each of the three basic protocols
TCP, UDP and
ICMP. Also, we will take a closer look at how
connections are handled per default, if they can not be classified as either
of these three protocols. We have chosen to start out with the
TCP protocol since it is a stateful protocol in
itself, and has a lot of interesting details with regard to the state machine
in iptables.
   </p><p>A TCP connection is always initiated with the 3-way
handshake, which establishes and negotiates the actual connection over which
data will be sent. The whole session is begun with a
SYN packet, then a SYN/ACK
packet and finally an ACK packet to acknowledge the
whole session establishment. At this point the connection is established and
able to start sending data. The big problem is, how does connection tracking
hook up into this? Quite simply really.
   </p><p>As  far  as the user is concerned, connection tracking works basically the
same for all connection types. Have a look at the picture
below to see exactly what state the stream enters during the different stages
of the connection. As you can see, the connection tracking code does not
really follow the flow of the TCP connection, from
the users viewpoint. Once it has seen one packet(the
SYN), it considers the connection as NEW. Once it
sees the return packet(SYN/ACK), it considers the
connection as ESTABLISHED. If you think about this a
second, you will understand why. With this particular implementation, you can
allow NEW and ESTABLISHED packets to
leave your local network, only allow ESTABLISHED
connections back, and that will work perfectly. Conversely, if the connection
tracking machine were to consider the whole connection establishment as
NEW, we would never really be able to stop outside
connections to our local network, since we would have to allow
NEW packets back in again. To make things more complicated,
there are a number of other internal states that are used for
TCP connections inside the kernel, but which are not
available for us in User-land. Roughly, they follow the state standards
specified within <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#RFC793"><i>RFC 793 - Transmission Control Protocol</i></a> on 
pages 21-23. We will consider these in more detail further along in this 
section.
   </p><p>    </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/state-tcp-connecting.jpg"></p></div>
   <p></p><p>As you can see, it is really quite simple, seen from the user's point of view.
However, looking at the whole construction from the kernel's point of view,
it's a little more difficult. Let's look at an example. Consider exactly how
the connection states change in the
<tt class="FILENAME">/proc/net/ip_conntrack</tt> table. The first state is reported
upon receipt of the first SYN packet in a connection.
   </p><pre class="SCREEN">tcp      6 117 SYN_SENT src=192.168.1.5 dst=192.168.1.35 sport=1031 \
     dport=23 [UNREPLIED] src=192.168.1.35 dst=192.168.1.5 sport=23 \
     dport=1031 use=1
   </pre><p>As you can see from the above entry, we have a precise state in which a SYN
packet has been sent, (the SYN_SENT
flag is set), and to which as yet no reply has been sent (witness the
[UNREPLIED] flag). The next internal state
will be reached when we see another packet in the other direction.
   </p><pre class="SCREEN">tcp      6 57 SYN_RECV src=192.168.1.5 dst=192.168.1.35 sport=1031 \
     dport=23 src=192.168.1.35 dst=192.168.1.5 sport=23 dport=1031 \
     use=1
   </pre><p>Now we have received a corresponding SYN/ACK in
return. As soon as this packet has been received, the state changes once
again, this time to SYN_RECV.

SYN_RECV tells us that the original
SYN was delivered correctly and that the
SYN/ACK return packet also got through the firewall
properly. Moreover, this connection tracking entry has now seen traffic in
both directions and is hence considered as having been replied to. This is not
explicit, but rather assumed, as was the
[UNREPLIED]

 flag above. The final
step will be reached once we have seen the final ACK
in the 3-way handshake.
   </p><pre class="SCREEN">tcp      6 431999 ESTABLISHED src=192.168.1.5 dst=192.168.1.35 \
     sport=1031 dport=23 src=192.168.1.35 dst=192.168.1.5 \
     sport=23 dport=1031 [ASSURED] use=1
   </pre><p>In the last example, we have gotten the final ACK in
the 3-way handshake and the connection has entered the
ESTABLISHED state, as far as the internal mechanisms of
iptables are aware. Normally, the stream will be 
ASSURED
 by now.
   </p><p>A connection may also enter the ESTABLISHED state, but not
be[ASSURED].
 This happens if we have
connection pickup turned on (Requires the tcp-window-tracking patch, and the
ip_conntrack_tcp_loose

 to be set to 1 or
higher). The default, without the tcp-window-tracking patch, is to have this
behaviour, and is not changeable.
   </p><p>When a TCP connection is closed down, it is done in
the following way and takes the following states.
   </p><p>    </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/state-tcp-closing.jpg"></p></div>
   <p></p><p>As you can see, the connection is never really closed until the last
ACK is sent. Do note that this picture only describes
how it is closed down under normal circumstances. A connection may also, for
example, be closed by sending a RST(reset), if
the connection were to be refused. In this case, the connection would be
closed down immediately.
   </p><p>When the TCP connection has been closed down, the
connection enters the TIME_WAIT state, which
is per default set to 2 minutes. This is used so that all packets that have
gotten out of order can still get through our rule-set, even after the
connection has already closed. This is used as a kind of buffer time so that
packets that have gotten stuck in one or another congested router can still
get to the firewall, or to the other end of the connection.
   </p><p>   If the connection is reset by a RST packet,
the state is changed to CLOSE. This
means that the connection per default has 10 seconds before the whole
connection is definitely closed down. RST packets are
not acknowledged in any sense, and will break the connection directly. There
are also other states than the ones we have told you about so far. Here is the
complete list of possible states that a TCP stream
may take, and their timeout values.</p><div class="TABLE"><a name="TABLE.INTERNALSTATES"></a><p><b>Table 7-2. Internal states</b></p><table border="1" rules="all" class="CALSTABLE"><colgroup><col width="2*"><col width="5*"></colgroup><thead><tr><th>State</th><th>Timeout value</th></tr></thead><tbody><tr><td>NONE</td><td>30 minutes</td></tr><tr><td>ESTABLISHED</td><td>5 days</td></tr><tr><td>SYN_SENT</td><td>2 minutes</td></tr><tr><td>SYN_RECV</td><td>60 seconds</td></tr><tr><td>FIN_WAIT</td><td>2 minutes</td></tr><tr><td>TIME_WAIT</td><td>2 minutes</td></tr><tr><td>CLOSE</td><td>10 seconds</td></tr><tr><td>CLOSE_WAIT</td><td>12 hours</td></tr><tr><td>LAST_ACK</td><td>30 seconds</td></tr><tr><td>LISTEN</td><td>2 minutes</td></tr></tbody></table></div><p>   These values are most definitely not absolute. They may change with kernel
revisions, and they may also be changed via the proc file-system in the
<tt class="FILENAME">/proc/sys/net/ipv4/netfilter/ip_ct_tcp_*</tt> variables. The
default values should, however, be fairly well established in practice. These
values are set in seconds. Early versions of the patch used jiffies (which 
was a bug).
   </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>Also note that the User-land side of the state machine does not look at 
TCP flags (i.e., RST, ACK, and SYN are flags) set in 
the TCP packets. This is generally bad, since you may 
want to allow packets in the NEW state to get through the 
firewall, but when you specify the NEW flag, you will in 
most cases mean SYN packets.
    </p><p>This is not what happens with the current state implementation; instead, even a
packet with no bit set or an ACK flag, will count as
NEW.
This can be used for redundant firewalling and so on, but it is generally
extremely bad on your home network, where you only have a single firewall. To
get around this behavior, you could use the command explained in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NEWNOTSYN"><i>State NEW packets but no SYN bit set</i></a> section of the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#COMMONPROBLEMS"><i>Common problems and questions</i></a> appendix.
Another way is to install the tcp-window-tracking extension
from patch-o-matic, and set the 
<tt class="FILENAME">/proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_loose</tt> to 
zero, which will make the firewall drop all NEW packets with anything but the 
SYN flag set.
    </p></td></tr></tbody></table></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="UDPCONNECTIONS">UDP connections</a></h2><p>UDP connections are in themselves not stateful
connections, but rather stateless. There are several reasons why, mainly
because they don't contain any connection establishment or connection
closing; most of all they lack sequencing. Receiving two
UDP datagrams in a specific order does not say
anything about the order in which they were sent. It is, however,
still possible to set states on the connections within the kernel. Let's have
a look at how a connection can be tracked and how it might look in conntrack.

   </p><p>    </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/state-udp-connection.jpg"></p></div>
   <p></p><p>As you can see, the connection is brought up almost exactly in the
same way as a TCP connection. That is, from the
user-land point of view. Internally, conntrack information looks quite a bit
different, but intrinsically the details are the same. First of all, let's
have a look at the entry after the initial UDP packet
has been sent.
   </p><pre class="SCREEN">udp      17 20 src=192.168.1.2 dst=192.168.1.5 sport=137 dport=1025 \
     [UNREPLIED] src=192.168.1.5 dst=192.168.1.2 sport=1025 \
     dport=137 use=1
   </pre><p>As you can see from the first and second values, this is an
UDP packet. The
first is the protocol name, and the second is protocol number. This is just
the same as for TCP connections. The third value
marks how many seconds this state entry has to live. After this, we get the
values of the packet that we have seen and the future expectations of packets
over this connection reaching us from the initiating packet sender. These are
the source, destination, source port and destination port. At this
point, the [UNREPLIED] flag tells us that
there's so far been no response to the packet. Finally, we get a brief list of
the expectations for returning packets. Do note that the latter entries are
in reverse order to the first values. The timeout at this
point is set to 30 seconds, as per default.

   </p><pre class="SCREEN">udp      17 170 src=192.168.1.2 dst=192.168.1.5 sport=137 \
     dport=1025 src=192.168.1.5 dst=192.168.1.2 sport=1025 \
     dport=137 [ASSURED] use=1
   </pre><p>At this point the server has seen a reply to the first packet sent out and the
connection is now considered as ESTABLISHED. This is not
shown in the connection tracking, as you can see. The main difference is that
the [UNREPLIED] flag has now gone. Moreover,
the default timeout has changed to 180 seconds - but in this example that's
by now been decremented to 170 seconds - in 10 seconds' time, it will be 160
seconds. There's one thing that's missing, though, and can change a bit, and
that is the [ASSURED] flag described above.
For the [ASSURED] flag to be set on a tracked
connection, there must have been a legitimate reply packet to the NEW packet.

   </p><pre class="SCREEN">udp      17 175 src=192.168.1.5 dst=195.22.79.2 sport=1025 \
     dport=53 src=195.22.79.2 dst=192.168.1.5 sport=53 \
     dport=1025 [ASSURED] use=1
   </pre><p>At this point, the connection has become assured. The connection looks
exactly the same as the previous example. If this connection is not
used for 180 seconds, it times out. 180 Seconds is a comparatively low value,
but should be sufficient for most use. This value is reset to its full value
for each packet that matches the same entry and passes through the firewall,
just the same as for all of the internal states.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="ICMPCONNECTIONS">ICMP connections</a></h2><p>ICMP packets are far from a stateful stream, since
they are only used for controlling and should never establish any connections.
There are four ICMP types that will generate return
packets however, and these have 2 different states. These
ICMP messages can take the NEW and
ESTABLISHED states. The ICMP types
we are talking about are Echo request and
reply, Timestamp request and
reply, Information request
and reply and finally Address mask
request and reply. Out of these, the
timestamp request and information
request are obsolete and could most probably just be dropped.
However, the Echo messages are used in several setups
such as pinging hosts. Address mask requests are not
used often, but could be useful at times and worth allowing. To get
an idea of how this could look, have a look at the following image.
   </p><p>    </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/state-icmp-ping.jpg"></p></div>
   <p></p><p>As you can see in the above picture, the host sends an echo
request to the target, which is considered as
NEW by the firewall. The target then responds with a
echo reply which the firewall considers as state
ESTABLISHED. When the first echo request has been seen, the
following state entry goes into the <tt class="FILENAME">ip_conntrack</tt>.
   </p><pre class="SCREEN">icmp     1 25 src=192.168.1.6 dst=192.168.1.10 type=8 code=0 \
     id=33029 [UNREPLIED] src=192.168.1.10 dst=192.168.1.6 \
     type=0 code=0 id=33029 use=1
   </pre><p>This entry looks a little bit different from the standard states for
TCP and UDP as you can see.
The protocol is there, and the timeout, as well as source and destination
addresses. The problem comes after that however. We now have 3 new fields
called type,
code and id.
They are not special in any way, the type
field contains the ICMP type and the
code field contains the
ICMP code. These are all available in <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPTYPES"><i>ICMP types</i></a> appendix. The final
id field, contains the ICMP
ID. Each ICMP packet gets an ID set to
it when it is sent, and when the receiver gets the
ICMP message, it sets the same
ID within the new ICMP
message so that the sender will recognize the reply and will be able to
connect it with the correct ICMP request.
   </p><p>The next field, we once again recognize as the
[UNREPLIED] flag, which we have seen before.
Just as before, this flag tells us that we are currently looking at a
connection tracking entry that has seen only traffic in one direction.
Finally, we see the reply expectation for the reply
ICMP packet, which is the inversion of the original
source and destination IP addresses. As for the type and code, these are
changed to the correct values for the return packet, so an echo request is
changed to echo reply and so on. The ICMP ID is
preserved from the request packet.
   </p><p>The reply packet is considered as being ESTABLISHED, as we
have already explained. However, we can know for sure that after the
ICMP reply, there will be absolutely no more legal
traffic in the same connection. For this reason, the connection tracking entry
is destroyed once the reply has traveled all the way through the Netfilter
structure.
   </p><p>In each of the above cases, the request is considered as
NEW, while the reply is considered as
ESTABLISHED. Let's consider this more closely. When the
firewall sees a request packet, it considers it as NEW.
When the host sends a reply packet to the request it is considered
ESTABLISHED.
   </p><div class="NOTE"><p></p><table class="NOTE" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/note.gif" hspace="5" alt="Note"></td><td align="LEFT" valign="TOP"><p>Note that this means that the reply packet must match the criterion given by
the connection tracking entry to be considered as established, just as with
all other traffic types.
    </p></td></tr></tbody></table></div><p>ICMP requests has a default timeout of 30 seconds, which you can change in the
<tt class="FILENAME">/proc/sys/net/ipv4/netfilter/ip_ct_icmp_timeout</tt> entry.
This should in general be a good timeout value, since it will be able to catch
most packets in transit.
   </p><p>Another hugely important part of ICMP is the fact
that it is used to tell the hosts what happened to specific
UDP and TCP connections or
connection attempts. For this simple reason, ICMP replies will very often be
recognized as RELATED to original connections or
connection attempts. A simple example would be the
ICMP Host unreachable or ICMP Network
unreachable. These should always be spawned back to our host if
it attempts an unsuccessful connection to some other host, but the network or
host in question could be down, and hence the last router trying to reach the
site in question will reply with an ICMP message
telling us about it. In this case, the ICMP reply is
considered as a RELATED packet. The following picture
should explain how it would look.

   </p><p>    </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/state-tcp-icmp-reply.jpg"></p></div>
   <p></p><p>   In the above example, we send out a SYN packet to
a specific address. This is considered as a NEW connection
by the firewall. However, the network the packet is trying to reach is
unreachable, so a router returns a network unreachable
ICMP error to us. The connection tracking code can
recognize this packet as RELATED. thanks to the already
added tracking entry, so the ICMP reply is correctly
sent to the client which will then hopefully abort. Meanwhile, the firewall
has destroyed the connection tracking entry since it knows this was an error
message.
   </p><p>The same behavior as above is experienced with UDP
connections if they run into any problem like the above. All
ICMP messages sent in reply to
UDP connections are considered as
RELATED. Consider the following image.
   </p><p>    </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/state-udp-icmp-reply.jpg"></p></div>
   <p></p><p>This time an UDP packet is sent to the host. This
UDP connection is considered as
NEW. However, the network is administratively prohibited by
some firewall or router on the way over. Hence, our firewall receives a
ICMP Network Prohibited in return. The firewall knows
that this ICMP error message is related to the
already opened UDP connection and sends it as a
RELATED packet to the client. At this point, the firewall
destroys the connection tracking entry, and the client receives the
ICMP message and should hopefully abort.

   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="DEFAULTCONNECTIONS">Default connections</a></h2><p>In certain cases, the conntrack machine does not know how to handle a specific
protocol. This happens if it does not know about that protocol in particular,
or doesn't know how it works. In these cases, it goes back to a default
behavior. The default behavior is used on, for example,
NETBLT, MUX and
EGP. This behavior looks pretty much the
same as the UDP connection tracking. The first packet
is considered NEW, and reply traffic and so forth is
considered ESTABLISHED.
   </p><p>When the default behavior is used, all of these packets will attain the same
default timeout value. This can be set via the
<tt class="FILENAME">/proc/sys/net/ipv4/netfilter/ip_ct_generic_timeout</tt>
variable. The default value here is 600 seconds, or 10 minutes. Depending 
on
what traffic you are trying to send over a link that uses the default
connection tracking behavior, this might need changing. Especially if you are
bouncing traffic through satellites and such, which can take a long time.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="UNTRACKEDCONNS">Untracked connections and the raw 
table</a></h2><p>UNTRACKED is a rather special keyword when it comes to 
connection tracking in Linux. Basically, it is used to match packets that has 
been marked in the raw table not to be tracked. 
   </p><p>The raw table was created specifically for this 
reason. In this table, you set a NOTRACK mark on packets 
that you do not wish to track in netfilter.
   </p><div class="IMPORTANT"><p></p><table class="IMPORTANT" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/important.gif" hspace="5" alt="Important"></td><td align="LEFT" valign="TOP"><p>Notice how I say packets, not connection, since the mark is actually set for 
each and every packet that enters. Otherwise, we would still have to do some 
kind of tracking of the connection to know that it should not be tracked. 
    </p></td></tr></tbody></table></div><p>As we have already stated in this chapter, conntrack 
and the state machine is rather resource hungry. For this reason, it might 
sometimes be a good idea to turn off connection tracking and the state machine. 
   </p><p>One example would be if you have a heavily trafficked router that you want to 
firewall the incoming and outgoing traffic on, but not the routed traffic. You 
could then set the NOTRACK mark on all packets not destined 
for the firewall itself by ACCEPT'ing all packets with 
destination your host in the raw table, and then set 
the NOTRACK for all other traffic. This would then allow 
you to have stateful matching on incoming traffic for the router itself, 
but at the same time save processing power from not handling all the crossing 
traffic.
   </p><p>Another example when NOTRACK can be used is if you have 
a highly trafficked webserver and want to do stateful tracking, but don't want 
to waste processing power on tracking the web traffic. You could then set up a 
rule that turns of tracking for port 80 on all the locally owned IP addresses, 
or the ones that are actually serving web traffic. You could then enjoy 
statefull tracking on all other services, except for webtraffic which might 
save some processing power on an already overloaded system.
   </p><p>There is however some problems with NOTRACK that you must 
take into consideration. If a whole connection is set with 
NOTRACK, then you will not be able to track related 
connections either, conntrack and 
nat helpers will simply not work for
untracked connections, nor will related 
ICMP errors do. You will have to open up for these 
manually in other words. When it comes to complex protocols such as 
FTP and SCTP et cetera, this 
can be very hard to manage. As long as you are aware of this, you should be 
able to handle this however.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="COMPLEXPROTOCOLS">Complex protocols and connection tracking</a></h2><p> Certain protocols are more complex than others. What this means
when it comes to connection tracking, is that such protocols may be harder
to track correctly. Good examples of these are the
ICQ, IRC and
FTP protocols. Each and every one of these
protocols carries information within the actual data payload of the
packets, and hence requires special connection tracking helpers to enable
it to function correctly.
   </p><p>This is a list of the complex protocols that has support inside the linux 
kernel, and which kernel version it was introduced in.
   </p><div class="TABLE"><a name="TABLE.COMPLEXPROTOCOLS"></a><p><b>Table 7-3. Complex protocols support</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="2*"><col width="1*"></colgroup><thead><tr><th>Protocol name</th><th>Kernel versions</th></tr></thead><tbody><tr><td>FTP</td><td>2.3</td></tr><tr><td>IRC</td><td>2.3</td></tr><tr><td>TFTP</td><td>2.5</td></tr><tr><td>Amanda</td><td>2.5</td></tr></tbody></table></div><p></p><ul><li style="list-style-type: opencircle"><p>FTP</p></li><li style="list-style-type: opencircle"><p>IRC</p></li><li style="list-style-type: opencircle"><p>TFTP</p></li></ul><p> Let's take the FTP protocol as the
first example. The FTP protocol first opens up a
single connection that is called the FTP control
session. When we issue commands through this session, other ports are
opened to carry the rest of the data related to that specific command.
These connections can be done in two ways, either actively or passively.
When a connection is done actively, the FTP
client sends the server a port and IP address to connect to. After this,
the FTP client opens up the port and the server
connects to that specified port from a random unprivileged port (&gt;1024) 
and sends the data over it.
   </p><p> The problem here is that the firewall will not know about these
extra connections, since they were negotiated within the actual payload
of the protocol data. Because of this, the firewall will be unable to know
that it should let the server connect to the client over these specific
ports.
   </p><p> The solution to this problem is to add a special helper to the
connection tracking module which will scan through the data in the control
connection for specific syntaxes and information. When it runs into the
correct information, it will add that specific information as
RELATED and the server will be able to track the
connection, thanks to that RELATED entry. Consider the
following picture to understand the states when the
FTP server has made the connection back to the
client.
   </p><p>    </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/state-tcp-server-subconn.jpg"></p></div>
   <p></p><p>Passive FTP works the opposite way. The
FTP client tells the server that it wants some
specific data, upon which the server replies with an IP address to connect to
and at what port. The client will, upon receipt of this data, connect to that
specific port, from its own port 20(the FTP-data port), and get the data in
question. If you have an FTP server behind your
firewall, you will in other words require this module in addition to your
standard iptables modules to let clients on the Internet connect to the
FTP server properly. The same goes if you are
extremely restrictive to your users, and only want to let them reach
HTTP and FTP servers on the
Internet and block all other ports. Consider the following image and its
bearing on Passive FTP.
   </p><p>    </p><div class="MEDIAOBJECT"><p><img src="./Iptables Tutorial 1.2.2_files/state-tcp-client-subconn.jpg"></p></div>
   <p></p><p> Some conntrack helpers are already available within the kernel
itself. More specifically, the FTP and
IRC protocols have conntrack helpers as of
writing this. If you can not find the conntrack helpers that you need
within the kernel itself, you should have a look at the
patch-o-matic tree within user-land iptables. The
patch-o-matic tree may contain more conntrack
helpers, such as for the ntalk or
H.323 protocols. If they are not available in the
patch-o-matic tree, you have a number of options. Either you can look at
the CVS source of iptables, if it has recently gone into that tree, or you
can contact the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#OTHERRESOURCES">Netfilter-devel</a>
mailing list and ask if it is available. If it is not, and there are no
plans for adding it, you are left to your own devices and would most
probably want to read the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#NETFILTERHACKINGHOWTO">Rusty
Russell's Unreliable Netfilter Hacking HOW-TO</a> which is linked from
the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#OTHERRESOURCES"><i>Other resources and links</i></a>
appendix.

   </p><p>Conntrack helpers may either be statically compiled into the kernel, or as
modules. If they are compiled as modules, you can load them with the following
command
   </p><pre class="SCREEN">modprobe ip_conntrack_ftp
modprobe ip_conntrack_irc
modprobe ip_conntrack_tftp
modprobe ip_conntrack_amanda
   </pre><p>Do note that connection tracking has nothing to do with
NAT, and hence you may require more modules if you
are NAT'ing connections as well. For example, if you were to want to
NAT and track FTP
connections, you would need the NAT module as well.
All NAT helpers starts with ip_nat_ and follow that
naming convention; so for example the FTP
NAT helper would be named
ip_nat_ftp and the IRC
module would be named ip_nat_irc. The conntrack
helpers follow the same naming convention, and hence the
IRC conntrack helper would be named
ip_conntrack_irc, while the
FTP conntrack helper would be named
ip_conntrack_ftp.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="AEN4931">What's next?</a></h2><p>This chapter has discussed how the state machine in netfilter works and how it
keeps state of different connections. The chapter has also discussed how it is
represented toward you, the end user and what you can do to alter its
behavior, as well as different protocols that are more complex to do
connection tracking on, and how the different conntrack helpers come into the
picture.
    </p><p>The next chapter will discuss how to save and restore rulesets using the
iptables-save and iptables-restore
programs distributed with the iptables applications. This
has both pros and cons, and the chapter will discuss it in detail.
    </p></div></div><div class="CHAPTER"><hr><h1><a name="SAVEANDRESTORE"></a>Chapter 8. Saving and restoring large
 rule-sets</h1><p>The iptables package comes with two more tools that 
are very useful, specially if you are dealing with larger rule-sets. These 
two tools are called iptables-save and 
iptables-restore and are used to save and restore 
rule-sets to a specific file-format that looks quite a bit different from 
the standard shell code that you will see in the rest of this tutorial.
  </p><div class="TIP"><p></p><table class="TIP" width="100%" border="0"><tbody><tr><td width="25" align="CENTER" valign="TOP"><img src="./Iptables Tutorial 1.2.2_files/tip.gif" hspace="5" alt="Tip"></td><td align="LEFT" valign="TOP"><p>iptables-restore can be used together with scripting languages. The big problem 
is that you will need to output the results into the stdin of iptables-restore. 
If you are creating a very big ruleset (several thousand rules) this might be 
a very good idea, since it will be much faster to insert all the new rules. 
For example, you would then run make_rules.sh | 
iptables-restore. 
   </p></td></tr></tbody></table></div><div class="SECTION"><hr><h2 class="SECTION"><a name="SPEEDCONSIDERATIONS">Speed considerations</a></h2><p>One of the largest reasons for using the iptables-save 
and iptables-restore commands is that they will speed 
up the loading and saving of larger rule-sets considerably. The main 
problem with running a shell script that contains  
iptables rules is that each invocation of 
iptables within the script will first extract the 
whole rule-set from the Netfilter kernel space, and after this, it will 
insert or append rules, or do whatever change to the rule-set that is
needed by this specific command. Finally, it will insert the new rule-set 
from its own memory into kernel space. Using a shell script, this is done 
for each and every rule that we want to insert, and for each time we do 
this, it takes more time to extract and insert the rule-set.
   </p><p>To solve this problem, there is the iptables-save and 
restore commands. The iptables-save 
command is used to save the rule-set into a specially formatted text-file, 
and the iptables-restore command is used to load this 
text-file into kernel again. The best parts of these commands is that they 
will load and save the rule-set in one single request.  
iptables-save will grab the whole rule-set from kernel 
and save it to a file in one single movement. 
iptables-restore will upload that specific rule-set to 
kernel in a single movement for each table. In other words, instead of 
dropping the rule-set out of kernel some 30,000 times, for really large 
rule-sets, and then upload it to kernel again that many times, we can now 
save the whole thing into a file in one movement and then upload the 
whole thing in as little as three movements depending on how many tables 
you use.
   </p><p>As you can understand, these tools are definitely something for you if 
you are working on a huge set of rules that needs to be inserted. However, 
they do have drawbacks that we will discuss more in the next section.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="DRAWBACKSWITHRESTORE">Drawbacks with restore</a></h2><p>As you may have already wondered, can iptables-restore 
handle any kind of scripting? So far, no, it cannot and it will most 
probably never be able to. This is the main flaw in using 
iptables-restore since you will not be able to
do a huge set of things with these files. For example, what if you have a
connection that has a dynamically assigned IP address and you want to 
grab this dynamic IP every-time the computer boots up and then use that 
value within your scripts? With iptables-restore, this 
is more or less impossible.
   </p><p>One possibility to get around this is to make a small script which grabs 
the values you would like to use in the script, then sed the 
iptables-restore file for specific keywords and replace 
them with the values collected via the small script. At this point, you 
could save it to a temporary file, and then use 
iptables-restore to load the new values. This causes a 
lot of problems however, and you will be unable to use 
iptables-save properly since it would probably erase 
your manually added keywords in the restore script. It is, in other words, a 
clumsy solution.
   </p><p>A second possibility is to do as previously described. Make a script that 
outputs rules in iptables-restore format, and then feed 
them on standard input of iptables-restore. For very large 
rulesets this would be to be preferred over running iptables itself, since it 
has a bad habit of taking a lot of processing power on very large rulesets as 
previously described in this chapter.
   </p><p>Another solution is to load the iptables-restore 
scripts first, and then load a specific shell script that inserts more 
dynamic rules in their proper places. Of course, as you can understand, 
this is just as clumsy as the first solution. 
iptables-restore is simply not very well suited for 
configurations where IP addresses are dynamically assigned to your 
firewall or where you want different behaviors depending on configuration 
options and so on.
   </p><p>Another drawback with iptables-restore and 
iptables-save is that it is not fully functional as of 
writing this. The problem is simply that not a lot of people use it as of 
today and hence there are not a lot of people finding bugs, and in turn 
some matches and targets will simply be inserted badly, which may lead to 
some strange behaviors that you did not expect. Even though these 
problems exist, I would highly recommend using these tools which should 
work extremely well for most rule-sets as long as they do not contain some 
of the new targets or matches that it does not know how to handle 
properly.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="IPTABLES-SAVE">iptables-save</a></h2><p>The iptables-save command is, as we have already 
explained, a tool to save the current rule-set into a file that 
iptables-restore can use. This command is quite simple 
really, and takes only two arguments. Take a look at the following 
example to understand the syntax of the command.
   </p><p>    </p><p>iptables-save [-c] [-t <tt class="REPLACEABLE"><i>table</i></tt>]</p>
   <p></p><p>The -c argument tells iptables-save 
to keep the values specified in the byte and packet counters. This could 
for example be useful if we would like to reboot our main firewall, but 
not lose byte and packet counters which we may use for statistical 
purposes. Issuing a iptables-save command with the 
-c argument would then make it possible for us to 
reboot without breaking our statistical and accounting routines. The 
default value is, of course, to not keep the counters intact when issuing 
this command.
   </p><p>The -t argument tells the 
iptables-save command which tables to save. Without
this argument the command will automatically save all tables available 
into the file. The following is an example on what output you can expect 
from the iptables-save command if you do not have any 
rule-set loaded.
   </p><p></p><pre class="PROGRAMLISTING"># Generated by iptables-save v1.2.6a on Wed Apr 24 10:19:17 2002
*filter
:INPUT ACCEPT [404:19766]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [530:43376]
COMMIT
# Completed on Wed Apr 24 10:19:17 2002
# Generated by iptables-save v1.2.6a on Wed Apr 24 10:19:17 2002
*mangle
:PREROUTING ACCEPT [451:22060]
:INPUT ACCEPT [451:22060]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [594:47151]
:POSTROUTING ACCEPT [594:47151]
COMMIT
# Completed on Wed Apr 24 10:19:17 2002
# Generated by iptables-save v1.2.6a on Wed Apr 24 10:19:17 2002
*nat
:PREROUTING ACCEPT [0:0]
:POSTROUTING ACCEPT [3:450]
:OUTPUT ACCEPT [3:450]
COMMIT
# Completed on Wed Apr 24 10:19:17 2002</pre><p></p><p>This contains a few comments starting with a # sign. Each table is marked 
like *&lt;table-name&gt;, for example 
*mangle. Then within each table we have 
the chain specifications and rules. A chain specification looks like 
:&lt;chain-name&gt; &lt;chain-policy&gt; 
[&lt;packet-counter&gt;:&lt;byte-counter&gt;]. The  
chain-name may be for example 
PREROUTING, the policy is described previously 
and can, for example, be ACCEPT. Finally the 
packet-counter and byte-counters are the same counters as in the output 
from iptables -L -v. Finally, each table declaration 
ends in a COMMIT keyword. The 
COMMIT keyword tells us that at this 
point we should commit all rules currently in the pipeline to kernel.
   </p><p>The above example is pretty basic, and hence I believe it is nothing more
than proper to show a brief example which contains a very small <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPTSAVE-RULESET"><i>Iptables-save ruleset</i></a>. 
If we would run iptables-save on 
this, it would look something like this in the output:
   </p><p></p><pre class="PROGRAMLISTING"># Generated by iptables-save v1.2.6a on Wed Apr 24 10:19:55 2002
*filter
:INPUT DROP [1:229]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT 
-A FORWARD -i eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT 
-A FORWARD -i eth1 -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT 
-A OUTPUT -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT 
COMMIT
# Completed on Wed Apr 24 10:19:55 2002
# Generated by iptables-save v1.2.6a on Wed Apr 24 10:19:55 2002
*mangle
:PREROUTING ACCEPT [658:32445]
:INPUT ACCEPT [658:32445]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [891:68234]
:POSTROUTING ACCEPT [891:68234]
COMMIT
# Completed on Wed Apr 24 10:19:55 2002
# Generated by iptables-save v1.2.6a on Wed Apr 24 10:19:55 2002
*nat
:PREROUTING ACCEPT [1:229]
:POSTROUTING ACCEPT [3:450]
:OUTPUT ACCEPT [3:450]
-A POSTROUTING -o eth0 -j SNAT --to-source 195.233.192.1 
COMMIT
# Completed on Wed Apr 24 10:19:55 2002</pre><p></p><p>As you can see, each command has now been prefixed with the byte and 
packet counters since we used the -c argument. Except 
for this, the command-line is quite intact from the script. The only 
problem now, is how to save the output to a file. Quite simple, and you 
should already know how to do this if you have used linux at all before. 
It is only a matter of piping the command output on to the file that you 
would like to save it as. This could look like the following:
   </p><p>    iptables-save -c &gt; /etc/iptables-save
   </p><p>The above command will in other words save the whole rule-set to a file 
called <tt class="FILENAME">/etc/iptables-save</tt> with byte and packet 
counters still intact.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="IPTABLES-RESTORE">iptables-restore</a></h2><p>The iptables-restore command is used to restore the 
iptables rule-set that was saved with the 
iptables-save command. It takes all the input from 
standard input and can't load from files as of writing this, 
unfortunately. This is the command syntax for iptables-restore:
   </p><p>    </p><p>iptables-restore [-c] [-n]</p>
   <p></p><p>The -c argument restores the byte and packet counters 
and must be used if you want to restore counters that were previously saved 
with iptables-save. This argument may also be written 
in its long form --counters.
   </p><p>The -n argument tells 
iptables-restore to not overwrite the previously 
written rules in the table, or tables, that it is writing to. The default 
behavior of iptables-restore is to flush and destroy 
all previously inserted rules. The short -n argument 
may also be replaced with the longer format --noflush.
   </p><p>To load a rule-set with the iptables-restore command, we 
could do this in several ways, but we will mainly look at the simplest 
and most common way here.
   </p><pre class="SCREEN">    cat /etc/iptables-save | iptables-restore -c
   </pre><p>The following will also work:
   </p><pre class="SCREEN">     iptables-restore -c &lt; /etc/iptables-save
   </pre><p>This would cat the rule-set located within the 
<tt class="FILENAME">/etc/iptables-save</tt> file and then pipe it to 
iptables-restore which takes the rule-set on the 
standard input and then restores it, including byte and packet counters. 
It is that simple to begin with. This command could be varied until 
oblivion and we could show different piping possibilities, however, this 
is a bit out of the scope of this chapter, and hence we will skip that 
part and leave it as an exercise for the reader to experiment with.
   </p><p>The rule-set should now be loaded properly to kernel and everything should 
work. If not, you may possibly have run into a bug in these commands. 
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="AEN5100">What's next?</a></h2><p>This chapter has discussed the iptables-save and
iptables-restore programs to some extent and how they can
be used. Both applications are distributed with the iptables package, and can
be used to quickly save large rulesets and then inserting them into the kernel
again. 
    </p><p>The next chapter will take a look at the syntax of a iptables rule and how to
write properly formatted rule-sets. It will also show some basic good coding
styles to adhere to, as required. 
    </p></div></div><div class="CHAPTER"><hr><h1><a name="HOWARULEISBUILT"></a>Chapter 9. How a rule is built</h1><p>This chapter and the upcoming three chapters will discuss at length how to 
build your own rules. A rule could be described as the directions the firewall 
will adhere to when blocking or permitting different connections and packets 
in a specific chain. Each line you write that's inserted in a chain should be 
considered a rule. We will also discuss the basic matches that are available, 
and how to use them, as well as the different targets and how we can construct 
new targets of our own (i.e.,new sub chains).
  </p><p>This chapter will deal with the raw basics of how a rule is created and how you 
write it and enter it so that it will be accepted by the userspace program 
iptables, the different tables, as well as the commands that 
you can issue to iptables. After that we will in the next chapter look at all 
the matches that are available to iptables, and then get 
more into detail of each type of target and jump.
  </p><div class="SECTION"><hr><h2 class="SECTION"><a name="BASICS">Basics of the iptables command</a></h2><p>As we have already explained, each rule is a line that the kernel looks at to
find out what to do with a packet. If all the criteria - or matches - are met,
we perform the target - or jump - instruction. Normally we would write our
rules in a syntax that looks something like this:
   </p><p>    </p><p>iptables [-t <tt class="REPLACEABLE"><i>table</i></tt>]  command  [match] [target/jump]</p>
   <p></p><p>There is nothing that says that the target instruction has to be the last 
function in the line. However, you would usually adhere to this syntax to get 
the best readability. Anyway, most of the rules you'll see are written in this 
way. Hence, if you read someone else's script, you'll most likely recognize the
syntax and easily understand the rule.
   </p><p>If you want to use a table other than the standard table, you could insert
the table specification at the point at which [table] is specified. However,
it is not necessary to state explicitly what table to use, since by default
iptables uses the filter table on
which to implement all commands. Neither do you have to specify the table at
just this point in the rule. It could be set pretty much anywhere along the
line. However, it is more or less standard to put the table specification at
the beginning.
   </p><p>One thing to think about though: The command should always come first, or
alternatively directly after the table specification. We use 'command' to tell
the program what to do, for example to insert a rule or to add a rule to the
end of the chain, or to delete a rule. We shall take a further look at this
below.
   </p><p>The match is the part of the rule that we send to the kernel that details the
specific character of the packet, what makes it different from all other
packets. Here we could specify what IP address the packet comes from, from
which network interface, the intended IP address, port, protocol or whatever.
There is a heap of different matches that we can use that we will look closer
at further on in this chapter.
   </p><p>Finally we have the target of the packet. If all the matches are met for a
packet, we tell the kernel what to do with it. We could, for example, tell the
kernel to send the packet to another chain that we've created ourselves, and
which is part of this particular table. We could tell the kernel to drop the
packet dead and do no further processing, or we could tell the kernel to send
a specified reply to the sender. As with the rest of the content in this
section, we'll look closer at it further on in the chapter.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="TABLES">Tables</a></h2><p>The -t option specifies which table to use. Per default,
the filter table is used. We may specify one of the
following tables with the -t option. Do note that this is
an extremely brief summary of some of the contents of the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TRAVERSINGOFTABLES"><i>Traversing of tables and chains</i></a>
chapter.
   </p><div class="TABLE"><a name="TABLE.TABLES"></a><p><b>Table 9-1. Tables</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="48"><col width="1*"></colgroup><thead><tr><th>Table</th><th>Explanation</th></tr></thead><tbody><tr><td>nat</td><td><p>The nat table is used mainly for Network
Address Translation. "NAT"ed packets
get their  IP  addresses  altered, according to our rules. Packets  in a
stream only traverse this table once. We assume that the first  packet  of  a
stream is allowed. The rest of the packets in the same  stream are
automatically "NAT"ed or Masqueraded etc, and will be
subject  to the same actions as the first packet. These will, in other words,
not  go  through  this  table again, but will nevertheless be treated  like
the first packet in the stream. This is the main reason why  you  should  not
do  any  filtering in this table, which we will discuss at greater length
further on. The PREROUTING chain is used to alter
packets as soon as they get in to the firewall. The
OUTPUT chain is used for altering locally generated
packets (i.e., on the firewall) before they get to the routing decision.
Finally  we have the POSTROUTING chain which is used
to alter packets just as they are about to leave the firewall.</p></td></tr><tr><td>mangle</td><td><p>This table is used mainly for mangling packets. Among other things, we can
change the contents of different packets and that of their headers. Examples
of this would be to change the TTL, TOS
or MARK. Note that the MARK is not
really a change to the packet, but a mark value for the packet is set in
kernel space. Other rules or programs might use this mark further along in the
firewall to filter or do advanced routing on; tc is one example. The table
consists of five built in chains, the PREROUTING,
POSTROUTING, OUTPUT,
INPUT and FORWARD chains.
PREROUTING is used for altering packets just as they
enter the firewall and before they hit the routing decision.
POSTROUTING is used to mangle packets just after all
routing decisions have been made. OUTPUT is used for
altering locally generated packets after they enter the routing decision.
INPUT is used to alter packets after they have been
routed to the local computer itself, but before the user space application
actually sees the data. FORWARD is used to mangle
packets after they have hit the first routing decision, but before they
actually hit the last routing decision. Note that mangle can't be used for any
kind of Network Address Translation or
Masquerading, the nat table was made for these kinds
of operations.
	 </p></td></tr><tr><td>filter</td><td><p>The filter table should be used exclusively for
filtering packets. For example, we could DROP,
LOG, ACCEPT or REJECT
packets without problems, as we can in the other tables. There are three
chains built in to this table. The first one is named
FORWARD and is used on all non-locally generated
packets that are not destined for our local host (the firewall, in other
words). INPUT is used on all packets that are
destined for our local host (the firewall) and OUTPUT
is finally used for all locally generated packets.
	 </p></td></tr><tr><td>raw</td><td><p>The raw table and its chains are used before any
other tables in netfilter. It was introduced to use the
NOTRACK target. This table is rather new and is only
available, if compiled, with late 2.6 kernels and later. The raw table
contains two chains. The PREROUTING and
OUTPUT chain, where they will handle packets before
they hit any of the other netfilter subsystems. The
PREROUTING chain can be used for all incoming packets
to this machine, or that are forwarded, while the
OUTPUT chain can be used to alter the locally
generated packets before they hit any of the other netfilter subsystems. 
	 </p></td></tr></tbody></table></div><p>The above details should have explained the basics about the three
different tables that are available. They should be used for totally different
purposes, and you should know what to use each chain for. If you do not
understand their usage, you may well dig a pit for yourself in your firewall,
into which you will fall as soon as someone finds it and pushes you into it.
We have already discussed the requisite tables and chains in more detail
within the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TRAVERSINGOFTABLES"><i>Traversing of tables and chains</i></a> chapter. If you do not understand
this fully, I advise you to go back and read through it again.
   </p></div><div class="SECTION"><hr><h2 class="SECTION"><a name="COMMANDS">Commands</a></h2><p>In this section we will cover all the different commands and what can be done
with them. The command tells iptables what to do with the
rest of the rule that we send to the parser. Normally we would want either to
add or delete something in some table or another. The following commands are
available to iptables:
   </p><div class="TABLE"><a name="TABLE.COMMANDS"></a><p><b>Table 9-2. Commands</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="77"><col width="1*"></colgroup><tbody><tr><td>Command</td><td>-A, --append</td></tr><tr><td>Example</td><td>iptables -A INPUT ...</td></tr><tr><td>Explanation</td><td>This command appends the rule to the end of the
chain. The rule will in other words always be put last in the rule-set and
hence be checked last, unless you append more rules later on.</td></tr><tr><td>Command</td><td>-D, --delete</td></tr><tr><td>Example</td><td>          iptables -D INPUT --dport 80 -j DROP,
          iptables -D INPUT 1
        </td></tr><tr><td>Explanation</td><td>This command deletes a rule in a chain. This could be done
in two ways; either by entering the whole rule to match (as in the first
example), or by specifying the rule number that you want to match. If you use
the first method, your entry must match the entry in the chain exactly. If you
use the second method, you must match the number of the rule you want to
delete. The rules are numbered from the top of each chain, starting with
number 1.</td></tr><tr><td>Command</td><td>-R, --replace</td></tr><tr><td>Example</td><td>iptables -R INPUT 1 -s 192.168.0.1 -j
DROP</td></tr><tr><td>Explanation</td><td>This command replaces the old entry at the specified line. It
works in the same way as the --delete command, but instead 
of
totally deleting the entry, it will replace it with a new entry. The main use
for this might be while you're experimenting with iptables.</td></tr><tr><td>Command</td><td>-I, --insert</td></tr><tr><td>Example</td><td>iptables -I INPUT 1 --dport 80 -j
ACCEPT</td></tr><tr><td>Explanation</td><td>Insert a rule somewhere in a chain. The rule is inserted as
the actual number that we specify. In other words, the above example would be
inserted as rule 1 in the INPUT chain, and hence from
now on it would be the very first rule in the chain.</td></tr><tr><td>Command</td><td>-L, --list</td></tr><tr><td>Example</td><td>iptables -L INPUT</td></tr><tr><td>Explanation</td><td>This command lists all the entries in the specified chain.
In the above case, we would list all the entries in the
INPUT chain. It's also legal to not specify any chain
at all. In the last case, the command would list all the chains in the 
specified table (To specify a table, see the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TABLES"><i>Tables</i></a> section). The exact output is affected by
other options sent to the parser, for example the -n and
-v options, etc.</td></tr><tr><td>Command</td><td>-F, --flush</td></tr><tr><td>Example</td><td>iptables -F INPUT</td></tr><tr><td>Explanation</td><td>This command flushes all rules from the specified chain and is
equivalent to deleting each rule one by one, but is quite a bit faster. The
command can be used without options, and will then delete all rules in all
chains within the specified table.</td></tr><tr><td>Command</td><td>-Z, --zero</td></tr><tr><td>Example</td><td>iptables -Z INPUT</td></tr><tr><td>Explanation</td><td>This command tells the program to zero all counters in a
specific chain, or in all chains. If you have used the -v
option with the -L command, you have probably seen the
packet counter at the beginning of each field. To zero this packet counter,
use the -Z option. This option works the same as
-L, except that -Z won't list the rules.
If -L and -Z is used together (which is
legal), the chains will first be listed, and then the packet counters are
zeroed.</td></tr><tr><td>Command</td><td>-N, --new-chain</td></tr><tr><td>Example</td><td>iptables -N allowed</td></tr><tr><td>Explanation</td><td>This command tells the kernel to create a new chain of the
specified name in the specified table. In the above example we create a
chain called allowed. Note that there must not already be a
chain or target of the same name.</td></tr><tr><td>Command</td><td>-X, 
--delete-chain</td></tr><tr><td>Example</td><td>iptables -X allowed</td></tr><tr><td>Explanation</td><td>This command deletes the specified chain from the table. For
this command to work, there must be no rules that refer to the chain that is
to be deleted. In other words, you would have to replace or delete all rules
referring to the chain before actually deleting the chain. If this command is
used without any options, all chains but those built in to the specified table
will be deleted.</td></tr><tr><td>Command</td><td>-P, --policy</td></tr><tr><td>Example</td><td>iptables -P INPUT DROP</td></tr><tr><td>Explanation</td><td>This command tells the kernel to set a specified default
target, or policy, on a chain. All packets that don't match any rule will
then be forced to use the policy of the chain. Legal targets are
DROP and ACCEPT
(There might be more, mail me if so).</td></tr><tr><td>Command</td><td>-E, 
--rename-chain</td></tr><tr><td>Example</td><td>iptables -E allowed disallowed</td></tr><tr><td>Explanation</td><td>The -E command tells
iptables to change the first name of a chain, to the second
name. In the example above we would, in other words, change the name of the
chain from <code class="VARNAME">allowed</code> to <code class="VARNAME">disallowed</code>. Note
that this will not affect the actual way the table will work. It is, in other
words, just a cosmetic change to the table.</td></tr></tbody></table></div><p>You should always enter a complete command line, unless you just want
to list the built-in help for iptables or get the version 
of the
command. To get the version, use the -v option and to get 
the help
message, use the -h option. As usual, in other words. Next
comes a few options that can be used with various different commands. Note
that we tell you with which commands the options can be used and what effect
they will have. Also note that we do not include any options here that
affect rules or matches. Instead, we'll take a look at matches and
targets in a later section of this chapter.
    </p><div class="TABLE"><a name="TABLE.OPTIONS"></a><p><b>Table 9-3. Options</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="77"><col width="1*"></colgroup><tbody><tr><td>Option</td><td>-v, --verbose</td></tr><tr><td>Commands used with</td><td>--list, --append,
--insert, --delete,
--replace</td></tr><tr><td>Explanation</td><td>This command gives verbose output and is mainly
used together with the --list command. If used together 
with
the --list command, it outputs the interface address, rule
options and TOS masks. The --list command will also include
a bytes and packet counter for each rule, if the --verbose
option is set. These counters uses the K (x1000), M (x1,000,000) and G
(x1,000,000,000) multipliers. To overrule this and get exact output, you
can use the -x option, described later. If this option is
used with the --append, --insert,
--delete or --replace commands, the
program will output detailed information on how the rule was interpreted and
whether it was inserted correctly, etc.</td></tr><tr><td>Option</td><td>-x, --exact</td></tr><tr><td>Commands used with</td><td>--list</td></tr><tr><td>Explanation</td><td>This option expands the numerics. The output from
--list will in other words not contain the K, M or G
multipliers. Instead we will get an exact output from the packet and byte
counters of how many packets and bytes that have matched the rule in question.
Note that this option is only usable in the --list command
and isn't really relevant for any of the other commands.</td></tr><tr><td>Option</td><td>-n, --numeric</td></tr><tr><td>Commands used with</td><td>--list</td></tr><tr><td>Explanation</td><td>This option tells iptables to output numerical
values. IP addresses and port numbers will be printed by using their
numerical values and not host-names, network names or application names.
This option is only applicable to the --list command. This
option overrides the default of resolving all numerics to hosts and names,
where this is possible.</td></tr><tr><td>Option</td><td>--line-numbers</td></tr><tr><td>Commands used with</td><td>--list</td></tr><tr><td>Explanation</td><td>The --line-numbers command, together with
the --list command, is used to output line numbers. Using
this option, each rule is output with its number. It could be convenient to
know which rule has which number when inserting rules. This option only works
with the --list command.</td></tr><tr><td>Option</td><td>-c, 
--set-counters</td></tr><tr><td>Commands used with</td><td>--insert, --append,
--replace</td></tr><tr><td>Explanation</td><td>This option is used when creating a rule or modifying it in
some way. We can then use the option to initialize the packet and byte
counters for the rule. The syntax would be something like
--set-counters 20 4000, which would tell the kernel to set
the packet counter to 20 and byte counter to 4000.</td></tr><tr><td>Option</td><td>--modprobe</td></tr><tr><td>Commands used with</td><td>All</td></tr><tr><td>Explanation</td><td>The --modprobe option is used to tell
iptables which module to use when probing for modules or
adding them to the kernel. It could be used if your
modprobe command is not somewhere in the search path etc.
In such cases, it might be necessary to specify this option so the program
knows what to do in case a needed module is not loaded. This option can be
used with all commands.</td></tr></tbody></table></div></div><div class="SECTION"><hr><h2 class="SECTION"><a name="AEN5568">What's next?</a></h2><p>This chapter has discussed some of the basic commands for iptables and the
tables very briefly that can be used in netfilter. The commands makes it
possible to do quite a lot of different operations on the netfilter package
loaded inside kernel as you have seen.
    </p><p>The next chapter will discuss all the available matches in iptables and
netfilter. This is a very heavy and long chapter, and I humbly suggest that
you don't need to actually learn every single match available in any detail,
except the ones that you are going to use. A good idea might be to get a brief
understanding of what each match does, and then get a better grasp on them as
you need them.
    </p></div></div><div class="CHAPTER"><hr><h1><a name="MATCHES"></a>Chapter 10. Iptables matches</h1><p>In this chapter we'll talk a bit more about matches. I've chosen to
narrow down the matches into five different subcategories. First of all we
have the <span class="emphasis"><i class="EMPHASIS">generic matches</i></span>, which can be used in all rules.
Then we have the <span class="emphasis"><i class="EMPHASIS">TCP matches</i></span> which can only be applied to
TCP packets. We have <span class="emphasis"><i class="EMPHASIS">UDP matches</i></span>
which can only be applied to UDP packets, and
<span class="emphasis"><i class="EMPHASIS">ICMP matches</i></span> which can only be used on
ICMP packets. Finally we have special matches, such
as the state, owner and limit matches and so on. These final matches have in
turn been narrowed down to even more subcategories, even though they  might
not necessarily be different matches at all. I hope this is a reasonable
breakdown and that all people out there can understand it.
   </p><p>As you may already understand if you have read the previous chapters, a 
match is something that specifies a special condition within the packet that 
must be true (or false). A single rule can contain several matches of any
kind. For example, we may want to match packets that come from a specific 
host on a our local area network, and on top of that only from specific ports 
on that host. We could then use matches to tell the rule to only apply the 
target - or jump specification - on packets that have a specific source 
address, that come in on the interface that connects to the LAN and the 
packets must be one of the specified ports. If any one of these matches fails 
(e.g., the source address isn't correct, but everything else is true), the 
whole rule fails and the next rule is tested on the packet. If all matches are 
true, however, the target specified by the rule is applied.
   </p><div class="SECTION"><hr><h2 class="SECTION"><a name="GENERICMATCHES">Generic matches</a></h2><p>This section will deal with <span class="emphasis"><i class="EMPHASIS">Generic matches</i></span>. A
generic match is a kind of match that is always available, whatever kind of
protocol we are working on, or whatever match extensions we have loaded. No
special parameters at all are needed to use these matches; in other words. I
have also included the --protocol match here, even though
it is more specific to protocol matches. For example, if we want to use a
<span class="emphasis"><i class="EMPHASIS">TCP match</i></span>, we need to use the
--protocol match and send TCP as
an option to the match. However, --protocol is also a match
in itself, since it can be used to match specific protocols. The following
matches are always available.
   </p><div class="TABLE"><a name="TABLE.GENERICMATCHES"></a><p><b>Table 10-1. Generic matches</b></p><table border="1" frame="border" rules="all" class="CALSTABLE"><colgroup><col width="77"><col width="1*"></colgroup><tbody><tr><td>Match</td><td>-p, --protocol</td></tr><tr><td>Kernel</td><td>2.3, 2.4, 2.5 and 2.6</td></tr><tr><td>Example</td><td>iptables -A INPUT -p tcp</td></tr><tr><td>Explanation</td><td>This match is used to check for certain protocols.
Examples of protocols are TCP,
UDP and ICMP. The 
protocol must either be one of the internally specified TCP, UDP or ICMP. It 
may also take a value specified in the <a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#PROTOCOLSTXT"><i><i>/etc/protocols</i></i></a> file, and if it can't find the protocol 
there it will reply with an error. The protocl may also be an integer value. 
For example, the ICMP protocol is integer value 1, TCP is 6 and UDP is 17. 
Finally, it may also take the value ALL. <span class="emphasis"><i class="EMPHASIS">ALL</i></span> means that 
it matches only TCP, UDP and ICMP. 
If this
match is given the integer value of zero (0), it means ALL protocols, which in
turn is the default behavior, if the --protocol match is
not used. This match can also be inversed with the ! sign,
so --protocol ! tcp would mean to match 
UDP and ICMP. </td></tr><tr><td>Match</td><td>-s, --src,
--source</td></tr><tr><td>Kernel</td><td>2.3, 2.4, 2.5 and 2.6</td></tr><tr><td>Example</td><td>iptables -A INPUT -s 192.168.1.1</td></tr><tr><td>Explanation</td><td>This is the source match, which is used to match packets,
based on their source IP address. The main form can be used to match single IP
addresses, such as <span class="emphasis"><i class="EMPHASIS">192.168.1.1</i></span>. It could also be used
with a netmask in a CIDR "bit" form, by specifying the number of ones (1's) on
the left side of the network mask. This means that we could for example add
<span class="emphasis"><i class="EMPHASIS">/24</i></span> to use a <span class="emphasis"><i class="EMPHASIS">255.255.255.0</i></span> netmask.
We could then match whole IP ranges, such as our local networks or network
segments behind the firewall. The line would then look something like
<span class="emphasis"><i class="EMPHASIS">192.168.0.0/24</i></span>. This would match all packets in the
<span class="emphasis"><i class="EMPHASIS">192.168.0.x</i></span> range. Another way is to do it with a
regular netmask in the <span class="emphasis"><i class="EMPHASIS">255.255.255.255</i></span> form (i.e.,
<span class="emphasis"><i class="EMPHASIS">192.168.0.0/255.255.255.0</i></span>). We could also invert the
match with an ! just as before. If we were, in other words,
to use a match in the form of --source ! 192.168.0.0/24, we
would match all packets with a source address not coming from within the
<span class="emphasis"><i class="EMPHASIS">192.168.0.x</i></span> range. The default is to match all IP
addresses.</td></tr><tr><td>Match</td><td>-d, --dst,
--destination</td></tr><tr><td>Kernel</td><td>2.3, 2.4, 2.5 and 2.6</td></tr><tr><td>Example</td><td>iptables -A INPUT -d 192.168.1.1</td></tr><tr><td>Explanation</td><td>The --destination match is used for packets
based on their destination address or addresses. It works pretty much the same
as the --source match and has the same syntax, except that
the match is based on where the packets are going to. To match an IP range, we
can add a netmask either in the exact netmask form, or in the number of ones
(1's) counted from the left side of the netmask bits. Examples are:
<span class="emphasis"><i class="EMPHASIS">192.168.0.0/255.255.255.0</i></span> and
<span class="emphasis"><i class="EMPHASIS">192.168.0.0/24</i></span>. Both of these are equivalent. We could
also invert the whole match with an ! sign, just as before.
--destination ! 192.168.0.1 would in other words match all
packets except those destined to the <span class="emphasis"><i class="EMPHASIS">192.168.0.1</i></span> IP
address.</td></tr><tr><td>Match</td><td>-i, 
--in-interface</td></tr><tr><td>Kernel</td><td>2.3, 2.4, 2.5 and 2.6</td></tr><tr><td>Example</td><td>iptables -A INPUT -i eth0</td></tr><tr><td>Explanation</td><td>This match is used for the interface the packet came in on.
Note that this option is only legal in the INPUT,
FORWARD and PREROUTING
chains and will return an error message when used anywhere else. The default
behavior of this match, if no particular interface is specified, is to assume
a string value of +. The + value is used
to match a string of letters and numbers. A single + would,
in other words, tell the kernel to match all packets without considering which
interface it came in on. The + string can also be appended
to the type of interface, so eth+ would be all Ethernet
devices. We can also invert the meaning of this option with the help of the
! sign. The line would then have a syntax looking something
like -i ! eth0, which would match all incoming interfaces,
except eth0.</td></tr><tr><td>Match</td><td>-o, 
--out-interface</td></tr><tr><td>Kernel</td><td>2.3, 2.4, 2.5 and 2.6</td></tr><tr><td>Example</td><td>iptables -A FORWARD -o eth0</td></tr><tr><td>Explanation</td><td>The --out-interface match is used for
packets on the interface from which they are leaving. Note that this match is
only available in the OUTPUT,
FORWARD and POSTROUTING
chains, the opposite in fact of the --in-interface match.
Other than this, it works pretty much the same as the
--in-interface match. The + extension is
understood as matching all devices of similar type, so eth+
would match all eth devices and so on. To invert the
meaning of the match, you can use the ! sign in exactly the
same way as for the --in-interface match. If no
--out-interface is specified, the default behavior for this
match is to match all devices, regardless of where the packet is 
going.</td></tr><tr><td>Match</td><td>-f, --fragment</td></tr><tr><td>Kernel</td><td>2.3, 2.4, 2.5 and 2.6</td></tr><tr><td>Example</td><td>iptables -A INPUT -f</td></tr><tr><td>Explanation</td><td>This match is used to match the second and third part of a
fragmented packet. The reason for this is that in the case of fragmented
packets, there is no way to tell the source or destination ports of the
fragments, nor ICMP types, among other things. Also,
fragmented packets might in rather special cases be used to compound attacks
against other computers. Packet fragments like this will not be matched by
other rules, and hence this match was created. This option can also be used in
conjunction with the ! sign; however, in this case the
! sign must </td></tr></tbody></table></div></div></div></div></body></html>